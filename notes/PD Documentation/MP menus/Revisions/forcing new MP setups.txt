30	ame	Lucrene Tower
001C	bgdata/bg_ame.seg	stage bgdata
0102	Ump_setupameZ		default MP setup name
0126	UsetupameZ		default solo setup name
014B	bgdata/bg_ame_padsZ	pads
014C	bgdata/bg_ame_tilesZ	tiles

v1.1
8007FFD8	25FF8	001C 014C 0151 0129 0105 ~	3 - dD: EXTRACTION
800802E8	26308	001C 014C 014B 0126 0102 ~	1 - dD: DEFECTION
80080470	26490	001C 014C 014B 014A 0125 ~	Mr. Blondes Revenge

push ame's mp_setup to setup_dam (dam's old text file)
80082490	013A4BD0
804F0780	setup file
must set PROPER end of each compressed setup file!

+_+

hacking the MP menu to add more options

2ABB8	80084B98	new MP stage select format
	format:
		0x0	1	stage#
		0x1	1	lock
		0x2	2	text ID

2AC28	80084C08	new start of MP subsection block
	format:
		0x0	1	RESERVED
		0x1	1	insertion point
		0x2	2	text ID
potentially add entry Hacker before random:	0010 50FF
	at current, 'Classic' is force-activated, so would need a major workaround (aka rewrite)


7F17F024:	pull text ID for given stage #
27BDFFE8	ADDIU	SP,SP,FFE8
AFA40018	SW	A0,0018 (SP)
3C048008	LUI	A0,8008
3C03800B	LUI	V1,800B
24824B9A	*ADDIU	V0,A0,4B9A	;V0=80084B9A: start of MP stage list
AFBF0014	SW	RA,0014 (SP)
804EFFFF	*LBU	T6,FFFF (V0)	;T6=80084B99: size of MP stage list in bytes
9063CB99	LBU	V1,CB99 (V1)	;V1=800ACB99: 
004E2021	*ADDU	A0,V0,T6	;A0=80084B9A+offset: end of MP stage list
//7F17F048:	pull stage#
804E0000	*LB	T6,0000 (V0)	;T6=stage#
146E0005	*BNE	V1,T6,7F17F064	;branch if numbers aren't equal
00000000	*NOP
//7F17F054:
0FC5B9F1	JAL	7F16E7C4
94440002	*LHU	A0,0002 (V0)	;A0=V0+4: text ID
10000006	BEQ	R0,R0,7F17F078	;return
00000000	*NOP
//7F17F064:
24420004	*ADDIU	V0,V0,0004	;V0+=6: next entry
1444FFF7	*BNE	V0,A0,7F17F04C	;branch if you aren't at end of list
00000000	*NOP
3C027F1C	LUI	V0,7F1C
24428050	ADDIU	V0,V0,8050	;V0=7F1B8050: 
//7F17F078:
8FBF0014	LW	RA,0014 (SP)
27BD0018	+ADDIU	SP,SP,0018
03E00008	JR	RA
00000000	-NOP
	
	
7F1791C8:	determine if MP stage is accessible
	ADDIU	SP,SP,FFA8
	LUI	T7,8008
	SW	RA,0024 (SP)
	SW	S2,0020 (SP)
	SW	S1,001C (SP)
	SW	S0,0018 (SP)
	SW	A1,005C (SP)
00000000	*NOP
8DE14C08	*LW	AT,4C08 (T7)	;AT=subsection insertion point
	ADDIU	T6,SP,0040	;T6+SP+40
8DE84C0C	*LW	T0,4C0C (T7)	;T0=subsection text <<16
	SW	AT,0000 (T6)	;copy MP stage subsection section table to SP+40
8DE14C10	*LW	AT,4C10 (T7)
	SW	T0,0004 (T6)
8DE84C14	*LW	T0,4C14 (T7)
	SW	AT,0008 (T6)
00000000	*NOP
	SW	T0,000C (T6)
00000000	*NOP
	ADDIU	T1,A0,FFFF
00000000	*NOP
	SLTIU	AT,T1,0007
	OR	S2,A2,R0
00008825	OR	S1,R0,R0	;S1=0: stage count=0
	BEQ	AT,R0,7F179498
00000000	*NOP
	SLL	T1,T1,0x2
	LUI	AT,7F1C
	ADDU	AT,AT,T1
	LW	T1,805C (AT)	;T1=7F1B805C: TLB jump table
	JR	T1
	NOP
	
7F179248:
3C108008	LUI	S0,8008
26104B9A	*ADDIU	S0,S0,4B9A	;S0=80084B98: base address for MP stage select
920AFFFF	*LBU	T2,FFFF (S0)	;T2=size of MP stage block
01505021	*ADDU	T2,T2,S0	;T2=80084BFE: table cutoff
//7F179258:
0FC67244	JAL	7F19C910	;V0=TRUE if lock byte #A0 unlocked; fries T6
92040001	*LBU	A0,0001 (S0)	;lock flags
10400002	BEQ	V0,R0,7F17926C
26100004	*ADDIU	S0,S0,0004	;S0+=6: next stage#
26310001	ADDIU	S1,S1,0001	;S1++
160AFFFA	*BNE	S0,T2,7F179258	;loop for each entry
00000000	NOP
10000088	BEQ	R0,R0,7F179498
AE510000	SW	S1,0000 (S2)
	
7F17927C:
3C108008	LUI	S0,8008
26104B9A	*ADDIU	S0,S0,4B9A
920CFFFF	*LBU	T4,FFFF (S0)
01906021	*ADDU	T4,T4,S0	;T4=80084BFE: end of list
//7F179284:
0FC67244	JAL	7F19C910	;V0=TRUE if lock byte #A0 unlocked; fries T6
92040001	*LBU	A0,0001 (S0)	;A0=lock flag
10400008	*BEQ	V0,R0,7F1792B4
8E4B0000	LW	T3,0000 (S2)
562B0006	BNEL	S1,T3,7F1792B4
26310001	ADDIU	S1,S1,0001	;S1++
0FC5B9F1	JAL	7F16E7C4	;convert text ID A0 into p->text; fries: V1,A1,T0,T6,T7,T8,T9
96040002	*LHU	A0,0002 (S0)	;A0=text ID
1000007C	*BEQ	R0,R0,7F1794A0
8FBF0024	LW	RA,0024 (SP)
//7F1792B0:
26310001	ADDIU	S1,S1,0001
26100004	*ADDIU	S0,S0,0004	;S0+=6: next entry
160CFFF3	*BNE	S0,T4,7F179284	;branch for each entry
00000000	NOP
10000075	BEQ	R0,R0,7F17949C
00001025	OR	V0,R0,R0
	
7F1792CC:
3C108008	LUI	S0,8008
26104B9A	*ADDIU	S0,S0,4B9A	;S0=80084B98: MP stage list
9219FFFF	*LBU	T9,FFFF (S0)
0330C821	*ADDU	T9,T9,S0	;T9=80074BFE: end of list
//7F1792D4:
0FC67244	JAL	7F19C910	;V0=TRUE if lock byte #A0 unlocked; fries T6
92040001	*LBU	A0,0001 (S0)	;A0=lock flag
10400003	BEQ	V0,R0,7F1792F0
8E4D0000	LW	T5,0000 (S2)
122D0004	*BEQ	S1,T5,7F179300
26310001	ADDIU	S1,S1,0001	;S1++
//7F1792F0:
26100004	*ADDIU	S0,S0,0004
1619FFF8	*BNE	S0,T9,7F1792D4
00000000	NOP
//7F179300:
82180000	*LB	T8,0000 (S0)	;T8=stage#
3C01800B	LUI	AT,800B
10000063	BEQ	R0,R0,7F179498
A038CB99	SB	T8,CB99 (AT)	;stage#->800ACB99
	
7F179310:
3C108008	LUI	S0,8008
26104B9A	*ADDIU	S0,S0,4B9A	;S0=80084B98: MP stage list
9208FFFF	*LBU	T0,FFFF (S0)
01104021	*ADDU	T0,T0,S0	;80084BFE: end of list
//7F179318:
3C0E800B	LUI	T6,800B
91CECB99	LBU	T6,CB99 (T6)
820F0000	*LB	T7,0000 (S0)	;T7=stage#
15CF0002	BNE	T6,T7,7F179330
00000000	NOP
AE510000	SW	S1,0000 (S2)
//7F179330:
0FC67244	JAL	7F19C910	;V0=TRUE if lock byte #A0 unlocked; fries T6
92040001	*LBU	A0,0001 (S0)	;A0=lock flag
10400002	BEQ	V0,R0,7F179344
26100004	*ADDIU	S0,S0,0004	;S0+=6: next entry
26310001	ADDIU	S1,S1,0001	;S1++
//7F179344:
1608FFF4	BNE	S0,T0,7F179318	;lather rinse repeat
00000000	NOP
10000051	BEQ	R0,R0,7F17949C
00001025	OR	V0,R0,R0
	
7F17935C:	determine if "Classic" should appear
	ADDIU	T1,R0,0003
	SW	T1,0000 (S2)	;3->S2: # stage subsections in table
	JAL	7F19C910
	ADDIU	A0,R0,0024
	BNEL	V0,R0,7F17949C	;quit if Complex unlocked
	OR	V0,R0,R0	;V0=0
	JAL	7F19C910
	ADDIU	A0,R0,0027
	BNEL	V0,R0,7F17949C	;quit if Temple unlocked
	OR	V0,R0,R0	;V0=0
	JAL	7F19C910
	ADDIU	A0,R0,002A
	BNEL	V0,R0,7F17949C	;quit if Felicity unlocked
	OR	V0,R0,R0	;V0=0
	LW	T2,0000 (S2)
	ADDIU	T3,T2,FFFF
	BEQ	R0,R0,7F179498
	SW	T3,0000 (S2)	;T3=count--
	
7F1793A4:	display subsection text when applicable
8E510000	LW	S1,0000 (S2)	;S1=#stage subsections in table
0FC67244	JAL	7F19C910
24040024	ADDIU	A0,R0,0024
5440000C	*BNEL	V0,R0,7F1793E4	;branch if Complex unlocked
00000000	*NOP
0FC67244	JAL	7F19C910
24040027	ADDIU	A0,R0,0027
54400008	*BNEL	V0,R0,7F1793E4	;branch if Temple unlocked
00000000	*NOP
0FC67244	JAL	7F19C910
2404002A	ADDIU	A0,R0,002A
54400004	*BNEL	V0,R0,7F1793E4	;branch if Felicity unlocked
00000000	*NOP
5A200002	*BLEZL	S1,7F1793E4	;branch if not greater than zero
00000000	*NOP
26310001	ADDIU	S1,S1,0001	;S1++
//7F1793E4:
00116080	*SLL	T4,S1,0x2	;T4=S1*4: subsection # -> offset
03AC2021	ADDU	A0,SP,T4	;A0=SP+offset to entry
0FC5B9F1	JAL	7F16E7C4
94840042	*LHU	A0,0042 (A0)	;A0=subsection text ID
1000002A	BEQ	R0,R0,7F1794A0
8FBF0024	LW	RA,0024 (SP)
	
7F1793FC:
8E500000	LW	S0,0000 (S2)	;
0FC67244	JAL	7F19C910
24040024	ADDIU	A0,R0,0024
5440000C	*BNEL	V0,R0,7F17943C	;branch if Complex unlocked
00000000	*NOP
0FC67244	JAL	7F19C910
24040027	ADDIU	A0,R0,0027
54400008	*BNEL	V0,R0,7F17943C	;branch if Felicity unlocked
00000000	*NOP
0FC67244	JAL	7F19C910
2404002A	ADDIU	A0,R0,002A
14400004	BNEZ	V0,7F17943C	;branch if Felicity unlocked
24010001	ADDIU	AT,R0,0001
52010001	*BEQL	S0,AT,7F17943C	;if S0=1, S0++
26100001	-ADDIU	S0,S0,0001
00000000	*NOP
//7F17943C:
00106880	*SLL	T5,S0,0x2	;T5=S0*8: subsection# -> offset
00000000	*NOP
03AD2821	*ADDU	A1,SP,T5	;A1=p->subsection entry
80AE0041	*LB	T6,0041 (A1)	;T8=subsection insertion point
3C108008	LUI	S0,8008
26104B9A	*ADDIU	S0,S0,4B9A	;S0=80084B98: MP stage list
19C0000F	*BLEZ	T6,7F179494
00001825	OR	V1,R0,R0
//7F17945C:
92040001	*LBU	A0,0001 (S0)	;A0=lock flag
AFA3003C	SW	V1,003C (SP)
0FC67244	JAL	7F19C910
AFA5002C	SW	A1,002C (SP)	;SP+2C=A1: save p->copy of subsection
8FA3003C	LW	V1,003C (SP)
10400002	BEQ	V0,R0,7F17947C
8FA5002C	LW	A1,002C (SP)	;A1=p->copy of subsection
26310001	ADDIU	S1,S1,0001
//7F17947C:
80AE0041	*LB	T6,0041 (A1)	;T6=subsection insertion point
24630001	ADDIU	V1,V1,0001
26100004	*ADDIU	S0,S0,0004	;S0+=6: next entry
006E082A	SLT	AT,V1,T6
5420FFF4	BNEL	AT,R0,7F179460
92040001	*LBU	A0,0001 (S0)
AE510008	SW	S1,0008 (S2)
//7F179498:
	OR	V0,R0,R0
	LW	RA,0024 (SP)
	LW	S0,0018 (SP)
	LW	S1,001C (SP)
	LW	S2,0020 (SP)
	JR	RA
	ADDIU	SP,SP,0058
	
CORRECTION FOR RANDOM SELECT
7F179104:	MP random stage
	ADDIU	SP,SP,FFD8
	SW	S1,001C (SP)
	SW	S0,0018 (SP)
	SW	S2,0020 (SP)
	LUI	S0,8008
26104B9A	*ADDIU	S0,S0,4B9A
	SW	RA,0024 (SP)
	OR	S2,R0,R0
9211FFFF	*LBU	S1,FFFF (S0)
2631FFFC	*ADDIU	S1,S1,FFFC
02118821	*ADDU	S1,S0,S1
//7F17912C:
	JAL	7F19C910
92040001	*LBU	A0,0001 (S0)
	BEQ	V0,R0,7F179140
26100004	*ADDIU	S0,S0,0004
	ADDIU	S2,S2,0001
//7F179140:
	SLTU	AT,S0,S1
	BNEZ	AT,7F17912C
	NOP
	JAL	70012DC0
	NOP
	DIVU	V0,S2
	BNEZ	S2,7F179164
	NOP
	BREAK
//7F179164:
	MFHI	S1
3C108008	*LUI	S0,8008
26104B9A	*ADDIU	S0,S0,4B9A
9212FFFF	*LBU	S2,FFFF (S0)
02129021	*ADDU	S2,S0,S2
	OR	V1,R0,R0
//7F17917C:
	JAL	7F19C910
92040001	*LBU	A0,0001 (S0)
	BEQL	V0,R0,7F1791A4
26100004	*ADDIU	S0,S0,0004
	BNEL	S1,R0,7F1791A0
	ADDIU	S1,S1,FFFF
	BEQ	R0,R0,7F1791B0
82020000	*LB	V0,0000 (S0)
//7F17919C:
	ADDIU	S1,S1,FFFF
26100004	*ADDIU	S0,S0,0004
	BNE	S0,S2,7F17917C
	ADDIU	V0,R0,0032
//7F1791B0:
	LW	RA,0024 (SP)
	LW	S0,0018 (SP)
	LW	S1,001C (SP)
	LW	S2,0020 (SP)
	JR	RA
	ADDIU	SP,SP,0028
	