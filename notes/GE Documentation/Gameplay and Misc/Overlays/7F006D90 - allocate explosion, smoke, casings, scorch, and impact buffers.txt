7F006D90	3B8C0	allocate explosion, smoke, casings, scorch, and impact buffers
LUI	AT,8004
SW	R0,0170 (AT)	;0 -> 80040170
LUI	AT,8004
SW	R0,0174 (AT)	;0 -> 80040174
LUI	AT,8004
SW	R0,0800 (AT)	;0 -> 80040800
LUI	AT,8004
SW	R0,0804 (AT)	;0 -> 80040804
LUI	AT,8004
SW	R0,0808 (AT)	;0 -> 80040808
LUI	AT,3F80
MTC1	AT,F4
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
//7F006DC8:	allocate explosion buffer
LUI	AT,8004
ADDIU	A0,R0,1740	;A0= 1740 bytes (6 entries, 3E0 ea.)
ADDIU	A1,R0,0004	;A1= bank 4
JAL	70009720	;V0=p->A0 bytes allocated in bank A1
SWC1	F4,0178 (AT)	;1.0 -> 80040178: default difficulty 1.0
LUI	V1,8008
ADDIU	V1,V1,A144
SW	V0,0000 (V1)	;V0->8007A144: save p->explosion entries
//7F006DE8:
OR	A0,R0,R0	;A0= entry count
OR	A2,R0,R0	;A2= offset
ADDIU	A1,R0,03C0	;A1= 3C0: size of explody.frame section
//7F006DF4:	Initialize 6 entries...
LW	T6,0000 (V1)	;T6=explody.buf
OR	V0,R0,R0	;V0=frame count
ADDU	T7,T6,A2
SW	R0,0000 (T7)	;NULL -> frame+0: explody.frame.pos
//7F006E04:	...of 40 frames each.
LW	T8,0000 (V1)
SLL	T9,A0,0x5
SUBU	T9,T9,A0
SLL	T9,T9,0x5
ADDU	T0,T8,T9
ADDU	T1,T0,V0
SH	R0,001C (T1)	;0000 -> frame+1C: explody.frame.display (False)
LW	T2,0000 (V1)
SLL	T3,A0,0x5
SUBU	T3,T3,A0
SLL	T3,T3,0x5
ADDU	T4,T2,T3
ADDU	T5,T4,V0
SH	R0,0034 (T5)	;0000 -> frame+34: explody.frame.display (False)
LW	T6,0000 (V1)
SLL	T7,A0,0x5
SUBU	T7,T7,A0
SLL	T7,T7,0x5
ADDU	T8,T6,T7
ADDU	T9,T8,V0
SH	R0,004C (T9)	;0000 -> frame+4C: explody.frame.display (False)
LW	T0,0000 (V1)
SLL	T1,A0,0x5
SUBU	T1,T1,A0
SLL	T1,T1,0x5
ADDU	T2,T0,T1
ADDU	T3,T2,V0
ADDIU	V0,V0,0060
BNE	V0,A1,7F006E04	;iterate through each frame
SH	R0,0064 (T3)	;NULL -> frame+0: explody.frame.pos
//7F006E7C:	loop for each entry
ADDIU	A0,A0,0001
SLTI	AT,A0,0006
BNE	AT,R0,7F006DF4
ADDIU	A2,A2,03E0
//7F006E8C:	allocate 14 smoke entries, 198 each
ADDIU	A0,R0,1FE0	;A0= 1FE0 bytes
JAL	70009720	;V0=p->A0 bytes allocated in bank A1
ADDIU	A1,R0,0004	;A1= bank 4
LUI	V1,8008
ADDIU	V1,V1,A140
MTC1	R0,F0
SW	V0,0000 (V1)	;V0->8007A140: save p->smoke entries
//7F006EA8:
OR	A0,R0,R0	;A0= count
OR	A2,R0,R0	;A2= offset
ADDIU	A1,R0,0190
//7F006EB4:	initialize entries
LW	T4,0000 (V1)
SLL	T7,A0,0x2
SUBU	T7,T7,A0
SLL	T7,T7,0x2
ADDU	T5,T4,A2
SW	R0,0000 (T5)	;0 -> entry+0
ADDU	T7,T7,A0
LW	T6,0000 (V1)
SLL	T7,T7,0x2
SUBU	T7,T7,A0
SLL	T0,A0,0x2
SUBU	T0,T0,A0
SLL	T7,T7,0x3	;T7= A0*198
SLL	T0,T0,0x2
ADDU	T8,T6,T7
SWC1	F0,0014 (T8)	;0.0 -> entry+14
ADDU	T0,T0,A0
LW	T9,0000 (V1)
SLL	T0,T0,0x2
SUBU	T0,T0,A0
SLL	T0,T0,0x3
ADDU	T1,T9,T0
SWC1	F0,003C (T1)	;0.0 -> entry+3C
ADDIU	V0,R0,0050
//7F006F14:	fill frames within entries
SLL	T3,A0,0x2
SUBU	T3,T3,A0
SLL	T3,T3,0x2
ADDU	T3,T3,A0
LW	T2,0000 (V1)
SLL	T3,T3,0x2
SUBU	T3,T3,A0
SLL	T7,A0,0x2
SLL	T3,T3,0x3
SUBU	T7,T7,A0
ADDU	T4,T2,T3
SLL	T7,T7,0x2
ADDU	T5,T4,V0
ADDU	T7,T7,A0
SWC1	F0,0014 (T5)	;0.0 -> frame+14: 
LW	T6,0000 (V1)
SLL	T7,T7,0x2
SUBU	T7,T7,A0
SLL	T7,T7,0x3
SLL	T1,A0,0x2
SUBU	T1,T1,A0
ADDU	T8,T6,T7
ADDU	T9,T8,V0
SLL	T1,T1,0x2
ADDU	T1,T1,A0
SWC1	F0,003C (T9)	;0.0 -> frame+3C: 
LW	T0,0000 (V1)
SLL	T1,T1,0x2
SUBU	T1,T1,A0
SLL	T1,T1,0x3
SLL	T5,A0,0x2
SUBU	T5,T5,A0
ADDU	T2,T0,T1
ADDU	T3,T2,V0
SLL	T5,T5,0x2
ADDU	T5,T5,A0
SWC1	F0,0064 (T3)	;0.0 -> frame+64: 
LW	T4,0000 (V1)
SLL	T5,T5,0x2
SUBU	T5,T5,A0
SLL	T5,T5,0x3
ADDU	T6,T4,T5
ADDU	T7,T6,V0
ADDIU	V0,V0,00A0
BNE	V0,A1,7F006F14	;iterate through each frame
SWC1	F0,008C (T7)	;0.0 -> frame+8C
//7F006FCC:	iterate through each entry
ADDIU	A0,A0,0001
SLTI	AT,A0,0014
BNE	AT,R0,7F006EB4
ADDIU	A2,A2,0198
//7F006FDC:	solo only: scorch buffer
JAL	7F09A464	;V0= # players
NOP
ADDIU	AT,R0,0001
BNE	V0,AT,7F007048	;Solo only!
//7F006FEC:	allocate 5 entries, 160 each
ADDIU	A0,R0,06E0	;A0= 6E0 bytes
JAL	70009720	;V0=p->A0 bytes allocated in bank A1
ADDIU	A1,R0,0004	;A1= bank 4
LUI	A1,8008
ADDIU	A1,A1,A150
SW	V0,0000 (A1)	;V0->8007A150: p->scorch buffer
ADDIU	V0,R0,06E0
OR	V1,R0,R0	;V1= 0	offset
ADDIU	A2,R0,FFFF
//7F007010:	initialize entries
LW	T8,0000 (A1)
ADDU	T9,T8,V1
SH	A2,0000 (T9)	;FFFF->entry+0
LW	T0,0000 (A1)
ADDU	T1,T0,V1
SH	A2,0058 (T1)	;FFFF->entry+58
LW	T2,0000 (A1)
ADDU	T3,T2,V1
SH	A2,00B0 (T3)	;FFFF->entry+B0
LW	T4,0000 (A1)
ADDU	T5,T4,V1
ADDIU	V1,V1,0160
BNE	V1,V0,7F007010
SH	A2,0108 (T5)	;FFFF->entry+108
//7F007048:	allocate 100 (0x64) bullet impact entries, 50 each
ADDIU	A0,R0,1F40	;A0= 1F40 bytes (64 entries, 50 each)
JAL	70009720	;V0=p->A0 bytes allocated in bank A1
ADDIU	A1,R0,0004	;A1= bank 4
LUI	A1,8008
ADDIU	A1,A1,A154
SW	V0,0000 (A1)	;V0->8007A154: p->impact.buf
ADDIU	A2,R0,FFFF
OR	V1,R0,R0	;V1=offset
//7F007068:	initialize entries
LW	T6,0000 (A1)
ADDU	T7,T6,V1
ADDIU	V1,V1,0050
SLTI	AT,V1,1F40
BNE	AT,R0,7F007068
SH	A2,0000 (T7)	;FFFF -> entry+0: impact.room
//7F007080:	set 8007A148: maximum bullet casings
JAL	7F09A464	;V0= # players
NOP
ADDIU	T8,R0,00C8
DIV	T8,V0
LUI	A2,8008
ADDIU	A2,A2,A148
BNE	V0,R0,7F0070A4
NOP
BREAK	00001C00
//7F0070A4:
ADDIU	AT,R0,FFFF
BNE	V0,AT,7F0070BC
LUI	AT,8000
BNE	T8,AT,7F0070BC
NOP
BREAK	00001800
//7F0070BC:
MFLO	T9
SW	T9,0000 (A2)	;T9->8007A148: 200/#players (C8/#players)
//7F0070C4:	certain stages use 100/#players
JAL	7F0BDF04	;V0=cur.stage#
NOP
LUI	A2,8008
ADDIU	AT,R0,001D
BEQ	V0,AT,7F0070F4	;branch if 1D: Streets
ADDIU	A2,A2,A148
JAL	7F0BDF04	;V0=cur.stage#
NOP
LUI	A2,8008
ADDIU	AT,R0,001E
BNE	V0,AT,7F007100	;branch if not 1E: Depot
ADDIU	A2,A2,A148
//7F0070F4:	Depot and Streets halve this...
LW	T0,0000 (A2)
SRA	T1,T0,0x1
SW	T1,0000 (A2)
//7F007100:	allocate casings.max ejected casings entries, 78 each
LW	A0,0000 (A2)
ADDIU	AT,R0,FFF0
ADDIU	A1,R0,0004	;A1= bank 4
SLL	T2,A0,0x4
SUBU	T2,T2,A0
SLL	T2,T2,0x3
ADDIU	A0,T2,000F
AND	T3,A0,AT	;align to quadword boundry
JAL	70009720	;V0=p->A0 bytes allocated in bank A1
OR	A0,T3,R0	;A0= casings.max * 78, to quadword
LUI	A2,8008
ADDIU	A2,A2,A148
LW	T4,0000 (A2)	;T4=8007A148: casings.max
LUI	V1,8008
ADDIU	V1,V1,A14C
SW	V0,0000 (V1)	;V0->8007A14C: p->casings buffer 
BLEZ	T4,7F007170	;return if no entries
OR	A0,R0,R0	;A0=0	init count
OR	V0,R0,R0	;V0=0	offset
LW	T5,0000 (V1)	;T5= p->buf
//7F007150:	initialize each entry
ADDIU	A0,A0,0001	;count+=1
ADDU	T6,T5,V0
SW	R0,0000 (T6)	;0->entry+0
LW	T7,0000 (A2)
ADDIU	V0,V0,0078
SLT	AT,A0,T7
BNEL	AT,R0,7F007150	;loop for each entry
LW	T5,0000 (V1)
//7F007170:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP
