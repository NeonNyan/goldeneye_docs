70006060	6C60	Main Program Loop
ADDIU	SP,SP,FE20
SW	RA,003C (SP)
SW	S8,0038 (SP)
SW	S7,0034 (SP)
SW	S6,0030 (SP)
SW	S5,002C (SP)
SW	S4,0028 (SP)
SW	S3,0024 (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
//7000608C:	test memstring for "-level_##"
JAL	7F0D1A4C	;reset memory bank 5
SW	R0,01DC (SP)
LUI	A1,8003
ADDIU	A1,A1,9104	;A1=80029104: "-level_"
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A0,R0,0001	;A0=1
BEQ	V0,R0,700060DC
ADDIU	A0,R0,0001	;A0=1
LUI	A1,8003
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A1,A1,910C	;A1=8002910C: "-level_"
LBU	T7,0000 (V0)	;T7=1st level# byte
LBU	T6,0001 (V0)	;T6=2nd level# byte
LUI	AT,8002
SLL	T8,T7,0x2
ADDU	T8,T8,T7
SLL	T8,T8,0x1	;T8=upper byte * 0xA: to tens place
ADDU	T9,T6,T8	;T9=upper byte + lower
ADDIU	T0,T9,FDF0	;T0=# - 0x210: compensate for 0x30 on each byte of ASCII numerals	30*B, or 30*A + 30
SW	T0,41A8 (AT)	;T0->800241A8: stage#
//700060DC:	set stage defaults if not menus
LUI	T1,8002
LW	T1,41A8 (T1)	;T1=800241A8: stage#
ADDIU	AT,R0,005A
BEQ	T1,AT,70006160	;branch if stage 5A: title/menus
NOP
JAL	7F01DF90
NOP
JAL	7F01D590	;A0->folder#
OR	A0,R0,R0	;A0=0
JAL	7F01D59C	;A0->difficulty
OR	A0,R0,R0	;A0=0
LUI	A0,8002
JAL	7F01D5EC	;A0->stage#, set solo + p->briefing
LW	A0,41A8 (A0)	;A0=800241A8: stage#
//70006114:	test memstring for "-hard#"
LUI	A1,8003
ADDIU	A1,A1,9114	;A1=80029114: "-hard"
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A0,R0,0001	;A0=1
BEQ	V0,R0,70006160	;branch if string not present
ADDIU	A0,R0,0001	;A0=1
LUI	A1,8003
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A1,A1,911C	;A1=8002911C: "-hard"
LBU	A0,0000 (V0)	;A0=ASCII difficulty level
JAL	7F01D59C	;A0->difficulty [8002A8FC]; forces invalid difficulties to 0 (agent)
ADDIU	A0,A0,FFD0	;A0-=0x30: account for 0x30 ASCII extension
//70006144:	this last bit seems needless, and if anything would cause issues...
LUI	A1,8003
ADDIU	A1,A1,9124	;A1=80029124: ""
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A0,R0,0001	;A0=1
LBU	A0,0000 (V0)	;A0= ASCII difficulty level
JAL	7F0BFC1C	;A0->difficulty [8002A8FC]
ADDIU	A0,A0,FFD0	;A0-=0x30: account for 0x30 ASCII extension
//70006160:
JAL	7000D8E0
NOP
JAL	7000A498	;increment random number
OR	A0,V0,R0	;A0=V0
LUI	S6,8003
LUI	S5,8008
ADDIU	S5,S5,A0B0	;S5=8007A0B0
ADDIU	S6,S6,9134	;S6=80029134
ADDIU	S7,SP,0058	;S7=SP+58: p->instance
ADDIU	S4,SP,005C	;S4=SP+5C: buffer for string
LW	S3,01A8 (SP)	;S3=SP+1A8: p->DL
//7000618C:
LUI	T3,8002
SW	R0,01D4 (SP)	;0->800201D4: 
ADDIU	T3,T3,4304	;T3=80024304
LW	AT,0000 (T3)	;AT=80024304: 
LW	T7,0004 (T3)	;T7=80024308: 
ADDIU	T2,SP,01B4	;T2=SP+1B4: 
SW	AT,0000 (T2)
SW	T7,0004 (T2)
LW	T7,000C (T3)	;T7=80024310: 
LW	AT,0008 (T3)	;AT=8002430C: 
OR	S8,R0,R0	;S8=0
SW	T7,000C (T2)
SW	AT,0008 (T2)
LW	AT,0010 (T3)	;AT=80024314: 
LW	T7,0014 (T3)	;T7=80024318: 
OR	S1,R0,R0	;S1=0
SW	AT,0010 (T2)
SW	T7,0014 (T2)
LW	T7,001C (T3)	;T7=80024320: 
LW	AT,0018 (T3)	;AT=8002431C: 
SW	T7,001C (T2)
SW	AT,0018 (T2)
//700061E4:	test if replaying or recording demos this stage load
JAL	7F0BFC10	;V0=difficulty
SW	R0,01AC (SP)
LUI	A0,8002
LW	A0,41A8 (A0)	;A0=800241A8: stage#
JAL	7F0C0640	;detect if recording or replaying demos this stage load
OR	A1,V0,R0	;A1=V0: difficulty
//700061FC:
LUI	T6,8002
LW	T6,41A4 (T6)	;T6=800241A4: 
LUI	T8,8002
BEQ	T6,R0,700062EC	;branch if not set
NOP
LW	T8,41A8 (T8)	;T8=800241A8: stage#
ADDIU	AT,R0,005A
ADDIU	S0,R0,FFFF
BEQ	T8,AT,70006294	;branch if stage 5A: title/menus
NOP
//70006224:	detect if multiplayer
JAL	7F010290	;V0=#players
NOP
SLTI	AT,V0,0002	;TRUE if solo
BNE	AT,R0,70006294	;branch if solo
//70006234:	multiplayer stage prep
LUI	A1,8002
ADDIU	A1,A1,41BC	;A1=800241BC
LW	T9,0000 (A1)	;T9=800241BC: memstring table
OR	S0,R0,R0	;S0=0
LUI	A0,8002
BEQ	T9,R0,7000627C	;branch if NULL (end of table)
LUI	T0,8002
LW	A0,41A8 (A0)	;A0=800241A8: stage#
ADDIU	V0,T0,41BC	;V0=800241BC
LW	V1,0000 (V0)	;V1=800241BC: stage ID for memstring
ADDIU	A0,A0,0190	;A0+=0x190: MP stage# offset	same as stage+400...
//70006260:	loop until a match for MP stage
BEQL	A0,V1,70006280	;branch if stage IDs match
SLL	T1,S0,0x3
LW	V1,0008 (V0)	;V1=next memstring stage ID# entry
ADDIU	S0,S0,0001	;S0++	count++
ADDIU	V0,V0,0008	;V0+=8	next table entry
BNE	V1,R0,70006260	;loop for each entry
NOP
//7000627C:	check if invalid/NULL entry
SLL	T1,S0,0x3	;T1=offset to entry
ADDU	T5,A1,T1	;T5=800241BC+offset
LW	T4,0000 (T5)	;T4=800241BC+offset: memstring stage ID
BNE	T4,R0,70006294	;branch if not zero
NOP
ADDIU	S0,R0,FFFF	;S0=-1	default to skip
//70006294:	solo memstring lookup, which multi needlessly reuses
LUI	A1,8002
BGEZ	S0,700062DC	;skip if invalid entry
ADDIU	A1,A1,41BC	;A1=800241BC
LW	T2,0000 (A1)	;T2=800241BC: memstring stage ID
OR	S0,R0,R0	;S0=0	count=0
LUI	A0,8002
BEQ	T2,R0,700062DC	;branch if NULL
LUI	T3,8002
ADDIU	V0,T3,41BC	;V0=800241BC
LW	V1,0000 (V0)	;V1=800241BC: memstring stage ID
LW	A0,41A8 (A0)	;A0=800241A8: stage#
//700062C0:	loop until a hit found
BEQL	A0,V1,700062E0	;branch if matching entry
SLL	T7,S0,0x3
LW	V1,0008 (V0)	;V1=next memstring stage ID
ADDIU	S0,S0,0001	;S0++	count++
ADDIU	V0,V0,0008	;V0+=8	next memstring
BNE	V1,R0,700062C0	;loop for each entry
NOP
//700062DC:	tokenize memory allocation string
SLL	T7,S0,0x3
ADDU	T6,A1,T7	;T6=800241BC+offset: p->matching memstring entry
JAL	7000A58C	;strtok(memstring A0,' ');
LW	A0,0004 (T6)	;A0=p->memstring
//700062EC:	reinitialize memory bank
JAL	7000999C	;reset memory bank A0
ADDIU	A0,R0,0004	;A0=4
JAL	7F0BD1BC	;??? with memory bank A0
ADDIU	A0,R0,0004	;A0=4
//700062FC:	determine -ma allocation
LUI	A1,8003
ADDIU	A1,A1,912C	;A1=8002912C: "-ma"
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A0,R0,0001	;A0=1
BEQ	V0,R0,7000633C	;branch if token not found
ADDIU	A0,R0,0001	;A0=1
LUI	A1,8003
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A1,A1,9130	;A1=80029130: "-ma"
OR	A0,V0,R0	;A0=V0: p->instance
OR	A1,R0,R0	;A1=NULL p->extra characters
JAL	7000A9E0	;V0=strtol(A0,A1,A2)
OR	A2,R0,R0	;A2=0	default target base
SLL	T8,V0,0xA	;T8=value * 0x400: total allocated memory
LUI	AT,8002
SW	T8,41B0 (AT)	;T8->800241B0: temp -ma allocation
//7000633C:	allocates "-ma" bytes to mem bank 4
LUI	A0,8002
LW	A0,41B0 (A0)	;A0=800241B0: temp -ma allocation
JAL	70009720	;V0=p->A0 bytes allocated in bank A1
ADDIU	A1,R0,0004	;A1=bank 4
LUI	A1,8002
LW	A1,41B0 (A1)	;A1=800241B0: size
JAL	70009D98	;reset memtable with base allocation
OR	A0,V0,R0	;A0=V0: p->allocation
//7000635C:	reset player data
JAL	7F09A32C	;reset player data pointers
NOP
//70006364:	initialize stage
LUI	T9,8002
LW	T9,41A8 (T9)	;T9=800241A8: stage#
ADDIU	AT,R0,005A
BEQ	T9,AT,70006398	;branch if stage 5A: title/menus
NOP
JAL	7F010290	;V0=#players
ADDIU	S1,R0,0001	;S1=1	#players
SLTI	AT,V0,0002	;TRUE if solo
BNE	AT,R0,70006398	;branch if solo
NOP
//7000638C:	MP sets #players
JAL	7F010290	;V0=#players
NOP
OR	S1,V0,R0	;S1=V0: #players
//70006398:
JAL	7F09A38C
OR	A0,S1,R0	;A0=S1: #players	0-title, 1-solo, 1,2,3,4-multi
JAL	7F0BD48C	;set vertex and graphics memory
NOP
JAL	7000B6AC
NOP
LUI	A0,8002
JAL	7F0BDAB0
LW	A0,41A8 (A0)	;A0=800241A8: stage#
JAL	70003124
NOP
JAL	7000ADB0
NOP
JAL	7F0C0B4C
NOP
JAL	70002810
NOP
//700063DC:
LUI	A0,8006
ADDIU	A0,A0,D9A0	;A0=8005D9A0: 
ADDIU	A1,SP,01D4
JAL	7000DDD0
OR	A2,R0,R0
BNE	V0,R0,70006410	;branch if not NULL
//700063F4:
LUI	A0,8006
ADDIU	A0,A0,D9A0	;A0=8005D9A0: 
ADDIU	A1,SP,01D4
JAL	7000DDD0
OR	A2,R0,R0
BEQ	V0,R0,700063F4	;loop while NULL
NOP
//70006410:
LUI	T0,8002
LW	T0,42FC (T0)	;T0=800242FC: loaded stage#
BGEZ	T0,700068B4	;branch if not -1
//7000641C:
LUI	A0,8006
ADDIU	A0,A0,D9A0	;A0=8005D9A0: 
ADDIU	A1,SP,01D4
JAL	7000DDD0
ADDIU	A2,R0,0001
LW	T1,01D4 (SP)
ADDIU	AT,R0,0001
LH	V1,0000 (T1)
BEQ	V1,AT,70006464
ADDIU	AT,R0,0002
BEQ	V1,AT,70006890
LUI	V0,8002
ADDIU	AT,R0,0005
BEQ	V1,AT,7000689C
LUI	V0,8002
LUI	V0,8002
BEQ	R0,R0,700068A4
LW	V0,42FC (V0)	;V0=800242FC: loaded stage#
//70006464:
JAL	7000D8E0
NOP
LUI	T5,8005
LW	T5,84B0 (T5)	;T5=800484B0: 
LUI	AT,0005
ORI	AT,AT,EB61	;AT=5EB61
SUBU	V1,V0,T5
SLTU	AT,V1,AT
BEQ	AT,R0,70006498
LUI	V0,8002
LUI	V0,8002
BEQ	R0,R0,700068A4
LW	V0,42FC (V0)	;V0=800242FC: loaded stage#
//70006498:	step through ramrom demo file
LW	V0,42FC (V0)	;V0=800242FC: loaded stage#
SLTIU	AT,S8,0002
BGEZ	V0,700068A4	;branch if not stage -1
NOP
BEQ	AT,R0,700068A4	;branch if not solo?  set to 0, nothing seems to alter...
ADDIU	T4,SP,01B4
JAL	7F0BFC8C	;V0=TRUE if demos running [80048474]
SW	T4,0048 (SP)
BEQ	V0,R0,700064D0	;branch if demo not playing
NOP
JAL	7F0C0268	;iterate ramrom entries until end, and handle camera out
NOP
BEQ	R0,R0,700064D8
NOP
//700064D0:
JAL	7F0C0B4C
NOP
//700064D8:
JAL	70002CD8
NOP
JAL	70002810
NOP
JAL	70002854
LUI	A0,0002
JAL	7000BD0C	;redirect to ramrom replay and record handlers if set
NOP
JAL	70000988	;A0-> [8002309C]
OR	A0,R0,R0	;A0=0
JAL	7F0BD674	;V0=p->display list
NOP
//70006508:	if available, handle debug menu and ramrom packet record
LUI	T2,8002
LW	T2,4300 (T2)	;T2=80024300: state of debug menu
SW	V0,01A4 (SP)	;SP+1A4=V0: p->DL
OR	S3,V0,R0	;S3=V0: p->DL
BEQ	T2,R0,70006590	;branch if not available
NOP
JAL	7000C0EC	;cur.controller A0 horz.stick pos.
OR	A0,R0,R0	;A0=0	controller 1
SLL	S0,V0,0x18
SRA	T3,S0,0x18
OR	S0,T3,R0	;S0=horz.stick pos.
JAL	7000C1FC	;cur.controller A0 vert.stick pos.
OR	A0,R0,R0	;A0=0	controller 1
SLL	S1,V0,0x18
SRA	T7,S1,0x18
OR	S1,T7,R0	;S1=vert.stick pos.
OR	A0,R0,R0	;A0=0	player 1
JAL	7000C30C	;V0= player A0's buttons A1 held
ORI	A1,R0,FFFF	;A1= any and all
ANDI	S2,V0,FFFF	;S2=buttons held
OR	A0,R0,R0	;A0=0	player 1
JAL	7000C3AC	;V0= player A0's buttons A1 pressed
ORI	A1,R0,FFFF	;A1= any and all
SLL	A0,S0,0x18
SLL	A1,S1,0x18
SRA	T8,A1,0x18
SRA	T6,A0,0x18
OR	A0,T6,R0	;A0=horz.stick pos.
OR	A1,T8,R0	;A1=vert.stick pos.
ANDI	A2,S2,FFFF	;A2= buttons held
JAL	7F0905A0	;debug menu processor
ANDI	A3,V0,FFFF	;A3= buttons pressed
LUI	AT,8002
SW	V0,4300 (AT)	;V0->80024300: state of debug menu
//70006590:
JAL	7F0BEB88	;manage MP game when applicable
NOP
JAL	7F09B41C
NOP
//700065A0:	set up viewports when applicable 
LUI	T9,8002
LW	T9,41A8 (T9)	;T9=800241A8: stage#
ADDIU	AT,R0,005A
BEQ	T9,AT,70006610	;branch if stage 5A: title/menus
NOP
JAL	7F09A464	;#players
OR	S1,R0,R0	;S1=0	player count
BLEZ	V0,70006610	;branch if invalid #players
NOP
//700065C4:	set each player's viewport
JAL	7F09B528
OR	A0,S1,R0	;A0=S1: player#
JAL	7F09B10C	;set cur. player to A0
OR	A0,V0,R0	;A0=V0: player#
LW	S0,0000 (S5)	;S0=8007A0B0: p->BONDdata
LH	A0,07F0 (S0)	;A0=BONDdata+7F0: viewport width
JAL	7000443C	;set viewport width (A0) and height (A1)
LH	A1,07F2 (S0)	;A1=BONDdata+7F2: viewport height
LW	S0,0000 (S5)	;S0=8007A0B0: p->BONDdata
LH	A0,07F4 (S0)	;A0=BONDdata+7F4: viewport ulx
JAL	700044BC	;set viewport ulx (A0) and uly (A1)
LH	A1,07F6 (S0)	;A1=BONDdata+7F6: viewport uly
JAL	7F0BF800
NOP
JAL	7F09A464	;V0=#players
ADDIU	S1,S1,0001	;S1++	count++
SLT	AT,S1,V0	;TRUE if count < players
BNE	AT,R0,700065C4	;loop for each player
NOP
//70006610:	handle line mode when applicable
JAL	7F0BE30C
OR	A0,S3,R0	;A0=S3: p->DL
JAL	7F090FDC	;V0=line mode flag
OR	S3,V0,R0	;S3=V0: p->DL
BEQ	V0,R0,70006700	;branch if line mode not enabled
//70006624:	global microcode snippet to force line mode
ADDIU	A3,R0,FFFF	;A3=-1
OR	V0,S3,R0	;V0=S3: p->DL
ADDIU	S3,S3,0008	;S3+=8: next DL op
LUI	T0,E700
OR	V1,S3,R0	;V1=S3: p->DL
SW	T0,0000 (V0)	;DL+0= pipesync.u
SW	R0,0004 (V0)	;DL+0= pipesync.l
ADDIU	S3,S3,0008	;S3+=8: next DL op
//70006644:	set cycle type
LUI	T1,BA00
OR	A0,S3,R0	;A0=S3: p->DL
ORI	T1,T1,1402	;T1=BA001402
ADDIU	S3,S3,0008	;S3+=8: next DL op
SW	T1,0000 (V1)	;DL+0= setothermode_h.u: shift 14, 2 bits
SW	R0,0004 (V1)	;DL+4= setothermode_h.l: cycle type-1cycle
//7000665C:	white blend colour
OR	A1,S3,R0	;A1=S3: p->DL
LUI	T5,F900
ADDIU	S3,S3,0008	;S3+=8: next DL op
SW	T5,0000 (A0)	;DL+0= setblendcolour.u
SW	A3,0004 (A0)	;DL+4= setblendcolour.l: FFFFFFFF-white100%
//70006670:	
OR	A2,S3,R0	;A2=S3: p->DL
LUI	T4,EE00
ADDIU	S3,S3,0008	;S3+=8: next DL op
SW	T4,0000 (A1)	;DL+0= setprimdepth.u
SW	A3,0004 (A1)	;DL+4= setprimdepth.l: depth=max, Ddepth=max
//70006684:	set depth source to primitive
LUI	T2,B900
OR	V0,S3,R0	;V0=S3: p->DL
ORI	T2,T2,0201	;T2=B9000201
ADDIU	T3,R0,0004
ADDIU	S3,S3,0008	;S3+=8: next DL op
LUI	T7,B900
LUI	T6,0FA5
SW	T3,0004 (A2)	;DL+0= setothermode_l.l: depth source: primitive
SW	T2,0000 (A2)	;DL+4= setothermode_l.u: shift 2, 1 bit
//700066A8:	set blender
ORI	T6,T6,4040	;T6=0FA54040
ORI	T7,T7,031D	;T7=B900031D
OR	S0,S3,R0	;S0=S3: p->DL
SW	T7,0000 (V0)	;DL+4= setothermode_l.u: shift 3, 1D bits
SW	T6,0004 (V0)	;DL+0= setothermode_l.l: render mode: image read; converge delta-ST clamp; depth mode: force blender; blender: blend 1 machine, blend 1, blend colour memory, blend colour fog, blend alpha in, blend alpha fog, blend alpha shade, blend 0
//700066BC:	draws viewport as a fillrect?
JAL	7000441C	;V0= text clip width
ADDIU	S3,S3,0008	;S3+=8: next DL op
SLL	S1,V0,0x10
SRA	T8,S1,0x10
JAL	7000442C	;V0= text clip height
OR	S1,T8,R0	;S1= text clip width
ADDIU	T9,V0,FFFF	;T9= height-1
ANDI	T0,T9,03FF	;T0=height to 10 bits
ADDIU	T4,S1,FFFF	;T4=width-1
ANDI	T2,T4,03FF	;T2=width to 10 bits
SLL	T1,T0,0x2	;T1=height->lry
LUI	AT,F600
OR	T5,T1,AT	;T5= fillrect | lry
SLL	T3,T2,0xE	;T3=width->lrx
OR	T7,T5,T3	;T7= fillrect | lrx | lry
SW	T7,0000 (S0)	;DL+0= fillrect.u: lrx, lry
SW	R0,0004 (S0)	;DL+4= fillrect.l: ulx=0, uly=0
//70006700:	feed screen to VI
JAL	7000B27C	;draw screen display block to screen
OR	A0,S3,R0	;A0=S3: p->DL
//70006708:	test if displaying memory usage
JAL	7F090F34	;V0= memory usage display flag [80036F74]
OR	S3,V0,R0	;S3=V0: p->DL
BEQ	V0,R0,70006724	;branch if not displaying memory usage
NOP
JAL	70002958
OR	A0,S3,R0	;V0=S3: p->DL
OR	S3,V0,R0	;S3=V0: p->DL
//70006724:	display debug menu if applicable
LUI	T6,8002
LW	T6,4300 (T6)	;T6=80024300: state of debug menu
BEQL	T6,R0,7000674C	;branch if debug not available
OR	V0,S3,R0
JAL	7F090490	;display debug menu text on screen
NOP
JAL	7F08FE74
OR	A0,S3,R0	;V0=S3: p->DL
OR	S3,V0,R0	;S3=V0: p->DL
//70006748:	sync and end display list
OR	V0,S3,R0	;V0=S3: p->DL
ADDIU	S3,S3,0008	;S3+=8	next DL op
LUI	T8,E900
SW	T8,0000 (V0)	;DL+0= fullsync.u
SW	R0,0004 (V0)	;DL+4= fullsync.l
OR	V1,S3,R0	;V1=S3: p->DL
LUI	T9,B800
SW	T9,0000 (V1)	;DL+0= enddl.u
SW	R0,0004 (V1)	;DL+4= enddl.l
//7000676C:	handle show mem use, when applicable
LUI	T0,8002
LW	T0,41B4 (T0)	;T0=800241B4: 1- "show mem use"
ADDIU	S3,S3,0008	;S3+=8	next DL op
BEQ	T0,R0,700067A8	;branch if "show mem use" not set
NOP
JAL	700098F0	;V0=8	loops 8 times, needlessly
NOP
JAL	7000A29C
NOP
JAL	7F0BD774	;A0->SP+0; deleted debug routine
OR	A0,S3,R0	;V0=S3: p->DL
JAL	7F0C6650	;unconditional return
OR	A0,R0,R0	;A0=0
LUI	AT,8002
SW	R0,41B4 (AT)	;0->show mem use flag
//700067A8:	handle show mem bars, when applicable
LUI	T1,8002
LW	T1,41B8 (T1)	;T1=800241B8: 1- "show mem bars"
BEQ	T1,R0,700067C0	;branch if "show mem bars" not set
NOP
JAL	7F0BD810
OR	A0,S3,R0	;V0=S3: p->DL
//700067C0:
JAL	7F0BD69C
OR	A0,S3,R0	;V0=S3: p->DL
JAL	7F0BD738
NOP
JAL	70003298
NOP
//700067D8:	handle grab task flag, when applicable
JAL	7F09106C	;V0= grab task debugger flag
NOP
BEQ	V0,R0,70006854	;branch if grab task not set
OR	A0,R0,R0	;A0=0	player 1
JAL	7000C3AC	;V0= player A0's buttons A1 pressed
ORI	A1,R0,C000	;A1=A, B buttons
BEQ	V0,R0,70006854	;branch if not pressed
OR	A0,R0,R0	;A0=0	player 1
JAL	7000C30C	;V0= player A0's buttons A1 held
ORI	A1,R0,C000	;A1=A, B buttons
ORI	AT,R0,C000
BNE	V0,AT,70006854	;branch if A+B was not precisely what was pressed
//70006808:	generate a unique name for this taskgrab
LUI	A2,8002
LW	A2,4324 (A2)	;A2=80024324: "taskgrab" ram dump #
OR	A0,S4,R0	;A0=S4: p->string buffer
JAL	7000AC94	;sprintf(A0,A1,A2,A3)
OR	A1,S6,R0	;A1=S6: 80029134="u64.taskgrab.%d.core"
OR	A0,S4,R0	;A0=S4: p->string
JAL	7F0D0098	;V0=TRUE if resource named A0 found on Indy and filesize set to A1
OR	A1,S7,R0	;A1=S7: @filesize
BEQ	V0,R0,70006844	;branch if unique
//7000682C:	loop and increment value if found
LUI	A2,8002
LW	A2,4324 (A2)	;A2=80024324: taskgrab count
LUI	AT,8002
ADDIU	A2,A2,0001
BEQ	R0,R0,70006808	;loop until a new instance can be found
SW	A2,4324 (AT)	;taskgrab count++
//70006844:
OR	A0,S4,R0	;A0=S4: p->string
LUI	A1,8000	;A1=80000000	start address
JAL	7F0CFFE0	;send capture data A1 of size A2 named A0
LUI	A2,0040	;A2=0x400000	4MB size
//70006854:
LW	A0,01A4 (SP)	;A0=SP+1A4: org.p->DL
OR	A1,S3,R0	;A1=S3: p->DL
OR	A2,R0,R0	;A2=0
JAL	7F0CFE18
LW	A3,0048 (SP)	;A3=SP+48: 
JAL	70009E10
ADDIU	S8,S8,0001	;S8++
LW	T4,01AC (SP)
LUI	A0,0001		;A0=10000
XORI	T2,T4,0001
JAL	70002854
SW	T2,01AC (SP)	;SP+1AC^=1
LUI	V0,8002
BEQ	R0,R0,700068A4
LW	V0,42FC (V0)
//70006890:
ADDIU	S8,S8,FFFF	;S8--	player count-1?
BEQ	R0,R0,700068A4
LW	V0,42FC (V0)
//7000689C:
ADDIU	S8,R0,0004	;S8=4	player count=4?
//700068A0:
LW	V0,42FC (V0)	;V0=800242FC: loaded stage#
BLTZ	V0,7000641C	;loop if stage# is -1
NOP
BNE	S8,R0,7000641C
NOP
//700068B4:	unload stage
JAL	7F0BFB20	;unload stage
NOP
JAL	7F0C08FC	;stop demos at end of stage
NOP
JAL	700099C4	;??? to memory bank A0
ADDIU	A0,R0,0004	;A0=bank 4
JAL	7F0BD1BC	;??? to memory bank A0
ADDIU	A0,R0,0004	;A0=bank 4
LUI	V0,8002
ADDIU	V0,V0,42FC	;V0=800242FC
LW	T5,0000 (V0)	;T5=800242FC: loaded stage#
LW	T7,01DC (SP)
LUI	AT,8002
ADDIU	T3,R0,FFFF	;T3=-1
SW	T5,41A8 (AT)	;stage#->800241A8: stage#
BEQ	T7,R0,7000618C	;loop if still zero, which as far as I know it always does
SW	T3,0000 (V0)	;-1->800242FC: loaded stage#
//700068F8:	do something with mem bank 5
JAL	7F0D1A7C
SW	S3,01A8 (SP)	;SP+1A8=S3: p->DL
//70006900:	return
LW	RA,003C (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
LW	S5,002C (SP)
LW	S6,0030 (SP)
LW	S7,0034 (SP)
LW	S8,0038 (SP)
JR	RA
ADDIU	SP,SP,01E0
