resource table entry format:
0x0	4	index
0x4	4	p->resource name
0x8	4	hardware address

resource data entry format:
0x0	4	filesize
0x4	4	temporary: remaining buffer
0x8	4	temporary: filesize of Indy-derived files
0xC	4	remaining buffer
0x10	1	mem bank when loaded
0x11	1	
0x12	2	RESERVED


7F0BCAA0	F15D0	load resource table/data entry (A2,A3) to buffer A0 of size A1
	accepts: A0=p->rdram target, A1=buffer size or 0 to ignore, A2=p->resource table entry, A3=p->resource data entry
ADDIU	SP,SP,DED8
SW	RA,0014 (SP)
SW	A0,2128 (SP)	;SP+2128= A0: p->target
BNE	A1,R0,7F0BCAC8	;branch if size explicitly mentioned
SW	A2,2130 (SP)	;SP+2130= A2: p->resource table
LW	A1,0008 (A2)	;A1=res.tbl+8: hardware address
JAL	70005C1C	;loads A2 bytes from hardware A1 to A0
LW	A2,0000 (A3)	;A2=res.data+0: filesize
BEQ	R0,R0,7F0BCB28	;return
LW	RA,0014 (SP)
//7F0BCAC8:	test if falls within buffer size
LW	A2,0000 (A3)	;A2=res.data+0: filesize
LW	T7,2128 (SP)	;T7=p->target
ADDIU	AT,R0,FFF8
ADDIU	T9,A2,0007
AND	T0,T9,AT	;T0= computed filesize to DW bound
ADDU	T8,T7,A1
SUBU	A0,T8,T0	;A0= p->target + size - filesize
SUBU	T1,A0,T7	;T1= size - filesize
SLTIU	AT,T1,0008
BEQ	AT,R0,7F0BCAFC	;return if difference of less than 8
LW	T2,2130 (SP)
BEQ	R0,R0,7F0BCB24
SW	R0,0004 (A3)	;0->res.data+4: 0->remaining buffer
//7F0BCAFC:	load resource if fits
LW	A1,0008 (T2)	;A1=res.tbl+8: hardware address
SW	A3,2134 (SP)
JAL	70005C1C	;loads A2 bytes from hardware A1 to A0
SW	A0,2124 (SP)
LW	A0,2124 (SP)	;A0= p->target.corrected
LW	A1,2128 (SP)	;A1= p->target
JAL	7F0CE7F0	;decompress data A0 to A1, advancing past header
ADDIU	A2,SP,0024	;A2=SP+24: p->buffer
LW	A3,2134 (SP)	;A3= remaining buffer
SW	V0,0004 (A3)	;res.data+4= remaining buffer
//7F0BCB24:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,2128
JR	RA
NOP

7F0BCB34	F1664	load resource table/data entry (A2,A3) from Indy into allocated buffer A0 of size A1
	accepts: A0=p->allocated data, A1=buffer size or 0 to ignore, A2=p->resource entry, A3=p->resource data entry
ADDIU	SP,SP,DED8
SW	S1,0018 (SP)
SW	S0,0014 (SP)
OR	S0,A0,R0	;S0=A0: p->target
OR	S1,A3,R0	;S1=A3: p->res.data
SW	RA,001C (SP)
BNE	A1,R0,7F0BCB68	;branch if buffer size declared
SW	A1,212C (SP)	;SP+212C= A1: size
LW	A0,0004 (A2)	;A0=res.tbl+4: p->name
JAL	7F0CFF9C	;load resource named A0 from Indy to A1
OR	A1,S0,R0	;A1=S0: p->target
BEQ	R0,R0,7F0BCC18	;return
LW	RA,001C (SP)
//7F0BCB68:	find instance on Indy
LW	A0,0004 (A2)	;A0=res.tbl+4: p->name
SW	A2,2130 (SP)	;SP+2130= A2: p->res.tbl
JAL	7F0D0098	;V0=TRUE if resource named A0 found on Indy and filesize set to A1
ADDIU	A1,S1,0008	;A1=p->res.data+8: target for filesize
//7F0BCB78:	test if falls within buffer size
LW	T9,0008 (S1)	;T9=res.data+8: filesize
LW	T7,212C (SP)	;T7=size.buf
ADDIU	AT,R0,FFF8
ADDIU	T0,T9,0007
AND	T1,T0,AT	:T1=filesize to DW boundry
ADDU	T8,S0,T7
SUBU	A3,T8,T1	;A3= p->target + buffer size - filesize
SUBU	T2,A3,S0	;T2= buffer size - filesize
SLTIU	AT,T2,0008
BEQ	AT,R0,7F0BCBAC	;return if won't fit within buffer
LW	A2,2130 (SP)
BEQ	R0,R0,7F0BCC14
SW	R0,0004 (S1)	;0->res.data+4: no remaining buffer
//7F0BCBAC:	load resource from Indy
LW	A0,0004 (A2)	;A0=res.tbl+4: p->name
SW	A3,2124 (SP)
JAL	7F0CFF9C	;load resource named A0 from Indy to A1
OR	A1,A3,R0	;A1=A3: p->target, aligned to end of buffer
//7F0BCBBC:	manual test for rarezip header (aegh...)
LW	A3,2124 (SP)	;A3=p->file
LUI	T4,8006
LBU	T4,B66C (T4)	;T4=8005B66C: 1172 .rz header
LBU	T3,0000 (A3)	;T3=file[0]
LUI	T6,8006
OR	A1,S0,R0	;A1=p->target (original)
BNE	T3,T4,7F0BCC04	;skip if not compressed
OR	A0,A3,R0	;A0=A3: p->file
LBU	T5,0001 (A3)	;T5=file[1]
LBU	T6,B671 (T6)	;T4=8005B671: another 1172 .rz header
ADDIU	A2,SP,0024	;A2=SP+24: p->decompression object target
BNE	T5,T6,7F0BCC04	;skip if not compressed
NOP
OR	A0,A3,R0	;A0=A3: p->file
JAL	7F0CE7F0	;decompress data A0 to A1, advancing past header
OR	A1,S0,R0	;A1=S0: filesize
BEQ	R0,R0,7F0BCC10
OR	V1,V0,R0
//7F0BCC04:	copy from one end of the buffer to the other
JAL	7000F970	;V0=p->A2 bytes copied from A0 to A1
LW	A2,0008 (S1)	;A2=res.data+8: filesize
LW	V1,0008 (S1)
SW	V1,0004 (S1)	;filesize -> res.data+4
//7F0BCC14:	return
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,2128

7F0BCC28	F1758	generate resource data filesize entries
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,8004
LUI	A1,8006
ADDIU	A1,A1,B674	;A1=8005B674: "ob_c_debug"
JAL	70004E60	;V0=p->debug.notice.list entry for name A1 and data A0
ADDIU	A0,A0,6050	;A0=80046050: 
LUI	V1,8005
LW	V1,82D4 (V1)	;V1=800482D4: calculated # resource entries
LUI	A0,8004
ADDIU	A0,A0,6060	;A0=80046060: p->resource table
ADDIU	V1,V1,FFFF
SLTI	AT,V1,0002
BNE	AT,R0,7F0BCCAC	;return if last entry
LUI	V0,8009
SLL	T6,V1,0x2
ADDU	T6,T6,V1
LUI	T7,8009
ADDIU	T7,T7,88B0	;T7=800888B0: p->resource data
SLL	T6,T6,0x2	;T6=entries.max*14
ADDU	A1,T6,T7	;A1=p->res.data.final
ADDIU	V0,V0,88C4	;V0=800888C4: p->res.data.next
//7F0BCC80:	loop for total entries - 1
LW	T8,0014 (A0)	;T8=res.tbl.next+8: next hardware address
LW	T9,0008 (A0)	;T9=res.tbl+8: hardware address
ADDIU	V0,V0,0014	;V0+=14: next res.data entry
SLTU	AT,V0,A1	;TRUE if next res.data entry not final
SUBU	V1,T8,T9	;V1=difference in sizes
ADDIU	A0,A0,000C
SW	V1,FFEC (V0)	;res.data+0 = filesize
SW	R0,FFF0 (V0)	;res.data+4 = 0
SW	R0,FFF4 (V0)	;res.data+8 = 0
BNE	AT,R0,7F0BCC80
SW	R0,FFF8 (V0)	;res.data+C = 0
//7F0BCCAC:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7F0BCCBC	F17EC	loads ROM index# A0 into memory bank A3; redirects to 7F0BCE0C
	accepts: A0=index#, A1=mode, A2=update flag, A3=bank
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A3,0024 (SP)
ANDI	T6,A3,00FF
JAL	7F0BCE0C	;load ROM index# A0 into memory bank A3
OR	A3,T6,R0	;A3->byte
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7F0BCCE4	F1814	load resource index# A0 into memory; redirects to 7F0BCFE0
	accepts: A0=index#, A1=bank, A2=p->target, A3=size of buffer
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	7F0BCFE0	;load resource index A0 to buffer A2 of size A3
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7F0BCD04	F1834	load resource named A0 to bank A3; redirects to 7F0BCE0C
	accepts: A0=p->name, A1=mode, A2=update flag, A3=bank
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A1,001C (SP)
SW	A2,0020 (SP)
JAL	7F0BD254	;V0=index# of resource named A0
SW	A3,0024 (SP)
OR	A0,V0,R0	;A0=V0: index
LW	A1,001C (SP)	;A1= A1 f/caller
LW	A2,0020 (SP)	;A2= A2 f/caller
JAL	7F0BCE0C	;load resource index# A0 into memory bank A3
LBU	A3,0027 (SP)	;A3= A3 f/caller
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7F0BCD40	F1870	load resource named A0 to buffer A2 of size A3; redirects to 7F0BCFE0
	accepts: A0=p->name, A1=mode, A2=p->target, A3=size of buffer
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A1,001C (SP)
SW	A2,0020 (SP)
JAL	7F0BD254	;V0=index# of resource named A0
SW	A3,0024 (SP)
OR	A0,V0,R0	;A0=V0: index
LW	A1,001C (SP)	;A1= A1 f/caller
LW	A2,0020 (SP)	;A2= A2 f/caller
JAL	7F0BCFE0	;load resource index A0 to buffer A2 of size A3
LW	A3,0024 (SP)	;A3= A3 f/caller
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7F0BCD7C	F18AC	loads A3 bytes of BG file named A0 starting at A2 to rdram A1
	accepts: A0=p->name, A1=p->target, A2=offset, A3=size
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A1,001C (SP)	;SP+1C= A1
SW	A2,0020 (SP)	;SP+20= A2
JAL	7F0BD254	;V0=index# of resource named A0
SW	A3,0024 (SP)	;SP+24= A3
SLL	T8,V0,0x2
ADDU	T8,T8,V0
SLL	T8,T8,0x2	;T8=index*14: offset in res.data
LUI	V1,8009
ADDU	V1,V1,T8
LW	V1,88B0 (V1)	;V1=800888B0+offset: res.data.filesize
SLL	T6,V0,0x2
SUBU	T6,T6,V0
LUI	T7,8004
ADDIU	T7,T7,6054
SLL	T6,T6,0x2	;T6=index*C: offset in res.tbl
LW	A2,0024 (SP)	;A2= A3 f/caller: size
LW	T0,0020 (SP)	;T0= A2 f/caller: offset
BEQ	V1,R0,7F0BCDFC	;return if NULL file
ADDU	A3,T6,T7	;A3=80046054+offset: res.tbl[index]
ADDU	T9,T0,A2	;T9= size + offset
ADDIU	T1,V1,000F
SLTU	AT,T1,T9
BEQL	AT,R0,7F0BCDF0	;branch if doesn't exceed total filesize
LW	T2,0008 (A3)
//7F0BCDE4:	permanent loop!
BEQ	R0,R0,7F0BCDE4
NOP
//7F0BCDEC:	load segment of file
LW	T2,0008 (A3)	;T2=res.tbl[index].hardware
LW	A0,001C (SP)	;A0= A1 f/caller: p->target
JAL	70005C1C	;loads A2 bytes from hardware A1 to A0
ADDU	A1,T2,T0	;A1=hardware + offset
//7F0BCDFC:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7F0BCE0C	F193C	load resource index# A0 into memory bank A3
	accepts: A0=index#, A1=mode, A2=do not update bank index (FALSE,TRUE), A3=bank
	Mode > 2 forces load without buffer size reference.
ADDIU	SP,SP,FFD0
SW	RA,001C (SP)
SW	S1,0018 (SP)
SW	S0,0014 (SP)
SW	A0,0030 (SP)	;SP+30= A0
SW	A1,0034 (SP)	;SP+34= A1
SW	A2,0038 (SP)	;SP+38= A2
BEQ	A1,R0,7F0BCE44	;branch if mode 0
SW	A3,003C (SP)	;SP+3C= A3
ADDIU	AT,R0,0001
BEQ	A1,AT,7F0BCE44
ADDIU	AT,R0,0002
BNE	A1,AT,7F0BCF0C
LW	T5,0030 (SP)
//7F0BCE44:	modes 0-2
LW	T7,0030 (SP)	;T7=index
LUI	T9,8009
ADDIU	T9,T9,88B0
SLL	T8,T7,0x2
ADDU	T8,T8,T7
SLL	T8,T8,0x2	;T8=index*14: offset in res.data
ADDU	S1,T8,T9	;S1=800888B0+offset: res.data[index]
LW	S0,0004 (S1)	;S0=res.data+4: res.data.temp.remaining
BNEL	S0,R0,7F0BCE80	;branch if set
OR	A0,S0,R0
JAL	70009910	;V0= total allocated size of bank A0
LBU	A0,003F (SP)	;A0= A3 f/caller: bank
SW	V0,0004 (S1)	;set res.data.temp.remaining to total size of bank
OR	S0,V0,R0	;S0=V0: remaining
//7F0BCE7C:
OR	A0,S0,R0	;A0=S0: remaining
JAL	70009720	;V0=p->A0 bytes of memory allocated in bank A1
LBU	A1,003F (SP)	;A1= A3 f/caller: bank
LW	S0,0004 (S1)	;S0=res.data+4: res.data.temp.remaining
LUI	T2,8004
ADDIU	T2,T2,6054
SW	S0,000C (S1)	;S0->res.data+C: res.data.remaining
LW	T0,0030 (SP)	;T0= A0 f/caller: index
OR	A0,V0,R0	;A0=p->allocated buffer
OR	A3,S1,R0	;A3=res.data[index]
SLL	T1,T0,0x2
SUBU	T1,T1,T0
SLL	T1,T1,0x2
ADDU	A2,T1,T2	;A2=80046054+offset: res.tbl[index]
LW	T3,0008 (A2)	;T3=res.tbl.hardware
OR	A1,S0,R0	;A1=remaining buffer
BNE	T3,R0,7F0BCEDC	;skip if hardware address declared
NOP
//7F0BCEC4:	if no hardware address, pull from Indy
OR	A1,S0,R0	;A1= remaining size
OR	A3,S1,R0	;A3=res.data[index]
JAL	7F0BCB34	;load resource table/data entry (A2,A3) from Indy into allocated buffer A0 of size A1
SW	V0,0024 (SP)
BEQ	R0,R0,7F0BCEE8
LW	S0,0024 (SP)
//7F0BCEDC:	load from hardware
JAL	7F0BCAA0	;load resource table/data entry (A2,A3) to buffer A0 of size A1
SW	A0,0024 (SP)
//7F0BCEE4:	aligns or corrects data entry in mem block
LW	S0,0024 (SP)	;S0= p->allocated buffer
LW	T4,0034 (SP)	;T4= A1 f/caller: mode
OR	A0,S0,R0	;A0= p->buffer
LBU	A2,003F (SP)	;A2= A3 f/caller: bank
BEQL	T4,R0,7F0BCFCC	;return if mode 0
LW	RA,001C (SP)
JAL	70009804
LW	A1,0004 (S1)	;A1=res.data+4: temp.remaining
BEQ	R0,R0,7F0BCFCC
LW	RA,001C (SP)
//7F0BCF0C:	mode > 2
SLL	T6,T5,0x2
ADDU	T6,T6,T5
LUI	T7,8009
ADDIU	T7,T7,88B0
SLL	T6,T6,0x2
ADDU	S1,T6,T7	;S1=800888B0+offset: res.data[index]
LW	S0,0004 (S1)	;S0=res.data.temp.remaining
BNEL	S0,R0,7F0BCF50	;skip if set
OR	A0,S0,R0
LW	V0,0000 (S1)	;V0= res.data.filesize
BEQ	V0,R0,7F0BCF44	;if not present use Indy filesize
OR	S0,V0,R0
BEQ	R0,R0,7F0BCF4C
SW	V0,0004 (S1)	;copy res.data.filesize -> res.data.temp.remaining
//7F0BCF44:	if remaining size not found, use filesize
LW	S0,0008 (S1)
SW	S0,0004 (S1)	;copy res.data.indyfilesize -> res.data.temp.remaining
//7F0BCF4C:	allocate
OR	A0,S0,R0	;A0=S0: res.data.temp.remaining
JAL	70009720	;V0=p->A0 bytes of memory allocated in bank A1
LBU	A1,003F (SP)	;A1= A3 f/caller: bank
LW	T9,0004 (S1)	;T9=res.data.temp.remaining
LUI	T2,8004
ADDIU	T2,T2,6054
SW	T9,000C (S1)	;copy res.data.temp.remaining -> res.data.remaining
LW	T0,0030 (SP)	;T0= A0 f/caller: index
OR	S0,V0,R0	;S0=V0: p->buffer
OR	A3,S1,R0	;A3=res.data[index]
SLL	T1,T0,0x2
SUBU	T1,T1,T0
SLL	T1,T1,0x2
ADDU	A2,T1,T2	;A2=80046054+offset: res.tbl[index]
LW	T3,0008 (A2)	;T3=res.tbl.hardware
OR	A0,S0,R0	;A0=p->buffer
OR	A1,R0,R0
BNE	T3,R0,7F0BCFAC	;pull from hardware addy if set
NOP
//7F0BCF98:	if no hardware address, pull from Indy
OR	A0,V0,R0	;A0= p->buffer
JAL	7F0BCB34	;load resource table/data entry (A2,A3) from Indy into allocated buffer A0 of size A1
OR	A1,R0,R0	;A1=0: no size declared (forced)
BEQ	R0,R0,7F0BCFB8
LW	T4,0038 (SP)
//7F0BCFAC:	load from hardware
JAL	7F0BCAA0	;load resource table/data entry (A2,A3) to buffer A0 of size A1
OR	A3,S1,R0	;A3=res.data[index]
//7F0BCFB4:	if A2 FALSE, write bank number to res.data
LW	T4,0038 (SP)	;T4= A2 f/caller
LBU	T5,003F (SP)
BNEL	T4,R0,7F0BCFCC	; if 0, write bank number to res.data+10
LW	RA,001C (SP)
SB	T5,0010 (S1)	;res.data+10 = bank
//7F0BCFC8:	return
LW	RA,001C (SP)
OR	V0,S0,R0	;V0= p->buffer
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0030

7F0BCFE0	F1B10	load resource index A0 to buffer A2 of size A3
	accepts: A0=index#, A1=mode, A2=p->target, A3=size of buffer
	Mode > 2 forces load without buffer size reference.
SLL	T6,A0,0x2
ADDIU	SP,SP,FFE0
ADDU	T6,T6,A0
LUI	T7,8009
SW	S0,0018 (SP)
ADDIU	T7,T7,88B0
SLL	T6,T6,0x2
ADDU	S0,T6,T7	;S0=800888B0+offset: res.data[index]
LW	T8,0004 (S0)	;T8= res.data+4: res.data.temp.remaining
SW	RA,001C (SP)
SW	A2,0028 (SP)	;SP+28= A2
BNE	T8,R0,7F0BD030	;skip if set
SW	A3,002C (SP)	;SP+2C= A3
LW	V0,0000 (S0)
BEQL	V0,R0,7F0BD02C
LW	T9,0008 (S0)
BEQ	R0,R0,7F0BD030
SW	V0,0004 (S0)	;copy res.data.filesize -> res.data.temp.remaining
//7F0BD028:	if remaining size not found, use filesize
LW	T9,0008 (S0)
SW	T9,0004 (S0)	;copy res.data.indyfilesize -> res.data.temp.remaining
//7F0BD030:	shuffle by mode
BEQ	A1,R0,7F0BD048
ADDIU	AT,R0,0001
BEQ	A1,AT,7F0BD048
ADDIU	AT,R0,0002
BNE	A1,AT,7F0BD0A8
SLL	T5,A0,0x2
//7F0BD048:	modes 0-2
SLL	T0,A0,0x2
SUBU	T0,T0,A0
LUI	T1,8004
ADDIU	T1,T1,6054
SLL	T0,T0,0x2
ADDU	A2,T0,T1	;A2=80046054+offset: res.tbl[index]
LW	T2,0008 (A2)	;T7=res.tbl.hardware
LW	T3,002C (SP)
LW	T4,002C (SP)
BNE	T2,R0,7F0BD090
OR	A3,S0,R0	;A3=S0: res.data[index]
//7F0BD074:	if no hardware address, pull from Indy
SW	T3,000C (S0)	;size -> res.data.remaining
LW	A0,0028 (SP)	;A0= A2 f/caller: p->target
LW	A1,002C (SP)	;A1= A3 f/caller: size
JAL	7F0BCB34	;load resource table/data entry (A2,A3) from Indy into allocated buffer A0 of size A1
OR	A3,S0,R0	;A3=S0: res.data[index]
BEQ	R0,R0,7F0BD0F0
LW	RA,001C (SP)
//7F0BD090:	load from hardware
SW	T4,000C (S0)	;size -> res.data.remaining
LW	A1,002C (SP)	;A1= A3 f/caller: size
JAL	7F0BCAA0	;load resource table/data entry (A2,A3) to buffer A0 of size A1
LW	A0,0028 (SP)	;A0= A2 f/caller: p->target
BEQ	R0,R0,7F0BD0F0
LW	RA,001C (SP)
//7F0BD0A8:	mode > 2
SUBU	T5,T5,A0
LUI	T6,8004
ADDIU	T6,T6,6054
SLL	T5,T5,0x2
ADDU	A2,T5,T6	;A2=80046054+offset: res.tbl[index]
LW	T7,0008 (A2)	;T7=res.tbl.hardware
OR	A3,S0,R0	;A3=S0: res.data[index]
LW	A0,0028 (SP)	;A0= A2 f/caller: p->target
BNE	T7,R0,7F0BD0E4
OR	A1,R0,R0	;A1=0: no size declared (forced)
//7F0BD0D0:	if no hardware address, pull from Indy
LW	A0,0028 (SP)	;A0= A2 f/caller: p->target
JAL	7F0BCB34	;load resource table/data entry (A2,A3) from Indy into allocated buffer A0 of size A1
OR	A1,R0,R0	;A1=0: no size declared (forced)
BEQ	R0,R0,7F0BD0F0
LW	RA,001C (SP)
//7F0BD0E4:	load from hardware
JAL	7F0BCAA0	;load resource table/data entry (A2,A3) to buffer A0 of size A1
OR	A3,S0,R0	;A3=S0: res.data[index]
//7F0BD0EC:	return
LW	RA,001C (SP)
LW	V0,0028 (SP)	;V0= p->target
LW	S0,0018 (SP)
JR	RA
ADDIU	SP,SP,0020

7F0BD100	F1C30	V0= temp. remaining buffer for resource index A0
	accepts: A0=index
SLL	T6,A0,0x2
ADDU	T6,T6,A0
SLL	T6,T6,0x2	;T6=index*14
LUI	V0,8009
ADDU	V0,V0,T6
JR	RA
LW	V0,88B4 (V0)	;V0=800888B0+4+offset: res.data[index].temp.remaining

7F0BD11C	F1C4C	V0= remaining buffer for resource index A0
	accepts: A0=index
SLL	T6,A0,0x2
ADDU	T6,T6,A0
SLL	T6,T6,0x2	;T6=index*14
LUI	V0,8009
ADDU	V0,V0,T6
JR	RA
LW	V0,88BC (V0)	;V0=800888B0+C+offset: res.data[index].remaining

7F0BD138	F1C68	set remaining buffer size for resource entry A0, and if A3 TRUE update bank 4 for buffer A1 of size A2
	accepts: A0=index, A1=p->buffer, A2=remaining buffer size, A3=update TRUE/FALSE
SLL	T6,A0,0x2
ADDU	T6,T6,A0
LUI	T7,8009
ADDIU	T7,T7,88B0
SLL	T6,T6,0x2
ADDIU	SP,SP,FFE8
ADDU	V0,T6,T7	;V0=800888B0+offset: res.data[index]
SW	RA,0014 (SP)
SW	A1,001C (SP)
SW	A2,0004 (V0)	;remaining->res.data[index].temp.remaining
BEQ	A3,R0,7F0BD178	;branch if not updating
SW	A2,000C (V0)	;remaining->res.data[index].remaining
//7F0BD168:	update bank 4 if A3 TRUE
OR	A0,A1,R0	;A0=A1: p->buffer
OR	A1,A2,R0	;A1=A2: remaining buffer
JAL	70009804
ADDIU	A2,R0,0004	;A2=bank 4
//7F0BD178:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7F0BD188	F1CB8	V0=temporary buffer remaining value for resource named A0; res.data[index]+4
	accepts: A0=p->name
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	7F0BD254	;V0=index# of resource named A0
NOP
SLL	T6,V0,0x2
ADDU	T6,T6,V0
LW	RA,0014 (SP)
SLL	T6,T6,0x2	;T6=index*14: offset in res.data
LUI	V0,8009
ADDU	V0,V0,T6
LW	V0,88B4 (V0)	;V0=800888B0+offset+4: res.data.temp.remaining
JR	RA
ADDIU	SP,SP,0018

7F0BD1BC	F1CEC	remove resource bank values matching or above bank A0; also eliminates bank 4 temp remaining values
	accepts: A0=bank
LUI	V1,8005
LW	V1,82D4 (V1)	;V1=800482D4: # resource entries
ANDI	T6,A0,00FF
SW	A0,0000 (SP)
SLTI	AT,V1,0002
BNE	AT,R0,7F0BD22C	;return if only two entries
OR	V0,T6,R0	;V0=bank->byte
SLL	T7,V1,0x2
ADDU	T7,T7,V1
LUI	T8,8009
ADDIU	T8,T8,88B0
SLL	T7,T7,0x2
LUI	A1,8009
ADDIU	A1,A1,88C4	;A1=800888C4: res.data[1]
ADDU	A2,T7,T8	;A2=800888B0+offset: res.data.final
ADDIU	V1,R0,0004
//7F0BD1FC:	remove bank numbers for entries in bank A0 or above
LBU	T9,0010 (A1)	;T9=res.data+10: res.data.bank
SLT	AT,V0,T9
BNE	AT,R0,7F0BD210	;branch if bank# < resource's bank
NOP
SB	R0,0010 (A1)	;0->res.data.bank
//7F0BD210:	if bank 4, eliminate the temp.remaining value
BNEL	V1,V0,7F0BD220	;skip if not bank 4
ADDIU	A1,A1,0014
SW	R0,0004 (A1)	;0->res.data.temp.remaining
//7F0BD21C:	iterate entire list
ADDIU	A1,A1,0014	;A1+=14: next entry
SLTU	AT,A1,A2
BNEL	AT,R0,7F0BD200	;continue for entire list
LBU	T9,0010 (A1)
//7F0BD22C:	return
JR	RA
NOP

7F0BD234	F1D64	remove resource bank values for banks 5 and 6; redirect to 7F0BD1BC
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	7F0BD1BC	;remove resource bank values matching or above bank A0
ADDIU	A0,R0,0005	;A0= bank 5
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7F0BD254	F1D84	V0=index# of resource named A0
	accepts: A0=p->name
	Iterates names in resource table searching for a match.
	If not found, searches Indy for file and if found appends to res.tbl while space permits.
ADDIU	SP,SP,FFC0
SW	S2,001C (SP)
LUI	S2,8005
ADDIU	S2,S2,82D4
LW	V0,0000 (S2)	;V0=800482D4: # resource entries
SW	S3,0020 (SP)
SW	S1,0018 (SP)
SLTI	AT,V0,0002
OR	S3,A0,R0	;S3=A0: p->name
SW	RA,0024 (SP)
SW	S0,0014 (SP)
BNE	AT,R0,7F0BD2CC	;branch if only one entry (aegh...)
ADDIU	S1,R0,0001	;S1=1	init.count
LUI	S0,8004
ADDIU	S0,S0,6060	;S0=80046060: resource table entry 1
//7F0BD290:	test name against table
LW	A1,0004 (S0)	;A1=res.tbl+4: p->name
BEQL	A1,R0,7F0BD2B8	;continue if name NULL
LW	V0,0000 (S2)
JAL	7000A84C	;V0= strcmp(A0,A1)
OR	A0,S3,R0	;A0=S3: p->name
BNEL	V0,R0,7F0BD2B8	;continue if names differ
LW	V0,0000 (S2)
BEQ	R0,R0,7F0BD368
OR	V0,S1,R0	;V0=S1: index
//7F0BD2B4:	loop through entire table
LW	V0,0000 (S2)	;V0=800482D4: # resource entries
ADDIU	S1,S1,0001	;S1+=1	count+=1
ADDIU	S0,S0,000C	;S0+=C	next entry
SLT	AT,S1,V0
BNEL	AT,R0,7F0BD294	;repeat for each entry
LW	A1,0004 (S0)
//7F0BD2CC:	test if entries remain beyond table
SLTI	AT,V0,02E0
BNE	AT,R0,7F0BD2E0	;return 0 if 2E0 entries or more (last possible entry)
OR	S1,V0,R0	;S1=V0: #entries
BEQ	R0,R0,7F0BD368
OR	V0,R0,R0
//7F0BD2E0:	test for and grab filesize for resource
ADDIU	T6,V0,0001
SW	T6,0000 (S2)	;800482D4+=1: #entries+=1
OR	A0,S3,R0	;A0=S3: p->name
JAL	7F0D0098	;V0=TRUE if resource named A0 found on Indy and filesize set to A1
ADDIU	A1,SP,0034	;A1=SP+34: @filesize
BNE	V0,R0,7F0BD304	;return 0 if resource not found
SLL	T7,S1,0x2
BEQ	R0,R0,7F0BD368
OR	V0,R0,R0
//7F0BD304:	generate and initialize a resource entry
SUBU	T7,T7,S1
LUI	T8,8004
ADDIU	T8,T8,6054
SLL	T7,T7,0x2	;T7= index*C: offset in res.tbl
SLL	T9,S1,0x2
ADDU	S0,T7,T8	;S0=80046054+offset: res.tbl[index]
ADDU	T9,T9,S1
LUI	T0,8009
ADDIU	T0,T0,88B0
SLL	T9,T9,0x2	;T9= index*14: offset in res.data
SW	S1,0000 (S0)	;res.tbl+0 = index
SW	S3,0004 (S0)	;res.tbl+4 = p->name
ADDU	V1,T9,T0	;V1=800888B0+offset: res.data[index]
SB	R0,0011 (V1)	;res.data+11 = 0
SW	R0,0008 (S0)	;res.tbl+8 = NULL hardware address
SW	R0,0000 (V1)	;res.data+0= 0: init.filesize
SW	R0,0004 (V1)	;res.data+4= 0: init.temp.buffer.remaining
LW	T1,0034 (SP)	;T1= filesize
SW	R0,000C (V1)	;res.data+C= 0: init.buffer.remaining
SB	R0,0010 (V1)	;res.data+10 = 0
ADDIU	T2,T1,000F
ORI	T3,T2,000F
XORI	T4,T3,000F	;T4=filesize to QW boundry
SW	T4,0008 (V1)	;res.data+8= T4: temp.filesize
OR	V0,S1,R0	;V0=S1: index
//7F0BD368:	return
LW	RA,0024 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
JR	RA
ADDIU	SP,SP,0040

7F0BD384	F1DB4	removed: A0->SP+0
	accepts: A0=resource index
JR	RA
SW	A0,0000 (SP)	;A0->SP+0

7F0BD38C	F1DBC	removed: calls 7F0BD384 for each resource entry index
ADDIU	SP,SP,FFE0
SW	S1,0018 (SP)
LUI	S1,8005
ADDIU	S1,S1,82D4
LW	T6,0000 (S1)	;T6=800482D4: # resource entries
SW	S0,0014 (SP)
SW	RA,001C (SP)
SLTI	AT,T6,0002
BNE	AT,R0,7F0BD3D0	;return if only two entries
ADDIU	S0,R0,0001	;S0=1	init.count
//7F0BD3B4:	iterate through each resource entry
JAL	7F0BD384	;removed; A0->SP+0
OR	A0,S0,R0	;A0=S0: resource entry count
LW	T7,0000 (S1)	;T7=800482D4: # resource entries
ADDIU	S0,S0,0001	;S0+=1
SLT	AT,S0,T7
BNE	AT,R0,7F0BD3B4	;loop for remaining indicies
NOP
//7F0BD3D0:	return
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0020

7F0BD3E4	F1E14	removed: V0=# resource entries
LUI	V1,8005
LW	V1,82D4 (V1)	;V1=800482D4: # resource entries
ADDIU	V0,R0,0001	;V0=1	init.count
SLTI	AT,V1,0002
BNE	AT,R0,7F0BD408	;return if only two entries
//7F0BD3F8:	stupidly uses loop to return V0=# resource entries
ADDIU	V0,V0,0001	;count+=1
SLT	AT,V0,V1
BNEL	AT,R0,7F0BD3FC	;loop while count < resource entries
ADDIU	V0,V0,0001
//7F0BD408:	return
JR	RA
NOP

7F0BD410	F1E40	removed: V0= p->res.data.final
LUI	V1,8005
LW	V1,82D4 (V1)	;V1=800482D4: # resource entries
LUI	V0,8009
ADDIU	V0,V0,88C4	;V0=800888C4: res.data[1]
SLTI	AT,V1,0002
BNE	AT,R0,7F0BD450	;return if only two entries
SLL	T6,V1,0x2
ADDU	T6,T6,V1
LUI	T7,8009
ADDIU	T7,T7,88B0
SLL	T6,T6,0x2
ADDU	A0,T6,T7	;A0=800888B0+offset: res.data.final
//7F0BD440:	stupidly uses loop to return V0=res.data.final
ADDIU	V0,V0,0014	;V0+=14	next entry
SLTU	AT,V0,A0
BNEL	AT,R0,7F0BD444	;loop if not equal or greater
ADDIU	V0,V0,0014
//7F0BD450:	return
JR	RA
NOP
