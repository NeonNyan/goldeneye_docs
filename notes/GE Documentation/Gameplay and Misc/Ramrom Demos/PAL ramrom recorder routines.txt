70004FB0	 5BB0	reads A2 bytes from hardware A1 to rdram A0
70005010	 5C10	
7000503C	 5C3C	hardware read request
70005064	 5C64	align and read A2 bytes of data from hardware A1 to A0
700050C8	 5CC8	copy A2 bytes from A0 to hardware address A1
70005128	 5D28	handles hardware write request
70005150	 5D50	
70013080	13C80	memcpy(A0,A1,A2)

7F0BF130	F1B20	finalize ramrom on hardware
7F0BF1E0	F1BD0	save ramrom debug feature
7F0BF280	F1C70	load ramrom debug feature
7F0BF2DC	F1CCC	packet recorder
7F0BFAC0	F24B0	detect if recording currently loading stage or replaying ramrom file
7F0BFC3C	F262C	record next movie to slot A0 (0-3)
7F0BFC54	F2644	stop recording ramrom
7F0BFC9C	F268C	replay ramrom file at hardware address A0
7F0BFD28	F2718	replay ramrom debug feature
7F0BFD48	F2738	set to camera mode A if not already set
7F0BFD7C	F276C	stop recording or replaying demos

recording occurs when 80041108 = 1
recording ceases when 80041104 = 0

[+_+]	

7F0BF130	F1B20	finalize ramrom on hardware
ADDIU	SP,SP,FFB8
OR	A0,SP,R0
ADDIU	A0,A0,002F
ORI	T6,A0,000F
SW	RA,0014 (SP)
XORI	A0,T6,000F	;A0=SP+20, to nearest quadword
SB	R0,0000 (A0)
SB	R0,0001 (A0)	;A0+0=0000
LUI	A1,8007
LW	A1,39D4 (A1)	;A1=800739D4: ramrom hardware addy
JAL	70005128	;write A2 bytes from rdram A0 to hardware A1
ADDIU	A2,R0,0010	;A2=size
//7F0BF160:	read in what's already written to devtool
LUI	V0,8007
ADDIU	V0,V0,39D4
LW	T8,0000 (V0)	;T8=800739D4: ramrom hardware addy
LUI	A0,8007
ADDIU	A0,A0,3650	;A0=80073650: ramrom target address
ADDIU	T9,T8,0004
SW	T9,0000 (V0)	;T9=T8+4: next word...
LUI	A1,00F0		;A1=0xF00000: hardware address
JAL	70005064	;align and read A2 bytes of data from hardware A1 to A0
ADDIU	A2,R0,00F0	;A2=0xF0: size
//7F0BF188:	set total size and time to ramrom and write to devtool
LUI	V1,8004
ADDIU	V1,V1,10E8
SW	V0,0000 (V1)	;V0->800410E8: return address->demo block
LUI	T0,8004
LUI	T1,8004
LW	T1,0FF4 (T1)	;T1=80040FF4: 1 if not paused
LW	T0,0FFC (T0)	;T0=80040FFC: ms time in stage
LUI	T4,8007
LUI	A1,00F0		;A1=0xF00000: devtool hardware address
SUBU	T2,T0,T1	;T2=timer-clock
SW	T2,007C (V0)	;T2->demo+7C: total time
LW	T4,39D4 (T4)	;T4=800739D4: ramrom hardware addy
LW	T6,0000 (V1)	;T6=V1+0: p->ramrom
ADDIU	A2,R0,00F0	;A2=0xF0: size
SUBU	T5,T4,A1	;T5=current address - base address: size
SW	T5,0080 (T6)	;size->ramrom+80: actual size of ramrom data
JAL	70005128	;copy A2 bytes from rdram A0 to hardware A1
LW	A0,0000 (V1)	;A0=p->ramrom
//7F0BF1D0:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0048
JR	RA
NOP

7F0BF1E0	F1BD0	save ramrom
ADDIU	SP,SP,FED0
SW	S2,001C (SP)
SW	S3,0020 (SP)
SW	S1,0018 (SP)
SW	S0,0014 (SP)
LUI	S2,8005
SW	RA,0024 (SP)
ADDIU	S2,S2,0310	;S2=80050310:	"replay/demo.%d"
ADDIU	S0,R0,0001	;S0=1
ADDIU	S1,SP,002C	;S1=SP+2C: p->buffer for string
ADDIU	S3,SP,0028	;S3=SP+28: p->instance
//7F0BF20C:	search for string instance
OR	A0,S1,R0	;A0=S1: p->string
OR	A1,S2,R0	;A1=S2: "replay/demo.%d"
JAL	7000A0F4	;sprintf(A0,A1,A2,A3)
OR	A2,S0,R0	;A2=S0: count
OR	A0,S1,R0	;A0=S1: p->string
JAL	7F0CF5B8	;returns V0=p->instance, I think...
OR	A1,S3,R0	;A1=S3: p->instance
BEQ	V0,R0,7F0BF238	;branch if a new entry
NOP
BEQ	R0,R0,7F0BF20C	;loop until a new entry found
ADDIU	S0,S0,0001	;S0++
//7F0BF238:	on hit, make final resource name
LUI	A1,8005
ADDIU	A1,A1,0320	;A1=80050320:	"replay/demo.%d"
OR	A0,S1,R0	;A0=S1: p->string
JAL	7000A0F4	;sprintf(A0,A1,A2,A3)
OR	A2,S0,R0	;A2=S0: count
LUI	T6,8004
LW	T6,10E8 (T6)	;T6=800410E8: p->demo block
OR	A0,S1,R0	;A0=S1: "name"
LUI	A1,00F0		;A1=0xF00000: devtool hardware address
JAL	7F0CF57C	;save resource A0 of size A2 at A1
LW	A2,0080 (T6)	;A2= demo block+80: size
//7F0BF264:	return
LW	RA,0024 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
JR	RA
ADDIU	SP,SP,0130

7F0BF280	F1C70	load ramrom
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
LUI	A0,8005
ADDIU	A0,A0,0330	;A0=80050330:	"replay/demo.load"
JAL	7F0CF5B8	;request data A0 from PC
ADDIU	A1,SP,001C	;A1=SP+1C: p->instance
BEQ	V0,R0,7F0BF2CC	;return if no target returned
//7F0BF29C:	copy data to memory
LUI	A0,8005
ADDIU	A0,A0,0330	;A0=80050330:	"replay/demo.load"
LUI	A1,00F0		;A1=0xF00000: devtool hardware address
JAL	7F0CF53C	;load requested resource A0 from PC to A1
LW	A2,001C (SP)	;A2=SP+1C: p->instance
LUI	A0,8007
ADDIU	A0,A0,3650	;A0=80073650: ramrom target address
LUI	A1,00F0		;A1=0xF00000: devtool hardware address
JAL	70005064	;align and read A2 bytes of data from hardware A1 to A0
ADDIU	A2,R0,00E8	;A2=size
LUI	AT,8004
SW	V0,10E8 (AT)	;V0->800410E8: p->demo block
//7F0BF2CC:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7F0BFAC0	F24B0	detect if recording currently loading stage or replaying ramrom file
	accepts: A0=stage#. A1=difficulty
LUI	T6,8004
LW	T6,1108 (T6)	;T6=80041108: 1- record controller input
ADDIU	SP,SP,FFE0
SW	RA,001C (SP)
BEQ	T6,R0,7F0BFB9C	;branch if not recording
SW	S0,0018 (SP)
//7F0BFAD8:	record demo
LUI	T7,8007
ADDIU	T7,T7,3650	;T7=80073650
ADDIU	T8,T7,000F
LUI	S0,8004
ORI	T9,T8,000F
ADDIU	S0,S0,10E8	;S0=800410E8
XORI	T0,T9,000F	;T0=80073650	(to nearest quadword, which it already is)
SW	T0,0000 (S0)	;80073650->800410E8: p->demo block
LUI	AT,8007
SW	R0,39D8 (AT)	;0->800739D8: 
LW	T1,0000 (S0)	;T1=800410E8: p->demo block
SW	A0,0010 (T1)	;A0->demo+10: stage#
LW	T2,0000 (S0)	;T2=800410E8: p->demo block
JAL	7000A718	;V0= #controllers plugged in
SW	A1,0014 (T2)	;A1->demo+14: difficulty
LW	T3,0000 (S0)	;T3=800410E8: p->demo block
LUI	T4,8007
SW	V0,0018 (T3)	;V0->demo+18: #controllers (size of commands)
LW	T5,0000 (S0)	;T5=800410E8: p->demo block
LW	T4,39D0 (T4)	;T4=800739D0: record slot#
SW	T4,0088 (T5)	;record slot# -> demo+88: set #
LW	A0,0000 (S0)	;A0=800410E8: p->demo block
JAL	7F01D470	;copy current folder's eeprom to @A0
ADDIU	A0,A0,001C	;A0+=1C: p->demo eeprom
JAL	7F0BF828	;copy in-game registers to A0?
LW	A0,0000 (S0)	;A0=800410E8: p->demo block
ADDIU	V0,R0,0001
LUI	AT,8004
SW	V0,1100 (AT)	;1->80041100: 1- if a ramrom tool running
LUI	AT,8004
LUI	A0,7F0C
SW	V0,1104 (AT)	;1->80041104: 1- recorder pulling from devtool?
JAL	7000A930	;set recorder handler function
ADDIU	A0,A0,F2DC	;A0=7F0BF2DC: packet recorder function
LUI	V0,8007
ADDIU	V0,V0,39D4
LUI	A1,00F0
SW	A1,0000 (V0)	;0xF00000 -> 800739D4: ramrom hardware addy
LW	A0,0000 (S0)	;A0=800410E8: p->demo block
JAL	70005128	;copy A2 bytes from A0 to hardware address A1
ADDIU	A2,R0,00F0	;A2=0xF0: size
LUI	V0,8007
ADDIU	V0,V0,39D4
LW	T7,0000 (V0)	;T7=800739D4: hardware address
LUI	AT,8004
ADDIU	T8,T7,00E8	;T8=hardware+E8: next file offset
SW	T8,0000 (V0)	;T8=update hardware address
BEQ	R0,R0,7F0BFC28
SW	R0,1108 (AT)	;0->80041108: reset "record stage" flag
//7F0BFB9C:	test if playing back recorded demo...
LUI	T9,8004
LW	T9,10FC (T9)	;T9=800410FC: 1- run demo
BEQ	T9,R0,7F0BFC28	;branch if normal stage
//7F0BFBA8:	run demo
LUI	S0,8004
LUI	AT,8007
ADDIU	S0,S0,10E8
SW	R0,39D8 (AT)	;0->800739D8: 
LW	T0,0000 (S0)	;T0=800410E8: p->demo block
JAL	7F01D3F0	;A0->difficulty
LW	A0,0014 (T0)	;A0=demo+14: difficulty
LW	T1,0000 (S0)	;T1=800410E8: p->demo block
JAL	7F01D440	;A0->stage, set solo, get p->briefing
LW	A0,0010 (T1)	;A0=demo+10: stage#
LW	A0,0000 (S0)	;A0=800410E8: p->demo block
JAL	7F01D498	;load eeprom @A0 to temporary buffer
ADDIU	A0,A0,001C	;A0+=1C: p->embedded save file
LUI	A0,8007
JAL	7F0BF828	;copy in-game registers to A0
ADDIU	A0,A0,3760	;A0=80073760: 
JAL	7F0BF974	;copy ramrom registers from ramrom file A0
LW	A0,0000 (S0)	;A0=800410E8: p->demo block
ADDIU	V0,R0,0001
LUI	AT,8004
SW	V0,10F4 (AT)	;1->800410F4: TRUE if demo running
LUI	AT,8004
SW	V0,10F8 (AT)	;1->800410F8: TRUE if demo from hardware?
LW	T2,0000 (S0)	;T2=800410E8: p->demo block
LUI	A0,7F0C
ADDIU	A0,A0,F500	;A0=7F0BF500: ramrom replay handler
JAL	7000A91C	;set playback handler and command size
LW	A1,0018 (T2)	;A1=demo+18: #controllers (size of commands)
JAL	7000B67C	;set controller input index to set A0
ADDIU	A0,R0,0001	;A0= set 1
LUI	AT,8004
SW	R0,10FC (AT)	;0->800410FC: reset run demo flag
//7F0BFC28:	return
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7F0BFD28	F2718	replay ramrom
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	7F0BFC9C	;replay ramrom file at hardware address A0
LUI	A0,00F0
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP
