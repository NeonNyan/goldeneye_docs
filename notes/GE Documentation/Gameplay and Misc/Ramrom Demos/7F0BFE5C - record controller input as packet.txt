7F0BFE5C	F498C	record controller input as packet
	accepts: A0=p->controller input index, A1=index+1E4, A2=index+1E0
ADDIU	SP,SP,FFE0
LUI	T6,8005
LUI	T7,8009
LW	T6,8468 (T6)	;T6=80048468: p->demo block
ADDIU	T7,T7,C468	;T7=8008C468
ADDIU	T8,T7,000F
SW	RA,001C (SP)
SW	S1,0018 (SP)
SW	S0,0014 (SP)
ORI	T9,T8,000F
LUI	T0,8005
LUI	T4,8005
XORI	T5,T9,000F	;T5=8008C470
LW	T1,0018 (T6)	;T1=demo+18: #controllers (command size)
ADDIU	T4,T4,846C	;T4=8004846C
ADDIU	T0,T0,8470	;T0=80048470
ADDIU	T6,T5,0004	;T6=8008C474
OR	S0,A2,R0	;S0=A2: index+1E0
OR	S1,A0,R0	;S1=A0: p->controller index
OR	T2,R0,R0	;T2=0
OR	A3,R0,R0	;A3=0
SW	T5,0000 (T4)	;8008C470->8004846C: demo block buffer address
SW	T6,0000 (T0)	;8008C474->80048470: p->code heading
BEQ	A1,A2,7F0BFFDC	;branch if A1=A2
OR	V0,T5,R0
ADDIU	T3,R0,0014
ADDIU	T7,A1,0001	;T7=A1+1
DIV	T7,T3
MFHI	A2		;A2=(A1+1) % 0x14: 
OR	A0,R0,R0	;A0=0
BNE	T3,R0,7F0BFEE0	;BREAK if division by zero
NOP
BREAK	00001C00
//7F0BFEE0:	catch sign error
ADDIU	AT,R0,FFFF
BNE	T3,AT,7F0BFEF8	;branch if T3 wasn't -1
LUI	AT,8000
BNE	T7,AT,7F0BFEF8	;branch if T7 wasn't negative or a pointer
NOP
BREAK	00001800
//7F0BFEF8:	loop for each command?
BLEZ	T1,7F0BFF90	;branch if stupid controller count or no commands
NOP
MULTU	T2,T1
SLL	T9,A2,0x2
SLL	T5,T9,0x2
SUBU	T5,T5,T9
SLL	T5,T5,0x1	;T5=A2*0x18: 
ADDU	V1,S1,T5	;V1=S1+offset: 
MFLO	A1		;A1=controllers * count
SLL	T8,A1,0x2
OR	A1,T8,R0	;A1*=4: controllers * count * 4: offset to next command
//7F0BFF24:
LW	T6,0000 (T0)	;T6=T0+0: code heading
LB	T9,0002 (V1)	;T9=
SLL	T8,A0,0x2
ADDU	T7,A1,T6
ADDU	V0,T7,T8
SB	T9,0000 (V0)
LB	T5,0003 (V1)
ADDIU	A0,A0,0001
ADDIU	V1,V1,0006
SB	T5,0001 (V0)
LHU	T7,FFFA (V1)
LBU	T6,0001 (V0)
LBU	T5,0000 (V0)
SB	T7,0002 (V0)
LHU	T8,FFFA (V1)
ADDU	T7,T5,T6
SRA	T9,T8,0x8
LBU	T8,0002 (V0)
SB	T9,0003 (V0)
LBU	T5,0003 (V0)
ADDU	T9,T7,T8
ADDU	T6,T9,T5
ANDI	T7,T6,00FF
ADDU	A3,A3,T7
ANDI	T8,A3,00FF
BNE	A0,T1,7F0BFF24
OR	A3,T8,R0
//7F0BFF90:
BNE	A2,S0,7F0BFFA0
ADDIU	T2,T2,0001	;T2++	command count++
BEQ	R0,R0,7F0BFFDC	;stop looping and eventually return
LW	V0,0000 (T4)	;V0=T4+0: demo block buffer address
//7F0BFFA0:
ADDIU	T9,A2,0001
DIV	T9,T3
MFHI	A2
OR	A0,R0,R0
BNE	T3,R0,7F0BFFBC	;BREAK if division by zero
NOP
BREAK	00001C00
//7F0BFFBC:	catch negatives (kinda)
ADDIU	AT,R0,FFFF
BNE	T3,AT,7F0BFFD4	;branch if divisor = -1
LUI	AT,8000
BNE	T9,AT,7F0BFFD4	;branch if dividend not negative
NOP
BREAK	00001800
//7F0BFFD4:	loop unconditionally
BEQ	R0,R0,7F0BFEF8
NOP
//7F0BFFDC:	finish up by setting command header
SB	T2,0001 (V0)	;T2->demo buffer+1: #commands
LUI	T5,8005
LW	T5,8498 (T5)	;T5=80048498: TRUE runs game clock?
LW	T6,0000 (T4)	;T6=p->demo buffer
LUI	T9,8002
LUI	S1,8009
SB	T5,0000 (T6)	;T5->demo buffer+0: clock?
LW	T5,0000 (T4)	;T5=p->demo buffer
LW	T9,4464 (T9)	;T9=80024464: 
ADDIU	S1,S1,C5F4	;S1=8008C5F4: hardware ramrom address
SB	T9,0002 (T5)	;80024464->demo buffer+2
LW	V0,0000 (T4)	;V0=p->demo buffer
LBU	T6,0000 (V0)	;T6=demo buffer+0
LBU	T8,0001 (V0)	;T8=demo buffer+1
LBU	T7,0002 (V0)	;T7=demo buffer+2
ADDU	T9,T6,T8
ADDU	T6,T9,T7	;T6=sum of first three bytes in buffer
SLL	T9,T1,0x2	;T9=controller count * 4
MULTU	T9,T2
ADDU	T8,A3,T6	;T8=sum plus sum of commands
SB	T8,0003 (V0)	;sum->demo buffer+3
LW	A1,0000 (S1)	;A1=hardware ramrom address
LW	A0,0000 (T4)	;A0=p->demo buffer
MFLO	S0		;S0=controllers * #commands * 4: size of data
ADDIU	S0,S0,0004	;S0+=4: size+4 (for header)
ADDIU	A2,S0,000F
ORI	T7,A2,000F
JAL	70005D08	;write A2 bytes to hardware A1 from rdram A0
XORI	A2,T7,000F	;A2=size->nearest quadword
LW	T6,0000 (S1)	;T6=hardware addy
ADDIU	T8,S0,0001
LW	RA,001C (SP)
ORI	T9,T8,0001
XORI	T7,T9,0001	;T7=size to nearest short
LUI	AT,8009
LW	S0,0014 (SP)
LW	S1,0018 (SP)
ADDU	T5,T6,T7	;T5=hardware+ short aligned size
SW	T5,C5F4 (AT)	;new hardware addy->8008C5F4
JR	RA
ADDIU	SP,SP,0020
