7F01CAE0:	51610	decrypt red screen images
	accepts: A0=p->microcode, A1=bytes per row, A2=rows, A3=p->target, SP+10=p->address to save base offset value
	note: all images, from the player's perspective, are rotated left 90 deg.
ADDIU	SP,SP,FFE8
SW	S3,0014 (SP)
SW	S2,0010 (SP)
SW	S1,000C (SP)
SW	S0,0008 (SP)
SW	A1,001C (SP)	;SP+1C=A1: width [50]
SW	A2,0020 (SP)	;SP+20=A2: height [60]
LBU	V0,0000 (A0)	;V0=first byte of microcode [8002BB30]
LW	T7,0028 (SP)	;T7=SP+10 from caller: [803B3687]
OR	S0,A3,R0	;S0=[800FC540]
ANDI	S1,A2,00FF	;S1=A2: #rows
ANDI	T1,A1,00FF	;T1=A1: width (#bytes per row)
ADDIU	A0,A0,0001	;A0++	next byte
ADDIU	S2,R0,00FF	;S2=FF: 
ADDIU	S3,R0,00FF	;S3=FF: 
SB	V0,0000 (T7)	;first byte -> [803B3687]: last byte of a TLB pointer? [7F089200]
LBU	A1,0000 (A0)	;A1=value
//7F01CB24:	determine command type
ADDIU	A0,A0,0001	;A0++: next byte
ANDI	A2,S3,00FF	;A2=S3: FF
BNE	S2,A1,7F01CBDC	;branch if A1 != FF
ANDI	T8,A1,001F	;T8=A1 & 0x1F: first 5 bits
//7F01CB34:	ALTERNATE command
LBU	V1,0000 (A0)	;V1=next value
OR	A3,R0,R0	;A3=0
ADDIU	A0,A0,0001	;A0++: next byte
BEQ	S2,V1,7F01CB9C	;branch if value = FF
OR	A1,V1,R0	;A1=V1: this value
//7F01CB48:	loop byte copy
ADDU	A3,A3,A1	;A3+=A1: A3+=value.  From above, this is A1
ADDIU	V1,V1,FFFF	;V1--:	A1--
ANDI	T8,A3,00FF	;T8=A3 -> 1 byte
ANDI	T9,V1,00FF	;T9=V1 -> 1 byte
SLT	T0,R0,A1	;T0=TRUE if 0 < value
OR	A3,T8,R0	;A3 -> 1 byte
BEQ	T0,R0,7F01CB84	;branch if count above 0
OR	V1,T9,R0	;V1 -> 1 byte
//7F01CB68:	second value > 0
SLT	T0,R0,V1	;T0=TRUE if 0 < count
ADDIU	V1,V1,FFFF	;V1--
ANDI	T6,V1,00FF
OR	V1,T6,R0	;V1 -> 1 byte
SB	A2,0000 (S0)	;A2->S0: A2-> [800FC540]+offset
BNEZ	T0,7F01CB68	;loop if count > 0
ADDIU	S0,S0,0001	;S0++
//7F01CB84:	second value <= 0
LBU	V1,0000 (A0)	;V1=value
XORI	T7,A2,00FF	;T7=A2^FF: invert bits	FF<->00
ANDI	A2,T7,00FF	;A2=T7
ADDIU	A0,A0,0001	;A0++: next byte
BNE	S2,V1,7F01CB48	;branch if value !=FF
OR	A1,V1,R0	;A1=value
//7F01CB9C:	second value FF as well
SLT	T0,A3,T1	;T0=A3 < T1: copied bytes < #per row
ADDIU	A3,A3,0001	;A3++
ANDI	T9,A3,00FF
BEQ	T0,R0,7F01CBCC	;branch if copied larger than in row
OR	A3,T9,R0	;A3 -> 1 byte
//7F01CBB0:	loop
SLT	T0,A3,T1	;T0=TRUE when copied region smaller than size
ADDIU	A3,A3,0001	;A3++
ANDI	T6,A3,00FF
OR	A3,T6,R0	;A3 -> 1 byte
SB	A2,0000 (S0)	;A2->S0: fill until correct size
BNEZ	T0,7F01CBB0	;loop until copied region matches size
ADDIU	S0,S0,0001	;S0++
//7F01CBCC:	copied bytes < #per row
ADDIU	S1,S1,FFFF	;S1++: rows-1
ANDI	T7,S1,00FF
BEQ	R0,R0,7F01CC70
OR	S1,T7,R0	;S1 -> 1 byte
//7F01CBDC:	value != 0
//copies a series of rows which must be #FFs, rest zeroes
ADDU	A3,V0,T8	;A3=first value + 5bits from second
SRA	V1,A1,0x5	;V1=last 3 bits
ANDI	T9,A3,00FF	;T9=A3 -> 1 byte
ADDIU	V1,V1,0001	;V1++
ANDI	T6,V1,00FF	;T6=V1	academic, since can't be over 8
SUBU	A2,T1,T9	;A2=seg.size-(base+value:5)
SUBU	S1,S1,T6	;S1-=(value:3+1) #rows
ANDI	T8,A2,00FF	;T8=A2 -> 1 byte
ANDI	T7,S1,00FF
OR	V1,T6,R0	;V1=T6: rows
OR	S1,T7,R0	;S1 -> 1 byte
SLT	T4,R0,T8	;T4=TRUE if 0 < seg.size-size
ADDIU	T5,T8,FFFF	;T5=seg.size-size--
SLT	T2,R0,T9	;T2=TRUE if 0 < base+size
ADDIU	T3,T9,FFFF	;T3=base+size--
//7F01CC18:	handle FF's in line
BEQ	T2,R0,7F01CC3C	;branch if no data
ANDI	A2,T3,00FF	;A2=base+size-- -> 1 byte
//7F01CC20:	copy base+value:5 FF's to output
SLT	T0,R0,A2	;T0=TRUE if 0 < base+size--
ADDIU	A2,A2,FFFF	;A2--
ANDI	T9,A2,00FF
OR	A2,T9,R0	;A2 -> 1 byte
SB	S3,0000 (S0)	;FF->output
BNEZ	T0,7F01CC20	;loop while more data
ADDIU	S0,S0,0001	;S0++
//7F01CC3C:	handle remaining zeroes in line
BEQ	T4,R0,7F01CC60	;branch if nothing to copy
ANDI	A2,T5,00FF	;A2=seg.size-size-- -> 1 byte
//7F01CC44:	copy row-value:5 zeroes to output
SLT	T0,R0,A2	;T0=TRUE if 0 < seg.size-size
ADDIU	A2,A2,FFFF	;A2--
ANDI	T6,A2,00FF
OR	A2,T6,R0	;A2 -> 1 byte
SB	R0,0000 (S0)	; 0->output
BNEZ	T0,7F01CC44	;loop for remainder of line
ADDIU	S0,S0,0001	;S0++
//7F01CC60:
ADDIU	V1,V1,FFFF	;V1--: rows-1
ANDI	T7,V1,00FF
BGTZ	T7,7F01CC18	;loop for each row
OR	V1,T7,R0	;V1 -> 1 byte
BGTZL	S1,7F01CB24	;branch while more lines needed
LBU	A1,0000 (A0)
//7F01CC78:	return
LW	S0,0008 (SP)
LW	S1,000C (SP)
LW	S2,0010 (SP)
LW	S3,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
OR	V0,A0,R0	;p->end of table, or last thingy read
