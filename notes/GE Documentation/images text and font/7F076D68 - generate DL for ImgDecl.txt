7F076D68		append image to display list A0 using image declaration A1
	accepts: A0=@display list, A1=p->image declaration, A2=???, A3=bowtie, SP+10=uls & ult
ADDIU	SP,SP,FE90
SW	RA,0034 (SP)
SW	S7,0030 (SP)
SW	S6,002C (SP)
SW	S5,0028 (SP)
SW	S4,0024 (SP)
SW	S3,0020 (SP)
SW	S2,001C (SP)
SW	S1,0018 (SP)
SW	S0,0014 (SP)
SW	A0,0170 (SP)
SW	A2,0178 (SP)
//7F076D98:
LW	T7,0000 (A0)	;T7=DL
OR	S0,A3,R0	;S0=A3: ???
OR	S7,A1,R0	;S7=A1: p->img.decl.
BNEZ	A1,7F076E3C	;branch if valid pointer
SW	T7,016C (SP)	;SP+16C= DL
OR	A1,A2,R0	;A1=A2: ???
ADDIU	A2,R0,0001	;A2=1
JAL	7F076998
ADDIU	A0,SP,016C	;A0=p->DL
SLTI	AT,S0,0002	;TRUE if [A3] < 2
BNEZ	AT,7F076DF8	;branch if TRUE
LW	T7,016C (SP)
//7F076DC8:	set texture w/ bowtie
LW	V0,016C (SP)	;V0=DL
ANDI	T6,S0,00FF	;T6=(byte) S0
SLL	T7,T6,0x10	;T7=S0 * 0x10000	bowtie value
LUI	AT,BB00		;AT=BB000000:	rsp_uc05_texture (U)
ADDIU	T9,V0,0008
SW	T9,016C (SP)	;SP+16C: p->DL
OR	T8,T7,AT
ORI	T9,T8,0001	;T9=BBxx0001	on
ADDIU	T6,R0,FFFF	;T6=FFFFFFFF	s=-1, t=-1 (ignore)
SW	T6,0004 (V0)	;T6->DL: rsp_uc05_texture (L)
BEQ	R0,R0,7F076E14
SW	T9,0000 (V0)	;T9->DL: rsp_uc05_texture (U)
//7F076DF8:	set texture w/o bowtie
ADDIU	T8,T7,0008
SW	T8,016C (SP)	;SP+16C: p->DL
LUI	T9,BB00
ORI	T9,T9,0001	;T9=BB000001	on
ADDIU	T6,R0,FFFF	;T6=FFFFFFFF	s=-1, t=-1 (ignore)
SW	T6,0004 (T7)	;T6->DL: rsp_uc05_texture (L)
SW	T9,0000 (T7)	;T9->DL: rsp_uc05_texture (U)
//7F076E14:	set combiner and finish up
LW	T7,016C (SP)	;T7=p->DL
LUI	T9,FCFF
LUI	T6,FFFE
ADDIU	T8,T7,0008
SW	T8,016C (SP)	;SP+16C: p->DL
ORI	T6,T6,793C	;T6=FFFE793C: b0=K5, b1=K5, Aa1=0, Ac1=0, d0=shade, Ab0=0, Ad0=shade, d1=shade, Ab1=0, Ad1=shade
ORI	T9,T9,FFFF	;T9=FCFFFFFF: a0=K5, c0=0, Aa0=0, Ac0=0, a1=combined alpha, c1=0	
SW	T9,0000 (T7)	;T9->DL: rdp_setcombine (U)
BEQ	R0,R0,7F077B80
SW	T6,0004 (T7)	;T6->DL: rdp_setcombine (L)
//7F076E3C:	valid pointer
LW	V0,0000 (S7)	;V0=p->image or ID
LBU	S5,0004 (S7)	;S5=width
LBU	S4,0005 (S7)	;S4=height
SLTIU	AT,V0,0FFF	;TRUE if img ID
BEQ	AT,R0,7F076E60	;branch if not an image ID
OR	A0,S7,R0	;A0=p->img.decl.
JAL	7F0CBC18	;handles ID image declarations
OR	A1,R0,R0	;A1=0: buffer=8008C720
LW	V0,0000 (S7)	;V0=p->image or ID
//7F076E60:	get p->facemapper entry or table it
LUI	AT,8000
OR	V1,V0,AT	;V1=offset | 80000000: p->image
LHU	A0,FFF8 (V1)	;A0=image ID
JAL	7F0CBB0C	;V0=offset to matching image list slot, or NULL if no match found
OR	A1,R0,R0	;A1=0: NULL (table at 8008C720)
LBU	V1,0006 (S7)	;V1=tile/level #
OR	S6,V0,R0	;S6=V0: p->facemapper entry
BNEL	V1,R0,7F07741C	;branch if not level 0
SW	R0,00D0 (SP)
BEQL	V0,R0,7F076EBC	;branch if no entry found
LBU	S1,0007 (S7)
LW	S2,0008 (V0)	;S2=3rd word
LW	T6,000C (V0)	;T6=4th word
SLL	S1,S2,0x1B
SRL	T7,S1,0x1D
ANDI	S1,T7,00FF	;S1=3rd word 0x1C flags: format
SRL	T7,T6,0x1E	;T7=4th word 0xFC000000 flags: indexed colour sample type
SLL	T8,T7,0xE	;T8=flags * 4000: at most, FC000
ANDI	T9,S2,0003	;T9=3rd word 0x3 flags: size
OR	S2,T9,R0	;S2= size
BEQ	R0,R0,7F076EC0
SW	T8,0144 (SP)	;SP+144= 4th word FC- * 4000: indexed table type
//7F076EB8:	no facemapper means draw from declaration
LBU	S1,0007 (S7)	;S1=img.format	(rgba, yuv, ci, ia, i)
LBU	S2,0008 (S7)	;S2=S7+8: size	(#bits per pixel)
//7F076EC0:	branch for each specific bitdepth
BEQ	S2,R0,7F076F90	;branch if =0: 4bit
OR	V0,S2,R0	;V0=S2: size
ADDIU	AT,R0,0001
BEQ	V0,AT,7F076F5C	;branch if =1: 8bit
ADDIU	T7,R0,0002
ADDIU	AT,R0,0002
BEQ	V0,AT,7F076F28	;branch if =2: 16bit
ADDIU	T8,R0,0002
ADDIU	AT,R0,0003
BEQ	V0,AT,7F076EF4	;branch if =3: 32bit
ADDIU	T9,R0,0003
BEQ	R0,R0,7F076FC4	;branch if =0 or invalid:	4bit
LW	S3,013C (SP)
//7F076EF4:	size 3: 32bit
SW	T9,0140 (SP)	;SP+140=3: bitdepth=32bit
OR	A0,S5,R0	;A0=S5: width
OR	A1,S4,R0	;A1=S4: height
JAL	7F076928
ADDIU	A2,R0,0001	;A2=1: 
ADDIU	S3,V0,FFFF
JAL	7F076774
OR	A0,S5,R0	;A0=S5: width
ADDIU	T6,S5,0003
SRA	T7,T6,0x2
SW	V0,0138 (SP)
BEQ	R0,R0,7F076FC4
SW	T7,0134 (SP)	;SP+134= width to nearest word
//7F076F28:	size 2: 16bit
SW	T8,0140 (SP)	;SP+140=2: bitdepth=16bit
OR	A0,S5,R0	;A0=S5: width
OR	A1,S4,R0	;A1=S4: height
JAL	7F0768B8
ADDIU	A2,R0,0001	;A2=1: 
ADDIU	S3,V0,FFFF
JAL	7F076710
OR	A0,S5,R0	;A0=S5: width
ADDIU	T9,S5,0003
SRA	T6,T9,0x2
SW	V0,0138 (SP)
BEQ	R0,R0,7F076FC4
SW	T6,0134 (SP)	;SP+134= width to nearest word
//7F076F5C:	size 1: 8bit
SW	T7,0140 (SP)	;SP+140=2
OR	A0,S5,R0	;A0=S5: width
OR	A1,S4,R0	;A1=S4: height
JAL	7F076848	;V0=(ll) width/2 * height
ADDIU	A2,R0,0001	;A2=1: 
ADDIU	S3,V0,FFFF	;S3=V0-1: 
JAL	7F0766AC	;V0=ceil(0x4000 /width)
OR	A0,S5,R0	;A0=S5: width
ADDIU	T8,S5,0007
SRA	T9,T8,0x3	;T9=width+7 / 8
SW	V0,0138 (SP)	;SP+138= ceil(0x4000/width)
BEQ	R0,R0,7F076FC4
SW	T9,0134 (SP)	;SP+134= width to nearest doubleword
//7F076F90:	size 0: 4bit
ADDIU	T6,R0,0002
SW	T6,0140 (SP)	;SP+140=2: bitdepth=16bit
OR	A0,S5,R0	;A0=S5: width
OR	A1,S4,R0	;A1=S4: height
JAL	7F0767D8
ADDIU	A2,R0,0001	;A2=1: 
ADDIU	S3,V0,FFFF
JAL	7F076648	;V0=ceil(0x8000 /width A0)
OR	A0,S5,R0	;A0=S5: width
ADDIU	T7,S5,000F
SRA	T8,T7,0x4
SW	V0,0138 (SP)
SW	T8,0134 (SP)	;SP+134= width to nearest quadword
//7F076FC4:
ADDIU	A0,SP,016C	;A0=SP+16C: DL
LW	A1,0178 (SP)	;A1=[A2]
ADDIU	A2,R0,0001	;A2=1
JAL	7F076998
OR	A3,S0,R0	;A3=S0: bowtie?
SLTI	AT,S0,0002	;TRUE if [A3] < 2
BNEZ	AT,7F077014	;branch if true
OR	T1,S1,R0	;T1=S1: image format
//7F076FE4:	set texture w/ bowtie
LW	V0,016C (SP)
ANDI	T7,S0,00FF
SLL	T8,T7,0x10	;T8=S0 * 0x10000	bowtie value
LUI	AT,BB00
ADDIU	T6,V0,0008
SW	T6,016C (SP)
OR	T9,T8,AT
ORI	T6,T9,0001	;T6=BB000001	on
ADDIU	T7,R0,FFFF	;T7=FFFFFFFF	s=-1, t=-1 (ignore)
SW	T7,0004 (V0)	;T7->DL: rsp_uc05_texture (L)
BEQ	R0,R0,7F077034
SW	T6,0000 (V0)	;T6->DL: rsp_uc05_texture (U)
//7F077014:	set texture w/o bowtie
LW	T8,016C (SP)
LUI	T6,BB00
ORI	T6,T6,0001	;T6=BB000001	on
ADDIU	T9,T8,0008
SW	T9,016C (SP)
ADDIU	T7,R0,FFFF	;T7=FFFFFFFF	s=-1, t=-1 (ignore)
SW	T7,0004 (T8)	;T7->DL: rsp_uc05_texture (L)
SW	T6,0000 (T8)	;T6->DL: rsp_uc05_texture (U)
//7F077034:
LW	T8,016C (SP)	;T8=p->DL
LUI	T6,BA00
ORI	T6,T6,1001	;T6=BA001001: shift 16 bits, 1 bit data
ADDIU	T9,T8,0008
SW	T9,016C (SP)	;SP+16C: p->DL
SW	R0,0004 (T8)	;R0->DL: rsp_uc05_setothermode_h (L)	texture lod=tile
BEQ	S1,R0,7F077080	;branch if img.format = 0	[rgba]
SW	T6,0000 (T8)	;T6->DL: rsp_uc05_setothermode_h (U)
ADDIU	AT,R0,0002
BEQ	T1,AT,7F0770EC	;branch if img.format = 2	[ci]
LW	T7,0144 (SP)	;T7=first 6 bits of 4th word * 4000
ADDIU	AT,R0,0003
BEQ	T1,AT,7F0770A8	;branch if img.format = 3	[ia]
LW	T7,016C (SP)
ADDIU	AT,R0,0004
BEQ	T1,AT,7F0770CC	;branch if img.format = 4	[i]
LW	T7,016C (SP)
BEQ	R0,R0,7F077154	;img.format is 1 or invalid	[yuv]
LW	V0,016C (SP)
//7F077080:	img.format = 0	[rgba]
LW	T7,016C (SP)
LUI	T9,FC12
LUI	T6,FF33
ADDIU	T8,T7,0008
SW	T8,016C (SP)
ORI	T6,T6,FFFF	;T6=FF33FFFF: b0=K5, b1=K5, Aa1=texel1, Ac1=shade, d0=combined alpha, Ab0=0, Ad0=0, d1=combined alpha, Ab1=0, Ad1=0
ORI	T9,T9,1824	;T9=FC121824: a0=texel0, c0=enviroment, Aa0=texel0, Ac0=shade, a1=texel0, c1=shade
SW	T9,0000 (T7)	;T9->DL: rdp_setcombine (U)
BEQ	R0,R0,7F077150
SW	T6,0004 (T7)	;T6->DL: rdp_setcombine (L)
//7F0770A8:	img.format = 3	[i]ntensity-[a]lpha
ADDIU	T8,T7,0008
LUI	T9,FC12
LUI	T6,FF33
ORI	T6,T6,FFFF	;T6=FF33FFFF: b0=K5, b1=K5, Aa1=texel1, Ac1=shade, d0=combined alpha, Ab0=0, Ad0=0, d1=combined alpha, Ab1=0, Ad1=0
ORI	T9,T9,1824	;T9=FC121824: a0=texel0, c0=enviroment, Aa0=texel0, Ac0=shade, a1=texel0, c1=shade
SW	T8,016C (SP)
SW	T6,0004 (T7)	;T6->DL: rdp_setcombine (L)
BEQ	R0,R0,7F077150
SW	T9,0000 (T7)	;T9->DL: rdp_setcombine (U)
//7F0770CC:	img.format = 4	[i]ntensity
ADDIU	T8,T7,0008
LUI	T9,FC12
ORI	T9,T9,7E24	;T9=FC127E24: a0=texel0, c0=enviroment, Aa0=0, Ac0=0, a1=texel0, c1=shade
SW	T8,016C (SP)
ADDIU	T6,R0,F9FC	;T6=FFFFF9FC: b0=K5, b1=K5, Aa1=0, Ac1=0, d0=combined alpha, Ab0=0, Ad0=shade, d1=combined alpha, Ab1=0, Ad1=shade
SW	T6,0004 (T7)	;T6->DL: rdp_setcombine (L)
BEQ	R0,R0,7F077150
SW	T9,0000 (T7)	;T9->DL: rdp_setcombine (U)
//7F0770EC:	img.format = 2	[c]olour [i]ndex
ORI	AT,R0,8000
BEQ	T7,AT,7F07710C	;branch if T7=0x8000
LW	T8,016C (SP)
ORI	AT,R0,C000
BEQ	T7,AT,7F077130	;branch if T7=0xC000
LW	T8,016C (SP)
BEQ	R0,R0,7F077154	;branch otherwise, skipping the combiner
LW	V0,016C (SP)
//7F07710C:	smaller index...
ADDIU	T9,T8,0008
LUI	T6,FC12
LUI	T7,FF33
ORI	T7,T7,FFFF	;T7=FF33FFFF: b0=K5, b1=K5, Aa1=texel1, Ac1=shade, d0=combined alpha, Ab0=0, Ad0=0, d1=combined alpha, Ab1=0, Ad1=0
ORI	T6,T6,1824	;T6=FC121824: a0=texel0, c0=enviroment, Aa0=texel0, Ac0=shade, a1=texel0, c1=shade
SW	T9,016C (SP)
SW	T7,0004 (T8)	;T7->DL: rdp_setcombine (L)
BEQ	R0,R0,7F077150
SW	T6,0000 (T8)	;T6->DL: rdp_setcombine (U)
//7F077130:	larger index...
ADDIU	T9,T8,0008
SW	T9,016C (SP)
LUI	T6,FC12
LUI	T7,FF33
ORI	T7,T7,FFFF	;T7=FF33FFFF: b0=K5, b1=K5, Aa1=texel1, Ac1=shade, d0=combined alpha, Ab0=0, Ad0=0, d1=combined alpha, Ab1=0, Ad1=0
ORI	T6,T6,1824	;T6=FC121824: a0=texel0, c0=enviroment, Aa0=texel0, Ac0=shade, a1=texel0, c1=shade
SW	T6,0000 (T8)	;T6->DL: rdp_setcombine (U)
SW	T7,0004 (T8)	;T7->DL: rdp_setcombine (L)
//7F077150:	all formats settextureimage
LW	V0,016C (SP)	;V0=p->SP
LW	A0,0140 (SP)	;A0=SP+140: bitdepth saved from before, 3 for rgba, 2 for all else
ANDI	V1,S1,0007	;V1= img.format & 7
SLL	T6,V1,0x15	;T6= V1*0x200000: format
ADDIU	T9,V0,0008
SW	T9,016C (SP)	;SP+16C: p->DL
LUI	AT,FD00
ANDI	T7,A0,0003	;T7= bitdepth & 3
SLL	A0,T7,0x13	;A0= T7 * 0x80000: bitdepth
OR	T9,T6,AT
OR	V1,T6,R0	;V1=format<<15
OR	T6,T9,A0
SW	T6,0000 (V0)	;T6->DL: rdp_settextureimage (U)
LW	T7,0000 (S7)	;T7=S7+0: offset to image
LUI	AT,F500
OR	T3,V1,AT	;T3=settile | format
SW	T7,0004 (V0)	;T7->DL: rdp_settextureimage (L): p->image
//7F077194:	settile
LW	A1,016C (SP)	;A1=p->DL
OR	T6,T3,A0	;T6=settile | format | bitdepth
LUI	T2,0700
ADDIU	T9,A1,0008
SW	T9,016C (SP)	;SP+16C= p->DL
SW	T6,0000 (A1)	;T6->DL: rdp_settile (U)
LBU	T7,000A (S7)	;T7=S7+A: clamp/mirror t
LUI	T5,E600
SLTI	AT,S3,07FF
ANDI	T8,T7,0003
LBU	T7,0009 (S7)	;T7=S7+9: clamp/mirror s
SLL	T9,T8,0x12	;T9= mirror t * 0x40000
OR	T6,T9,T2	;T6=tile=7 | clmap/mirror t
ANDI	T8,T7,0003
SLL	T9,T8,0x8	;T9= mirror s * 0x100
OR	T7,T6,T9	;T7=tile=7 | clmap/mirror t | clamp/mirror s
SW	T7,0004 (A1)	;T7->DL: rdp_settile (L)
//7F0771D8:	loadblock
LW	T8,016C (SP)	;T8= p->DLs
ADDIU	A3,R0,07FF
ADDIU	T6,T8,0008
SW	T6,016C (SP)
SW	R0,0004 (T8)	;DL+4= loadsync.l
SW	T5,0000 (T8)	;DL+0= loadsync.u
LW	T0,016C (SP)	;SP+16C= p->DL
LUI	T8,F300
ADDIU	T7,T0,0008
SW	T7,016C (SP)	;SP+16C= p->DL
BEQ	AT,R0,7F077210	;branch if need to go with default value
SW	T8,0000 (T0)	;T8->DL: rdp_loadblock.u: uls=0, ult=0
BEQ	R0,R0,7F077210
OR	A3,S3,R0	;A3=S3
//7F077210:
LW	T8,0138 (SP)	;T8=
ANDI	T6,A3,0FFF
SLL	T9,T6,0xC	;T9=width<<C: lrs
OR	T7,T9,T2	;T7=tile=7 | lrs
ANDI	T6,T8,0FFF
OR	T9,T7,T6	;T9=tile=7 | lrs | lrt
SW	T9,0004 (T0)	;DL+4= loadblock.l: tile=7, lrs, lrt
//7F07722C:	pipesync
LW	T8,016C (SP)	;T8=p->DL
LUI	T4,E700
ADDIU	AT,R0,0002	;AT=2: ci
ADDIU	T7,T8,0008
SW	T7,016C (SP)	;SP+16C= p->DL
SW	R0,0004 (T8)	;DL+4= pipesync.l
BNE	T1,AT,7F077328	;branch if no index for image
SW	T4,0000 (T8)	;DL+0= pipesync.u
//7F07724C:	handle indexed images
LBU	T6,000A (S6)	;T6=facemapper+A: #colours in palette
ADDIU	T9,R0,03FF
ADDIU	A3,S3,0001	;A3=S3+1: 
SUBU	V0,T9,T6	;V0=3FF-#colours: 
SLTU	AT,V0,A3	;TRUE if 3FF-? < ceil(4000 / width)
BEQ	AT,R0,7F077270
LW	T8,016C (SP)	;T8=p->DL
BEQ	R0,R0,7F077274
OR	T0,V0,R0	;T0=V0: go with size
//7F077270:	settile (index)
OR	T0,R0,R0	;default is 0
ADDIU	T7,T8,0008
SW	T7,016C (SP)	;SP+16C= p->DL
LUI	T9,F500
ORI	T9,T9,0100	;T9=F5000100: settile | rgba | 4 bit | tmem=100
SW	T9,0000 (T8)	;DL+0= settile.u: rgba, 4bit, tmem=100
SW	T2,0004 (T8)	;DL+4= settile.l: tile=7
//7F07728C:	loadsync
LW	T6,016C (SP)	;T6=p->DL
SUBU	A2,A3,T0	;A2=sizey thing - tabley-thing
ANDI	A1,T0,03FF
ADDIU	T8,T6,0008
SW	T8,016C (SP)	;SP+16C= p->DL
SW	R0,0004 (T6)	;DL+4= loadsync.l
SW	T5,0000 (T6)	;DL+0= loadsync.u
//7F0772A8:	loadtexturelookuptable
LW	A0,016C (SP)	;A0=p->DL
ANDI	T8,A2,03FF
SLL	T7,T8,0xE	;T7= memorychunk? * 4 <<C: x0
ADDIU	T9,A0,0008
SW	T9,016C (SP)	;SP+16C= p->DL
SLL	T6,A1,0x2	;T6= 0 or 3FF-#entries *4: y0
LUI	AT,F000
OR	T9,T7,AT	;T9= loadtlut | x0
OR	A1,T6,R0	;A1=T6: y0->y1, since no palettes are offset
OR	T6,T9,T6	;T6= loadtlut | x0 | y0
SW	T6,0000 (A0)	;DL+0= loadtlut.u: 
LBU	T8,000A (S6)	;T8=facemapper+A: #colours in palette
ADDU	T7,T8,A2	;T7=#colours+x0
ANDI	T9,T7,03FF
SLL	T6,T9,0xE	;T6=#colours+x0 * 4<<C: x1
OR	T8,T6,T2	;T8= tile=7 | x1
OR	T7,T8,A1	;T7= tile=7 | x1 | y1
SW	T7,0004 (A0)	;DL+4= loadtlut.l: tile=7, x1, y1
//7F0772F0:	pipesync
LW	T9,016C (SP)	;T9=p->DL
ADDIU	T6,T9,0008
SW	T6,016C (SP)	;SP+16C= p->DL
SW	R0,0004 (T9)	;DL+4= pipesync.l
SW	T4,0000 (T9)	;DL+0= pipesync.u
//7F077304:	indexed images setothermode_h
LW	T8,016C (SP)	;T8=p->DL
LUI	T9,BA00
ORI	T9,T9,0E02	;T9= setothermode_h | shift=E | bits=2
ADDIU	T7,T8,0008
SW	T7,016C (SP)	;SP+16C= p->DL
SW	T9,0000 (T8)	;DL+0= setothermode_h.u: texture look-up table
LW	T6,0144 (SP)	;T6=SP+144: index table type
BEQ	R0,R0,7F077344
SW	T6,0004 (T8)	;DL+4= setothermode_h.l: tlut type
//7F077328:	non-indexed images setothermode_h
LW	T8,016C (SP)	;T8=p->DL
LUI	T9,BA00
ORI	T9,T9,0E02	;T9= setothermode_h | shift=E | bits=2
ADDIU	T7,T8,0008
SW	T7,016C (SP)	;SP+16C= p->DL
SW	R0,0004 (T8)	;DL+4= setothermode_h.l: tlut: none
SW	T9,0000 (T8)	;DL+0= setothermode_h.u: texture look-up table
//7F077344:	settile
LW	S0,016C (SP)	;S0=p->DL
ANDI	T7,S2,0003	;T7=size
SLL	T9,T7,0x13	;T9=size * 80000: 
ADDIU	T8,S0,0008
SW	T8,016C (SP)	;SP+16C= p->DL
LW	T8,0134 (SP)	;T8=width ext.
OR	T6,T3,T9	;T6=settile | format | size
OR	A0,S4,R0	;A0=S4: height
ANDI	T7,T8,01FF
SLL	T9,T7,0x9	;T9=width * 200: line
OR	T8,T6,T9	;T8=settile | format | size | line
JAL	7F0765A0	;V0= A0 to the 2nd root of 2
SW	T8,0000 (S0)	;DL+0= settile.u: format, size, line
OR	A0,S5,R0	;A0=width
JAL	7F0765A0	;V0= A0 to the 2nd root of 2
SW	V0,0058 (SP)	;SP+58= width to nearest power of 2
LBU	T9,000A (S7)	;T9=S7+A: clamp/mirror t
ANDI	T7,V0,000F	;T7= height to the 2nd root of 2
LW	A3,0058 (SP)	;A3=SP+58: width to the 2nd root of 2
SLL	T6,T7,0x4	;T6=height->mask s
ANDI	T8,T9,0003
SLL	T7,T8,0x12	;T7=clamp/mirror t <<12
OR	T9,T6,T7	;T9=clamp/mirror t | mask s
ANDI	T8,A3,000F
SLL	T6,T8,0xE	;T6=width->mask t
LBU	T8,0009 (S7)	;T8=S7+9: clamp/mirror s
OR	T7,T9,T6	;T7=clamp/mirror t | mask t | mask s
LW	A1,0180 (SP)	;A1=caller(SP+10): 
ANDI	T9,T8,0003
SLL	T6,T9,0x8	;T6= clamp/mirror s << 8
OR	T8,T7,T6	;T8=clamp/mirror t | mask t | clamp/mirror s | mask s
SW	T8,0004 (S0)	;DL+4= settile.l: tile=0, clamp/mirror t, mask t, clamp/mirror s, mask s
//7F0773C4:	settilesize
LW	V1,016C (SP)	;V1=p->DL
ANDI	A0,A1,0FFF	;A0=uls and ult
SLL	T6,A0,0xC	;T6=uls<<C
LUI	AT,F200
ADDIU	T7,V1,0008
SW	T7,016C (SP)	;SP+16C= p->DL
OR	T8,T6,AT	;T8= settilesize | uls
OR	T9,T8,A0	;T9= settilesize | uls | ult
ADDIU	T7,S5,FFFF	;T7=S5-1: width-1
SLL	T6,T7,0x2	;T6=4(width-1): width.off
ADDU	T8,T6,A1	;T8= s + width.off: lrs and lrt
SW	T9,0000 (V1)	;DL+0= settilesize.u: 
ANDI	T9,T8,0FFF	;T9=lrs
ADDIU	T6,S4,FFFF	;T6=height-1
SLL	T8,T6,0x2	;T8=4(height-1): height.off
SLL	T7,T9,0xC	;T7=lrs<<C
ADDU	T9,T8,A1	;T9= t + height.off: lrt
ANDI	T6,T9,0FFF
OR	T8,T7,T6	;T8=lrs | lrt
BEQ	R0,R0,7F077B80
SW	T8,0004 (V1)	;DL+4= settilesize.l: lrs, lrt
//7F077418:	if thingy wasn't 0...
SW	R0,00D0 (SP)	;SP+D0= 0
BEQ	V0,R0,7F07744C	;branch if NULL facemapper entry
SW	V1,00CC (SP)	;SP+CC: thingy...
LW	V1,0008 (V0)
ANDI	T6,V1,0003
SB	T6,00CA (SP)
LW	S2,000C (V0)
SLL	S1,V1,0x1B
SRL	T9,S1,0x1D
SRL	T8,S2,0x1E
ANDI	S1,T9,00FF
BEQ	R0,R0,7F07745C
SLL	S2,T8,0xE
//7F07744C:
LBU	T7,0008 (S7)	;T7=img.decl.+8: bitdepth
LBU	S1,0007 (S7)	;S1=img.decl.+7: format
LW	S2,00C4 (SP)	;S2=SP+C4: tlut setting
SB	T7,00CA (SP)	;SP+CA=bitdepth
BEQ	V0,R0,7F07748C	;branch if NULL facemapper entry
LBU	S3,00CA (SP)	;S3=bitdepth
LW	T6,000C (V0)	;T6=facemapper+C: 4th word
OR	A0,S6,R0	;A0=S6: facemapper entry
ADDIU	A1,SP,00C0	;A1=SP+C0: @bitdepth
SLL	T9,T6,0x2	;entry*4: 40000000 flag
BGEZ	T9,7F07748C	;branch if not set
NOP
JAL	7F0CC9D4	;returns bitdepth and #pixels in image entry at A0
ADDIU	A2,SP,00BC	;A2=SP+BC: @pixels
BEQ	R0,R0,7F077538
ADDIU	A0,SP,016C	;A0=@DL pointer
//7F07748C:
BEQ	S3,R0,7F077518	;branch if bitdepth=0: 4bit
ADDIU	T8,R0,0002
ADDIU	AT,R0,0001
BEQ	S3,AT,7F0774F8	;branch if bitdepth=1: 8bit
ADDIU	T7,R0,0002
ADDIU	AT,R0,0002
BEQ	S3,AT,7F0774D8	;branch if bitdepth=2: 16bit
ADDIU	T8,R0,0002
ADDIU	AT,R0,0003
BNE	S3,AT,7F077534	;skip if not bitdepth=3: 32bit
ADDIU	T7,R0,0003
//7F0774B8:	32bit
SW	T7,00C0 (SP)	;SP+C0=3
OR	A0,S5,R0	;A0=width
OR	A1,S4,R0	;A1=height
JAL	7F076928
LW	A2,00CC (SP)	;A2=SP+CC: thingy that triggered this path
ADDIU	T6,V0,FFFF	;T6=#pixels-1
BEQ	R0,R0,7F077534
SW	T6,00BC (SP)	;SP+BC= #pixels
//7F0774D8:	16bit
SW	T8,00C0 (SP)	;SP+C0=2
OR	A0,S5,R0	;A0=width
OR	A1,S4,R0	;A1=height
JAL	7F0768B8
LW	A2,00CC (SP)	;A2=SP+CC: thingy that triggered this path
ADDIU	T9,V0,FFFF
BEQ	R0,R0,7F077534
SW	T9,00BC (SP)	;SP+BC= #pixels
//7F0774F8:	8bit
SW	T7,00C0 (SP)	;SP+C0=2
OR	A0,S5,R0	;A0=width
OR	A1,S4,R0	;A1=height
JAL	7F076848
LW	A2,00CC (SP)	;A2=SP+CC: thingy that triggered this path
ADDIU	T6,V0,FFFF
BEQ	R0,R0,7F077534
SW	T6,00BC (SP)	;SP+BC= #pixels
//7F077518:	4bit
SW	T8,00C0 (SP)	;SP+C0=2
OR	A0,S5,R0	;A0=width
OR	A1,S4,R0	;A1=height
JAL	7F0767D8
LW	A2,00CC (SP)	;A2=SP+CC: thingy that triggered this path
ADDIU	T9,V0,FFFF
SW	T9,00BC (SP)	;SP+BC= #pixels
//7F077534:
ADDIU	A0,SP,016C	;A0=@DL pointer
LW	A1,0178 (SP)	;A1=[A2]
ADDIU	A2,R0,0002	;A2=2
JAL	7F076998
OR	A3,S0,R0	;A3=S0: bowtie?
SLTI	AT,S0,0002
BNEZ	AT,7F077598
OR	T0,S1,R0
//7F077554:	texture: bowtie
LW	V0,016C (SP)	;V0=p->DL
ANDI	T8,S0,00FF
SLL	T9,T8,0x10	;T9= bowtie * 10000: bowtie
ADDIU	T6,V0,0008
SW	T6,016C (SP)	;SP+16C= p->DL
LW	T6,00CC (SP)	;T6=SP+CC: thingy that triggered this path
LUI	AT,BB00
OR	T7,T9,AT	;T7= texture | bowtie
ADDIU	T8,T6,FFFF	;T8=level-1
ANDI	T9,T8,0007
SLL	T6,T9,0xB	;T6= T9 * 800: level
OR	T8,T7,T6	;T8= texture | bowtie | level
ORI	T9,T8,0001	;T9= texture | bowtie | level | on
ADDIU	T7,R0,FFFF
SW	T7,0004 (V0)	;DL+4= texture.l: s=-1, t=-1
BEQ	R0,R0,7F0775CC
SW	T9,0000 (V0)	;DL+0= texture.u: bowtie, level, on
//7F077598:	texture: no bowtie
LW	V0,016C (SP)	;V0=p->DL
LW	T9,00CC (SP)	;T9=SP+CC: thingy that triggered this path
LUI	AT,BB00
ADDIU	T8,V0,0008
ADDIU	T7,T9,FFFF	;T7=level-1
ANDI	T6,T7,0007
SW	T8,016C (SP)	;SP+16C= p->DL
SLL	T8,T6,0xB	;T8= T6 * 800: level
OR	T9,T8,AT	;T9= texture | level
ORI	T7,T9,0001	;T7= texture | level | on
ADDIU	T6,R0,FFFF
SW	T6,0004 (V0)	;DL+4= texture.l: s=-1, t=-1
SW	T7,0000 (V0)	;DL+0= texture.u: level, on
//7F0775CC:
LW	T8,016C (SP)
LUI	T7,BA00
ORI	T7,T7,1001
ADDIU	T9,T8,0008
SW	T9,016C (SP)
LUI	T6,0001
SW	T6,0004 (T8)
BEQ	S1,R0,7F077618
SW	T7,0000 (T8)
ADDIU	AT,R0,0002
BEQ	T0,AT,7F077688
ADDIU	AT,R0,0003
BEQ	T0,AT,7F077640
LW	T8,016C (SP)
ADDIU	AT,R0,0004
BEQ	T0,AT,7F077664
LW	T8,016C (SP)
BEQ	R0,R0,7F0776F0
LW	V0,016C (SP)
//7F077618:
LW	T8,016C (SP)
LUI	T7,FC26
LUI	T6,1F10
ADDIU	T9,T8,0008
SW	T9,016C (SP)
ORI	T6,T6,93FF
ORI	T7,T7,A004
SW	T7,0000 (T8)
BEQ	R0,R0,7F0776EC
SW	T6,0004 (T8)
//7F077640:
ADDIU	T9,T8,0008
LUI	T7,FC26
LUI	T6,1F10
ORI	T6,T6,93FF
ORI	T7,T7,A004
SW	T9,016C (SP)
SW	T6,0004 (T8)
BEQ	R0,R0,7F0776EC
SW	T7,0000 (T8)
//7F077664:
ADDIU	T9,T8,0008
LUI	T7,FC26
LUI	T6,1FFC
ORI	T6,T6,93FC
ORI	T7,T7,A004
SW	T9,016C (SP)
SW	T6,0004 (T8)
BEQ	R0,R0,7F0776EC
SW	T7,0000 (T8)
//7F077688:
ORI	AT,R0,8000
BEQ	S2,AT,7F0776A8	;branch if not rgba16 index
LW	T8,016C (SP)
ORI	AT,R0,C000
BEQ	S2,AT,7F0776CC	;branch if not ia16 index
LW	T8,016C (SP)
BEQ	R0,R0,7F0776F0
LW	V0,016C (SP)
//7F0776A8:
ADDIU	T9,T8,0008
LUI	T7,FC12
LUI	T6,FF33
ORI	T6,T6,FFFF
ORI	T7,T7,1824
SW	T9,016C (SP)
SW	T6,0004 (T8)
BEQ	R0,R0,7F0776EC
SW	T7,0000 (T8)
//7F0776CC:
ADDIU	T9,T8,0008
SW	T9,016C (SP)
LUI	T7,FC12
LUI	T6,FF33
ORI	T6,T6,FFFF
ORI	T7,T7,1824
SW	T7,0000 (T8)
SW	T6,0004 (T8)
//7F0776EC:
LW	V0,016C (SP)
LW	T8,00C0 (SP)
ANDI	V1,S1,0007
SLL	T7,V1,0x15
ADDIU	T9,V0,0008
SW	T9,016C (SP)
LUI	AT,FD00
OR	T6,T7,AT
OR	V1,T7,R0	;V1=T7: format<<15
ANDI	T9,T8,0003
SLL	T7,T9,0x13
OR	T8,T6,T7
SW	T8,0000 (V0)
LW	T9,0000 (S7)
LUI	AT,F500
OR	T1,V1,AT	;T1= settile | format
SW	T9,0004 (V0)
//7F077730:	settile
LW	A0,016C (SP)	;A0=p->DL
LW	T8,00C0 (SP)	;T8= SP+C0: bitdepth.setting
LUI	T2,0700
ADDIU	T7,A0,0008
SW	T7,016C (SP)	;SP+16C= p->DL
ANDI	T9,T8,0003
SLL	T6,T9,0x13
OR	T7,T1,T6	;T7= settile | format | bitdepth
SW	T7,0000 (A0)	;DL+0= settile.u: format, bitdepth
SW	T2,0004 (A0)	;DL+4= settile.l: tile=7
//7F077758:	loadsync
LW	T8,016C (SP)	;T8=p->DL
LUI	T5,E600
ADDIU	A3,R0,07FF	;A3=7FF: default #pixels
ADDIU	T9,T8,0008
SW	T9,016C (SP)	;SP+16C= p->DL
SW	R0,0004 (T8)	;DL+4= loadsync.l
SW	T5,0000 (T8)	;DL+0= loadsync.u
//7F077774:	loadblock
LW	A2,016C (SP)	;A2=p->DL
LUI	T8,F300
ADDIU	T7,A2,0008
SW	T7,016C (SP)	;SP+16C= p->DL
SW	T8,0000 (A2)	;DL+0= loadblock.u: uls=0, ult=0
LW	T9,00BC (SP)	;T9=#pixels
SLTI	AT,T9,07FF
BEQ	AT,R0,7F0777A0	;keep default if lrs too large
NOP
BEQ	R0,R0,7F0777A0
OR	A3,T9,R0	;A3=T9: #pixels
//7F0777A0:
ANDI	T6,A3,0FFF	;T6=#pixels & FFF: lrs
SLL	T7,T6,0xC	;T7=lrs * 1000
OR	T8,T7,T2	;T8= tile=7 | lrs
SW	T8,0004 (A2)	;DL+4= loadblock.l: tile=7, lrs, lrt=0
//7F0777B0:	pipesync
LW	T9,016C (SP)	;T9=p->DL
LUI	T4,E700
ADDIU	AT,R0,0002
ADDIU	T6,T9,0008
SW	T6,016C (SP)	;SP+16C= p->DL
SW	R0,0004 (T9)	;DL+4= pipesync.l
BNE	T0,AT,7F0778AC	;branch if format isn't 2: ci
SW	T4,0000 (T9)	;DL+0= pipesync.u
//7F0777D0:	colour index only...
LW	V1,00BC (SP)	;V1=#pixels
LBU	T7,000A (S6)	;T7=facemapper+A: #colours in palette
ADDIU	T8,R0,03FF	;T8=3FF
ADDIU	A2,V1,0001	;A2=#pixels+1
SUBU	V0,T8,T7	;V0=3FF-#colours
SLTU	AT,V0,A2	;TRUE if value < size
BEQ	AT,R0,7F0777F8
LW	T9,016C (SP)	;T9=p->DL
BEQ	R0,R0,7F0777FC
OR	A3,V0,R0	;A3=smaller value
//7F0777F8:
OR	A3,R0,R0	;A3=0 if colours > size
//7F0777FC:	settile
ADDIU	T6,T9,0008
SW	T6,016C (SP)	;SP+16C= p->DL
LUI	T8,F500
ORI	T8,T8,0100	;T8=settile | tmem=100
SW	T8,0000 (T9)	;DL+0= settile.u: rgba, 4bit, tmem=100
SW	T2,0004 (T9)	;DL+4= settile.l: tile=7
//7F077814:	loadsync
LW	T7,016C (SP)	;T7=p->DL
SUBU	A2,A2,A3	;#pixels-=entry
ANDI	A1,A3,03FF	;A1=A3&3FF: y0
ADDIU	T9,T7,0008
SW	T9,016C (SP)	;SP+16C= p->DL
SW	R0,0004 (T7)	;DL+4= loadsync.l
SW	T5,0000 (T7)	;DL+0= loadsync.u
//7F077830:	loadtlut
LW	A0,016C (SP)	;A0=p->DL
ANDI	T9,A2,03FF
SLL	T6,T9,0xE	;T6= (x0 * 4) <<C: x0
ADDIU	T8,A0,0008
SW	T8,016C (SP)	;SP+16C= p->DL
SLL	T7,A1,0x2	;T7=y0*4
LUI	AT,F000
OR	T8,T6,AT	;T8= loadtlut | x0
OR	A1,T7,R0	;A1=T7: y0
OR	T7,T8,T7	;T7= loadtlut | x0 | y0
SW	T7,0000 (A0)	;DL+0= loadtlut.u: x0, y0
LBU	T9,000A (S6)	;T9=facemapper+A: #colours in palette
ADDU	T6,T9,A2	;T6=pixel offset+#colours
ANDI	T8,T6,03FF
SLL	T7,T8,0xE	;T7=(colours * 4) <<C: count (x1)
OR	T9,T7,T2	;T9= tile=7 | x1
OR	T6,T9,A1	;T6= tile=7 | x1 | y1
SW	T6,0004 (A0)	;DL+4= loadtlut.l: tile=7, x1, y1
//7F077878:	pipesync
LW	T8,016C (SP)	;T8=p->DL
ADDIU	T7,T8,0008
SW	T7,016C (SP)	;SP+16C= p->DL
SW	R0,0004 (T8)	;DL+4= pipesync.l
SW	T4,0000 (T8)	;DL+0= pipesync.u
//7F07788C:	paletted images: setothermode_h
LW	T9,016C (SP)	;T9=p->DL
LUI	T8,BA00
ORI	T8,T8,0E02	;T8= setothermode_h | shift=E | bits=2
ADDIU	T6,T9,0008
SW	T6,016C (SP)	;SP+16C= p->DL
SW	S2,0004 (T9)	;DL+4= setothermode_h.l: tlut type
BEQ	R0,R0,7F0778C8
SW	T8,0000 (T9)	;DL+0= setothermode_h.u: texture look-up table
//7F0778AC:	non-paletted images: setothermode_h
LW	T7,016C (SP)	;T7=p->DL
LUI	T6,BA00
ORI	T6,T6,0E02	;T6= setothermode_h | shift=E | bits=2
ADDIU	T9,T7,0008
SW	T9,016C (SP)	;SP+16C= p->DL
SW	R0,0004 (T7)	;DL+4= setothermode_h.l: tlut: none
SW	T6,0000 (T7)	;DL+0= setothermode_h.u: texture look-up table
//7F0778C8:	settilesize
LW	T8,00CC (SP)	;T8=SP+CC: value that triggered this path
LW	A3,0180 (SP)	;A3=caller(SP+10): uls and ult
OR	S1,R0,R0	;S1=0	count=0
BLEZ	T8,7F077B80	;return if negative (can't be zero, actually)
ANDI	A0,A3,0FFF
LBU	S3,00CA (SP)	;S3=SP+CA: bitdepth
SLL	T7,A0,0xC	;T7= A0 * 1000: uls
LUI	AT,F200
OR	T9,T7,AT	;T9= settilesize | uls
OR	T6,T9,A0	;T6= settilesize | uls | ult
ANDI	T7,S3,0003
SLL	T9,T7,0x13	;T9= bitdepth * 80000
OR	S2,T1,T9	;S2= (settile | format) | bitdepth
SW	T6,0050 (SP)	;SP+50= settilesize | uls | ult
LW	S0,0064 (SP)
//7F077904:
BLEZ	S1,7F077968	;branch if first time or invalid
LW	A3,0180 (SP)	;A3=caller(SP+10): uls and ult
BEQ	S6,R0,7F07794C	;branch if NULL facemapper entry
SLTI	AT,S5,0002	;TRUE if width < 2
LW	T6,000C (S6)	;T6=facemapper+C: 4th word
OR	A0,S6,R0	;A0=facemapper entry
SLL	T7,T6,0x2	;T7=flag 40000000 in word: if set, use width/height for level
BGEZ	T7,7F07794C	;branch if not set
NOP
//7F077928:
JAL	7F0CC714	;corresponding width for level A1
OR	A1,S1,R0	;A1=S1: count
OR	S5,V0,R0	;S5=V0: new width
OR	A0,S6,R0	;A0=S6: facemapper entry
JAL	7F0CC7FC	;corresponding height for level A1
OR	A1,S1,R0	;A1=S1: count
OR	S4,V0,R0	;S4=V0: new height
BEQ	R0,R0,7F077968
LW	A3,0180 (SP)	;A3=caller(SP+10): uls and ult
//7F07794C:	use half height
BNEZ	AT,7F077958	;if width < 2, don't divide by 2
SRA	T9,S5,0x1
OR	S5,T9,R0	;width/=2
SLTI	AT,S4,0002	;TRUE if height < 2
BNEZ	AT,7F077968	;if height < 2, don't divide by 2
SRA	T6,S4,0x1
OR	S4,T6,R0	;height/=2
//7F077968:	compute lrs and lrt
ADDIU	T8,S5,FFFF	;T8=width-1
SLL	T7,T8,0x2	;T7=(width-1)*4
ADDU	T9,T7,A3	;T9=uls + (width-1)*4: lrs
ANDI	T6,T9,0FFF
SLL	T8,T6,0xC	;T8=lrs << C
ADDIU	T7,S4,FFFF	;T7=height-1
SLL	T9,T7,0x2	;T9=(height-1)*4
ADDU	T6,T9,A3	;T6=ult + (height-1)*4: lrt
SW	T8,0054 (SP)	;SP+54= lrs
ANDI	T8,T6,0FFF
//7F077990:	branch for each varying bitdepth
BEQ	S3,R0,7F077A6C	;branch if bitdepth=0: 4bit
SW	T8,004C (SP)	;SP+4C= lrt
ADDIU	AT,R0,0001
BEQ	S3,AT,7F077A38	;branch if bitdepth=1: 8bit
ADDIU	AT,R0,0002
BEQ	S3,AT,7F077A04	;branch if bitdepth=2: 16bit
ADDIU	AT,R0,0003
BEQL	S3,AT,7F0779D4	;branch if bitdepth=3: 32bit
ADDIU	S0,S5,0003
MULTU	S0,S4
ANDI	T7,S0,01FF	;T7=S0 &1FF: line mask
SLL	T9,T7,0x9	;T9=T7<<9: line
OR	V0,S2,T9	;V0=settile | format | bitdepth | line
MFLO	A2		;A2=bowtie(?)*width
BEQ	R0,R0,7F077AA4
LW	V1,016C (SP)	;V1=p->DL
//7F0779D0:	32bit
ADDIU	S0,S5,0003	;S0=width+3
BGEZ	S0,7F0779E4	;branch while isn't negative
SRA	T6,S0,0x2	;T6=width to nearest word
ADDIU	AT,S0,0003
SRA	T6,AT,0x2	;T6=width to nearest word
//7F0779E4:
MULTU	T6,S4
ANDI	T8,T6,01FF
SLL	T7,T8,0x9	;T7=rnd(width)<<9: line
OR	S0,T6,R0	;S0= width to nearest word
OR	V0,S2,T7	;V0=settile | format | bitdepth | line
MFLO	A2		;A2=height * width: tilesize
BEQ	R0,R0,7F077AA4
LW	V1,016C (SP)	;V1=p->DL
//7F077A04:	16bit
ADDIU	S0,S5,0003
BGEZ	S0,7F077A18
SRA	T9,S0,0x2	;T9=width to nearest word
ADDIU	AT,S0,0003
SRA	T9,AT,0x2	;T9=width to nearest word
//7F077A18:
MULTU	T9,S4
ANDI	T6,T9,01FF
SLL	T8,T6,0x9
OR	S0,T9,R0	;S0= width to nearest word
OR	V0,S2,T8	;V0=settile | format | bitdepth | line
MFLO	A2		;A2=height * width: tilesize
BEQ	R0,R0,7F077AA4
LW	V1,016C (SP)	;V1=p->DL
//7F077A38:	8bit
ADDIU	S0,S5,0007
BGEZ	S0,7F077A4C
SRA	T7,S0,0x3	;T7=width to nearest doubleword
ADDIU	AT,S0,0007
SRA	T7,AT,0x3	;T7=width to nearest doubleword
//7F077A4C:
MULTU	T7,S4
ANDI	T9,T7,01FF
SLL	T6,T9,0x9
OR	S0,T7,R0	;S0= width to nearest doubleword
OR	V0,S2,T6	;V0=settile | format | bitdepth | line
MFLO	A2		;A2=height * width: tilesize
BEQ	R0,R0,7F077AA4
LW	V1,016C (SP)	;V1=p->DL
//7F077A6C:	4bit
ADDIU	S0,S5,000F
BGEZ	S0,7F077A80
SRA	T8,S0,0x4	;T7=width to nearest quadword
ADDIU	AT,S0,000F
SRA	T8,AT,0x4	;T7=width to nearest quadword
//7F077A80:
MULTU	T8,S4
ANDI	T7,T8,01FF
SLL	T9,T7,0x9
OR	S0,T8,R0	;S0= width to nearest quadword
OR	V0,S2,T9	;V0=settile | format | bitdepth | line
MFLO	A2		;A2=height * width: tilesize
NOP
NOP
//7F077AA0:	settile
LW	V1,016C (SP)	;V1=p->DL
LW	T7,00D0 (SP)	;T7=SP+D0: tmem
OR	A0,S4,R0	;A0=height
ADDIU	T8,V1,0008
ANDI	T9,T7,01FF	;T9=tmem & 1FF
OR	T6,V0,T9	;T6=settile | format | bitdepth | line | tmem
SW	T8,016C (SP)	;SP+16C= p->DL
SW	T6,0000 (V1)	;DL+0= settile.u: format, bitdepth, line, tmem
SW	A2,003C (SP)	;SP+3C= real tilesize
JAL	7F0765A0	;V0= A0 to the 2nd root of 2
SW	V1,0060 (SP)	;SP+60= p->DL
OR	A0,S5,R0	;A0=width
JAL	7F0765A0	;V0= A0 to the 2nd root of 2
SW	V0,0058 (SP)	;SP+58= nearest placeholder to height
ANDI	V1,S1,0007	;V1=S1&7: count
SLL	T8,V1,0x18	;T8= count * 1000000: tile
ANDI	T7,V0,000F
SLL	T9,T7,0x4	;T9=nearest root to width * 10: mask s
OR	T6,T9,T8	;T6= tile | mask s
OR	V1,T8,R0	;V1=T8: tile
LBU	T8,000A (S7)	;T8=S7+A: clamp/mirror t
LW	A3,0058 (SP)	;A3=SP+58: nearest placeholder to height
ANDI	A0,S1,000F	;A0=count&F: shift s
ANDI	T7,T8,0003
SLL	T9,T7,0x12	;T9=clamp/mirror t * 40000
OR	T8,T6,T9	;T8= tile | clamp/mirror t | mask s
ANDI	T7,A3,000F
SLL	T6,T7,0xE	;T6=nearest root to height * 4000: mask t
OR	T9,T8,T6	;T9= tile | clamp/mirror t | mask t | mask s
LBU	T6,0009 (S7)	;T6=S7+9: clamp/mirror s
SLL	T7,A0,0xA	;T7= count * 400: shift t
OR	T8,T9,T7	;T8= tile | clamp/mirror t | mask t | shift t | mask s
ANDI	T9,T6,0003
SLL	T7,T9,0x8	;T7=clamp/mirror s * 100
OR	T6,T8,T7	;T6= tile | clamp/mirror t | mask t | shift t | clamp/mirror s | mask s
LW	T8,0060 (SP)	;T8=p->DL
LW	A2,003C (SP)	;A2=tilesize (real.width * height)
OR	T9,T6,A0	;T9= tile | clamp/mirror t | mask t | shift t | clamp/mirror s | mask s | shift s
SW	T9,0004 (T8)	;DL+4= settile.l: tile, clamp/mirror t, mask t, shift t, clamp/mirror s, mask s, shift s
//7F077B3C:	settilesize
LW	A1,016C (SP)	;A1=p->DL
LW	T9,0050 (SP)	;T9=settilesize | uls | ult
ADDIU	S1,S1,0001	;S1++	count++
ADDIU	T6,A1,0008
SW	T6,016C (SP)	;SP+16C= p->DL
SW	T9,0000 (A1)	;DL+0= settilesize.u: uls, ult
LW	T8,0054 (SP)	;T8= lrs
LW	T6,004C (SP)	;T6= lrt
OR	T7,V1,T8	;T7= tile | lrs
OR	T9,T7,T6	;T9= tile | lrt | lrs
SW	T9,0004 (A1)	;DL+4= settilesize.l: tile, lrt, lrs
//7F077B68:	increment tile mem. and loop
LW	T8,00D0 (SP)	;T8=SP+D0: tmem
LW	T6,00CC (SP)	;T6=SP+CC: value that triggered this path
ADDU	T7,T8,A2	;T7=tmem + tilesize
BNE	S1,T6,7F077904	;loop until matches level
SW	T7,00D0 (SP)	;tmem+=tilesize
//7F077B7C:	return
SW	S0,0064 (SP)	;SP+64= width.real
LW	T9,016C (SP)	;T9=p->DL
LW	T8,0170 (SP)	;T8=@DL pointer
SW	T9,0000 (T8)	;update address of pointer to display list
LW	RA,0034 (SP)
LW	S7,0030 (SP)
LW	S6,002C (SP)
LW	S5,0028 (SP)
LW	S4,0024 (SP)
LW	S3,0020 (SP)
LW	S2,001C (SP)
LW	S1,0018 (SP)
LW	S0,0014 (SP)
JR	RA
ADDIU	SP,SP,0170

+_+

7F076848	
	accepts: A0=width, A1=height, A2=bitdepth (#times to loop)
BGTZ	A2,7F076854	;if <=0, default to 1
OR	V1,R0,R0	;V1=0
ADDIU	A2,R0,0001	;A2=1: default
BLEZ	A2,7F0768B0	;return if still strange
//7F076858:	correct if negative or something
ADDIU	T6,A0,0007	;T6=width+7
BGEZ	T6,7F07686C	;branch if no correction needed
SRA	T7,T6,0x3	;T7=(width+7)/8
ADDIU	AT,T6,0007
SRA	T7,AT,0x3	;T7=(width+7)/8: nearest dw
//7F07686C:
SLL	T8,T7,0x2	;T8=(width+7)/8 * 4: width->doubleword/2
MULTU	T8,A1
SLTI	AT,A0,0002	;TRUE if width 1 or less
ADDIU	A2,A2,FFFF	;A2--
SRA	T0,A0,0x1	;T0=width/2
SRA	T1,A1,0x1	;T1=height/2
MFLO	T9		;T9=width/2 * height
ADDU	V1,V1,T9	;V1=
BNEL	AT,R0,7F07689C	;branch if stupid width
SLTI	AT,A1,0002
OR	A0,T0,R0	;width/=2
//7F076898:
SLTI	AT,A1,0002	;TRUE if height 1 or less
BNEZ	AT,7F0768A8	;branch if stupid height
NOP
OR	A1,T1,R0	;height/=2
//7F0768A8:	loop for each bitdepth level
BGTZL	A2,7F07685C	;loop for each A2
ADDIU	T6,A0,0007
//7F0768B0:	return
JR	RA
OR	V0,V1,R0	;V0=V1: #pixels


7F0766AC	AB1DC	V0=ceil(0x4000 /width)
	accepts: A0=width
	fries: AT,V1,T1,T6,T7,T8,F0,F4,F6,F8,F10,F16,F18
LUI	AT,4680
MTC1	AT,F4		;F4=16384.0 (0x4000)	[46800000]
ADDIU	T6,A0,0007
BGEZ	T6,7F0766C8	;branch if positive (no correction required)
SRA	T7,T6,0x3	;T7=(width+7)/8
ADDIU	AT,T6,0007
SRA	T7,AT,0x3
//7F0766C8:
SLL	T8,T7,0x3	;T8=(long long) width
MTC1	T8,F6
LUI	AT,8005
CVT.S.W	F8,F6	;F8=(float) width
DIV.S	F0,F4,F8	;F0= 0x4000 / width
LWC1	F4,4F94 (AT)	;F4=80054F94: 0.999999	[3F7FFFEF]
TRUNC.W.S	F10,F0
MFC1	V1,F10		;V1= 0x4000 / width
NOP
MTC1	V1,F16
NOP
CVT.S.W	F18,F16	;F18= 0x4000 / width to nearest whole number
SUB.S	F6,F0,F18	;F6= 0x4000 / width -  0x4000 / width: decimal part
ADD.S	F8,F6,F4	;F8= 0.99999999 + fract.: ceil(0x4000 / width)
TRUNC.W.S	F10,F8
MFC1	T1,F10		;T1=(int) ceil(fractional part)
JR	RA
ADDU	V0,V1,T1	;V0=V1+T1: ceil(0x4000 /width)
