7F0CD078	101BA8	expand C0 display list pseudocommands
	accepts: A0=p->command, A1=p->'facemapper' image entry, A2=??
ADDIU	SP,SP,FF70
SW	S0,0034 (SP)
OR	S0,A0,R0	;S0=A0: command
SW	S1,0038 (SP)
OR	S1,A1,R0	;S1=A1: entry
SW	RA,003C (SP)
SW	A2,0098 (SP)	;SP+98=A2: ???
OR	A0,A1,R0	;A0=A1: entry
ADDIU	A1,SP,008C	;A1=SP+8C: p->bitdepth
JAL	7F0CC9D4	;grabs bitdepth and #pixels from entry at A0
ADDIU	A2,SP,0088	;A2=SP+88: p->#pixels?
//7F0CD0A4:
LW	T6,000C (S1)	;T6=entry+C: 
ADDIU	A0,R0,0007	;A0=7
OR	V0,S0,R0	;V0=S0: p->command
SRL	T7,T6,0x1E	;T7= data & C0000000
BNEZ	T7,7F0CD1F0	;branch if set
LUI	AT,FD00
//7F0CD0BC:	
//replace C0 with rdp_settextureimage
LW	T8,0008 (S1)	;T8=entry+8: 
LW	T7,008C (SP)	;T7=bitdepth
LUI	AT,FD00
SLL	T9,T8,0x1B
SRL	T3,T9,0x1D	;T3=T8 & 38000000: format
ANDI	T4,T3,0007	;T4= format & 7
SLL	T5,T4,0x15	;T5= format * 0x200000
ANDI	T8,T7,0003	;T8=bitdepth & 3
SLL	T9,T8,0x13	;T9=bitdepth * 0x80000
OR	T6,T5,AT	;T6=rdp_settextureimage | format
OR	T3,T6,T9	;T3=rdp_settextureimage | format | depth
OR	V0,S0,R0	;V0=S0: DL
SW	T3,0000 (V0)	;DL+0= rdp_settextureimage.U
LW	T4,0004 (S1)	;T4=entry+4: p->image
ADDIU	S0,S0,0008	;S0+=8: next DL op
OR	A3,R0,R0	;A3=0
SW	T4,0004 (V0)	;DL+4= rdp_settextureimage.L: address
//7F0CD100:
LW	A1,0008 (S1)	;A1=entry+8: 
LW	T8,0098 (SP)	;T8=SP+98: ???
SW	R0,0028 (SP)	;SP+28= 0
SLL	T5,A1,0x1B
SRL	A1,T5,0x1D	;A1=format
SW	R0,0024 (SP)	;SP+24= 0
SW	R0,0020 (SP)	;SP+20= 0
SW	R0,001C (SP)	;SP+1C= 0
SW	R0,0018 (SP)	;SP+18= 0
SW	R0,0014 (SP)	;SP+14= 0
LW	A2,008C (SP)	;A2=depth
JAL	7F0CC574
SW	T8,0010 (SP)	;SP+10= ???
BEQ	V0,R0,7F0CD184	;branch if copying didn't take place
LUI	T2,0700
//7F0CD13C:	add settile command if necessary
LW	T6,0008 (S1)	;A1=entry+8: 
LW	T8,008C (SP)	;T8=depth
LUI	AT,F500
SLL	T9,T6,0x1B
SRL	T3,T9,0x1D
ANDI	T4,T3,0007	;T4=format
SLL	T5,T4,0x15	;T5=format * 0x200000
LW	T4,0098 (SP)	;T4= ???
OR	T7,T5,AT	;T7=rdp_settile | format
ANDI	T6,T8,0003
SLL	T9,T6,0x13	;T9=depth * 0x80000
OR	V0,S0,R0
OR	T3,T7,T9	;T3=rdp_settile | format | depth
ANDI	T5,T4,01FF	;T5= ??? & 1FF: texturememory
OR	T8,T3,T5	;T8=rdp_settile | format | depth | texturememory
SW	T8,0000 (V0)	;DL+0= rdp_settile.U
SW	T2,0004 (V0)	;DL+4= rdp_settile.L: tile=7
ADDIU	S0,S0,0008	;S0+=8: next DL op
//7F0CD184:	loadsync
OR	V0,S0,R0	;V0=S0: DL
ADDIU	S0,S0,0008	;S0+=8: next DL op
LUI	T6,E600
SW	T6,0000 (V0)	;DL+0= rdp_loadsync.U
SW	R0,0004 (V0)	;DL+4= rdp_loadsync.L
//7F0CD198:	loadblock
OR	A1,S0,R0	;A1=S0: DL
LUI	T7,F300
SW	T7,0000 (A1)	;DL+0= rdp_loadblock.U: uls=0, ult=0
LW	V1,0088 (SP)	;V1=#pixels?
ADDIU	S0,S0,0008	;S0+=8: next DL op
LUI	T2,0700
ADDIU	V1,V1,FFFF	;V1--
SLTI	AT,V1,07FF
BEQ	AT,R0,7F0CD1C8
OR	V0,S0,R0	;V0=S0: DL
BEQ	R0,R0,7F0CD1CC
OR	A0,V1,R0	;A0=V1: lrs
//7F0CD1C8:
ADDIU	A0,R0,07FF	;A0=7FF if invalid
//7F0CD1CC:
ANDI	T9,A0,0FFF
SLL	T4,T9,0xC	;T4= lrs * 1000
OR	T3,T4,T2	;T3=07000000 | lrs
SW	T3,0004 (A1)	;DL+4= rdp_loadblock.L: tile=7, lrs
//7F0CD1DC:	pipesync
LUI	T5,E700
SW	T5,0000 (V0)	;DL+0= rdp_pipesync.U
SW	R0,0004 (V0)	;DL+4= rdp_pipesync.L
BEQ	R0,R0,7F0CD418
ADDIU	S0,S0,0008	;S0+=8: next DL op
//7F0CD1F0:	
//replace C0 with rdp_settextureimage
LW	T8,0008 (S1)	;T8=entry+8: 
LW	T5,008C (SP)	;T5=depth
ADDIU	S0,S0,0008	;S0+=8: next DL op
SLL	T6,T8,0x1B
SRL	T7,T6,0x1D
ANDI	T9,T7,0007	;T9=format
SLL	T4,T9,0x15	;T4=format * 0x200000
ANDI	T8,T5,0003
SLL	T6,T8,0x13	;T6=depth * 0x80000
OR	T3,T4,AT
OR	T7,T3,T6	;T7=rdp_settextureimage | format | depth | texturememory
SW	T7,0000 (V0)	;DL+0= rdp_settextureimage.U
LW	T9,0004 (S1)	;T9=entry+4: p->image
ADDIU	A0,R0,0007	;A0=7
OR	A3,R0,R0	;A3=0
SW	T9,0004 (V0)	;DL+4= rdp_settextureimage.L: address
//7F0CD230:
LW	A1,0008 (S1)	;A1=entry+8: 
LW	T8,0098 (SP)	;T8=???
SW	R0,0028 (SP)	;SP+28=0
SLL	T4,A1,0x1B
SRL	A1,T4,0x1D	;A1=format
SW	R0,0024 (SP)	;SP+24=0
SW	R0,0020 (SP)	;SP+20=0
SW	R0,001C (SP)	;SP+1C=0
SW	R0,0018 (SP)	;SP+18=0
SW	R0,0014 (SP)	;SP+14=0
LW	A2,008C (SP)	;A2=SP+8C: depth
JAL	7F0CC574
SW	T8,0010 (SP)	;SP+10=[A2 from caller]
BEQ	V0,R0,7F0CD2B8	;branch if values weren't set
OR	A2,R0,R0	;A2=0
//7F0CD26C:
LW	T3,0008 (S1)	;T3=entry+8
LW	T8,008C (SP)	;T8=depth
LUI	AT,F500
SLL	T6,T3,0x1B
SRL	T7,T6,0x1D
ANDI	T9,T7,0007	;T9=format
SLL	T4,T9,0x15	;T4=format * 0x200000
LW	T9,0098 (SP)	;T9=
OR	T5,T4,AT	;T5=settile | format
ANDI	T3,T8,0003
SLL	T6,T3,0x13	;T6=depth * 0x80000
OR	V0,S0,R0	;V0=S0: DL
OR	T7,T5,T6	;T7=settile | format | depth
ANDI	T4,T9,01FF	;T4=tile memory
LUI	T2,0700
OR	T8,T7,T4	;T8=settile | format | depth |tmem
SW	T8,0000 (V0)	;T8=rdp_settile.U
SW	T2,0004 (V0)	;T2=rdp_settile.L: tile=7
ADDIU	S0,S0,0008	;S0+=8: next DL op
//7F0CD2B8:	loadsync
OR	V0,S0,R0	;V0=S0: DL
ADDIU	S0,S0,0008	;S0+=8: next DL op
LUI	T3,E600
SW	T3,0000 (V0)	;DL+0= rdp_loadsync.U
SW	R0,0004 (V0)	;DL+4= rdp_loadsync.L
//7F0CD2CC:	loadblock
OR	A1,S0,R0	;A1=S0: DL
LUI	T5,F300
SW	T5,0000 (A1)	;DL+0= rdp_loadblock.U: ul=(0,0)
LW	V1,0088 (SP)	;V1=#pixels?
ADDIU	S0,S0,0008	;S0+=8: next DL op
LUI	T2,0700
ADDIU	V1,V1,FFFF
SLTI	AT,V1,07FF
BEQ	AT,R0,7F0CD2FC	;if #pixels > 7FF, set to 7FF
OR	V0,S0,R0	;V0=S0: DL
BEQ	R0,R0,7F0CD300	;else, use #pixels
OR	A0,V1,R0
//7F0CD2FC:
ADDIU	A0,R0,07FF
//7F0CD300:
ANDI	T6,A0,0FFF
SLL	T9,T6,0xC	;T9=lrs
OR	T7,T9,T2	;T7= tile | lrs
SW	T7,0004 (A1)	;DL+4= rdp_loadblock.L: tile=7
//7F0CD310:		pipesync
LUI	T4,E700
SW	T4,0000 (V0)	;DL+0= rdp_pipesync.U
SW	R0,0004 (V0)	;DL+4= rdp_pipesync.L
//7F0CD31C:
LBU	T8,000A (S1)	;T8=entry+A: 
LW	T0,0088 (SP)	;T0=#pixels
ADDIU	T3,R0,03FF
SUBU	V1,T3,T8	;V1=0x3FF-entry
SLTU	AT,V1,T0	;TRUE if (0x3FF-entry) < #pixels
BEQ	AT,R0,7F0CD340	;if invalid, set to 0
ADDIU	S0,S0,0008	;S0+=8: next DL op
BEQ	R0,R0,7F0CD344	;use value if TRUE
OR	T1,V1,R0
//7F0CD340:
OR	T1,R0,R0
//7F0CD344:
SUBU	T0,T0,T1	;T0=entry-(0x3FF-entry)
ADDIU	T6,R0,0100
SW	T6,0010 (SP)	;SP+10=0x100
SW	T0,0070 (SP)	;SP+70= entry-(0x3FF-entry)
ADDIU	A0,R0,0007	;A0=7
OR	A1,R0,R0	;A1=0
ADDIU	A3,R0,0001	;A3=1
SW	R0,0014 (SP)	;SP+14=0
SW	R0,0018 (SP)	;SP+18=0
SW	R0,001C (SP)	;SP+1C=0
SW	R0,0020 (SP)	;SP+20=0
SW	R0,0024 (SP)	;SP+24=0
SW	R0,0028 (SP)	;SP+28=0
JAL	7F0CC574
SW	T1,006C (SP)	;SP+6C=(0x3FF-entry)
LW	T0,0070 (SP)	;T0= entry-(0x3FF-entry)
LW	T1,006C (SP)	;T1= 0x3FF-entry
BEQ	V0,R0,7F0CD3A8	;branch if didn't copy data
//7F0CD38C:	settile
LUI	T2,0700
OR	V0,S0,R0	;V0=S0: DL
LUI	T9,F500
ORI	T9,T9,0300	;T9= settile | line | tmem
SW	T9,0000 (V0)	;DL+0= rdp_settile.U: line=1, tmem=0x100
SW	T2,0004 (V0)	;DL+4= rdp_settile.L: tile=7
ADDIU	S0,S0,0008	;S0+=8: next DL op
//7F0CD3A8:	loadsync + loadtlut
OR	V0,S0,R0	;V0=S0: DL
ANDI	T3,T0,03FF	;T3= entry-(0x3FF-entry)
SLL	T8,T3,0xE	;T8=T3 * 0x4000: x0
ANDI	A0,T1,03FF	;A0= 0x3FF-entry
LUI	AT,F000
ADDIU	S0,S0,0008	;S0+=8: next DL op
LUI	T7,E600
OR	T5,T8,AT	;T5=loadtlut | x0
SLL	T4,A0,0x2	;T4= (0x3FF-entry) * 4
SW	T7,0000 (V0)	;DL+0= rdp_loadsync.U
SW	R0,0004 (V0)	;DL+4= rdp_loadsync.L
OR	T6,T5,T4	;T6=loadtlut | x0 | y0
OR	V1,S0,R0	;V1=S0: DL
SW	T6,0000 (V1)	;DL+0= rdp_loadtlut.U
LBU	T9,000A (S1)	;T9= entry + A
OR	A0,T4,R0	;A0=(0x3FF-entry) * 4
ADDIU	S0,S0,0008	;S0+=8: next DL op
ADDU	T7,T9,T0
ANDI	T4,T7,03FF
SLL	T3,T4,0xE	;T3=(entry-(0x3FF-entry)) * 0x4000
OR	T8,T3,T2	;T8=tile | x1
OR	T5,T8,A0	;T5=tile | x1 | y1
OR	A1,S0,R0	;A1=S0: DL
SW	T5,0004 (V1)	;DL+4= rdp_loadtlut.L
//7F0CD408:	pipesync
LUI	T6,E700
SW	T6,0000 (A1)	;DL+0= rdp_pipesync.U
SW	R0,0004 (A1)	;DL+4= rdp_pipesync.L
ADDIU	S0,S0,0008	;S0+=8: next DL op
//7F0CD418:
LW	RA,003C (SP)
OR	V0,S0,R0	;V0=S0: DL
LW	S0,0034 (SP)
LW	S1,0038 (SP)
JR	RA
ADDIU	SP,SP,0090

+_+

7F0CC9D4		returns bitdepth and #pixels in image entry at A0
	accepts: A0=p->'facemapper' entry, A1=p->bitdepth, A2=p->#pixels?
ADDIU	SP,SP,FFD8
SW	RA,0024 (SP)
SW	S3,0020 (SP)
SW	S2,001C (SP)
SW	S1,0018 (SP)
SW	S0,0014 (SP)
LW	V1,0008 (A0)	;V1=entry+8: 
LBU	V0,000B (A0)	;V0=entry+B: ???
OR	S1,A2,R0	;S1=p->#pixels?
ANDI	T6,V1,0003	;T6=(entry+8)&3
SRL	T7,V0,0x5	;T7=(entry+B)&E0
OR	S3,A0,R0	;S3=p->entry
BEQ	T7,R0,7F0CCA14	;S2=1 if (entry+B)&E0 = 0
OR	V1,T6,R0	;V1=(entry+8)&3
BEQ	R0,R0,7F0CCA18
OR	S2,T7,R0	;S2=(entry+B)&E0
//7F0CCA14:
ADDIU	S2,R0,0001
//7F0CCA18:
ADDIU	V0,R0,0003
BNE	V1,V0,7F0CCA2C	;branch if (entry+B)&3 = !3
SW	R0,0000 (S1)	;#pixels=0
BEQ	R0,R0,7F0CCA54	;(entry+B)&3 = 3
SW	V0,0000 (A1)	;bitdepth = 3
//7F0CCA2C:
ADDIU	V0,R0,0002
BNE	V1,V0,7F0CCA40	;branch if (entry+B)&3 = !2
ADDIU	AT,R0,0001
BEQ	R0,R0,7F0CCA54
SW	V0,0000 (A1)	;bitdepth = 2
//7F0CCA40:
BNEL	V1,AT,7F0CCA54	;branch if (entry+B)&3 = !1
SW	V0,0000 (A1)	;bitdepth = 2
BEQ	R0,R0,7F0CCA54
SW	V0,0000 (A1)	;bitdepth = 2
//7F0CCA50:
SW	V0,0000 (A1)
BLEZ	S2,7F0CCA80	;branch if 0,or 0x80 flag set
OR	S0,R0,R0
//7F0CCA5C:
OR	A0,S3,R0	;A0=p->entry
JAL	7F0CC994	;V0=(width/type)*height: #pixels
OR	A1,S0,R0	;A1=0
LW	T8,0000 (S1)	;T8=saved #pixels
SLL	T9,V0,0x2	;T9=#pixels * 4
ADDIU	S0,S0,0001	;S0++
ADDU	T0,T8,T9	;T0=saved + #pixels
BNE	S0,S2,7F0CCA5C	;loop for each thingy
SW	T0,0000 (S1)	;save updated #pixels
//7F0CCA80:
LW	RA,0024 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
JR	RA
ADDIU	SP,SP,0028

7F0CC994		returns V0=(width/type)*height, roughly number of pixels
	accepts: A0=p->entry, A1=???
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
SW	A0,0020 (SP)	;SP+20=p->entry
JAL	7F0CC7FC	;V0=img height?
SW	A1,0024 (SP)	;SP+24=???
SW	V0,001C (SP)	;SP+1C=height?
LW	A0,0020 (SP)	;A0=p->entry
JAL	7F0CC8E4	;V0=width/bitdepth
LW	A1,0024 (SP)	;A1=???
LW	T6,001C (SP)	;T6=height
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
MULTU	V0,T6
MFLO	V0		;V0=(width/bitdepth)*height
JR	RA
NOP
