7F0AEB64:	E3694	find width of word in string, probably for wordwrap
	accepts: A0=max width, A1=p->text, A2=@text buffer, A3=p->2nd font table, SP+10=p->1st font table
ADDIU	SP,SP,FF70
SW	S4,0030 (SP)
SW	S3,002C (SP)
SW	S2,0028 (SP)
SW	S0,0020 (SP)
OR	S0,A2,R0	;S0=A2: @buffer
OR	S2,A1,R0	;S2=A1: p->text
OR	S3,A3,R0	;S3=A3: p->2nd font table
SW	RA,0034 (SP)
SW	S1,0024 (SP)
SW	A0,0090 (SP)	;SP+90=A0: 
OR	T3,R0,R0	;T3=0	total width
SW	R0,007C (SP)	;SP+7C=0	height
ADDIU	T5,R0,0001	;T5=1
ADDIU	S4,SP,004C	;S4=SP+4C: copy buffer
ADDIU	T2,R0,0018	;T2=18
SW	R0,0080 (SP)	;SP+80=0
LBU	A0,0000 (S2)	;A0=char from string
OR	S1,R0,R0	;S1=0
OR	V1,R0,R0	;V1=0	total width
SLTI	AT,A0,0021	;TRUE if whitespace (0-20)
BNEZ	AT,7F0AEC34	;branch if whitespace
ADDIU	A1,SP,0080	;A1=SP+80: @width
ADDIU	V0,SP,004C	;V0=SP+4C: copy buffer
//7F0AEBC4:	retrieve and calculate width of non-whitespace characters
SB	A0,0000 (V0)	;A0->V0: save copy
LBU	T6,0000 (S2)	;T6=char from string
ADDIU	S2,S2,0001	;S2++	next byte
ADDIU	S1,S1,0001	;S1++	count++
MULTU	T6,T2
LBU	T6,0000 (V0)	;T6=copied byte
ADDIU	V0,V0,0001	;V0++	buffer++
SLTI	AT,T6,0080	;TRUE if not a wide char
MFLO	T7		;T7=char * 0x18
ADDU	T8,S3,T7	;T8=S3+T7: 2nd font table + offset
LW	T9,FCF4 (T8)	;T9=2nd font table + offset - 0x30C: width
BNEZ	AT,7F0AEC24	;branch if ASCII
ADDU	V1,V1,T9	;V1+=width
//7F0AEBE8:	japanese...
LBU	T7,0000 (S2)	;T7=char from string
ADDIU	S2,S2,0001	;S2++	next byte
ADDIU	S1,S1,0001	;S1++	count++
SB	T7,0000 (V0)	;copy to buffer
LBU	T8,FFFF (S2)	;T8=previous char from string
ADDIU	V0,V0,0001	;V0++	buffer++
MULTU	T8,T2
MFLO	T9		;T9=char*0x18
ADDU	T6,S3,T9	;T6=S3+T9: 2nd font table + offset
LW	T7,FCF4 (T6)	;T7=width
ADDU	V1,V1,T7	;V1+=width
//7F0AEC24:	loop for remaining characters
LBU	A0,0000 (S2)	;A0=char from string
SLTI	AT,A0,0021	;TRUE if whitespace
BEQL	AT,R0,7F0AEBC8	;loop until whitespace character
SB	A0,0000 (V0)
//7F0AEC34:
ADDU	T8,S4,S1	;T8=S4+S1: buffer+count
SB	R0,0000 (T8)	;0->end of buffer: NULL terminate
LW	T9,00A0 (SP)	;T9=SP+A0: p->1st font table
SW	T5,0078 (SP)	;SP+78=T5: 
SW	T3,008C (SP)	;SP+8C=T3: total width
SW	R0,0014 (SP)	;SP+14=NULL
ADDIU	A0,SP,007C	;A0=SP+7C: @height
OR	A2,S4,R0	;A2=S4: buffer
OR	A3,S3,R0	;A3=S3: p->2nd font table
JAL	7F0AE98C	;proportions of string A2
SW	T9,0010 (SP)	;SP+10= p->1st font table
LW	T3,008C (SP)	;T3=SP+8C: total width
LW	T6,0080 (SP)	;T6=SP+80: str.width
LW	T7,0090 (SP)	;T7=SP+90: max width?
LUI	T0,8004
ADDU	T3,T3,T6	;T3+=str.width	total width
SLT	AT,T7,T3	;TRUE if max<total width
ADDIU	T0,T0,0E8C	;T0=80040E8C
ADDIU	T1,R0,0020	;T1=20
ADDIU	T2,R0,0018	;T2=18
ADDIU	T4,R0,000A	;T4=A
BNEZ	AT,7F0AEC98	;branch if exceeds max width
LW	T5,0078 (SP)	;SP+78=T5: 
BEQ	R0,R0,7F0AEC9C
ADDIU	A0,R0,0001	;A1=1
//7F0AEC98:	FALSE if exceeds width
OR	A0,R0,R0	;A0=0
//7F0AEC9C:
LBU	V0,0000 (S2)	;V0=char from string
ADDIU	AT,R0,000A
BNEL	V0,AT,7F0AED64	;branch if not newline
ADDIU	AT,R0,0020
BNEZ	A0,7F0AECE8	;branch if width okay
OR	V1,R0,R0	;V1=0
SB	T4,0000 (S0)	;T4->final buffer
LW	T8,0000 (T0)	;T8=80040E8C: spacefill
ADDIU	S0,S0,0001	;S0++	final++
BLEZ	T8,7F0AECE8	;branch if >0
NOP	
SB	T1,0000 (S0)	;20->final	push space to buffer
//7F0AECCC:	fill with # spaces
LW	T9,0000 (T0)	;T9=80040E8C: spacefill
ADDIU	V1,V1,0001	;V1++	count++
ADDIU	S0,S0,0001	;S0++	final++
SLT	AT,V1,T9	;TRUE if count < ???
BNEL	AT,R0,7F0AECCC	;branch if count too high
SB	T1,0000 (S0)	;20->final	push space to buffer
OR	V1,R0,R0	;V1=0	reset count
//7F0AECE8:	check if word-aligned
BLEZ	S1,7F0AED54	;branch if no count
OR	T3,R0,R0	;T3=0	total width=0
ANDI	A1,S1,0003	;A1=count & 3: test for word alignment
BEQ	A1,R0,7F0AED1C	;branch if word-aligned
OR	A0,A1,R0	;A0=A1: stray bytes
ADDU	V0,S4,V1	;V0=S4+V1: buffer+count
//7F0AED00:	copy stray bytes to final
LBU	T6,0000 (V0)	;T6=byte from buffer
ADDIU	V1,V1,0001	;V1++	count++
ADDIU	S0,S0,0001	;S0++	final++
ADDIU	V0,V0,0001	;V0++	next byte
BNE	A0,V1,7F0AED00	;loop for remaining stray bytes
SB	T6,FFFF (S0)	;save to final
BEQ	V1,S1,7F0AED54
//7F0AED1C:
ADDIU	T7,SP,004C	;T7=SP+4C: copy buffer
ADDU	A0,S1,T7	;A0=S1+T7: copy buffer+count
ADDU	V0,S4,V1	;V0=S4+V1: buffer+count
//7F0AED28:	copy word to buffer
LBU	T8,0000 (V0)	;T8=byte from buffer
ADDIU	V0,V0,0004	;V0+=4	next word in buffer
ADDIU	S0,S0,0004	;S0+=4	next word in final
SB	T8,FFFC (S0)
LBU	T9,FFFD (V0)
SB	T9,FFFD (S0)
LBU	T6,FFFE (V0)
SB	T6,FFFE (S0)
LBU	T7,FFFF (V0)
BNE	V0,A0,7F0AED28	;loop until copied entrirely
SB	T7,FFFF (S0)
//7F0AED54:
SB	T4,0000 (S0)
BEQ	R0,R0,7F0AEEE0
ADDIU	S0,S0,0001	;S0++	final++
//7F0AED60:
ADDIU	AT,R0,0020
BNE	V0,AT,7F0AEE30	;branch if not space
NOP	
BNEZ	A0,7F0AEDB8	;branch if not NULL
OR	V1,R0,R0	;V1=0	buffer count=0
SB	T4,0000 (S0)
LW	V0,0000 (T0)
ADDIU	S0,S0,0001
BLEZL	V0,7F0AEDAC
LW	T9,0080 (SP)
//7F0AED88:
SB	T1,0000 (S0)
LW	V0,0000 (T0)
ADDIU	V1,V1,0001
ADDIU	S0,S0,0001
SLT	AT,V1,V0
BNEL	AT,R0,7F0AED8C
SB	T1,0000 (S0)
OR	V1,R0,R0
//7F0AEDA8:
LW	T9,0080 (SP)
SLL	T8,V0,0x2
ADDU	T8,T8,V0
ADDU	T3,T8,T9
//7F0AEDB8:
BLEZ	S1,7F0AEE24
ADDIU	T3,T3,0005
ANDI	A1,S1,0003
BEQ	A1,R0,7F0AEDEC
OR	A0,A1,R0
ADDU	V0,S4,V1
//7F0AEDD0:
LBU	T6,0000 (V0)
ADDIU	V1,V1,0001
ADDIU	S0,S0,0001
ADDIU	V0,V0,0001
BNE	A0,V1,7F0AEDD0
SB	T6,FFFF (S0)
BEQ	V1,S1,7F0AEE24
//7F0AEDEC:
ADDIU	T7,SP,004C
ADDU	A0,S1,T7
ADDU	V0,S4,V1
//7F0AEDF8:	copy word to final
LBU	T8,0000 (V0)
ADDIU	V0,V0,0004
ADDIU	S0,S0,0004
SB	T8,FFFC (S0)
LBU	T9,FFFD (V0)
SB	T9,FFFD (S0)
LBU	T6,FFFE (V0)
SB	T6,FFFE (S0)
LBU	T7,FFFF (V0)
BNE	V0,A0,7F0AEDF8
SB	T7,FFFF (S0)
//7F0AEE24:
SB	T1,0000 (S0)
BEQ	R0,R0,7F0AEEE0
ADDIU	S0,S0,0001
BNEZ	V0,7F0AEEE0
OR	V1,R0,R0
BNEZ	A0,7F0AEE74
OR	T5,R0,R0
SB	T4,0000 (S0)
LW	T8,0000 (T0)
ADDIU	S0,S0,0001
BLEZ	T8,7F0AEE74
NOP	
//7F0AEE54:
SB	T1,0000 (S0)
LW	T9,0000 (T0)
ADDIU	V1,V1,0001
ADDIU	S0,S0,0001
SLT	AT,V1,T9
BNEL	AT,R0,7F0AEE58
SB	T1,0000 (S0)
OR	V1,R0,R0
//7F0AEE74:
BLEZ	S1,7F0AEEDC
ANDI	A1,S1,0003
BEQ	A1,R0,7F0AEEA4
OR	A0,A1,R0
ADDU	V0,S4,V1
//7F0AEE88:
LBU	T6,0000 (V0)
ADDIU	V1,V1,0001
ADDIU	S0,S0,0001
ADDIU	V0,V0,0001
BNE	A0,V1,7F0AEE88
SB	T6,FFFF (S0)
BEQ	V1,S1,7F0AEEDC
//7F0AEEA4:
ADDIU	T7,SP,004C
ADDU	A0,S1,T7
ADDU	V0,S4,V1
//7F0AEEB0:	copy word to final
LBU	T8,0000 (V0)
ADDIU	V0,V0,0004
ADDIU	S0,S0,0004
SB	T8,FFFC (S0)
LBU	T9,FFFD (V0)
SB	T9,FFFD (S0)
LBU	T6,FFFE (V0)
SB	T6,FFFE (S0)
LBU	T7,FFFF (V0)
BNE	V0,A0,7F0AEEB0
SB	T7,FFFF (S0)
SB	R0,0000 (S0)
//7F0AEEE0:
ADDIU	AT,R0,0001
BEQ	T5,AT,7F0AEBA4
ADDIU	S2,S2,0001
//7F0AEEEC:	return
LW	RA,0034 (SP)
LW	S0,0020 (SP)
LW	S1,0024 (SP)
LW	S2,0028 (SP)
LW	S3,002C (SP)
LW	S4,0030 (SP)
JR	RA
ADDIU	SP,SP,0090
