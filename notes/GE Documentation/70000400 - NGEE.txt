80000400	1000	inception point
LUI	T0,8006
LUI	T1,0003
ADDIU	T0,T0,D2E0	;T0=8005D2E0: encompasses runtime values and thread data buffer
ORI	T1,T1,1080	;T1=31080
//80000410:	initialize 31080 bytes at 8005D2E0
ADDI	T1,T1,FFF8
SW	R0,0000 (T0)
SW	R0,0004 (T0)
BNEZ	T1,80000410
ADDI	T0,T0,0008
//80000424:	set stack pointer and jump to 80000450
LUI	T2,8000
LUI	SP,803B
ADDIU	T2,T2,0450	;T2=80000450
JR	T2
ADDIU	SP,SP,B410	;SP=803AB410

80000450	1050	establish root TLB entry and proceed
ADDIU	V0,R0,0001
ADDIU	V1,R0,0000
ADDIU	A0,R0,0000
LUI	A1,7000
ADDIU	A2,R0,001F
ADDIU	A3,R0,0001
LUI	T0,007F
ORI	T0,T0,E000
MTC0	V0,Index	;COP0 Index = 1
SRL	V1,V1,0xC
SLL	V1,V1,0x6
ADDU	V1,V1,A2	;V1=A2
MTC0	V1,EntryLo0	;COP0 EntryLo0 = 1F: global, valid, dirty, cacheable noncoherent, even page#; map 00000000
SRL	A0,A0,0xC
SLL	A0,A0,0x6
ADDU	A0,A0,A3	;A0=A3
MTC0	A0,EntryLo1	;COP0 EntryLo1 = 1: global
SRL	A0,A1,0xD
SLL	A0,A0,0xD	;A0=A1
MTC0	A0,EntryHi	;COP0 EntryHi = 70000000: address space 0, VPN 70000
MTC0	T0,PageMask	;COP0 PageMask= 007FE000: mask for 2000byte entries up to 4MB
NOP
TLBWI
//800004AC:	jump to 70000510
LUI	T2,7000
ADDIU	T2,T2,0510	;T2=70000510
JR	T2
NOP

700004BC	10BC	V0= RDRAM target for main compressed file
LUI	V0,8002
JR	RA
ADDIU	V0,V0,0D90	;V0=80020D90

700004C8	10C8	V0= ROM start address for main compressed file
LUI	V0,0002
JR	RA
ADDIU	V0,V0,1990	;V0=21990

700004D4	10D4	V0= ROM end address for main compressed file
LUI	V0,0003
JR	RA
ADDIU	V0,V0,3590	;V0=33590

700004E0	10E0	V0= ROM start address for RareZip ASM
LUI	V0,0003
JR	RA
ADDIU	V0,V0,3590	;V0=33590

700004EC	10EC	V0= ROM end address for RareZip ASM
LUI	V0,0003
JR	RA
ADDIU	V0,V0,4B30	;V0=34B30

700004F8	10F8	redirect to 7020141C: decompress .rz file
	accepts: A0=p->source, A1=p->target, A2=p->buffer
LUI	A3,7020
ADDIU	A3,A3,141C
JR	A3
NOP

70000510	1110	decompress main compressed block, initialize memory, TLB and its interrupts, then execute main game thread
ADDIU	SP,SP,FFC0
SW	RA,0024 (SP)
SW	S1,0020 (SP)
JAL	700004BC	;V0=80020D90: target address for main compressed block (21990)
SW	S0,001C (SP)
JAL	700004C8	;V0=21990: ROM address of main compressed block
OR	S0,V0,R0	;S0=V0: 80020D90
JAL	700004D4	;V0=33590: ROM endpoint of main compressed block
SW	V0,0034 (SP)	;SP+34= main.pos
LW	T6,0034 (SP)
JAL	700004E0	;V0=33590: ROM address of 70200000 RareZip ASM [33590-34B30 ROM]
SUBU	S1,V0,T6	;S1=V0-T6: compressed size of main compressed block
JAL	700004EC	;V0=34B30: ROM endpoint of RareZip (address of 7F- TLB routines)
SW	V0,0028 (SP)	;SP+28= RareZip.pos
//70000548:
LW	T7,0028 (SP)
LUI	T2,7020		;T2=70200000: target vaddress for RareZip
OR	A1,S0,R0	;A1=S0: target address for main.bin
SUBU	T8,V0,T7	;T8=V0-T7: RareZip.sz = RareZip.end - RareZip.pos
ADDU	A0,S1,T8	;A0=S1+T8: main.cmp_sz + RareZip.sz
ADDIU	V1,A0,FFFF	;V1= total size - 1
BLTZ	V1,7000058C	;skip if nothing to copy
LUI	A2,8030		;A2=80300000: buffer for decompression tables
LUI	T9,7020
SUBU	A0,T9,S1	;A0=70200000 - main.cmp_sz: vaddr for main
ADDU	V0,S0,V1	;V0=S0+V1: target address + total size
//70000574:	loop to copy from source to virtual target instead of mapping...
LBU	T0,0000 (V0)
ADDU	T1,A0,V1
ADDIU	V1,V1,FFFF
ADDIU	V0,V0,FFFF
BGEZ	V1,70000574
SB	T0,0000 (T1)
//7000058C:	decompress main compressed block
JAL	700004F8	;redirect to 7020141C: decompress A0 to A1; A2=buffer
SUBU	A0,T2,S1	;A0=p->source: RareZip.vaddr - main.cmp_sz
//70000594:
LUI	T3,0003
LUI	T4,0000
ADDIU	T4,T4,1050	;T4=1050
ADDIU	T3,T3,3590	;T3=33590: ROM address of 70200000 RareZip ASM [33590-34B30 ROM]
LUI	AT,000F
ORI	AT,AT,FFB1	;AT=FFFB1
SUBU	V0,T3,T4	;V0=33590 - 1050: 32550
SLT	AT,V0,AT
BNEZ	AT,70000604	;branch if 32550 < FFFB1, which it always will be...
LUI	AT,FFF0
//700005BC:	on failure, presumes 64bit mapping, which would place exception handler at 100400, not 400
ORI	AT,AT,0050	;AT= -FFFB0
LUI	A1,0010
LUI	A2,7010
ADDIU	A2,A2,0400	;A2=70100400
ADDIU	A1,A1,1000	;A1=101000
ADDU	A3,V0,AT	;A3= difference - FFFB0
JAL	7000CF90	;read (A0) A3 bytes from ROM A1 to A2
OR	A0,R0,R0	;A0=0 (read)
JAL	7000D070	;V0=PI status
NOP
ANDI	T5,V0,0001
BEQ	T5,V0,70000604	;branch if ready
NOP
//700005F0:	wait until PI ready
JAL	7000D070	;V0=PI status
NOP
ANDI	T6,V0,0001
BNEZ	T6,700005F0
NOP
//70000604:	initialize memory and TLB
JAL	7000D080	;initialize PIF, interrupt handlers, C0- and 7F- TLB segments, init NMIbuffer if cold run, init 64DD if present
NOP
JAL	70001BB0	;sets #hardwired TLB entries to 2
NOP
LUI	S0,8000
LUI	V0,7000
LUI	A0,8000
ADDIU	V0,V0,1B60	;V0= 70001B60
OR	V1,S0,R0	;V1=S0: 80000000
ORI	A0,A0,0080	;A0=80000080
//7000062C:	copy TLB InvalidHit handler to 80000080
LW	T7,0000 (V0)
ADDIU	V1,V1,0010
ADDIU	V0,V0,0010
SW	T7,FFF0 (V1)
LW	T8,FFF4 (V0)
SW	T8,FFF4 (V1)
LW	T9,FFF8 (V0)
SW	T9,FFF8 (V1)
LW	T0,FFFC (V0)
BNE	V1,A0,7000062C
SW	T0,FFFC (V1)
//70000658:
JAL	7000D320	;set Cache index writeback invalidate for 2000 bytes at 80000000
NOP
OR	A0,S0,R0	;A0=S0: 80000000
JAL	7000D350	;invalidate Cache for A1 bytes at A0
ADDIU	A1,R0,4000	;A1=4000
ADDIU	S0,R0,0002
ADDIU	S1,R0,0020
//70000674:	init all TLB indices from 2-20
JAL	7000D3D0	;remove TLB index A0
OR	A0,S0,R0	;A0=S0
ADDIU	S0,S0,0001	;S0++
BNE	S0,S1,70000674	;loop 15 times
NOP
//70000688:	enable all but underflow in FPU
JAL	7000D410	;V0= COP1 Control
NOP
JAL	7000D420	;V0=COP1 Control, replacing with A0
ORI	A0,V0,0E80	;A0= V0 | E80: enable all but underflow
//70000698:
LUI	A0,803B
ADDIU	A0,A0,B950	;A0=803AB950: (base SP+540)
JAL	700006F0	;V0= new stack pointer
ORI	A1,R0,8000	;A1=8000
//700006A8:	generate main game thread
LUI	S0,8006
ADDIU	S0,S0,D640	;S0= 8005D640
LUI	A2,7000
ADDIU	T4,R0,000A
SW	T4,0014 (SP)	;SP+14= A
ADDIU	A2,A2,089C	;A2= 7000089C: main game loop
OR	A0,S0,R0	;A0=S0: 8005D640: p->thread
ADDIU	A1,R0,0003	;A1=3
OR	A3,R0,R0	;A3=0
JAL	7000D430	;initialize thread entry at A0 with values
SW	V0,0010 (SP)	;SP+10= stack pointer
JAL	7000D580	;insert thread and execute if no thread currently running
OR	A0,S0,R0	;A0=S0: 8005D640: p->table
LW	RA,0024 (SP)
LW	S0,001C (SP)
LW	S1,0020 (SP)
JR	RA
ADDIU	SP,SP,0040

700006F0	12F0	V0= new stack pointer; address A0 + offset A1 - 8
	accepts: A0=p->base SP, A1=offset
ADDU	V0,A0,A1	;V0=A0+A1
JR	RA
ADDIU	V0,V0,FFF8	;V0=A0+A1-8

700006FC	12FC
ADDIU	T6,R0,0001
LUI	AT,8002
SW	T6,3044 (AT)	;1->80023044
LUI	AT,8002
LUI	T7,1000
JR	RA
SW	T7,3048 (AT)	;10000000->80023048

70000718	1318	infinite loop
	accepts: A0
SW	A0,0000 (SP)	;SP+0= A0
BEQ	R0,R0,7000071C
NOP
JR	RA
NOP

70000738	1338	Null thread
	creates thread at 8005D490 executing 70000718
ADDIU	SP,SP,FFE0
SW	RA,001C (SP)
LUI	A0,803B
ADDIU	A0,A0,B710	;A0= 803AB710
JAL	700006F0	;V0= new stack pointer
ADDIU	A1,R0,0040	;A1= 40
LUI	A0,8006
LUI	A2,7000
ADDIU	A2,A2,0718	;A2= 70000718
ADDIU	A0,A0,D490	;A0= 8005D490
ADDIU	A1,R0,0001	;A1= 1
OR	A3,R0,R0	;A3= 0
SW	V0,0010 (SP)	;SP+10= 803AB710 + 40 - 8: 803AB748
JAL	7000D430	;initialize thread entry at A0 with values
SW	R0,0014 (SP)	;SP+14= 0
LUI	A0,8006
JAL	7000D580	;insert thread and execute if no thread currently running
ADDIU	A0,A0,D490	;A0= 8005D490
LW	RA,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

70000790	1390	Indi Detection Thread; now forcefully returns INDI_NOT_DETECTED (1)
ADDIU	SP,SP,FFE0
SW	RA,001C (SP)
LUI	A0,803B
ADDIU	A0,A0,B410	;A0= 803AB410
JAL	700006F0	;V0= new stack pointer
ADDIU	A1,R0,0300	;A1= 300
LUI	A0,8006
LUI	A2,7001
ADDIU	T6,R0,00FA
SW	T6,0014 (SP)
ADDIU	A2,A2,CEA0	;A2= 7000CEA0
ADDIU	A0,A0,D2E0	;A0= 8005D2E0
OR	A1,R0,R0	;A1= 0
OR	A3,R0,R0	;A3= 0
JAL	7000D430	;initialize thread entry at A0 with values
SW	V0,0010 (SP)
LUI	A0,8006
JAL	7000D580	;insert thread and execute if no thread currently running
ADDIU	A0,A0,D2E0	;A0= 8005D2E0
LW	RA,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

700007EC	13EC	
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,D9B8	;A1=8005D9B8 
ADDIU	A0,A0,D9A0	;A0=8005D9A0
JAL	7000D6D0
ADDIU	A2,R0,0020	;A2=20
LUI	T6,8000
LW	T6,0300 (T6)	;T6=80000300: display type
ADDIU	AT,R0,0002
LUI	A0,8006
BNE	T6,AT,70000848	;branch if not 2: MPAL
ADDIU	A0,A0,DA40
//70000824:	2: MPAL
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,D7F0	;A1=8005D7F0
ADDIU	A0,A0,DA40	;A0=8005DA40
ADDIU	A2,R0,001E	;A2=1E
JAL	70000AAC
ADDIU	A3,R0,0001	;A3=1
BEQ	R0,R0,7000085C
NOP
//70000848:	1: NTSC (PAL not caught)
LUI	A1,8006
ADDIU	A1,A1,D7F0	;A1=8005D7F0
ADDIU	A2,R0,0002	;A2=2
JAL	70000AAC
ADDIU	A3,R0,0001	;A3=1
//7000085C:
LUI	A0,8006
LUI	A1,8006
LUI	A2,8006
ADDIU	A2,A2,D9A0	;A2=8005D9A0
ADDIU	A1,A1,DB18	;A1=8005DB18
ADDIU	A0,A0,DA40	;A0=8005DA40
JAL	70000C14
OR	A3,R0,R0	;A3=0
LUI	A0,8006
JAL	70000CF8
ADDIU	A0,A0,DA40	;A0=8005DA40
LW	RA,0014 (SP)
LUI	AT,8006
SW	V0,DA38 (AT)	;V0->8005DA38: 8005DAB8
JR	RA
ADDIU	SP,SP,0018

7000089C	149C	main game thread, calling main game loop initializer
	accepts: A0=[0]
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	70000738	;generate NULL thread, storing A0->SP+0
SW	A0,0018 (SP)	;SP+18= A0
JAL	7000AD30	;unconditional return
NOP
JAL	7000ACF0
NOP
JAL	70000790	;generate Indi Detection Thread; now forcefully returns INDI_NOT_DETECTED (1)
NOP
JAL	7000A5C0	;parse command line options
NOP
BEQL	V0,R0,700008E0	;branch if debug mode not enabled
OR	A0,R0,R0
//700008D4:	set debug console if detected
JAL	7000D740	;if A0=NULL, update and execute cur.thread
OR	A0,R0,R0	;A0=0
//700008DC:	change priority for cur.thread to A
OR	A0,R0,R0	;A0=NULL
JAL	7000D800	;change priority to A1 for thread A0 or current thread if NULL
ADDIU	A1,R0,000A	;A1=A
JAL	700007EC
NOP
JAL	7000601C	;init game loop and execute
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70000908	1508	V0= p->last entry in copy of debug handler code/name table
ADDIU	SP,SP,FFC0
LUI	T6,8002
ADDIU	V1,SP,0008	;V1=SP+8: p->buffer
ADDIU	T6,T6,304C	;T6= 8002304C: debug handler code/name table
ADDIU	T9,T6,0030
OR	T0,V1,R0	;T0= p->buffer
//70000920:	copy 0x30 bytes from table to buffer
LW	AT,0000 (T6)
ADDIU	T6,T6,000C
ADDIU	T0,T0,000C
SW	AT,FFF4 (T0)
LW	AT,FFF8 (T6)
SW	AT,FFF8 (T0)
LW	AT,FFFC (T6)
BNE	T6,T9,70000920
SW	AT,FFFC (T0)
//70000944:	copy last two words
LW	AT,0000 (T6)
OR	V0,V1,R0	;V0=V1: p->buffer
SW	AT,0000 (T0)
LW	T9,0004 (T6)
SW	T9,0004 (T0)
//70000958:	V0= p->final entry
LW	T1,0008 (V0)
ADDIU	V0,V0,0008
BNEL	T1,R0,7000095C	;loop until followed by null entry
LW	T1,0008 (V0)
//70000968:	return
JR	RA
ADDIU	SP,SP,0040

70000970	1570	A0->stderr.activated flag [80023098]
LUI	AT,8002
JR	RA
SW	A0,3098 (AT)

7000097C	157C	A0->stderr.enable flag [80023094]
LUI	AT,8002
JR	RA
SW	A0,3094 (AT)

70000988	1588	A0->stderr.permitted flag [8002309C]
LUI	AT,8002
JR	RA
SW	A0,309C (AT)	;A0->8002309C

70000994	1594	A0-> user.Compare [800230A0]
LUI	AT,8002
JR	RA
SW	A0,30A0 (AT)	;A0->800230A0: user.Compare, used to display stderr as a periodic event

700009A0	15A0	test to display stderr and update Count
	accepts: A0=p->video buffer
LUI	T6,8002
LW	T6,309C (T6)	;T6= stderr.permitted
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
BEQ	T6,R0,700009C0	;branch if not permitted
LUI	T7,8002
LW	T7,3098 (T7)	;T7= stderr.activated
BNE	T7,R0,700009D0	;display if activated
//700009C0:	test if stderr.enable overrides this
LUI	T8,8002
LW	T8,3094 (T8)
BEQL	T8,R0,700009EC	;return if 80023094 NULL
LW	RA,0014 (SP)
//700009D0:	display stderr and update Count
JAL	700059D0	;write text in 80023718 buffer to video buffer A0
NOP
JAL	7000D8E0	;V0=Count
NOP
LUI	AT,8002
SW	V0,30A4 (AT)	;V0->800230A4: update prev.Count
//700009E8:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700009F8	15F8	if not A0, test to display stderr; displays every 16th frame
	accepts: A0=timer
ADDIU	SP,SP,FFE8
ANDI	T6,A0,000F
BNE	T6,R0,70000A78	;return if A0&F not 0
SW	RA,0014 (SP)
//70000A08:	test if stderr is both permitted and activated
LUI	T7,8002
LW	T7,309C (T7)	;T7=8002309C: stderr.permitted
LUI	T8,8002
LUI	T9,8002
BEQ	T7,R0,70000A2C
NOP
//70000A20:
LW	T8,3098 (T8)	;T8=80023098: stderr.activated
BNE	T8,R0,70000A38
NOP
//70000A2C:	test if stderr.enable overrides this
LW	T9,3094 (T9)	;T9=80023094: stderr.enable
BEQL	T9,R0,70000A7C	;return if zero
LW	RA,0014 (SP)
//70000A38:	test for stderr periodic event
JAL	7000D8E0	;V0=Count
NOP
LUI	T1,8002
LW	T1,30A4 (T1)	;T1=800230A4: previous Count
LUI	T0,8002
LW	T0,30A0 (T0)	;T0=800230A0: user.Compare
SUBU	T2,V0,T1	;T2=Count-T1
LUI	A0,803B
SLTU	AT,T0,T2
BEQL	AT,R0,70000A7C	;return if Count-prev.Count <= user.Compare
LW	RA,0014 (SP)
//70000A64:	display stderr
JAL	700059D0	;write stderr to video buffer A0
ADDIU	A0,A0,5000	;A0=803B5000: 
LUI	A0,803E
JAL	700059D0	;write stderr to video buffer A0
ADDIU	A0,A0,A800	;A0=803DA800: 
//70000A78:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70000A88	1688	store current Count to 800230A4
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	7000D8E0	;V0=Count
NOP
LW	RA,0014 (SP)
LUI	AT,8002
SW	V0,30A4 (AT)	;V0->800230A4: saved count
JR	RA
ADDIU	SP,SP,0018

70000AAC	16AC	
	accepts: A0=p->thread, A1=p->new thread buffer, A2=, A3=
ADDIU	SP,SP,FFD8
SW	RA,0024 (SP)
SW	S1,0020 (SP)
SW	S0,001C (SP)
SW	A1,002C (SP)
SW	A2,0030 (SP)
SW	A3,0034 (SP)
ADDIU	T6,R0,0001
ADDIU	T7,R0,0005
SW	R0,00C8 (A0)	;A0+C8= 0
SW	R0,00CC (A0)	;A0+CC= 0
SW	R0,00B4 (A0)	;A0+B4= 0
SW	R0,00D0 (A0)	;A0+D0= 0
SW	R0,00B8 (A0)	;A0+B8= 0
SW	R0,00BC (A0)	;A0+BC= 0
SW	R0,00C0 (A0)	;A0+C0= 0
SW	R0,00C4 (A0)	;A0+C4= 0
SH	T6,0000 (A0)	;A0+0 = 1
SH	T7,0020 (A0)	;A0+20= 5
LW	T8,002C (SP)
OR	S0,A0,R0	;S0=A0
ADDIU	S1,A0,0040	;S1=A0+40
SW	T8,00B0 (A0)	;A0+B0= A1 f/caller: p->thread buffer
OR	A0,S1,R0	;A0+=40: start
ADDIU	A1,S0,0058	;A1=A0+18: end
JAL	7000D6D0
ADDIU	A2,R0,0008	;A2=8
ADDIU	A0,S0,0078	;A0+=78: start
ADDIU	A1,S0,0090	;A1=A0+18: end
JAL	7000D6D0
ADDIU	A2,R0,0008	;A2=8
JAL	7000D8F0
ADDIU	A0,R0,00FE
LBU	T9,0033 (SP)	;T9=A2 f/caller
LUI	T1,8002
LUI	V1,8006
SLL	T0,T9,0x2
ADDU	T0,T0,T9
SLL	T0,T0,0x4
ADDIU	T1,T1,69C0
ADDIU	V1,V1,087C
ADDU	T2,T0,T1
SW	T2,0000 (V1)
LW	T3,001C (T2)
LUI	AT,8006
ADDIU	A0,R0,0004	;A0= entry 4
SW	T3,0880 (AT)
LW	T4,0030 (T2)
LUI	AT,8006
OR	A1,S1,R0	;A1= start of buffer
SW	T4,0884 (AT)
LW	T5,0044 (T2)
LUI	AT,8006
ADDIU	A2,R0,029B	;A2= 0x29B
JAL	7000DC50	;set interrupt table entry #A0 with p->data A1 and value A2
SW	T5,0888 (AT)
ADDIU	A0,R0,0009	;A0= entry 9
OR	A1,S1,R0	;A1= start of buffer
JAL	7000DC50	;set interrupt table entry #A0 with p->data A1 and value A2
ADDIU	A2,R0,029C	;A2= 0x29C
ADDIU	A0,R0,000E	;A0= entry E
OR	A1,S1,R0	;A1= start of buffer
JAL	7000DC50	;set interrupt table entry #A0 with p->data A1 and value A2
ADDIU	A2,R0,029D	;A2= 0x29D
OR	A0,S1,R0	;A0=S1: 
ADDIU	A1,R0,029A	;A1= 0x29A
JAL	7000DCC0
LW	A2,0034 (SP)	;A2=A2 f/caller
JAL	70000A88	;store current Count to 800230A4
NOP
LUI	A0,803B
ADDIU	A0,A0,B750	;A0= 803AB750
JAL	700006F0	;V0= new stack pointer
ADDIU	A1,R0,0200	;A1= 200
LW	A0,00B0 (S0)	;A0=S0+B0: p->thread
LUI	A2,7000
ADDIU	T6,R0,001E
SW	T6,0014 (SP)	;SP+14=1E: priority
ADDIU	A2,A2,0D00	;A2=70000D00
SW	V0,0010 (SP)
ADDIU	A1,R0,0002	;A1=2: index
JAL	7000D430	;initialize thread entry at A0 with values
OR	A3,S0,R0	;A3=A0 f/caller, sent to function A2 as A0
JAL	7000D580	;insert thread and execute if no thread currently running
LW	A0,00B0 (S0)	;A0=S0+B0: p->thread
LW	RA,0024 (SP)
LW	S0,001C (SP)
LW	S1,0020 (SP)
JR	RA
ADDIU	SP,SP,0028

70000C14	1814	
	accepts: A0=p->???, A1=p->???, A2=p->???, A3=
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SW	A2,0020 (SP)
SW	A3,0024 (SP)
ADDIU	A0,R0,0001
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
SW	A1,001C (SP)
LW	A1,001C (SP)	;A1= A1 f/caller: 
LW	T6,0020 (SP)
LW	V1,0018 (SP)	;V1= A0 f/caller: 
OR	A0,V0,R0
SW	T6,0004 (A1)	;A1+4= A2 f/caller: 
LW	T7,0024 (SP)
SW	T7,0008 (A1)	;A1+8= A3 f/caller: 
LW	T8,00B4 (V1)
SW	T8,0000 (A1)	;A1+0= A0+B4: 
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
SW	A1,00B4 (V1)	;A0+B4 = A1: 
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70000C70	1870	
	accepts: A0=, A1=
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
SW	A0,0020 (SP)
LW	V1,00B4 (A0)
SW	R0,0018 (SP)
SW	A1,0024 (SP)
ADDIU	A0,R0,0001
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
SW	V1,001C (SP)
LW	V1,001C (SP)
LW	A1,0024 (SP)	;A1 f/caller
LW	A2,0018 (SP)
BEQ	V1,R0,70000CE0
OR	A0,V0,R0
//70000CA8:
BNEL	V1,A1,70000CD4
OR	A2,V1,R0
BEQ	A2,R0,70000CC4
LW	T9,0020 (SP)	;T9= A0 f/caller: 
LW	T7,0000 (A1)
BEQ	R0,R0,70000CE0
SW	T7,0000 (A2)
//70000CC4:
LW	T8,0000 (A1)
BEQ	R0,R0,70000CE0
SW	T8,00B4 (T9)
OR	A2,V1,R0
//70000CD4:
LW	V1,0000 (V1)
BNE	V1,R0,70000CA8
NOP
//70000CE0:	update and return
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

70000CF8	18F8	???; V0=A0+78
	accepts: A0
JR	RA
ADDIU	V0,A0,0078

70000D00	1900	
	accepts: A0=
ADDIU	SP,SP,FFB0
SW	S5,0028 (SP)
SW	S4,0024 (SP)
SW	S3,0020 (SP)
SW	S2,001C (SP)
SW	S0,0014 (SP)
OR	S2,A0,R0	;S2=A0
SW	RA,002C (SP)
SW	S1,0018 (SP)
SW	R0,004C (SP)
OR	S0,R0,R0
ADDIU	S3,A0,0040
ADDIU	S4,SP,004C
ADDIU	S5,R0,029A
//70000D38:
OR	A0,S3,R0
OR	A1,S4,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
LW	T6,004C (SP)
ADDIU	AT,R0,029B
BEQ	T6,S5,70000D78
NOP
BEQ	T6,AT,70000D88
ADDIU	AT,R0,029C
BEQ	T6,AT,70000D98
ADDIU	AT,R0,029D
BEQ	T6,AT,70000DA8
NOP
BEQ	R0,R0,70000DE0
NOP
//70000D78:
JAL	70000EB4
OR	A0,S2,R0
BEQ	R0,R0,70000DE0
NOP
//70000D88:
JAL	70001014
OR	A0,S2,R0
BEQ	R0,R0,70000DE0
NOP
//70000D98:
JAL	70001128
OR	A0,S2,R0
BEQ	R0,R0,70000DE0
NOP
//70000DA8:
JAL	7000C8DC	;reset controller and rumble pak detection
NOP
LW	S0,00B4 (S2)
ADDIU	S1,S2,0020
BEQL	S0,R0,70000DE0
ADDIU	S0,R0,0001
//70000DC0:
LW	A0,0004 (S0)
OR	A1,S1,R0
JAL	7000DF10
OR	A2,R0,R0
LW	S0,0000 (S0)
BNEL	S0,R0,70000DC4
LW	A0,0004 (S0)
ADDIU	S0,R0,0001
//70000DE0:
BEQL	S0,R0,70000D3C
OR	A0,S3,R0
LUI	T7,8000
LW	T7,0300 (T7)	;T7=80000300: display type
ADDIU	AT,R0,0002
LUI	A0,8002
BNE	T7,AT,70000E14
NOP
//70000E00:
LUI	A0,8002
JAL	7000E060
ADDIU	A0,A0,7320
BEQ	R0,R0,70000E20
LUI	AT,3F80
//70000E14:
JAL	7000E060
ADDIU	A0,A0,6A60
LUI	AT,3F80
//70000E20:
MTC1	AT,F12
JAL	7000E0D0
NOP
LUI	AT,3F80
MTC1	AT,F12
JAL	7000E200
NOP
JAL	7000E260
OR	A0,R0,R0
JAL	7000E2D0
ADDIU	A0,R0,0001
OR	A0,S3,R0
//70000E50:
OR	A1,S4,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
LW	T8,004C (SP)
BNEL	T8,S5,70000E50
OR	A0,S3,R0
JAL	7000BD88
NOP
BEQ	R0,R0,70000E50
OR	A0,S3,R0
//70000E78:
NOP
NOP
NOP
NOP
NOP
NOP
//70000E90:	return
LW	RA,002C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
LW	S4,0024 (SP)
LW	S5,0028 (SP)
JR	RA
ADDIU	SP,SP,0050

70000EB4	1AB4	
	accepts: A0=
ADDIU	SP,SP,FFC0
SW	RA,0024 (SP)
SW	S1,0018 (SP)
OR	S1,A0,R0	;S1=A0: 
SW	S3,0020 (SP)
SW	S2,001C (SP)
SW	S0,0014 (SP)
SW	R0,003C (SP)
SW	R0,0030 (SP)
JAL	700027A4
SW	R0,002C (SP)
LW	T6,00D0 (S1)
ADDIU	T7,T6,0001
JAL	700031A0
SW	T7,00D0 (S1)	;S1+D0 +=1
JAL	7000BD88
NOP
JAL	70007914
NOP
//70000F00:
ADDIU	S3,SP,003C
ADDIU	S2,S1,0078
OR	A0,S2,R0
OR	A1,S3,R0
JAL	7000DDD0
OR	A2,R0,R0
ADDIU	S0,R0,FFFF
BEQ	V0,S0,70000F44
OR	A0,S1,R0
//70000F24:
JAL	700013D8
LW	A1,003C (SP)
OR	A0,S2,R0
OR	A1,S3,R0
JAL	7000DDD0
OR	A2,R0,R0
BNEL	V0,S0,70000F24
OR	A0,S1,R0
//70000F44:
LW	T8,00D4 (S1)
OR	A0,S1,R0
ADDIU	A1,SP,0030
BEQL	T8,R0,70000F78
LW	T0,00C8 (S1)
LW	T9,00C8 (S1)
BEQL	T9,R0,70000F78
LW	T0,00C8 (S1)
//70000F64:
JAL	70001560
OR	A0,S1,R0
BEQ	R0,R0,70000FB0
LW	S0,00B4 (S1)
//70000F74:
LW	T0,00C8 (S1)
LW	T3,00CC (S1)
ADDIU	A2,SP,002C
SLTIU	T1,T0,0001
SLL	T2,T1,0x1
SLTIU	T4,T3,0001
OR	S0,T2,T4
JAL	7000159C
OR	A3,S0,R0
BEQ	V0,S0,70000FAC
OR	A0,S1,R0
//70000FA0:
LW	A1,0030 (SP)
JAL	70001440
LW	A2,002C (SP)
//70000FAC:
LW	S0,00B4 (S1)
BEQ	S0,R0,70000FF0
NOP
//70000FB8:
LW	T5,0008 (S0)
OR	A1,S1,R0
OR	A2,R0,R0
BEQ	T5,R0,70000FDC
NOP
//70000FCC:
LW	T6,00D0 (S1)
ANDI	T7,T6,0001
BNEL	T7,R0,70000FE8	;skip if S1+D0 set
LW	S0,0000 (S0)
//70000FDC:	do only every other time...
JAL	7000DF10
LW	A0,0004 (S0)
LW	S0,0000 (S0)
BNEL	S0,R0,70000FBC
LW	T5,0008 (S0)
//70000FF0:	display stderr every 16th iteration, then return
JAL	700009F8	;test to display stderr every 16th frame
LW	A0,00D0 (S1)	;A0=S1+D0: 
LW	RA,0024 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
JR	RA
ADDIU	SP,SP,0040

70001014	1C14	
ADDIU	SP,SP,FFD0
SW	RA,001C (SP)
SW	S0,0018 (SP)
SW	R0,0028 (SP)
SW	R0,0024 (SP)
LW	A1,00C8 (A0)
OR	S0,A0,R0
SW	R0,00C8 (A0)
LUI	A0,0001
ORI	A0,A0,0001
JAL	70002854
SW	A1,002C (SP)
LW	A1,002C (SP)
LW	T6,0004 (A1)
ADDIU	A0,A1,0010
ANDI	T7,T6,0010
BEQL	T7,R0,700010AC
LW	T4,0004 (A1)
JAL	7000E340
SW	A1,002C (SP)
BEQ	V0,R0,700010A8
LW	A1,002C (SP)
LW	T8,0004 (A1)
LW	T0,0008 (A1)
ADDIU	AT,R0,0003
ORI	T9,T8,0020
ANDI	T1,T0,0007
BNE	T1,AT,700010C0
SW	T9,0004 (A1)
LW	T2,00BC (S0)
SW	T2,0000 (A1)
LW	T3,00C4 (S0)
SW	A1,00BC (S0)
BNEL	T3,R0,700010C4
LW	T6,00C8 (S0)
BEQ	R0,R0,700010C0
SW	A1,00C4 (S0)
LW	T4,0004 (A1)
ADDIU	AT,R0,FFFD
OR	A0,S0,R0
AND	T5,T4,AT
JAL	70001230
SW	T5,0004 (A1)
LW	T6,00C8 (S0)
LW	T9,00CC (S0)
OR	A0,S0,R0
SLTIU	T7,T6,0001
SLL	T8,T7,0x1
SLTIU	T0,T9,0001
OR	A3,T8,T0
SW	A3,0020 (SP)
ADDIU	A1,SP,0028
JAL	7000159C
ADDIU	A2,SP,0024
LW	A3,0020 (SP)
OR	A0,S0,R0
LW	A1,0028 (SP)
BEQL	V0,A3,7000110C
LW	RA,001C (SP)
JAL	70001440
LW	A2,0024 (SP)
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0030
JR	RA
NOP

7000111C	1D1C	target for DP Cmd clock, buffer counter, pipe counter, and tmem counter
LUI	V0,8006
JR	RA
ADDIU	V0,V0,DB30	;V0= 8005DB30

70001128	1D28	
ADDIU	SP,SP,FFD0
SW	RA,001C (SP)
SW	S0,0018 (SP)
SW	R0,0028 (SP)
SW	R0,0024 (SP)
LW	T6,00CC (A0)
OR	S0,A0,R0
LUI	A0,0001
BEQL	T6,R0,700011D0
LW	RA,001C (SP)
JAL	70002854
ORI	A0,A0,0002
LUI	A0,8006
JAL	7000E3C0	;set DP Cmd clock, buffer counter, pipe counter, and tmem counter to A0
ADDIU	A0,A0,DB30	;A0=8005DB30: p->target
LW	A1,00CC (S0)
SW	R0,00CC (S0)
ADDIU	AT,R0,FFFE
LW	T7,0004 (A1)
OR	A0,S0,R0
AND	T8,T7,AT
JAL	70001230
SW	T8,0004 (A1)
LW	T9,00C8 (S0)
LW	T2,00CC (S0)
OR	A0,S0,R0
SLTIU	T0,T9,0001
SLL	T1,T0,0x1
SLTIU	T3,T2,0001
OR	A3,T1,T3
SW	A3,0020 (SP)
ADDIU	A1,SP,0028
JAL	7000159C
ADDIU	A2,SP,0024
LW	A3,0020 (SP)
OR	A0,S0,R0
LW	A1,0028 (SP)
BEQL	V0,A3,700011D0
LW	RA,001C (SP)
JAL	70001440
LW	A2,0024 (SP)
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0030
JR	RA
NOP

700011E0	1DE0	
	accepts: A0=p->??? or NULL
ADDIU	SP,SP,FFD8
SW	RA,0014 (SP)
BEQ	A0,R0,7000121C	;if A0 NULL, return
SW	A0,0028 (SP)
JAL	7000E410
NOP
JAL	7000E450
SW	V0,001C (SP)
LW	T7,001C (SP)
BEQ	V0,T7,70001214	;if same video buffer, return A0 f/caller
NOP
BEQ	R0,R0,70001220
OR	V0,R0,R0
//70001214:	return A0 f/caller
BEQ	R0,R0,70001220
LW	V0,0028 (SP)
//7000121C:	return NULL
OR	V0,R0,R0
//70001220:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

70001230	1E30	
	accepts; A0=, A1=p->???
ADDIU	SP,SP,FFE0
SW	RA,001C (SP)
SW	S0,0018 (SP)
SW	A0,0020 (SP)
LW	T6,0004 (A1)
OR	S0,A1,R0	;S0=A1: 
ADDIU	A2,R0,0001
ANDI	T7,T6,0003
BNE	T7,R0,700013C4
OR	V0,R0,R0
//70001250:
LW	A0,0050 (A1)
JAL	7000DF10
LW	A1,0054 (A1)
LW	T8,0010 (S0)
ADDIU	AT,R0,0001
BNE	T8,AT,700013BC
NOP
//7000126C:
LW	V0,0008 (S0)
ANDI	T9,V0,0040
BEQ	T9,R0,700013BC
ANDI	T0,V0,0020
BEQ	T0,R0,700013BC
LUI	T1,8002
LW	T1,30CC (T1)
BEQ	T1,R0,700012A8
NOP
//70001290:
JAL	7000E2D0
OR	A0,R0,R0
LUI	AT,8002
SW	R0,30CC (AT)
LUI	V1,8002
LW	V1,30B0 (V1)
//700012A8:
LUI	T3,8002
LUI	A0,0008
SLL	T2,V1,0x2
ADDU	T3,T3,T2
LW	T3,30C4 (T3)
OR	V1,T2,R0
BEQ	T3,R0,70001358
NOP
//700012C8:
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
ORI	A0,A0,0401	;A0=00080401
LUI	V1,8002
LW	V1,30B0 (V1)
LUI	T7,8006
ADDIU	T7,T7,DB40
SLL	T6,V1,0x2
ADDU	T6,T6,V1
SLL	T6,T6,0x4
LUI	T5,8006
SLL	T4,V1,0x2
ADDU	T5,T5,T4
ADDU	T8,T6,T7
ADDIU	T1,T8,0048
LW	T5,DBE0 (T5)
LW	AT,0000 (T8)
ADDIU	T8,T8,000C
//7000130C:
ADDIU	T5,T5,000C
SW	AT,FFF4 (T5)
LW	AT,FFF8 (T8)
SW	AT,FFF8 (T5)
LW	AT,FFFC (T8)
BNE	T8,T1,7000130C
SW	AT,FFFC (T5)
//70001330:
LW	AT,0000 (T8)
OR	A0,V0,R0
SW	AT,0000 (T5)
LW	T1,0004 (T8)
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
SW	T1,0004 (T5)
LUI	V1,8002
LW	V1,30B0 (V1)
SLL	T2,V1,0x2
OR	V1,T2,R0
//70001358:
LUI	AT,8002
ADDU	AT,AT,V1
JAL	7000E0D0
LWC1	F12,30B4 (AT)
LUI	T3,8002
LW	T3,30B0 (T3)
LUI	AT,8002
SLL	T4,T3,0x2
ADDU	AT,AT,T4
JAL	7000E200
LWC1	F12,30BC (AT)
LUI	T6,8002
LW	T6,30B0 (T6)	;T6=800230B0: 
LUI	AT,8002
ADDIU	T7,T6,0001
BGEZ	T7,700013A8	;^=1 if not negative
ANDI	T0,T7,0001
BEQ	T0,R0,700013A8	;if odd, subtract 2
NOP
ADDIU	T0,T0,FFFE
//700013A8:	print stderr
SW	T0,30B0 (AT)	;update 800230B0
JAL	700009A0	;test to display stderr and update Count
LW	A0,000C (S0)	;A0=S0+C: p->video buffer
JAL	7000E490
LW	A0,000C (S0)	;A0=S0+C: p->video buffer
//700013BC:
BEQ	R0,R0,700013C4
ADDIU	V0,R0,0001
//700013C4:	return
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

700013D8	1FD8	
	accepts: A0=p->???, A1=p->???
LW	V0,0010 (A1)
ADDIU	AT,R0,0002
ADDIU	T6,R0,0001
BNEL	V0,AT,70001414
LW	V0,00C4 (A0)
LW	V0,00C0 (A0)
BEQL	V0,R0,70001404
SW	A1,00B8 (A0)
BEQ	R0,R0,70001404
SW	A1,0000 (V0)
//70001400:
SW	A1,00B8 (A0)
//70001404:
SW	A1,00C0 (A0)
BEQ	R0,R0,7000142C
SW	T6,00D4 (A0)
//70001410:
LW	V0,00C4 (A0)
BEQL	V0,R0,70001428
SW	A1,00BC (A0)
BEQ	R0,R0,70001428
SW	A1,0000 (V0)
//70001424:
SW	A1,00BC (A0)
SW	A1,00C4 (A0)
//7000142C:
LW	T7,0008 (A1)
SW	R0,0000 (A1)
ANDI	T8,T7,0003
JR	RA
SW	T8,0004 (A1)

70001440	2040	
	accepts: A0=, A1=, A2=
ADDIU	SP,SP,FFD8
SW	S1,0018 (SP)
SW	S0,0014 (SP)
OR	S0,A1,R0	;S0= A1
OR	S1,A2,R0	;A1= A2
SW	RA,001C (SP)
BEQ	A1,R0,7000150C
SW	A0,0028 (SP)
LW	V0,0010 (A1)
ADDIU	AT,R0,0002
BNEL	V0,AT,70001480
ADDIU	AT,R0,0002
JAL	7000D320	;set Cache index writeback invalidate for 2000 bytes at 80000000
NOP
LW	V0,0010 (S0)
ADDIU	AT,R0,0002
//70001480:
BEQL	V0,AT,700014A8
ADDIU	AT,R0,0002
LW	T6,0004 (S0)
ANDI	T7,T6,0010
BNEL	T7,R0,700014A8
ADDIU	AT,R0,0002
JAL	7000E4E0	;A0-> DP Cmd Status
ADDIU	A0,R0,03C0	;A0= clear all counters
LW	V0,0010 (S0)
ADDIU	AT,R0,0002
//700014A8:
BNE	V0,AT,700014C4
LUI	A0,0004
LUI	A0,0003
JAL	70002854
ORI	A0,A0,0001
BEQ	R0,R0,700014DC
LW	T8,0004 (S0)
//700014C4:
JAL	70002854
ORI	A0,A0,0001
LUI	A0,0002
JAL	70002854
ORI	A0,A0,0002
LW	T8,0004 (S0)
//700014DC:
ADDIU	AT,R0,FFCF
ADDIU	A0,S0,0010
AND	T9,T8,AT
SW	T9,0004 (S0)
JAL	7000E60C
SW	A0,0020 (SP)
JAL	7000E76C
LW	A0,0020 (SP)
LW	T0,0028 (SP)
BNE	S0,S1,7000150C
SW	S0,00C8 (T0)
SW	S1,00CC (T0)
//7000150C:
BEQL	S1,R0,70001550
LW	RA,001C (SP)
BEQL	S1,S0,70001550	;return if S1 NULL or equal to S0
LW	RA,001C (SP)
LW	T1,003C (S1)	;T1=S1+3C: 
LW	A0,0038 (S1)	;A0=S1+38: p->commands
LW	A2,0000 (T1)	;A2=T1+0: 
JAL	7000E7B0	;sets A3 bytes of commands at A0 to DP Cmd
LW	A3,0004 (T1)	;A3=T1+4: size
ADDIU	T2,R0,0001
LUI	AT,8002
LW	T3,0028 (SP)
SW	T2,30A8 (AT)	;1->800230A8: 
LUI	AT,8002
SW	R0,30AC (AT)	;0->800230AC: 
SW	S1,00CC (T3)
//7000154C:	return
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0028

70001560	2160	
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LW	V0,00C8 (A0)
ADDIU	AT,R0,0001
LW	T6,0010 (V0)
BNEL	T6,AT,70001590
LW	RA,0014 (SP)
LW	T7,0004 (V0)
ORI	T8,T7,0010
JAL	7000E860	;RSP Status: set signal 0
SW	T8,0004 (V0)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000159C	219C	
ADDIU	SP,SP,FFD8
SW	S1,0018 (SP)
OR	S1,A0,R0
SW	RA,001C (SP)
SW	S0,0014 (SP)
ADDIU	T0,R0,FFFD
//700015B4:
LW	T6,00D4 (S1)
OR	V1,A3,R0
LW	S0,00BC (S1)
BEQ	T6,R0,7000161C
LW	V0,00B8 (S1)
ANDI	T7,A3,0002
BEQL	T7,R0,70001620
OR	A0,S0,R0
BEQL	S0,R0,700015FC
SW	V0,0000 (A1)
LW	T8,0008 (S0)
AND	V1,A3,T0
ANDI	T9,T8,0010
BEQL	T9,R0,700015FC
SW	V0,0000 (A1)
BEQ	R0,R0,70001758
SW	S0,0000 (A1)
//700015F8:
SW	V0,0000 (A1)
LW	T2,00B8 (S1)
SW	R0,00D4 (S1)
AND	V1,A3,T0
LW	T3,0000 (T2)
BNE	T3,R0,70001758
SW	T3,00B8 (S1)
BEQ	R0,R0,70001758
SW	R0,00C0 (S1)
//7000161C:
OR	A0,S0,R0
SW	V1,0024 (SP)
SW	A1,002C (SP)
SW	A2,0030 (SP)
JAL	700011E0
SW	A3,0034 (SP)
LW	V1,0024 (SP)
LW	A1,002C (SP)
LW	A2,0030 (SP)
LW	A3,0034 (SP)
ADDIU	T0,R0,FFFD
BEQ	V0,R0,70001758
ADDIU	T1,R0,FFFE
LW	T5,0008 (S0)
ANDI	T6,T5,0007
ADDIU	T7,T6,FFFF
SLTIU	AT,T7,0007
BEQ	AT,R0,70001758
SLL	T7,T7,0x2
LUI	AT,8003
ADDU	AT,AT,T7
LW	T7,8400 (AT)	;T7=80028400+offset: p->handler
JR	T7
NOP
//7000167C:
LW	T8,0004 (S0)
ANDI	T2,A3,0002
ADDIU	AT,R0,0003
ANDI	T9,T8,0020
BEQ	T9,R0,700016D4
NOP
BEQ	T2,R0,70001758
NOP
SW	S0,0000 (A1)
LW	T3,0004 (S0)
AND	V1,A3,T0
ANDI	T4,T3,0001
BEQL	T4,R0,700016C0
LW	T5,00BC (S1)
SW	S0,0000 (A2)
AND	V1,V1,T1
//700016BC:
LW	T5,00BC (S1)
LW	T6,0000 (T5)
BNE	T6,R0,70001758
SW	T6,00BC (S1)
BEQ	R0,R0,70001758
SW	R0,00C4 (S1)
//700016D4:
BNE	A3,AT,70001758
NOP
SW	S0,0000 (A2)
SW	S0,0000 (A1)
LW	T8,00BC (S1)
ADDIU	AT,R0,FFFC
AND	V1,A3,AT
LW	T9,0000 (T8)
BNE	T9,R0,70001758
SW	T9,00BC (S1)
BEQ	R0,R0,70001758
SW	R0,00C4 (S1)
//70001704:
LW	V0,0004 (S0)
ANDI	T4,A3,0002
ANDI	T3,V0,0002
BEQ	T3,R0,7000172C
ANDI	T5,V0,0001
BEQ	T4,R0,70001758
NOP
SW	S0,0000 (A1)
BEQ	R0,R0,70001758
AND	V1,A3,T0
//7000172C:
BEQ	T5,R0,70001758
ANDI	T6,A3,0001
BEQ	T6,R0,70001758
NOP
SW	S0,0000 (A2)
LW	T7,00BC (S1)
AND	V1,A3,T1
LW	T8,0000 (T7)
BNE	T8,R0,70001758
SW	T8,00BC (S1)
SW	R0,00C4 (S1)
//70001758:
BEQL	V1,A3,7000176C
LW	RA,001C (SP)
BEQ	R0,R0,700015B4
OR	A3,V1,R0
//70001768:	return
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
ADDIU	SP,SP,0028
JR	RA
OR	V0,V1,R0

70001780	2380	sets TLB indexed entry 0 to mirror 1KB of rdram from 80000000 to C0000000
MFC0	T0,EntryHi	;T0 = cur.EntryHi
ADDIU	T1,R0,0000
MTC0	T1,Index	;COP0 Index = 0
MTC0	R0,PageMask	;COP0 PageMask = 0: 1KB
ADDIU	T2,R0,0017
LUI	T1,C000
MTC0	T1,EntryHi	;COP EntryHi = C0000000
LUI	T1,8000
SRL	T3,T1,0x6
OR	T3,T3,T2	;T3|= 17
MTC0	T3,EntryLo0	;COP0 EntryLo0 = global, valid, dirty, uncached; map 80000000
ADDIU	T1,R0,0001
MTC0	T1,EntryLo1	;COP0 EntryLo1 = 1: global
NOP
TLBWI
NOP
NOP
NOP
NOP
MTC0	T0,EntryHi	;restore EntryHi
JR	RA
NOP

700017E0	23E0	establishes 7F- TLB buffer and management table
LUI	V1,8006
LUI	V0,8006
ADDIU	V0,V0,E3F0	;V0=8005E3F0
ADDIU	V1,V1,DBF0	;V1=8005DBF0
ADDIU	A0,R0,0001
//700017F4:	initialize the 8005DBF0 - 8005E3F0 table
ADDIU	V1,V1,0010
SLTU	AT,V1,V0
SW	A0,FFF0 (V1)	;1->tbl+0
BNE	AT,R0,700017F4
SW	R0,FFF4 (V1)	;0->tbl+4
//70001808:	fill range 8005E3F0 - 8005E4A4 with 0100
LUI	AT,8006
LUI	V1,8006
LUI	V0,8006
ADDIU	V0,V0,E4A4	;V0=8005E4A4
ADDIU	V1,V1,E3F4	;V1=8005E3F4
SB	R0,E3F1 (AT)
SB	A0,E3F0 (AT)	;0100->8005E3F0
SB	R0,E3F3 (AT)
SB	A0,E3F2 (AT)	;0100->8005E3F2
//7000182C:	loop for remaining
ADDIU	V1,V1,0008
SB	R0,FFFB (V1)
SB	A0,FFFA (V1)	;0100->tbl+2
SB	R0,FFFD (V1)
SB	A0,FFFC (V1)	;0100->tbl+4
SB	R0,FFFF (V1)
SB	A0,FFFE (V1)	;0100->tbl+6
SB	R0,FFF9 (V1)
BNE	V1,V0,7000182C
SB	A0,FFF8 (V1)	;0100->tbl+0
//70001854:	set 7F- TLB allocation and context conversion
LUI	T6,803B
ADDIU	T6,T6,B400	;T6=803AB400: end of this block
ADDIU	AT,R0,E000
AND	T7,T6,AT	;T7=803AB400 & ~1FFF: 803AA000
LUI	AT,FFF4
ORI	AT,AT,C000
ADDU	T8,T7,AT	;T8=803AA000 - B4000: size of bank (0x5A entries)
LUI	AT,8006
SW	T8,E4A8 (AT)	;T8->8005E4A8: 802F6000, or p->end of free memory and start of TLB block
LUI	AT,FFC0
LUI	T9,8006
ADDIU	T9,T9,DBF0
ORI	AT,AT,8000
ADDU	T0,T9,AT	;T0=8005DBF0 - 3F8000: 7FC65BF0
LUI	AT,8006
JR	RA
SW	T0,E4A4 (AT)	;8005E4A4 = 7FC65BF0: conversion for Context

70001898	2498	???; pointless conditional tests, will reset 800230D0
LUI	V1,8002
ADDIU	V1,V1,30D0
LW	V0,0000 (V1)	;V0=800230D0+0: #cur.TLB entries?
SLTI	AT,V0,0033
BEQ	AT,R0,700018B8	;branch pointlessly if 33
SLTI	AT,V0,001A
BEQ	AT,R0,700018B8	;branch pointlessly if 1A
NOP
//700018B8:	return
JR	RA
SW	R0,0000 (V1)	;0->800230D0: reset value

700018C0	24C0	V0=index of TLB entry matching A0 or 80000000 if not found
	accepts: A0=TLB pointer
ADDIU	SP,SP,FFD8
SW	S2,0020 (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
OR	S1,A0,R0	;S1=A0: TLB pointer
SW	RA,0024 (SP)
OR	S0,R0,R0	;S0=0	init index
ADDIU	S2,R0,0020	;S2=20: 32 TLB entries total
//700018E0:	grab next TLB entry
JAL	7000E880	;V0= virtual address for TLB index A0
OR	A0,S0,R0	;A0=S0: index
BNEL	V0,S1,700018FC	;iterate on miss
ADDIU	S0,S0,0001
BEQ	R0,R0,70001908	;V0=S0: index of matching entry
OR	V0,S0,R0
//700018F8:	iterate or return 80000000 when exhausted
ADDIU	S0,S0,0001	;S0+=1	next index
BNE	S0,S2,700018E0	;loop for all entries
NOP
LUI	V0,8000
//70001908:	return
LW	RA,0024 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
JR	RA
ADDIU	SP,SP,0028

70001920	2520	find and remove TLB entry A0
	accepts: A0=TLB pointer
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	700018C0	;V0=index matching TLB entry A0
NOP
SLL	T6,V0,0x0
BLTZ	T6,70001944	;return if entry not found
OR	A0,V0,R0	;A0=V0: index
JAL	7000D3D0	;remove TLB index A0
NOP
//70001944:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70001954	2554	remove index A0 TLB entry from table at 8005E3F0
	accepts: A0=TLB entry index
	table format:
		0x0	1 if dirty
		0x1	chunk # (7F000000 | chunk<<D)
LUI	T7,8006
ADDIU	T7,T7,E3F0	;T7=8005E3F0: base of index
SLL	T6,A0,0x1	;T6=A0 to offset
ADDU	V1,T6,T7
LBU	T8,0000 (V1)	;T8=8005E3F0+offset: dirty byte
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
BNEL	T8,R0,700019CC	;return if dirty
LW	RA,0014 (SP)
//70001978:
LBU	A0,0001 (V1)	;A0= table+1: chunk#
LUI	AT,7F00
SW	V1,0018 (SP)	;SP+18= table
SLL	T9,A0,0xD	;T9= chunk * 2000: chunk offset
JAL	700018C0	;V0= index matching TLB entry A0
OR	A0,T9,AT	;A0= 7F000000 | chunk offset
SLL	T1,V0,0x0
LW	V1,0018 (SP)
BLTZ	T1,700019AC	;skip if not found
OR	A0,V0,R0	;A0=V0: index
//700019A0:
JAL	7000D3D0	;remove TLB index A0
SW	V1,0018 (SP)
LW	V1,0018 (SP)
//700019AC:	invalidate
LBU	T2,0001 (V1)	;T2=table+1: chunk#
LUI	AT,8006
ADDIU	V0,R0,0001
SLL	T3,T2,0x4	;T3= chunk# * 10
ADDU	AT,AT,T3
SW	V0,DBF0 (AT)	;1->8005DBF0+offset: invalidate
SB	V0,0000 (V1)	;set dirty
//700019C8:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

700019D8	25D8	translates and loads ROM based on TLB address
	accepts: A0=TLB address
LUI	V0,8002
ADDIU	V0,V0,30D0	;V0=800230D0
LW	T6,0000 (V0)	;T6=800230D0: # TLB page entries?
LUI	AT,7FFF
ADDIU	SP,SP,FFB0
ORI	AT,AT,E000	;AT=7FFFE000: address mask for TLB address (0x2000 pages)
SW	RA,001C (SP)
AND	A0,A0,AT	;A0&=7FFFE000: TLB address & mask
ADDIU	T7,T6,0001	;T7=T6+1
SW	S0,0018 (SP)
SW	T7,0000 (V0)	;count at 800230D0++
JAL	70001920	;find and remove TLB entry A0
SW	A0,0028 (SP)	;SP+28=A0: TLB address mask
JAL	70001B10	;V0= random value for TLB random entries
NOP
//70001A14:
ADDIU	AT,R0,005A	;AT=0x5A
DIVU	V0,AT
MFHI	A0		;A0=V0/0x5A
LUI	V1,8002
ADDIU	V1,V1,30D4	;V1=800230D4
SW	A0,0000 (V1)	;A0->800230D4: segment# (0x2000 block #)
JAL	70001954	;remove index A0 TLB entry from table at 8005E3F0
OR	S0,A0,R0	;S0=A0
//70001A34:
LW	V0,0028 (SP)	;V0=SP+28: TLB address mask
LUI	T9,8006
LW	T9,E4A8 (T9)	;T9=8005E4A8: p->TLB space (after free mem)
LUI	AT,00FF
ORI	AT,AT,E000	;AT=FFE000: ROM address mask
SLL	T0,S0,0xD	;T0=S0 * 0x2000: offset to memory
LUI	T2,0003
AND	T1,V0,AT	;T1=V0 & FFE000: range - 7F-extension
ADDIU	T2,T2,4B30	;T2=0x34B30: start of TLB ROM range
ADDU	A0,T9,T0	;A0=p->memory + offset to block
SW	A0,0034 (SP)	;SP+34=rdram target
ADDU	A1,T1,T2	;A1=offset + ROM address
OR	V0,T1,R0	;V0=offset
SW	T1,0024 (SP)	;SP+24=offset
JAL	70005C1C	;loads A2 bytes from hardware A1 to A0
ADDIU	A2,R0,2000	;A2=0x2000: size
//70001A74:
LUI	A0,4000		;A0=40000000
JAL	7000D350	;invalidate Cache for A1 bytes at A0
LUI	A1,4000		;A1=40000000
LUI	A0,8000		;A0=80000000
JAL	7000D350	;invalidate Cache for A1 bytes at A0
LUI	A1,1000		;A1=10000000
//70001A8C:
LW	A1,0024 (SP)	;A1=SP+24: offset
LUI	T5,8006
ADDIU	T5,T5,DBF0	;T5=8005DBF0: table indicating loaded TLB blocks
SRL	T3,A1,0xD	;T3=offset/0x2000: block#
SLL	T4,T3,0x4	;T4=block# *0x10: 
ADDU	A2,T4,T5	;A2=address of block's index
SW	S0,0004 (A2)	;S0->block index+4: offset to memory
SW	A2,0020 (SP)	;SP+20=A2: address of block's index
SW	T3,0028 (SP)	;SP+28=T3: block#
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
LW	A0,0034 (SP)	;A0=SP+34: rdram target
//70001AB8:
LW	RA,001C (SP)
SRL	T6,V0,0xC	;T6=V0/0x1000
SLL	T9,S0,0x1	;T9=S0*2: offset to memory * 2
LUI	T0,8006
LW	A1,0028 (SP)	;A1=SP+28: block#
LW	A2,0020 (SP)	;A2=SP+20: address of block's index
SLL	T7,T6,0x6	;T7=4(V0/0x100)
ADDIU	T0,T0,E3F0	;T0=8005E3F0
ORI	T8,T7,001F	;T8=4(V0/0x100) | 0x1F
ADDU	V1,T9,T0	;V1=8005E3F0 + offset to memory * 2
LW	S0,0018 (SP)	;S0=SP+18: offset to memory
SB	R0,0000 (V1)	;0-> 8005E3F0 + offset to memory * 2
ADDIU	SP,SP,0050
SB	A1,0001 (V1)	;block# -> 8005E3F1 + offset to memory * 2
JR	RA
SW	T8,0000 (A2)	;4(V0/0x100) | 0x1F -> address of block's index

70001AF8	26F8	V0=p->TLB memory, or alternately end of free memory
LUI	V0,8006
JR	RA
LW	V0,E4A8 (V0)	;V0=8005E4A8: p->TLB allocated block

70001B10	2710	V0= random value for TLB random entries
LUI	A0,8002
LD	A0,30E0 (A0)	;A0=800230E0: TLB random seed
LUI	AT,8002
DSLL32	A2,A0,0x1F
DSLL	A1,A0,0x1F
DSRL	A2,A2,0x1F
DSRL32	A1,A1,0x0
DSLL32	A0,A0,0xC
OR	A2,A2,A1
DSRL32	A0,A0,0x0
XOR	A2,A2,A0
DSRL	A0,A2,0x14
ANDI	A0,A0,0FFF
XOR	A0,A0,A2
DSLL32	V0,A0,0x0
SD	A0,30E0 (AT)	;update TLB random
JR	RA
DSRA32	V0,V0,0x0

70001B60	2760	resolves TLB address on InvalidHit, writting random entry; copied to 80000000
MTC0	R0,PageMask	;PageMask = 0: 1KB
NOP
MFC0	K0,Context	;K0= Context, which if <<9 = Vaddr base
LUI	K1,8006
ADDIU	K1,K1,E4A4
LW	K1,0000 (K1)	;K1=8005E4A4: Context conversion factor [7FC65BF0]
ADDU	K0,K0,K1
LW	K1,0000 (K0)	;K1= Context + conversion: 8005DBF0-8005E3F0
MTC0	K1,EntryLo0
NOP
ADDIU	K1,K1,0040	;K1+=40: next page (+1000)
MTC0	K1,EntryLo1
NOP
TLBWR
NOP
NOP
NOP
NOP
ERET

70001BB0	29B0	sets #hardwired TLB entries to 2
ADDIU	T0,R0,0002
MTC0	T0,Wired/SP-DMA Busy	;2->COP0 Wired
ADDIU	T0,R0,0000
MTC0	T0,Context/SP-Status	;0->COP0 Context
JR	RA
NOP

70001BD0	29D0	
	accepts: A0=p->???
ADDIU	SP,SP,FEE8
SW	S3,002C (SP)
LUI	T6,7000
SW	RA,0034 (SP)
SW	S4,0030 (SP)
SW	S2,0028 (SP)
SW	S1,0024 (SP)
SW	S0,0020 (SP)
ADDIU	T6,T6,25D8
OR	S3,A0,R0	;S3=A0: 
SW	T6,0010 (A0)	;700025D8 -> A0+10
JAL	7000E930
ADDIU	A0,R0,5622	;A0=5622
SLL	T7,V0,0x1
MTC1	T7,F4
LUI	AT,4270
MTC1	AT,F8
CVT.S.W	F6,F4
ADDIU	T9,R0,0001
LUI	A0,8006
LUI	S4,8006
ADDIU	A0,A0,ECC4
SW	V0,0018 (S3)
DIV.S	F0,F6,F8
ADDIU	S4,S4,ECC8
CFC1	T8,F31
CTC1	T9,F31
NOP
CVT.W.S	F10,F0
CFC1	T9,F31
NOP
ANDI	T9,T9,0078
BEQ	T9,R0,70001C9C
LUI	AT,4F00
MTC1	AT,F10
ADDIU	T9,R0,0001
SUB.S	F10,F0,F10
CTC1	T9,F31
NOP
CVT.W.S	F10,F10
CFC1	T9,F31
NOP
ANDI	T9,T9,0078
BNE	T9,R0,70001C94
NOP
MFC1	T9,F10
LUI	AT,8000
BEQ	R0,R0,70001CAC
OR	T9,T9,AT
BEQ	R0,R0,70001CAC
ADDIU	T9,R0,FFFF
MFC1	T9,F10
NOP
BLTZ	T9,70001C94
NOP
OR	V1,T9,R0
CTC1	T8,F31
MTC1	V1,F16
SW	T9,0000 (A0)
BGEZ	T9,70001CD4
CVT.S.W	F18,F16
LUI	AT,4F80
MTC1	AT,F4
NOP
ADD.S	F18,F18,F4
C.LT.S	F18,F0
NOP
BC1F	70001CEC
ADDIU	T0,V1,0001
SW	T0,0000 (A0)
OR	V1,T0,R0
ANDI	T1,V1,000F
BEQ	T1,R0,70001D04
ADDIU	AT,R0,FFF0
AND	T2,V1,AT
ADDIU	V1,T2,0010
SW	V1,0000 (A0)
ADDIU	T4,V1,FFF0
LUI	AT,8006
SW	T4,ECC0 (AT)
ADDIU	T5,V1,0035
SW	T5,0000 (S4)
LBU	T6,001C (S3)
ADDIU	AT,R0,0006
LUI	A0,8006
BNE	T6,AT,70001D90
ADDIU	A0,A0,E750
LUI	T7,8002
ADDIU	V0,SP,0048
ADDIU	T7,T7,3100
ADDIU	T9,T7,00C0
OR	T0,V0,R0
LW	AT,0000 (T7)
ADDIU	T7,T7,000C
ADDIU	T0,T0,000C
SW	AT,FFF4 (T0)
LW	AT,FFF8 (T7)
SW	AT,FFF8 (T0)
LW	AT,FFFC (T7)
BNE	T7,T9,70001D40
SW	AT,FFFC (T0)
LW	AT,0000 (T7)
LUI	A0,8006
ADDIU	A0,A0,E750
SW	AT,0000 (T0)
LW	T9,0004 (T7)
OR	A1,S3,R0
SW	T9,0004 (T0)
JAL	7000EB1C
SW	V0,0020 (S3)
BEQ	R0,R0,70001D98
NOP
JAL	7000EB1C
OR	A1,S3,R0
LUI	S0,8006
LUI	S1,8006
ADDIU	S1,S1,E524
ADDIU	S0,S0,E518
LW	A2,0014 (S3)
ADDIU	T1,R0,0060
SW	T1,0010 (SP)	;SP+10= 60 bytes
OR	A0,R0,R0
OR	A1,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
LW	T2,0000 (S4)
SW	V0,0008 (S0)
LW	A2,0014 (S3)
SLL	T3,T2,0x2
SW	T3,0010 (SP)
OR	A0,R0,R0
OR	A1,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
LW	T4,0008 (S0)
ADDIU	S0,S0,0004
SLTU	AT,S0,S1
BNE	AT,R0,70001DA8
SW	V0,0000 (T4)
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,E730	;A1=8005E730
ADDIU	A0,A0,E718	;A0=8005E718
JAL	7000D6D0
ADDIU	A2,R0,0008	;A2=8
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,E6F8	;A1=8005E6F8
ADDIU	A0,A0,E6E0	;A0=8005E6E0
JAL	7000D6D0
ADDIU	A2,R0,0008	;A2=8
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,F2E8	;A1=8005F2E8
ADDIU	A0,A0,F2D0	;A0=8005F2D0
JAL	7000D6D0
ADDIU	A2,R0,0040	;A2=40
LUI	V0,8006
ADDIU	V0,V0,E7C0
LUI	S1,8006
LUI	S0,8006
SW	R0,0004 (V0)
SW	R0,0000 (V0)
ADDIU	S0,S0,E7D4
ADDIU	S1,S1,E7C0
OR	S2,R0,R0	;S2=0	init. count
//70001E68:	add a 200 byte chunk for each music track
OR	A0,S0,R0
JAL	7000EAC0
OR	A1,S1,R0
LW	A2,0014 (S3)
ADDIU	T5,R0,0200
SW	T5,0010 (SP)	;SP+10= 200 bytes
OR	A0,R0,R0
OR	A1,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
ADDIU	S2,S2,0001	;S2+=1	next track
SLTI	AT,S2,003F
ADDIU	S1,S1,0014
ADDIU	S0,S0,0014
BNE	AT,R0,70001E68	;loop for each track
SW	V0,FFFC (S1)
//70001EA8:
LW	A2,0014 (S3)
ADDIU	T6,R0,0200
SW	T6,0010 (SP)	;SP+10= 200 bytes
OR	A0,R0,R0
OR	A1,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
SW	V0,0010 (S1)
LUI	S1,8006
LUI	S0,8006
ADDIU	S0,S0,E518
ADDIU	S1,S1,E520
//70001ED8:	create four buffers of 5DC0
LW	A2,0014 (S3)
ADDIU	T8,R0,5DC0
SW	T8,0010 (SP)	;SP+10= 5DC0
OR	A0,R0,R0
OR	A1,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
ADDIU	S0,S0,0004
BNE	S0,S1,70001ED8
SW	V0,FFFC (S0)
//70001F00:
LUI	A0,803B
ADDIU	A0,A0,3950	;A0= 803B3950
JAL	700006F0	;V0= new stack pointer
ADDIU	A1,R0,1000	;A1= 1000
LUI	A0,8006
LUI	A2,7000
ADDIU	T9,R0,0014
SW	T9,0014 (SP)
ADDIU	A2,A2,1F7C	;A2= 70001F7C
ADDIU	A0,A0,E530	;A0= 8005E530
ADDIU	A1,R0,0004	;A1= 4
OR	A3,R0,R0	;A3=0
JAL	7000D430	;initialize thread entry at A0 with values
SW	V0,0010 (SP)
LW	RA,0034 (SP)
LW	S0,0020 (SP)
LW	S1,0024 (SP)
LW	S2,0028 (SP)
LW	S3,002C (SP)
LW	S4,0030 (SP)
JR	RA
ADDIU	SP,SP,0118

70001F58	2B58	insert sound manager thread
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,8006
JAL	7000D580	;insert thread and execute if no thread currently running
ADDIU	A0,A0,E530	;A0= 8005E530
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70001F7C	2B7C
ADDIU	SP,SP,FF90
SW	S6,0030 (SP)
LUI	S6,8006
SW	A0,0070 (SP)
ADDIU	S6,S6,E6E0	;S6=8005E6E0
SW	RA,003C (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
LUI	A0,8006
LUI	A1,8006
SW	S8,0038 (SP)
SW	S7,0034 (SP)
SW	S5,002C (SP)
SW	S4,0028 (SP)
SW	S3,0024 (SP)
SW	S0,0018 (SP)
OR	S1,R0,R0
OR	S2,R0,R0
SW	R0,0064 (SP)
SW	R0,0060 (SP)
ADDIU	A1,A1,E7A0	;A1= 8005E7A0: 
ADDIU	A0,A0,DA40	;A0= 8005DA40: 
OR	A2,S6,R0	;A2= 8005E6E0: 
JAL	70000C14
ADDIU	A3,R0,0001
LUI	S5,8006
LUI	S4,8006
LUI	S3,8006
LUI	S0,8006
ADDIU	S0,S0,E4D0
ADDIU	S3,S3,E4B8
ADDIU	S4,S4,E4D8
ADDIU	S5,S5,E4E0
ADDIU	S8,R0,0001
ADDIU	S7,SP,0064
OR	A0,S6,R0
OR	A1,S7,R0
JAL	7000DDD0
OR	A2,S8,R0
LW	T6,0064 (SP)
ADDIU	AT,R0,0005
LH	A0,0000 (T6)
BEQ	A0,S8,70002044
NOP
BEQ	A0,AT,700021F4
ADDIU	AT,R0,000A
BEQL	A0,AT,70002200
OR	S2,S8,R0
BEQ	R0,R0,70002200
NOP
JAL	7000EBB0
NOP
SW	V0,0000 (S4)
SW	V1,0004 (S4)
JAL	70002854
LUI	A0,0003
LUI	T7,8002
LW	T7,30F4 (T7)
ADDIU	AT,R0,0003
LUI	A0,8006
DIVU	T7,AT
MFHI	T8
SLL	T9,T8,0x2
ADDU	A0,A0,T9
LW	A0,E520 (A0)
JAL	70002244
LW	A1,0060 (SP)
ADDIU	S1,S1,0001
JAL	70002854
LUI	A0,0006
JAL	7000EBB0
NOP
LW	T2,0000 (S4)
LW	T3,0004 (S4)
SW	V0,0000 (S5)
SUBU	T8,V0,T2
SLTU	AT,V1,T3
SUBU	T8,T8,AT
SW	V1,0004 (S5)
LUI	AT,8006
SUBU	T9,V1,T3
SW	T9,E4C4 (AT)
SW	T8,E4C0 (AT)
ADDIU	AT,R0,00F0
DIV	S1,AT
MFHI	T0
SW	T9,0044 (SP)
SW	T8,0040 (SP)
SW	V0,0050 (SP)
SW	V1,0054 (SP)
SW	T2,0048 (SP)
BNE	T0,R0,7000215C
SW	T3,004C (SP)
LW	A0,0000 (S0)
LW	A1,0004 (S0)
ADDIU	A2,R0,0000
JAL	7000ECA8	;(V0,V1) = (A0,A1) / (A2,A3)
ADDIU	A3,R0,00F0
LUI	AT,8006
SW	V0,E4C8 (AT)
SW	V1,E4CC (AT)
LW	T9,0004 (S4)
LW	T8,0000 (S4)
LW	T7,0004 (S5)
LW	T6,0000 (S5)
ADDIU	T2,R0,0000
SLTU	AT,T7,T9
SUBU	T0,T6,T8
SUBU	T0,T0,AT
ADDIU	T3,R0,0000
ADDIU	T4,R0,0000
ADDIU	T5,R0,0000
SUBU	T1,T7,T9
SW	T1,0044 (SP)
SW	T5,0004 (S3)
SW	T4,0000 (S3)
SW	T3,0004 (S0)
SW	T0,0040 (SP)
BEQ	R0,R0,7000219C
SW	T2,0000 (S0)
LW	T3,0004 (S0)
LW	T5,0054 (SP)
LW	T2,0000 (S0)
LW	T4,0050 (SP)
ADDU	T7,T3,T5
LW	T8,0048 (SP)
LW	T9,004C (SP)
SLTU	AT,T7,T5
ADDU	T6,AT,T2
ADDU	T6,T6,T4
SUBU	T0,T6,T8
SLTU	AT,T7,T9
SUBU	T0,T0,AT
SUBU	T1,T7,T9
SW	T1,0004 (S0)
SW	T0,0000 (S0)
LW	T2,0000 (S3)
LW	T4,0040 (SP)
LW	T3,0004 (S3)
LW	T5,0044 (SP)
SLTU	AT,T4,T2
BNE	AT,R0,700021D4
LUI	A0,8006
SLTU	AT,T2,T4
BNE	AT,R0,700021CC
SLTU	AT,T3,T5
BEQ	AT,R0,700021D4
NOP
SW	T4,0000 (S3)
SW	T5,0004 (S3)
ADDIU	A0,A0,E718
ADDIU	A1,SP,0060
JAL	7000DDD0
OR	A2,S8,R0
JAL	700023E4
LW	A0,0060 (SP)
BEQ	R0,R0,70002200
NOP
BEQ	R0,R0,70002200
OR	S2,S8,R0
OR	S2,S8,R0
BEQL	S2,R0,7000200C
OR	A0,S6,R0
LUI	A0,8006
JAL	7000EAE4
ADDIU	A0,A0,E750
LW	RA,003C (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
LW	S5,002C (SP)
LW	S6,0030 (SP)
LW	S7,0034 (SP)
LW	S8,0038 (SP)
JR	RA
ADDIU	SP,SP,0070

70002244	2E44
	accepts: A0=p->???, A1=p->audio packet
	audio packet format:
	0x0	4	p->audio
	0x4	4	length in words
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	S0,0018 (SP)
OR	S0,A0,R0	;S0=A0
JAL	70002610
SW	A1,002C (SP)
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
LW	A0,0000 (S0)
LW	V1,002C (SP)	;V1= A1 f/caller: 
SW	V0,0024 (SP)
BEQ	V1,R0,70002288	;skip if NULL
NOP
//70002274:	set audio in AI
LH	A1,0004 (V1)	;A1= #words long
LW	A0,0000 (V1)	;A0=p->audio
SLL	T6,A1,0x2
JAL	7000EF00	;set p->audio A0 of length A1 in AI
OR	A1,T6,R0	;A1*=4: length
//70002288:
JAL	7000EFB0	;V0=AI Length
NOP
LUI	T7,8006
LW	T7,ECC4 (T7)
SRL	T8,V0,0x2
LUI	V1,8006
SUBU	T9,T7,T8
ADDIU	T0,T9,0035
ANDI	T1,T0,FFF0
SH	T1,0004 (S0)
LW	V1,ECC0 (V1)
LH	A3,0004 (S0)
LUI	T4,8002
SLL	T2,V1,0x10
SRA	T3,T2,0x10
SLT	AT,A3,T3
BEQ	AT,R0,700022D8
LUI	A0,8006
SH	V1,0004 (S0)
LH	A3,0004 (S0)
//700022D8:
LW	T4,30FC (T4)
LUI	A1,8006
ADDIU	A1,A1,ECCC
SLL	T5,T4,0x2
ADDU	A0,A0,T5
LW	A0,E518 (A0)
JAL	7000F108
LW	A2,0024 (SP)
LUI	T6,8006
ADDIU	V1,R0,0002
LUI	A2,8002
ADDIU	T6,T6,E718
ADDIU	A2,A2,30FC
SW	R0,0008 (S0)
SW	T6,0058 (S0)
SW	S0,005C (S0)
SW	V1,0010 (S0)
LW	T7,0000 (A2)
LUI	A3,8006
ADDIU	A3,A3,E518
SLL	T8,T7,0x2
ADDU	T9,A3,T8
LW	T0,0000 (T9)
LUI	A1,8002
LUI	T8,8002
SW	T0,0048 (S0)
LW	T1,0000 (A2)
ADDIU	A1,A1,0D90
ADDIU	T8,T8,0E60
SLL	T2,T1,0x2
ADDU	T3,A3,T2
LW	T4,0000 (T3)
LUI	T0,8002
LUI	T1,8006
SUBU	T5,V0,T4
SRA	T6,T5,0x3
SLL	T7,T6,0x3
SUBU	T9,T8,A1
ADDIU	T0,T0,2280	;T0=80022280: 
ADDIU	T1,T1,D020	;T1=8005D020: 
ADDIU	T2,R0,0800
LUI	A0,8006
SW	T7,004C (S0)
SW	V1,0018 (S0)
SW	A1,0020 (S0)
SW	T9,0024 (S0)
SW	R0,001C (S0)
SW	T0,0028 (S0)
SW	T1,0030 (S0)
SW	T2,0034 (S0)
SW	R0,0050 (S0)
SW	R0,0054 (S0)
JAL	70000CF8
ADDIU	A0,A0,DA40	;A0=8005DA40: 
OR	A0,V0,R0	;A0=V0: 8005DAB8
ADDIU	A1,S0,0008	;A1=S0+8
JAL	7000DF10
OR	A2,R0,R0	;A2=0
LUI	V1,8002
ADDIU	V1,V1,30FC
LW	T3,0000 (V1)	;T3=800230FC: 
LW	RA,001C (SP)
LW	S0,0018 (SP)
XORI	T4,T3,0001
SW	T4,0000 (V1)	;invert flag at 800230FC
JR	RA
ADDIU	SP,SP,0028

700023E4	2FE4
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	7000EFB0	;V0=AI Length
SW	A0,0018 (SP)
SRA	T6,V0,0x2	;T6= #words
BNE	T6,R0,70002414	;return if no words remain
LUI	T7,8002
LW	T7,31C8 (T7)
LUI	AT,8002
BNEL	T7,R0,70002418	;if it equals zero, set it to zero
LW	RA,0014 (SP)
SW	R0,31C8 (AT)
//70002414:
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70002424	3024
LUI	T1,8006
ADDIU	T1,T1,E7B0
LW	T0,0004 (T1)
ADDIU	SP,SP,FFB0
SW	S0,0028 (SP)
SW	A2,0058 (SP)
ANDI	T2,A0,0001
SW	RA,002C (SP)
OR	A3,A0,R0
OR	A2,R0,R0
SW	T2,0048 (SP)
BEQ	T0,R0,700024A8
OR	S0,T0,R0
//70002458:
LW	V0,0008 (S0)
ADDU	T6,A3,A1
SLTU	AT,A3,V0
BNE	AT,R0,700024A8
ADDIU	V1,V0,0200
//7000246C:
SLT	AT,V1,T6
BNE	AT,R0,7000249C
OR	A2,S0,R0
LW	T8,0010 (S0)
LUI	T7,8002
LW	T7,30F4 (T7)
ADDU	T9,T8,A3
SUBU	A0,T9,V0
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
SW	T7,000C (S0)
BEQ	R0,R0,700025C8
LW	RA,002C (SP)
//7000249C:
LW	S0,0000 (S0)
BNEL	S0,R0,7000245C
LW	V0,0008 (S0)
//700024A8:
LW	S0,0008 (T1)
BNE	S0,R0,700024D8
OR	A0,S0,R0
BNEL	A2,R0,700024C4
LW	A0,0010 (A2)
OR	A2,T0,R0
//700024C0:
LW	A0,0010 (A2)
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
SW	T2,0030 (SP)
LW	T2,0030 (SP)
BEQ	R0,R0,700025C4
ADDU	V0,V0,T2
//700024D8:
LW	T3,0000 (S0)
SW	A3,0050 (SP)
SW	A2,0038 (SP)
JAL	7000EA90
SW	T3,0008 (T1)
LW	A2,0038 (SP)
LUI	T1,8006
ADDIU	T1,T1,E7B0
BEQ	A2,R0,70002518
LW	A3,0050 (SP)
//70002500:
OR	A0,S0,R0
OR	A1,A2,R0
JAL	7000EAC0
SW	A3,0050 (SP)
BEQ	R0,R0,70002544
LW	A3,0050 (SP)
//70002518:
LW	T0,0004 (T1)
BEQL	T0,R0,7000253C
SW	S0,0004 (T1)
SW	S0,0004 (T1)
SW	T0,0000 (S0)
SW	R0,0004 (S0)
BEQ	R0,R0,70002544
SW	S0,0004 (T0)
//70002538:
SW	S0,0004 (T1)
SW	R0,0000 (S0)
SW	R0,0004 (S0)
//70002544:
LW	T4,0048 (SP)
LUI	T5,8002
LUI	T0,8002
SUBU	A3,A3,T4
SW	A3,0008 (S0)	;A3->S0+8: hardware address
LW	T5,30F4 (T5)
ADDIU	T0,T0,30F8
LW	V1,0010 (S0)	;V1=S0+10: p->rdram
SW	T5,000C (S0)
LW	V0,0000 (T0)	;V0=800230F4: 
LUI	T7,8006
LUI	T9,8006
SLL	T6,V0,0x2
SUBU	T6,T6,V0
SLL	T6,T6,0x3	;T6=V0*18: offset to entry
ADDIU	T9,T9,F2D0
ADDIU	T7,T7,ECD0
ADDIU	T8,R0,0200
ADDIU	T3,V0,0001
SW	T3,0000 (T0)	;800230F4+=1
SW	T8,0014 (SP)	;SP+14= 0x200: size
ADDU	A0,T6,T7	;A0=8005ECD0+offset: 
SW	T9,0018 (SP)	;SP+18= 8005F2D0
ADDIU	A1,R0,0001
OR	A2,R0,R0	;A2=0: read
SW	V1,004C (SP)
JAL	7000F6A0	;read or write (A2) SP+14 bytes between hardware A3 and rdram SP+10
SW	V1,0010 (SP)	;SP+10= p->rdram
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
LW	A0,004C (SP)	;A0= p->rdram
LW	T4,0048 (SP)
ADDU	V0,V0,T4
//700025C4:	return
LW	RA,002C (SP)
LW	S0,0028 (SP)
ADDIU	SP,SP,0050
JR	RA
NOP

700025D8	31D8
LUI	V1,8006
ADDIU	V1,V1,E7B0
LBU	T6,0000 (V1)
LUI	V0,7000
LUI	T7,8006
BNE	T6,R0,70002608
ADDIU	V0,V0,2424
ADDIU	T7,T7,E7C0
ADDIU	T8,R0,0001
SW	R0,0004 (V1)
SW	T7,0008 (V1)
SB	T8,0000 (V1)
JR	RA
SW	V1,0000 (A0)

70002610	3210
ADDIU	SP,SP,FFB8
SW	S4,0028 (SP)
LUI	S4,8002
ADDIU	S4,S4,30F8
LW	T6,0000 (S4)
SW	S0,0018 (SP)
SW	RA,002C (SP)
SW	S3,0024 (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
SW	R0,0040 (SP)
BEQ	T6,R0,70002674
OR	S0,R0,R0
LUI	S1,8006
ADDIU	S1,S1,F2D0
ADDIU	S2,SP,0040
OR	A0,S1,R0
OR	A1,S2,R0
JAL	7000DDD0
OR	A2,R0,R0
LW	T7,0000 (S4)
ADDIU	S0,S0,0001
SLTU	AT,S0,T7
BNEL	AT,R0,70002654
OR	A0,S1,R0
LUI	S2,8006
ADDIU	S2,S2,E7B0
LW	S0,0004 (S2)
LUI	S3,8002
ADDIU	S3,S3,30F4
BEQ	S0,R0,700026F4
NOP
LW	T9,000C (S0)
LW	T8,0000 (S3)
LW	V0,0000 (S0)
ADDIU	T0,T9,0001
SLTU	AT,T0,T8
BEQ	AT,R0,700026EC
OR	S1,V0,R0
LW	T1,0004 (S2)
BNE	S0,T1,700026BC
NOP
SW	V0,0004 (S2)
JAL	7000EA90
OR	A0,S0,R0
LW	A1,0008 (S2)
BEQL	A1,R0,700026E4
SW	S0,0008 (S2)
JAL	7000EAC0
OR	A0,S0,R0
BEQ	R0,R0,700026EC
NOP
SW	S0,0008 (S2)
SW	R0,0000 (S0)
SW	R0,0004 (S0)
BNE	S1,R0,70002690
OR	S0,S1,R0
LUI	S3,8002
ADDIU	S3,S3,30F4
LW	T2,0000 (S3)
LW	RA,002C (SP)
SW	R0,0000 (S4)
ADDIU	T3,T2,0001
SW	T3,0000 (S3)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
JR	RA
ADDIU	SP,SP,0048

70002730	3330	
LUI	A0,8006
ADDIU	A0,A0,F400	;A0=8005F400: DL
LUI	A2,B800
SW	A2,0000 (A0)	;DL+0= B8000000: rsp_enddl.u
SW	R0,0004 (A0)	;DL+4= 00000000: rsp_enddl.l
SW	A2,0850 (A0)	;DL+850= B8000000: rsp_enddl.u
SW	R0,0854 (A0)	;DL+854= 00000000: rsp_enddl.l
ADDIU	SP,SP,FFE8
LUI	AT,8006
LUI	V1,8006
LUI	V0,8006
LUI	A1,8006
SW	RA,0014 (SP)
SW	R0,04A0 (AT)	;0->800604A0: bank 0
ADDIU	A1,A1,07DC	;A1=800607DC: end
ADDIU	V0,V0,07D0	;V0=800607D0
ADDIU	V1,V1,07B0	;V1=800607B0
ADDIU	A0,R0,0001
//70002778:	initialize 3 words in each buffer
ADDIU	V0,V0,0004
ADDIU	V1,V1,0004
SW	R0,FFFC (V1)	;0 -> 800607B0+offset
BNE	V0,A1,70002778
SW	A0,FFFC (V0)	;1 -> 800607D0+offset
//7000278C:
JAL	70002810
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700027A4	33A4
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	7000D8E0	;V0=Count
NOP
LUI	AT,8006
SW	V0,04A8 (AT)
LUI	V0,8006
LUI	A0,8006
LUI	V1,8006
ADDIU	V1,V1,07D0
ADDIU	A0,A0,07C0
ADDIU	V0,V0,07DC
LW	T6,0000 (V1)
ADDIU	V1,V1,0004
ADDIU	A0,A0,0004
ADDIU	T7,T6,001F
BGEZ	T7,700027F8
ANDI	T8,T7,001F
BEQ	T8,R0,700027F8
NOP
ADDIU	T8,T8,FFE0
BNE	V1,V0,700027D4
SW	T8,FFFC (A0)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70002810	3410	
LUI	T6,8006
LW	T6,04A8 (T6)	;T6=800604A8: 
LUI	AT,8006
LUI	V1,8006
LUI	A0,8006
LUI	V0,8006
ADDIU	V0,V0,07CC
ADDIU	A0,A0,07C0
ADDIU	V1,V1,07B0
SW	T6,04A4 (AT)	;T6->800604A4: 
//70002838:	copy 800607C0 table to 800607B0
LW	T7,0000 (A0)	;T7=800607C0+offset: 
ADDIU	A0,A0,0004
ADDIU	V1,V1,0004
BNE	A0,V0,70002838
SW	T7,FFFC (V1)	;T7->800607B0+offset: 
//7000284C:	return
JR	RA
NOP

70002854	3454
	accepts: A0=
ADDIU	SP,SP,FFC0
SW	RA,0014 (SP)
SW	A0,0040 (SP)
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
ADDIU	A0,R0,0001
LW	T1,0040 (SP)	;T1= A0 f/caller
LUI	T6,8006
ADDIU	T6,T6,07D0
ANDI	A3,T1,FFFF	;A3=lower short
SLL	V1,A3,0x2
ADDU	T0,V1,T6	;T0= 800607D0 + (A0.lower->offset): 
ADDIU	AT,R0,0003
SRA	A0,T1,0x10	;A0=upper short
SW	V0,0034 (SP)
OR	A2,A0,R0	;A2=A0: A0.upper
BNE	A0,AT,700028B0
LW	A1,0000 (T0)
LUI	A2,8006
ADDU	A2,A2,V1
LW	A2,F3F0 (A2)
ORI	T7,A2,8000
BEQ	R0,R0,700028D0
OR	A2,T7,R0
//700028B0:
ADDIU	AT,R0,0006
BNEL	A0,AT,700028D4
SLL	T9,A3,0x8
LUI	A2,8006
ADDU	A2,A2,V1
LW	A2,F3F0 (A2)
ANDI	T8,A2,7FFF
OR	A2,T8,R0
//700028D0:
SLL	T9,A3,0x8
SLL	T2,A1,0x3
LUI	T4,8006
LUI	T5,8006
ADDIU	T4,T4,04B0
ADDU	T3,T9,T2
ADDIU	T5,T5,F3F0
ADDU	V0,T3,T4
ADDU	T6,V1,T5
SW	V0,002C (SP)
SW	A2,0000 (V0)
SW	T6,0024 (SP)
SW	A1,0030 (SP)
SW	A2,0038 (SP)
JAL	7000D8E0	;V0=Count
SW	T0,001C (SP)
LW	T7,002C (SP)
LW	A1,0030 (SP)
LW	A2,0038 (SP)
LW	T0,001C (SP)
SW	V0,0004 (T7)
LW	T8,0024 (SP)
ADDIU	A1,A1,0001	;A1+=1
SLTI	AT,A1,0020
BNE	AT,R0,7000293C	;limit to range 0-1F
SW	A2,0000 (T8)
OR	A1,R0,R0	;A1=0
//7000293C:
SW	A1,0000 (T0)	;update 800607D0 + (A0.lower->offset)
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
LW	A0,0034 (SP)
LW	RA,0014 (SP)
ADDIU	SP,SP,0040
JR	RA
NOP

70002958	3558	draw "display speed" display
	accepts: A0=p->display list
LUI	V1,8005
LUI	T6,8002
LW	V1,8498 (V1)
LW	T6,3228 (T6)
LUI	V0,8002
LW	V0,3224 (V0)
ADDIU	SP,SP,FFB8
SLT	AT,T6,V1
SW	RA,001C (SP)
SW	S0,0018 (SP)
BEQ	AT,R0,70002990
ADDU	V0,V0,V1
//70002988:
LUI	AT,8002
SW	V1,3228 (AT)
//70002990:
LUI	AT,8002
SW	V0,3224 (AT)
SLTIU	AT,V0,0015
BNE	AT,R0,70002C8C
LUI	AT,8002
SW	V0,3224 (AT)
SLTIU	AT,V0,0015
BNE	AT,R0,700029C8
ADDIU	V0,V0,FFEC
//700029B4:
SLTIU	AT,V0,0015
BEQL	AT,R0,700029B4
ADDIU	V0,V0,FFEC
LUI	AT,8002
SW	V0,3224 (AT)
//700029C8:
JAL	7000111C	;V0=8005DB30: target for DP Cmd clock, buffer counter, pipe counter, and tmem counter
SW	A0,0048 (SP)	;SP+48=A0: p->DL
SW	V0,0044 (SP)
//700029D4:
ADDIU	A0,R0,00FF
ADDIU	A1,R0,00FF
ADDIU	A2,R0,00FF
JAL	7000B06C	;set stdout.bgcurcolor, alpha inverted
ADDIU	A3,R0,00FF	;(A0,A1,A2,A3) = FFFFFFFF: white 0%
//700029E8:
OR	A0,R0,R0
OR	A1,R0,R0
OR	A2,R0,R0
JAL	7000B098	;set stdout.bgcurcolor, alpha inverted
ADDIU	A3,R0,00FF	;(A0,A1,A2,A3) = 000000FF: black 0%
//700029FC:
ADDIU	A0,R0,0008
JAL	7000B040	;translates and saves stdout text position (A0,A1)
ADDIU	A1,R0,0005	;pos (8,5)
//70002A08:
LW	V0,0044 (SP)
ADDIU	S0,SP,0030	;S0=SP+30: p->buffer
LUI	A1,8003
LW	T7,0004 (V0)
LW	T8,000C (V0)
ADDIU	A1,A1,8420	;A1=80028420: "utz %2.0f%%\n"
OR	A0,S0,R0	;A0=S0: p->sprintf target
SUBU	T9,T7,T8
MTC1	T9,F4
BGEZ	T9,70002A44
CVT.S.W	F6,F4
//70002A34:
LUI	AT,4F80
MTC1	AT,F8
NOP
ADD.S	F6,F6,F8
//70002A44:
LW	T0,0000 (V0)
LUI	AT,42C8
MTC1	AT,F10
MTC1	T0,F18
MUL.S	F16,F6,F10
BGEZ	T0,70002A70
CVT.S.W	F4,F18
//70002A60:
LUI	AT,4F80
MTC1	AT,F8
NOP
ADD.S	F4,F4,F8
//70002A70:
DIV.S	F6,F16,F4
CVT.D.S	F10,F6
MFC1	A3,F10
MFC1	A2,F11
//70002A80:
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
NOP
JAL	7000B1E8	;write string A0 to stdout (debug menu)
OR	A0,S0,R0
//70002A90:
ADDIU	A0,R0,0008
JAL	7000B040	;translates and saves stdout text position (A0,A1)
ADDIU	A1,R0,0006
//70002A9C:
LW	V1,0044 (SP)
LUI	A1,8003
ADDIU	A1,A1,8430	;A1=80028430: "rsp %2.0f%%\n"
LW	V0,0000 (V1)
LW	T1,0004 (V1)
OR	A0,S0,R0	;A0=S0: p->buffer
MTC1	V0,F10
SUBU	T2,V0,T1
MTC1	T2,F18
BGEZ	T2,70002AD8
CVT.S.W	F8,F18
//70002AC8:
LUI	AT,4F80
MTC1	AT,F16
NOP
ADD.S	F8,F8,F16
//70002AD8:
LUI	AT,42C8
MTC1	AT,F4
CVT.S.W	F18,F10
MUL.S	F6,F8,F4
BGEZ	V0,70002AFC
//70002AEC:
LUI	AT,4F80
MTC1	AT,F16
NOP
ADD.S	F18,F18,F16
//70002AFC:
DIV.S	F8,F6,F18
CVT.D.S	F4,F8
MFC1	A3,F4
MFC1	A2,F5
//70002B0C:
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
NOP
JAL	7000B1E8	;write string A0 to stdout (debug menu)
OR	A0,S0,R0
//70002B1C:
ADDIU	A0,R0,0008
JAL	7000B040	;translates and saves stdout text position (A0,A1)
ADDIU	A1,R0,0007
//70002B28:
LW	T3,0044 (SP)
LUI	A1,8003
ADDIU	A1,A1,8440	;A1=80028440: "tex %2.0f%%"
LW	T4,000C (T3)
OR	A0,S0,R0	;A0=S0: p->buffer
MTC1	T4,F10
BGEZ	T4,70002B58
CVT.S.W	F16,F10
//70002B48:
LUI	AT,4F80
MTC1	AT,F6
NOP
ADD.S	F16,F16,F6
//70002B58:
LW	T5,0000 (T3)
LUI	AT,42C8
MTC1	AT,F18
MTC1	T5,F4
MUL.S	F8,F16,F18
BGEZ	T5,70002B84
CVT.S.W	F10,F4
//70002B74:
LUI	AT,4F80
MTC1	AT,F6
NOP
ADD.S	F10,F10,F6
//70002B84:
DIV.S	F16,F8,F10
CVT.D.S	F18,F16
MFC1	A3,F18
MFC1	A2,F19
//70002B94:
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
NOP
JAL	7000B1E8	;write string A0 to stdout (debug menu)
OR	A0,S0,R0
//70002BA4:
ADDIU	A0,R0,001C
JAL	7000B040	;translates and saves stdout text position (A0,A1)
ADDIU	A1,R0,0005
//70002BB0:
LUI	V1,8005
LW	V1,8498 (V1)	;V1=80048498: #frames
OR	A0,S0,R0
LUI	A1,8003
BNE	V1,R0,70002BD0	;branch if nonzero
ADDIU	T6,R0,003C
BEQ	R0,R0,70002BFC	;default to 0
OR	A2,R0,R0
//70002BD0:
DIV	T6,V1
MFLO	A2		;A2= 60 % #frames: hertz, which would be frames per second
BNE	V1,R0,70002BE4
NOP
BREAK	00001C00	;Break: division by zero
//70002BE4:	catch weird division
ADDIU	AT,R0,FFFF
BNE	V1,AT,70002BFC
LUI	AT,8000
BNE	T6,AT,70002BFC
NOP
BREAK	00001800
//70002BFC:	display framerate (hz, or frames per second)
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
ADDIU	A1,A1,844C	;A1=8002844C: "%2d hz"
JAL	7000B1E8	;write string A0 to stdout (debug menu)
OR	A0,S0,R0
ADDIU	A0,R0,001C
JAL	7000B040	;translates and saves stdout text position (A0,A1)
ADDIU	A1,R0,0006
LUI	A1,8003
LUI	A2,8005
LW	A2,8498 (A2)	;A2=80048498: #frames (apparently)
ADDIU	A1,A1,8454	;A1=80028454: "%2d frames"
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A0,S0,R0	;A0=S0: p->buffer
JAL	7000B1E8	;write string A0 to stdout (debug menu)
OR	A0,S0,R0
//70002C38:
LUI	T7,8002
LUI	T8,8005
LW	T8,8498 (T8)	;T8=80048498: #frames
LW	T7,3228 (T7)	;T7=80023228: ???
OR	A0,S0,R0	;A0=S0: p->buffer
LUI	A1,8003
BEQ	T7,T8,70002C70	;if equal, don't display anything
OR	A2,T7,R0	;A2=T7
LUI	A1,8003
ADDIU	A1,A1,8460	;A1=80028460: " [%2d]"
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A0,S0,R0	;A0=S0: p->buffer
BEQ	R0,R0,70002C78
NOP
//70002C70:
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
ADDIU	A1,A1,8468	;A1=80028468: "     "
//70002C78:
JAL	7000B1E8	;write string A0 to stdout (debug menu)
OR	A0,S0,R0	;A0=S0: p->buffer
//70002C80:	set dlbranch to appropriate bank
LUI	AT,8002
SW	R0,3228 (AT)
LW	A0,0048 (SP)	;A0 f/caller: p->DL
LUI	T9,0600
SW	T9,0000 (A0)	;DL+0= 06000000: rsp_displaylist.u
LUI	T0,8006
LW	T0,04A0 (T0)	;T0=800604A0: DL bank
LUI	T4,8006
ADDIU	T4,T4,F400	;T4= 8005F400: DL
XORI	T1,T0,0001
SLL	T2,T1,0x5
ADDU	T2,T2,T1
SLL	T2,T2,0x2
ADDU	T2,T2,T1
SLL	T2,T2,0x4
ADDU	T3,T2,T4	;T3=8005F400 + 850(bank): p->DL bank
SW	T3,0004 (A0)	;DL+4= p->DL bank: rsp_displaylist.l
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	V0,A0,0008
JR	RA
ADDIU	SP,SP,0048

70002CD8	38D8	
ADDIU	SP,SP,FF30
LUI	V0,8002
LUI	T6,8005
LW	V0,3230 (V0)	;V0=80023230: frame counter
LW	T6,8498 (T6)	;T6=80048498: #frames
LUI	AT,8002
SW	RA,005C (SP)
ADDU	V0,V0,T6	;V0+=T6
SW	V0,3230 (AT)	;frame counter += #frames
SLTIU	AT,V0,00C9
SW	S8,0058 (SP)
SW	S7,0054 (SP)
SW	S6,0050 (SP)
SW	S5,004C (SP)
SW	S4,0048 (SP)
SW	S3,0044 (SP)
SW	S2,0040 (SP)
SW	S1,003C (SP)
SW	S0,0038 (SP)
SDC1	F22,0030 (SP)
BNE	AT,R0,70002D50	;branch if 200 or less frames so far
SDC1	F20,0028 (SP)
//70002D30:	every 200 frames flush counter and toggle register
LUI	T7,8002
LW	T7,3234 (T7)	;T7=80023234: 
LUI	AT,8002
ADDIU	V0,V0,FF38
XORI	T8,T7,0001
SW	T8,3234 (AT)	;toggle 80023234
LUI	AT,8002
SW	V0,3230 (AT)	;80023230 = framecount - 200
//70002D50:
LUI	V1,8002
LW	V1,322C (V1)	;V1=8002322C: 
LUI	T9,8002
LW	T9,3234 (T9)	;T9=80023234: 
ANDI	T1,V1,0001	;T1= bit1
LUI	AT,8002
ADDIU	V1,V1,0001
BEQ	T9,T1,70003024	;return if both set identical
SW	V1,322C (AT)	;8002322C +=1
//70002D74:
LUI	T2,8006
LW	T2,04A0 (T2)	;T2=800604A0: bank
LUI	T4,8006
ADDIU	T4,T4,F400	;T4=8005F400: base DL
SLL	T3,T2,0x5
ADDU	T3,T3,T2
SLL	T3,T3,0x2
ADDU	T3,T3,T2
SLL	T3,T3,0x4
JAL	7F0D1AC0
ADDU	A0,T3,T4	;A0=8005F400 + 850(value): p->DL bank
OR	S3,V0,R0	;S3=V0: p->DL
ADDIU	V0,SP,00B8
ADDIU	S4,SP,00AC
//70002DAC:
ADDIU	S4,S4,0004
SLTU	AT,S4,V0
BNE	AT,R0,70002DAC
SW	R0,FFFC (S4)
//70002DBC:
LUI	A0,8006
LW	A0,04A4 (A0)	;A0=800604A4: 
ADDIU	S5,SP,00A0
ADDIU	V0,SP,00AC
//70002DCC:
ADDIU	S5,S5,0004
SLTU	AT,S5,V0
BNE	AT,R0,70002DCC
SW	A0,FFFC (S5)
//70002DDC:
LUI	T5,8006
ADDIU	T5,T5,07B0
LUI	S8,8006
LUI	AT,8003
LWC1	F22,8470 (AT)	;F22=80028470: 
ADDIU	S8,S8,07D0
SW	T5,0070 (SP)	;SP+70= 800607B0: 
SW	R0,00C8 (SP)
SW	R0,0080 (SP)
ADDIU	S6,R0,0001
LW	T6,0070 (SP)
LW	A1,0000 (S8)
LW	T7,0080 (SP)
LW	S1,0000 (T6)
MTC1	R0,F20
ADDIU	T8,SP,00AC
BEQ	S1,A1,70002F9C
ADDU	S4,T7,T8
LW	T1,00C8 (SP)
LUI	T3,8006
ADDIU	T3,T3,04B0
ADDIU	T9,SP,00A0
SLL	T2,T1,0x8
ADDU	S7,T2,T3
ADDU	S5,T7,T9
SLL	T4,S1,0x3
ADDU	V0,S7,T4
LW	S2,0000 (V0)
LUI	A0,8006
LW	A0,04A4 (A0)
ANDI	T5,S2,8000
BEQL	T5,R0,70002E68
LW	V1,0000 (S5)
ADDIU	S2,R0,0003
LW	V1,0000 (S5)
LW	S0,0004 (V0)
SLTU	AT,V1,A0
BEQL	AT,R0,70002E80
SLTU	AT,S0,A0
OR	V1,A0,R0
SLTU	AT,S0,A0
BNE	AT,R0,70002F74
SLTU	AT,S0,V1
BNE	AT,R0,70002F74
LUI	T9,8002
LW	V0,0000 (S4)
ADDIU	T9,T9,31D4
SUBU	T1,S0,V1
BEQ	S6,V0,70002EDC
SLL	T7,V0,0x4
ADDIU	AT,R0,0003
BEQ	V0,AT,70002EDC
ANDI	T6,V0,8000
BNE	T6,R0,70002EDC
SUBU	T8,S0,V1
MTC1	T8,F4
LUI	AT,4F80
BGEZ	T8,70002ED4
CVT.S.W	F6,F4
MTC1	AT,F8
NOP
ADD.S	F6,F6,F8
DIV.S	F10,F6,F22
ADD.S	F20,F20,F10
MTC1	T1,F16
ADDU	T0,T7,T9
BGEZ	T1,70002EFC
CVT.S.W	F18,F16
LUI	AT,4F80
MTC1	AT,F4
NOP
ADD.S	F18,F18,F4
BNE	S6,V0,70002F14
DIV.S	F12,F18,F22
JAL	7F0D1DCC
NOP
BEQ	R0,R0,70002F60
OR	V0,S3,R0
LW	V0,0004 (T0)	;V0=T0+4: color
MFC1	A1,F12
OR	A0,S3,R0	;A0=S3: p->DL
SRA	T4,V0,0x8
ANDI	T5,T4,00FF
SW	T5,0010 (SP)	;T5=blue
LW	T6,0008 (T0)
SRA	A2,V0,0x18
SRA	A3,V0,0x10
SW	T6,0014 (SP)
LW	T8,000C (T0)
ANDI	T3,A3,00FF
ANDI	T2,A2,00FF
OR	A2,T2,R0	;A2=red
OR	A3,T3,R0	;A3=green
JAL	7F0D1BD0
SW	T8,0018 (SP)
OR	S3,V0,R0	;S3=V0: p->DL
OR	V0,S3,R0
LUI	T7,E700
SW	T7,0000 (V0)	;DL+0= E7000000: pipesync.u
SW	R0,0004 (V0)	;DL+4= 00000000: pipesync.l
ADDIU	S3,S3,0008	;advance DL
LW	A1,0000 (S8)
ADDIU	S1,S1,0001
SW	S2,0000 (S4)
SW	S0,0000 (S5)
BGEZ	S1,70002F94
ANDI	T9,S1,001F
BEQ	T9,R0,70002F94
NOP
ADDIU	T9,T9,FFE0
BNE	T9,A1,70002E40
OR	S1,T9,R0
LW	T1,00C8 (SP)
SLTI	AT,T1,0002
BEQL	AT,R0,70002FB8
LW	T2,00C8 (SP)
JAL	7F0D2320
NOP
LW	T2,00C8 (SP)
LW	T4,0080 (SP)
LW	T6,0070 (SP)
ADDIU	AT,R0,0003
ADDIU	T3,T2,0001
ADDIU	T5,T4,0004
ADDIU	T8,T6,0004
SW	T8,0070 (SP)
SW	T5,0080 (SP)
SW	T3,00C8 (SP)
BNE	T3,AT,70002E04
ADDIU	S8,S8,0004
OR	A0,S3,R0
OR	A1,R0,R0
OR	A2,R0,R0
JAL	7F0D1E98
OR	A3,R0,R0
LUI	V1,8006
LUI	T7,E700
LUI	T9,B800
ADDIU	V1,V1,04A0
SW	T7,0000 (V0)	;DL+0= E7000000: rdp_pipesync.u
SW	R0,0004 (V0)	;DL+4= 00000000: rdp_pipesync.l
SW	T9,0008 (V0)	;DL+0= B8000000: rsp_enddl.u
SW	R0,000C (V0)	;DL+4= 00000000: rsp_enddl.l
LW	T1,0000 (V1)
XORI	T2,T1,0001
SW	T2,0000 (V1)	;toggle 800604A0: bank 0<->1
//70003024:	return
LW	RA,005C (SP)
LDC1	F20,0028 (SP)
LDC1	F22,0030 (SP)
LW	S0,0038 (SP)
LW	S1,003C (SP)
LW	S2,0040 (SP)
LW	S3,0044 (SP)
LW	S4,0048 (SP)
LW	S5,004C (SP)
LW	S6,0050 (SP)
LW	S7,0054 (SP)
LW	S8,0058 (SP)
JR	RA
ADDIU	SP,SP,00D0

70003060	3C60	
ADDIU	T0,R0,002C
ANDI	V0,R0,00FF
MULTU	V0,T0
SLL	T9,V0,0x2
ADDU	T9,T9,V0
SLL	T9,T9,0x2
SUBU	T9,T9,V0
LUI	A3,8002
SLL	T9,T9,0x2
ADDIU	A3,A3,3244	;A3=80023244: legal screen image entries
LUI	A0,8006
LUI	A1,8006
MFLO	T7		;T7=V0*2C: offset to image entry V0
LUI	A2,8002
LUI	T1,803B
SUBU	T9,T9,V0
ADDIU	T1,T1,5000	;T1=803B5000: video buffer root
ADDIU	A2,A2,32A4	;A2=800232A4: video1.settings
ADDIU	A1,A1,0879
ADDIU	A0,A0,0878
ADDIU	T6,R0,0001
ADDU	T8,A3,T7	;T8=80023244+offset: p->legal screen image entry V0
SLL	T9,T9,0xB	;V0*=25800: size of video buffer
SB	R0,0000 (A0)
SB	T6,0000 (A1)	;0001-> 80060878
SW	T8,0000 (A2)	;T8->800232A4: save p->image entry to video1
ADDU	T3,T1,T9	;T3=bufferroot + size
SW	T3,0028 (T8)	;entry+28 = p->data
LBU	V1,0000 (A1)	;V1=80060879: count
LUI	T2,8002
ADDIU	T2,T2,32A8	;T2=800232A8: video2.settings
MULTU	V1,T0
SLL	T7,V1,0x2
ADDU	T7,T7,V1
SLL	T7,T7,0x2
SUBU	T7,T7,V1
SLL	T7,T7,0x2
SUBU	T7,T7,V1
SLL	T7,T7,0xB	;T7*=25800: size of video buffer
ADDU	T8,T1,T7	;T8=video.buf1 + size
LUI	AT,8002
MFLO	T5		;T5=T0*2C: offset to image entry T0
ADDU	T6,A3,T5	;T6=80023244+offset: p->legal screen image entry T0
SW	T6,0000 (T2)	;T6->800232A8: save p->video2.settings
SW	T8,0028 (T6)	;entry+28 = p->data
SW	R0,329C (AT)	;0->8002329C: 
LUI	AT,8002
JR	RA
SW	R0,32A0 (AT)	;0->800232A0: 

70003124	3D24	initialize both video buffers
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	7F0D2380	;0->8004EB00: 
NOP
LUI	A3,0002
LUI	A2,803E
LUI	A1,803B
ADDIU	A1,A1,5000	;A1=803B5000
ADDIU	A2,A2,A800	;A2=803DA800
ORI	A3,A3,5800	;A3=25800
OR	A0,R0,R0	;A0=0	count
//70003150:	initialize both video buffers
ADDU	V0,A1,A0
SB	R0,0000 (V0)
ADDU	V1,A2,A0
SB	R0,0000 (V1)
SB	R0,0001 (V0)
SB	R0,0001 (V1)
SB	R0,0002 (V0)
SB	R0,0002 (V1)
SB	R0,0003 (V0)
ADDIU	A0,A0,0004
BNE	A0,A3,70003150	;zero 25800 bytes
SB	R0,0003 (V1)
//70003180:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70003190	3D90
ADDIU	A0,A0,0002
LUI	AT,8002
JR	RA
SW	A0,32BC (AT)	;2->800232BC

700031A0	3DA0
LUI	V1,8002
ADDIU	V1,V1,32B8
LW	V0,0000 (V1)
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
BEQ	V0,R0,700031D0
LUI	T8,8002
ADDIU	T6,V0,FFFF
BNE	T6,R0,700031D0
SW	T6,0000 (V1)
LUI	AT,8002
SW	R0,32B4 (AT)
LUI	T9,8002
LW	T9,32B4 (T9)
LW	T8,32B0 (T8)
LUI	V0,8006
LW	T5,0884 (V0)
MULTU	T8,T9
LUI	A1,8006
ADDIU	A1,A1,087C
SRA	T1,T5,0x10
LW	T9,0000 (A1)
LUI	V0,8006
MFLO	V1
ADDU	T3,T1,V1
ADDU	T6,T5,V1
ANDI	T7,T6,FFFF
SLL	T4,T3,0x10
OR	T8,T4,T7
SW	T8,0030 (T9)
LW	T6,0888 (V0)
LW	T9,0000 (A1)
SRA	T1,T6,0x10
ADDU	T3,T1,V1
ADDU	T4,T6,V1
ANDI	T7,T4,FFFF
SLL	T5,T3,0x10
OR	T8,T5,T7
SW	T8,0044 (T9)
JAL	7000E060
LW	A0,0000 (A1)
LUI	A0,8002
JAL	7000E2D0
LBU	A0,32BF (A0)
LUI	V1,8002
ADDIU	V1,V1,32BC
LW	V0,0000 (V1)
BEQ	V0,R0,70003270
SLTI	AT,V0,0003
BEQ	AT,R0,70003270
ADDIU	T0,V0,FFFF
SW	T0,0000 (V1)
JAL	7000F7B0
ADDIU	A0,R0,0042
LUI	V0,8002
ADDIU	V0,V0,32B0
LW	T1,0000 (V0)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
SUBU	T2,R0,T1
JR	RA
SW	T2,0000 (V0)

70003298
LUI	T5,8002
ADDIU	T5,T5,32A8	;T5=800232A8
LUI	T6,8002
LW	T6,32A4 (T6)
LW	T0,0000 (T5)	;T0=p->video2.settings
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LBU	T7,0000 (T6)
LBU	V0,0000 (T0)
BEQL	V0,T7,7000352C
LH	T7,0004 (T0)
BEQ	V0,R0,700032EC
LUI	AT,3F80
ADDIU	AT,R0,0001
BEQ	V0,AT,70003308
LUI	T8,8002
ADDIU	AT,R0,0002
BEQ	V0,AT,700034A4
LUI	T9,8000
BEQ	R0,R0,7000350C
NOP
MTC1	AT,F12
JAL	7000E200
NOP
JAL	7000E2D0
ADDIU	A0,R0,0001
BEQ	R0,R0,7000350C
NOP
LW	T8,32AC (T8)	;T8=800232AC: color output mode
LUI	V1,8006
LUI	T7,8000
BEQ	T8,R0,700033C4	;branch if 32bit
ADDIU	V1,V1,087C
LUI	T9,8000
LW	T9,0300 (T9)
ADDIU	AT,R0,0002
LUI	T8,8006
BNE	T9,AT,70003380
ADDIU	T8,T8,0828
LUI	T7,8002
ADDIU	T7,T7,7320
LUI	T6,8006
ADDIU	T6,T6,0828
ADDIU	T9,T7,0048
LW	AT,0000 (T7)
ADDIU	T7,T7,000C
ADDIU	T6,T6,000C
SW	AT,FFF4 (T6)
LW	AT,FFF8 (T7)
SW	AT,FFF8 (T6)
LW	AT,FFFC (T7)
BNE	T7,T9,70003348
SW	AT,FFFC (T6)
LW	AT,0000 (T7)
LW	T9,0004 (T7)
SW	AT,0000 (T6)
BEQ	R0,R0,70003464
SW	T9,0004 (T6)
LUI	T9,8002
ADDIU	T9,T9,6A60
ADDIU	T6,T9,0048
LW	AT,0000 (T9)
ADDIU	T9,T9,000C
ADDIU	T8,T8,000C
SW	AT,FFF4 (T8)
LW	AT,FFF8 (T9)
SW	AT,FFF8 (T8)
LW	AT,FFFC (T9)
BNE	T9,T6,7000338C
SW	AT,FFFC (T8)
LW	AT,0000 (T9)
LW	T6,0004 (T9)
SW	AT,0000 (T8)
BEQ	R0,R0,70003464
SW	T6,0004 (T8)
LW	T7,0300 (T7)
ADDIU	AT,R0,0002
LUI	T8,8006
BNE	T7,AT,70003424
ADDIU	T8,T8,0828
LUI	T9,8002
ADDIU	T9,T9,7460
LUI	T6,8006
ADDIU	T6,T6,0828
ADDIU	T7,T9,0048
LW	AT,0000 (T9)
ADDIU	T9,T9,000C
ADDIU	T6,T6,000C
SW	AT,FFF4 (T6)
LW	AT,FFF8 (T9)
SW	AT,FFF8 (T6)
LW	AT,FFFC (T9)
BNE	T9,T7,700033EC
SW	AT,FFFC (T6)
LW	AT,0000 (T9)
LW	T7,0004 (T9)
SW	AT,0000 (T6)
BEQ	R0,R0,70003464
SW	T7,0004 (T6)
LUI	T7,8002
ADDIU	T7,T7,6BA0
ADDIU	T6,T7,0048
LW	AT,0000 (T7)
ADDIU	T7,T7,000C
ADDIU	T8,T8,000C
SW	AT,FFF4 (T8)
LW	AT,FFF8 (T7)
SW	AT,FFF8 (T8)
LW	AT,FFFC (T7)
BNE	T7,T6,70003430
SW	AT,FFFC (T8)
LW	AT,0000 (T7)
LW	T6,0004 (T7)
SW	AT,0000 (T8)
SW	T6,0004 (T8)
LUI	T9,8006
ADDIU	T9,T9,0828
SW	T9,0000 (V1)
LW	T6,001C (T9)
LUI	AT,8006
OR	A0,R0,R0
SW	T6,0880 (AT)
LW	T7,0030 (T9)
LUI	AT,8006
SW	T7,0884 (AT)
LW	T8,0044 (T9)
LUI	AT,8006
JAL	70003190
SW	T8,0888 (AT)
BEQ	R0,R0,7000350C
NOP
LW	T9,0300 (T9)
ADDIU	AT,R0,0002
LUI	V1,8006
BNE	T9,AT,700034D0
ADDIU	V1,V1,087C
LUI	V1,8006
LUI	T6,8002
ADDIU	V1,V1,087C
ADDIU	T6,T6,75F0
BEQ	R0,R0,700034DC
SW	T6,0000 (V1)
LUI	T7,8002
ADDIU	T7,T7,6D30
SW	T7,0000 (V1)
LW	V0,0000 (V1)
LUI	AT,8006
OR	A0,R0,R0
LW	T8,001C (V0)
SW	T8,0880 (AT)
LW	T9,0030 (V0)
LUI	AT,8006
SW	T9,0884 (AT)
LW	T6,0044 (V0)
LUI	AT,8006
JAL	7000E2D0
SW	T6,0888 (AT)
JAL	7000F7B0
ADDIU	A0,R0,0042
LUI	T0,8002
LW	T0,32A8 (T0)	;T0=p->video2.settings
LUI	T5,8002
ADDIU	T5,T5,32A8	;T5=800232A8
LBU	V0,0000 (T0)
LH	T7,0004 (T0)
LH	T8,0018 (T0)
LH	T9,0006 (T0)
MTC1	T7,F4
LH	T6,001A (T0)
MTC1	T8,F8
CVT.S.W	F6,F4
MTC1	T9,F16
MTC1	T6,F4
LUI	T8,8006
LUI	T2,8002
CVT.S.W	F10,F8
LUI	AT,3F80
ADDIU	T8,T8,0828
LUI	T3,8002
CVT.S.W	F18,F16
CVT.S.W	F8,F4
DIV.S	F2,F6,F10
BNE	V0,R0,70003580
DIV.S	F0,F18,F8
MTC1	AT,F0
NOP
LW	T2,32C0 (T2)
LUI	AT,8002
SLL	T1,T2,0x2
ADDU	AT,AT,T1
SWC1	F2,30B4 (AT)
LUI	AT,8002
ADDU	AT,AT,T1
SWC1	F0,30BC (AT)
LBU	T7,0000 (T0)
ADDIU	AT,R0,0001
BNE	T7,AT,700039C0
NOP
LW	T3,32AC (T3)	;T3=800232AC: color output mode
LUI	AT,8006
ADDU	AT,AT,T1
BEQ	T3,R0,70003694	;branch if 32bit
SW	T8,DBE0 (AT)
LUI	T9,8000
LW	T9,0300 (T9)	;T9=80000300: display type
ADDIU	AT,R0,0002
LUI	T6,8006
BNE	T9,AT,7000363C	;branch if not MPAL
ADDIU	T6,T6,DB40
//700035DC:	MPAL
SLL	T6,T2,0x2
ADDU	T6,T6,T2
LUI	T7,8006
ADDIU	T7,T7,DB40
SLL	T6,T6,0x4
ADDU	V1,T6,T7
LUI	T8,8002
ADDIU	T8,T8,7320
ADDIU	T6,T8,0048
OR	T7,V1,R0
//70003604:
LW	AT,0000 (T8)
ADDIU	T8,T8,000C
ADDIU	T7,T7,000C
SW	AT,FFF4 (T7)
LW	AT,FFF8 (T8)
SW	AT,FFF8 (T7)
LW	AT,FFFC (T8)
BNE	T8,T6,70003604
SW	AT,FFFC (T7)
//70003628:
LW	AT,0000 (T8)
SW	AT,0000 (T7)
LW	T6,0004 (T8)
BEQ	R0,R0,70003760
SW	T6,0004 (T7)
//7000363C:
SLL	T9,T2,0x2
ADDU	T9,T9,T2
SLL	T9,T9,0x4
ADDU	V1,T9,T6
LUI	T8,8002
ADDIU	T8,T8,6A60
ADDIU	T9,T8,0048
OR	T6,V1,R0
//7000365C:
LW	AT,0000 (T8)
ADDIU	T8,T8,000C
ADDIU	T6,T6,000C
SW	AT,FFF4 (T6)
LW	AT,FFF8 (T8)
SW	AT,FFF8 (T6)
LW	AT,FFFC (T8)
BNE	T8,T9,7000365C
SW	AT,FFFC (T6)
//70003680:
LW	AT,0000 (T8)
SW	AT,0000 (T6)
LW	T9,0004 (T8)
BEQ	R0,R0,70003760
SW	T9,0004 (T6)
//70003694:
LUI	T7,8000
LW	T7,0300 (T7)
ADDIU	AT,R0,0002
BNE	T7,AT,70003704
SLL	T9,T2,0x2
ADDU	T9,T9,T2
LUI	T8,8006
ADDIU	T8,T8,DB40
SLL	T9,T9,0x4
ADDU	V1,T9,T8
LUI	T6,8002
ADDIU	T6,T6,7460
ADDIU	T9,T6,0048
OR	T8,V1,R0
LW	AT,0000 (T6)
ADDIU	T6,T6,000C
ADDIU	T8,T8,000C
SW	AT,FFF4 (T8)
LW	AT,FFF8 (T6)
SW	AT,FFF8 (T8)
LW	AT,FFFC (T6)
BNE	T6,T9,700036CC
SW	AT,FFFC (T8)
LW	AT,0000 (T6)
SW	AT,0000 (T8)
LW	T9,0004 (T6)
BEQ	R0,R0,70003760
SW	T9,0004 (T8)
//70003704:
SLL	T7,T2,0x2
ADDU	T7,T7,T2
LUI	T9,8006
ADDIU	T9,T9,DB40
SLL	T7,T7,0x4
ADDU	V1,T7,T9
LUI	T6,8002
ADDIU	T6,T6,6BA0
ADDIU	T7,T6,0048
OR	T9,V1,R0
LW	AT,0000 (T6)
ADDIU	T6,T6,000C
ADDIU	T9,T9,000C
SW	AT,FFF4 (T9)
LW	AT,FFF8 (T6)
SW	AT,FFF8 (T9)
LW	AT,FFFC (T6)
BNE	T6,T7,7000372C
SW	AT,FFFC (T9)
LW	AT,0000 (T6)
SW	AT,0000 (T9)
LW	T7,0004 (T6)
SW	T7,0004 (T9)
//70003760:
LH	T8,0018 (T0)
ADDIU	AT,R0,0280
ADDIU	T4,R0,01E0
SW	T8,0008 (V1)
LH	T7,0018 (T0)
LW	V0,001C (V1)
LUI	A3,8002
SLL	T6,T7,0xA
DIV	T6,AT
MFLO	T9
SW	T9,0020 (V1)
LH	T8,001A (T0)
ORI	A2,R0,FFFF
LUI	A1,8002
SLL	T7,T8,0xB
DIV	T7,T4
MFLO	T6
SW	T6,002C (V1)
LH	T9,001A (T0)
BNE	T4,R0,700037B8
NOP
BREAK	00001C00	;Break: division by zero
//700037B8:
ADDIU	AT,R0,FFFF
BNE	T4,AT,700037D0
LUI	AT,8000
BNE	T7,AT,700037D0
NOP
BREAK	00001800
//700037D0:
SLL	T8,T9,0xB
DIV	T8,T4
MFLO	T7
SW	T7,0040 (V1)
LH	T6,0018 (T0)
BNE	T4,R0,700037F0
NOP
BREAK	00001C00	;Break: division by zero
//700037F0:
ADDIU	AT,R0,FFFF
BNE	T4,AT,70003808
LUI	AT,8000
BNE	T8,AT,70003808
NOP
BREAK	00001800
//70003808:
SLL	T9,T6,0x1
SW	T9,0028 (V1)
LH	T8,0018 (T0)
SRA	T6,V0,0x10
ANDI	T9,T6,FFFF
SLL	T7,T8,0x1
SW	T7,003C (V1)
LW	A3,329C (A3)
ADDU	T8,T9,A3
DIV	T8,A2
BNE	A2,R0,7000383C
NOP
BREAK	00001C00	;Break: division by zero
//7000383C:
ADDIU	AT,R0,FFFF
BNE	A2,AT,70003854
LUI	AT,8000
BNE	T8,AT,70003854
NOP
BREAK	00001800
//70003854:
ANDI	T9,V0,FFFF
MFHI	T7
ADDU	T8,T9,A3
SLL	T6,T7,0x10
DIV	T8,A2
BNE	A2,R0,70003874
NOP
BREAK	00001C00	;Break: division by zero
//70003874:
ADDIU	AT,R0,FFFF
BNE	A2,AT,7000388C
LUI	AT,8000
BNE	T8,AT,7000388C
NOP
BREAK	00001800
//7000388C:
MFHI	T7
OR	A0,T6,T7
SW	A0,001C (V1)
LUI	AT,8006
SW	A0,0880 (AT)
LW	V0,0030 (V1)
LW	A1,32A0 (A1)
SRA	T9,V0,0x10
ANDI	T8,T9,FFFF
ADDU	T6,T8,A1
DIV	T6,A2
BNE	A2,R0,700038C4
NOP
BREAK	00001C00	;Break: division by zero
//700038C4:
ADDIU	AT,R0,FFFF
BNE	A2,AT,700038DC
LUI	AT,8000
BNE	T6,AT,700038DC
NOP
BREAK	00001800
//700038DC:
ANDI	T8,V0,FFFF
MFHI	T7
ADDU	T6,T8,A1
SLL	T9,T7,0x10
DIV	T6,A2
BNE	A2,R0,700038FC
NOP
BREAK	00001C00	;Break: division by zero
//700038FC:
ADDIU	AT,R0,FFFF
BNE	A2,AT,70003914
LUI	AT,8000
BNE	T6,AT,70003914
NOP
BREAK	00001800
//70003914:
MFHI	T7
OR	A0,T9,T7
SW	A0,0030 (V1)
LUI	AT,8006
SW	A0,0884 (AT)
LW	V0,0044 (V1)
SRA	T8,V0,0x10
ANDI	T6,T8,FFFF
ADDU	T9,T6,A1
DIV	T9,A2
BNE	A2,R0,70003948
NOP
BREAK	00001C00	;Break: division by zero
//70003948:
ADDIU	AT,R0,FFFF
BNE	A2,AT,70003960
LUI	AT,8000
BNE	T9,AT,70003960
NOP
BREAK	00001800
//70003960:
ANDI	T6,V0,FFFF
ADDU	T9,T6,A1
MFHI	T7
SLL	T8,T7,0x10
ADDIU	T6,R0,0001
DIV	T9,A2
BNE	A2,R0,70003984
NOP
BREAK	00001C00	;Break: division by zero
//70003984:
ADDIU	AT,R0,FFFF
BNE	A2,AT,7000399C
LUI	AT,8000
BNE	T9,AT,7000399C
NOP
BREAK	00001800
//7000399C:
MFHI	T7
OR	A0,T8,T7
SW	A0,0044 (V1)
LUI	AT,8006
SW	A0,0888 (AT)
LUI	AT,8002
ADDU	AT,AT,T1
BEQ	R0,R0,700039D4
SW	T6,30C4 (AT)
//700039C0:
LUI	AT,8002
ADDU	AT,AT,T1
LUI	T3,8002
LW	T3,32AC (T3)	;T3=800232AC: color output mode
SW	R0,30C4 (AT)
//700039D4:
ADDIU	T2,T2,0001
BGEZ	T2,700039EC
ANDI	T9,T2,0001
BEQ	T9,R0,700039EC
NOP
ADDIU	T9,T9,FFFE
//700039EC:
LUI	AT,8002
BEQ	T3,R0,70003A0C	;branch if 32bit
SW	T9,32C0 (AT)
LUI	T7,8005
LW	T7,EAB0 (T7)	;T7=8004EAB0: 
LW	T8,0028 (T0)	;T8=
BEQ	R0,R0,70003A20
SW	T8,0058 (T7)
//70003A0C:
LUI	T9,8005
LW	T9,EAB0 (T9)	;T9=8004EAB0: 
LUI	T6,803B
ADDIU	T6,T6,5000	;T6=803B5000
SW	T6,0058 (T9)
//70003A20:
LUI	V0,8006
ADDIU	V0,V0,0878
LBU	T8,0000 (V0)
LUI	V1,8006
ADDIU	T0,R0,002C
ADDIU	T7,T8,0001
ADDIU	V1,V1,0879
LBU	T9,0000 (V1)
LUI	A3,8002
ADDIU	A3,A3,3244
ADDIU	T8,T9,0001
LW	A0,0000 (T5)	;A0=p->video2.settings
BGEZ	T7,70003A64
ANDI	T6,T7,0001
BEQ	T6,R0,70003A64
NOP
ADDIU	T6,T6,FFFE
SB	T6,0000 (V0)
LBU	T6,0000 (V0)
BGEZ	T8,70003A80
ANDI	T7,T8,0001
BEQ	T7,R0,70003A80
NOP
ADDIU	T7,T7,FFFE
//70003A80:
MULTU	T6,T0
SB	T7,0000 (V1)
LUI	AT,8002
ADDIU	A2,R0,002C	;A2=0x2C: size
MFLO	T9
ADDU	T8,A3,T9
SW	T8,32A4 (AT)
LBU	T7,0000 (V1)
MULTU	T7,T0
MFLO	T6
ADDU	A1,A3,T6
JAL	7000F970	;V0=p->A2 bytes copied from A0 to A1
SW	A1,0000 (T5)	;A1->video2.settings
//70003AB4:
LUI	V1,8006
ADDIU	V1,V1,0879
LBU	T8,0000 (V1)
LUI	T6,803B
ADDIU	T6,T6,5000	;T6=803B5000: videobufferroot
SLL	T7,T8,0x2
ADDU	T7,T7,T8
SLL	T7,T7,0x2
SUBU	T7,T7,T8
SLL	T7,T7,0x2
SUBU	T7,T7,T8
LUI	T8,8002
LW	T8,32A8 (T8)	;T8=p->video2.settings
SLL	T7,T7,0xB	;T7= T8*25800: offset to buffer T8
ADDU	T9,T7,T6
SW	T9,0028 (T8)	;p->buffer -> video2.settings+28: video2.buf
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70003B04	4704
	accepts: F12=
LUI	AT,4160
MTC1	AT,F0	;F0= 14.0
NOP
C.LT.S	F0,F12
NOP
BC1FL	70003B28
MTC1	R0,F0
MOV.S	F12,F0
//70003B24:
MTC1	R0,F0
NOP
C.LT.S	F12,F0
NOP
BC1FL	70003B44
TRUNC.W.S	F4,F12
MOV.S	F12,F0
//70003B40:
TRUNC.W.S	F4,F12	;F4=F12->word
LUI	AT,8002
ADDIU	T8,R0,000A
MFC1	T7,F4
NOP
SW	T7,32B4 (AT)	;T7->800232B4
LUI	AT,8002
JR	RA
SW	T8,32B8 (AT)	;A->800232B8: 

70003B64	4764
ADDIU	SP,SP,FFE0
SW	S1,0018 (SP)
SW	S0,0014 (SP)
LUI	S1,8006
OR	S0,A0,R0
SW	RA,001C (SP)
ADDIU	S1,S1,4F10
OR	A0,S1,R0
OR	A1,R0,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
ADDIU	S0,S0,FFFF
BGTZL	S0,70003B84
OR	A0,S1,R0
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0020

70003BB0
LUI	A1,8002
ADDIU	A1,A1,32A8
LW	T6,0000 (A1)	;T6=p->video2.settings
SLL	V1,A0,0x1
LUI	V0,8003
SB	A0,0000 (T6)
ADDU	V0,V0,V1
LH	V0,8480 (V0)
LW	T7,0000 (A1)	;T7=p->video2.settings
SH	V0,0018 (T7)
LW	T8,0000 (A1)	;T8=p->video2.settings
SH	V0,0004 (T8)	;V0->video2.txtClipW
LUI	V0,8003
ADDU	V0,V0,V1
LH	V0,8488 (V0)
LW	T9,0000 (A1)	;T9=p->video2.settings
SH	V0,001A (T9)
LW	T0,0000 (A1)	;T0=p->video2.settings
JR	RA
SH	V0,0006 (T0)	;V0->video2.txtClipH

70003C00	4800	set color mode to 16bit
ADDIU	T6,R0,0001
LUI	AT,8002
JR	RA
SW	T6,32AC (AT)	;1->800232AC: 16bit

70003C10	4810	set color mode to 32bit
LUI	AT,8002
JR	RA
SW	R0,32AC (AT)	;0->800232AC: 32bit

70003C1C	481C	V0=p->video buffer 2
LUI	T6,8002
LW	T6,32A8 (T6)	;T6=p->video2.settings
JR	RA
LW	V0,0028 (T6)	;V0=video2+28: p->video2.buf

70003C2C	482C	V0=p->video buffer 1
LUI	T6,8002
LW	T6,32A4 (T6)	;T6=p->video1
JR	RA
LW	V0,0028 (T6)	;V0=video1+28: p->video1.buf

70003C3C	483C	A0->video buffer 2
LUI	T6,8002
LW	T6,32A8 (T6)
JR	RA
SW	A0,0028 (T6)	;A0->800232A8+28: video2.buf

70003C4C	484C	
LUI	V0,8006
JR	RA
LHU	V0,0824 (V0)	;V0=80060824

70003C58	4858
	accepts: A0=
LUI	A1,8008
ADDIU	A1,A1,A0B0
LW	V0,0000 (A1)	;V0=8007A0B0: p->BONDdata
ADDIU	SP,SP,FFD0
SW	S0,0024 (SP)
OR	S0,A0,R0
SW	RA,002C (SP)
BEQ	V0,R0,70003D20	;skip if NULL
SW	S1,0028 (SP)
LUI	S1,8002
ADDIU	S1,S1,32A8	;S1=800232A8
LW	T6,0000 (S1)	;T6=p->video2.settings
LUI	A0,8006
ADDIU	A0,A0,0879
LBU	T9,0000 (A0)
LH	T7,001C (T6)
SLL	T0,T9,0x4
ADDU	T1,V0,T0
SLL	T8,T7,0x1
SH	T8,07D0 (T1)
LW	V1,0000 (S1)	;V1=p->video2.settings
LBU	T9,0000 (A0)
LW	T7,0000 (A1)
LH	T2,001C (V1)
LH	T4,0020 (V1)
SLL	T0,T9,0x4
SLL	T3,T2,0x1
SLL	T5,T4,0x2
ADDU	T6,T3,T5
ADDU	T8,T7,T0
SH	T6,07D8 (T8)
LW	T1,0000 (S1)	;T1=p->video2.settings
LBU	T5,0000 (A0)
LW	T3,0000 (A1)
LH	T2,001E (T1)
SLL	T9,T5,0x4
ADDU	T7,T3,T9
SLL	T4,T2,0x1
SH	T4,07D2 (T7)
LW	V1,0000 (S1)	;V1=p->video2.settings
LBU	T3,0000 (A0)
LW	T5,0000 (A1)
LH	T0,001E (V1)
LH	T8,0022 (V1)
SLL	T9,T3,0x4
SLL	T6,T0,0x1
SLL	T1,T8,0x2
ADDU	T2,T6,T1
ADDU	T4,T5,T9
SH	T2,07DA (T4)
LUI	T7,0380
LUI	A0,8006
ORI	T7,T7,0010
OR	V0,S0,R0
ADDIU	A0,A0,0879
SW	T7,0000 (V0)
LBU	T8,0000 (A0)
LW	T0,0000 (A1)
LUI	AT,8000
SLL	T6,T8,0x4
ORI	AT,AT,07D0
ADDU	T1,T0,T6
LUI	S1,8002
ADDU	T3,T1,AT
ADDIU	S1,S1,32A8	;S1=800232A8
SW	T3,0004 (V0)
JAL	7F0BD6E0
ADDIU	S0,S0,0008
LUI	AT,8006
SW	V0,0820 (AT)
LW	V1,0000 (S1)	;V1=p->video2.settings
LUI	AT,3F80
MTC1	AT,F8
LWC1	F4,0010 (V1)
LW	A2,0008 (V1)
LW	A3,000C (V1)
SWC1	F4,0010 (SP)
LWC1	F6,0014 (V1)
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,0824
ADDIU	A0,A0,07E0
SWC1	F8,0018 (SP)
JAL	7000FC80
SWC1	F6,0014 (SP)
LUI	A0,8006
LUI	A1,8006
LW	A1,0820 (A1)
JAL	7000FF10
ADDIU	A0,A0,07E0
LUI	T5,0103
LUI	A1,8006
ORI	T5,T5,0040
OR	V0,S0,R0
ADDIU	A1,A1,0820
SW	T5,0000 (V0)
LW	T9,0000 (A1)
LUI	AT,8000
ADDIU	S0,S0,0008
LUI	T4,BC00
ADDU	T2,T9,AT
SW	T2,0004 (V0)
ORI	T4,T4,000E
OR	V1,S0,R0
SW	T4,0000 (V1)
LUI	T7,8006
LHU	T7,0824 (T7)
ADDIU	S0,S0,0008
SW	T7,0004 (V1)
JAL	7F078364
LW	A0,0000 (A1)
LUI	A0,8006
JAL	7F0783D4
ADDIU	A0,A0,07E0
LUI	T8,8002
LW	T8,32AC (T8)	;T8=800232AC: color output mode
OR	V0,S0,R0
LUI	AT,FF18
BEQL	T8,R0,70003E78	;branch if 32bit
LW	T7,0000 (S1)
LW	T0,0000 (S1)	;T0=p->video2.settings
LUI	AT,FF10
OR	V0,S0,R0
LH	T6,0018 (T0)
ADDIU	S0,S0,0008
ADDIU	T1,T6,FFFF
ANDI	T3,T1,0FFF
OR	T5,T3,AT
SW	T5,0000 (V0)
LW	T9,0000 (S1)	;T9=p->video2.settings
LUI	AT,8000
LW	T2,0028 (T9)
ADDU	T4,T2,AT
BEQ	R0,R0,70003E9C
SW	T4,0004 (V0)
LW	T7,0000 (S1)	;T7=p->video2.settings
LUI	T3,003B
ADDIU	T3,T3,5000
LH	T8,0018 (T7)
SW	T3,0004 (V0)
ADDIU	S0,S0,0008
ADDIU	T0,T8,FFFF
ANDI	T6,T0,0FFF
OR	T1,T6,AT
SW	T1,0000 (V0)
LW	RA,002C (SP)
OR	V0,S0,R0
LW	S0,0024 (SP)
LW	S1,0028 (SP)
JR	RA
ADDIU	SP,SP,0030

70003EB4	4AB4
LUI	T6,8002
LW	T6,32A8 (T6)	;T6=p->video2.settings
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LW	T7,0024 (T6)
BEQL	T7,R0,70003EE8
LW	RA,0014 (SP)
JAL	7F0D2464
NOP
JAL	7F0D2518
OR	A0,V0,R0
OR	A0,V0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
OR	V0,A0,R0
JR	RA
NOP

70003EF8	4AF8	insert a generic fillrect in display list A0; returns V0=updated DL pointer
	accepts: A0=p->display list
LUI	T6,BA00
ORI	T6,T6,1402
LUI	T7,0030
SW	T7,0004 (A0)
SW	T6,0000 (A0)
LUI	A2,8002
LW	A2,32A8 (A2)	;A2=p->video2.settings
ADDIU	A1,A0,0008
LUI	AT,F600
LH	T8,0018 (A2)
LH	T3,001A (A2)
ADDIU	A3,A1,0008
ADDIU	T9,T8,FFFF
ANDI	T0,T9,03FF
ADDIU	T4,T3,FFFF
ANDI	T5,T4,03FF
SLL	T1,T0,0xE
OR	T2,T1,AT
SLL	T6,T5,0x2
OR	T7,T2,T6
SW	T7,0000 (A1)
SW	R0,0004 (A1)
LUI	T8,E700
SW	T8,0000 (A3)
SW	R0,0004 (A3)
JR	RA
ADDIU	V0,A3,0008

70003F64
	accepts: A0=p->display list
ADDIU	SP,SP,FF98
SW	S0,0014 (SP)
SW	RA,001C (SP)
SW	S1,0018 (SP)
LUI	T6,BA00
ORI	T6,T6,1402
ADDIU	S0,A0,0008
LUI	T7,0030
SW	T7,0004 (A0)
SW	T6,0000 (A0)
OR	V1,S0,R0
LUI	T8,ED00
SW	T8,0000 (V1)
SW	V1,0060 (SP)
JAL	7000441C	;V0= video2.txtClipW
ADDIU	S0,S0,0008
SLL	S1,V0,0x10
SRA	T9,S1,0x10
JAL	7000442C	;V0= video2.txtClipH
OR	S1,T9,R0
MTC1	V0,F4
MTC1	S1,F16
LUI	AT,4080
CVT.S.W	F6,F4
MTC1	AT,F0
LW	T8,0060 (SP)
OR	V1,S0,R0
LUI	T0,0001
CVT.S.W	F18,F16
MUL.S	F8,F6,F0
ORI	T0,T0,0001
LUI	T9,F700
ADDIU	S0,S0,0008
MUL.S	F4,F18,F0
TRUNC.W.S	F10,F8
TRUNC.W.S	F6,F4
MFC1	T1,F10
MFC1	T4,F6
ANDI	T2,T1,0FFF
ANDI	T5,T4,0FFF
SLL	T6,T5,0xC
OR	T7,T2,T6
SW	T7,0004 (T8)
SW	T0,0004 (V1)
JAL	70004524	;V0= video2.uly
SW	T9,0000 (V1)
BLEZ	V0,7000409C
NOP
JAL	7F09B150
NOP
JAL	7F09B4D8
OR	A0,V0,R0
BNE	V0,R0,7000409C
NOP
SW	S0,0058 (SP)
JAL	7000441C	;V0= video2.txtClipW
ADDIU	S0,S0,0008
SLL	S1,V0,0x10
SRA	T1,S1,0x10
JAL	70004524	;V0= video2.uly
OR	S1,T1,R0
ADDIU	T3,V0,FFFF
LW	A0,0058 (SP)
ANDI	T4,T3,03FF
ADDIU	T6,S1,FFFF
ANDI	T7,T6,03FF
SLL	T5,T4,0x2
LUI	AT,F600
OR	T2,T5,AT
SLL	T8,T7,0xE
OR	T9,T2,T8
OR	V1,S0,R0
SW	T9,0000 (A0)
SW	R0,0004 (A0)
LUI	T0,E700
SW	T0,0000 (V1)
SW	R0,0004 (V1)
ADDIU	S0,S0,0008
JAL	7F09A464
NOP
ADDIU	AT,R0,0001
BNE	V0,AT,7000416C
NOP
JAL	700044AC	;V0= video2.lry
NOP
JAL	70004524	;V0= video2.uly
SH	V0,0022 (SP)
SLL	S1,V0,0x10
SRA	T1,S1,0x10
JAL	7000442C	;V0= video2.txtClipH
OR	S1,T1,R0
LH	T3,0022 (SP)
ADDU	T4,S1,T3
SLT	AT,T4,V0
BEQL	AT,R0,70004370
LW	RA,001C (SP)
SW	S0,0050 (SP)
JAL	7000441C	;V0= video2.txtClipW
ADDIU	S0,S0,0008
SLL	S1,V0,0x10
SRA	T5,S1,0x10
JAL	7000442C	;V0= video2.txtClipH
OR	S1,T5,R0
ADDIU	T6,V0,FFFF
ANDI	T7,T6,03FF
ADDIU	T9,S1,FFFF
ANDI	T0,T9,03FF
SLL	T2,T7,0x2
LUI	AT,F600
LW	T4,0050 (SP)
OR	T8,T2,AT
SLL	T1,T0,0xE
OR	T3,T8,T1
JAL	70004524	;V0= video2.uly
SW	T3,0000 (T4)
SLL	S1,V0,0x10
SRA	T5,S1,0x10
JAL	700044AC	;V0= video2.lry
OR	S1,T5,R0
LW	T9,0050 (SP)
ADDU	T6,V0,S1
ANDI	T7,T6,03FF
SLL	T2,T7,0x2
OR	V1,S0,R0
LUI	T0,E700
SW	T2,0004 (T9)
SW	R0,0004 (V1)
SW	T0,0000 (V1)
BEQ	R0,R0,7000436C
ADDIU	S0,S0,0008
JAL	7F09B150
NOP
JAL	7F09B4D8
OR	A0,V0,R0
BNEL	V0,R0,70004370
LW	RA,001C (SP)
JAL	700044AC	;V0= video2.lry
NOP
JAL	700044AC	;V0= video2.lry
SH	V0,0020 (SP)
JAL	70004524	;V0= video2.uly
SH	V0,0022 (SP)
SLL	S1,V0,0x10
SRA	T8,S1,0x10
JAL	7000442C	;V0= video2.txtClipH
OR	S1,T8,R0
LH	T1,0022 (SP)
LH	T4,0020 (SP)
ADDU	T3,S1,T1
ADDU	T5,T3,T4
SLT	AT,T5,V0
BEQL	AT,R0,70004260
OR	S1,S0,R0
SW	S0,0048 (SP)
JAL	7000441C	;V0= video2.txtClipW
ADDIU	S0,S0,0008
SLL	S1,V0,0x10
SRA	T6,S1,0x10
JAL	7000442C	;V0= video2.txtClipH
OR	S1,T6,R0
ADDIU	T7,V0,FFFF
ANDI	T2,T7,03FF
ADDIU	T8,S1,FFFF
ANDI	T1,T8,03FF
SLL	T9,T2,0x2
LUI	AT,F600
LW	T5,0048 (SP)
OR	T0,T9,AT
SLL	T3,T1,0xE
OR	T4,T0,T3
JAL	700044AC	;V0= video2.lry
SW	T4,0000 (T5)
JAL	70004524	;V0= video2.uly
SH	V0,0022 (SP)
SLL	S1,V0,0x10
SRA	T6,S1,0x10
JAL	700044AC	;V0= video2.lry
OR	S1,T6,R0
LH	T2,0022 (SP)
ADDU	T7,V0,S1
LW	T0,0048 (SP)
ADDU	T9,T7,T2
ANDI	T8,T9,03FF
SLL	T1,T8,0x2
OR	V1,S0,R0
SW	T1,0004 (T0)
LUI	T3,E700
SW	T3,0000 (V1)
SW	R0,0004 (V1)
ADDIU	S0,S0,0008
OR	S1,S0,R0
JAL	7000441C	;V0= video2.txtClipW
ADDIU	S0,S0,0008
ADDIU	T4,V0,FFFF
ANDI	T5,T4,03FF
SLL	T6,T5,0xE
LUI	AT,F600
OR	T7,T6,AT
ORI	T2,T7,01E0
ADDIU	T9,R0,01DC
OR	V1,S0,R0
SW	T9,0004 (S1)
SW	T2,0000 (S1)
LUI	T8,E700
SW	T8,0000 (V1)
SW	R0,0004 (V1)
JAL	7F09A464
ADDIU	S0,S0,0008
SLTI	AT,V0,0003
BNE	AT,R0,700042F0
OR	S1,S0,R0
JAL	7000442C	;V0= video2.txtClipH
ADDIU	S0,S0,0008
ADDIU	T1,V0,FFFF
ANDI	T0,T1,03FF
SLL	T3,T0,0x2
LUI	AT,F628
LUI	T5,0027
ORI	T5,T5,C000
OR	T4,T3,AT
OR	V1,S0,R0
SW	T4,0000 (S1)
SW	T5,0004 (S1)
LUI	T6,E700
SW	T6,0000 (V1)
SW	R0,0004 (V1)
ADDIU	S0,S0,0008
JAL	7F09A464
NOP
ADDIU	AT,R0,0003
BNEL	V0,AT,70004370
LW	RA,001C (SP)
SW	S0,0030 (SP)
JAL	7000441C	;V0= video2.txtClipW
ADDIU	S0,S0,0008
SLL	S1,V0,0x10
SRA	T7,S1,0x10
JAL	7000442C	;V0= video2.txtClipH
OR	S1,T7,R0
ADDIU	T2,V0,FFFF
LW	A0,0030 (SP)
ANDI	T9,T2,03FF
ADDIU	T0,S1,FFFF
ANDI	T3,T0,03FF
SLL	T8,T9,0x2
LUI	AT,F600
OR	T1,T8,AT
SLL	T4,T3,0xE
LUI	T6,0028
ORI	T6,T6,41E4
OR	T5,T1,T4
OR	V1,S0,R0
SW	T5,0000 (A0)
SW	T6,0004 (A0)
LUI	T7,E700
SW	T7,0000 (V1)
SW	R0,0004 (V1)
ADDIU	S0,S0,0008
LW	RA,001C (SP)
OR	V0,S0,R0
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0068

70004384	4F84
LUI	AT,8002
JR	RA
SW	A0,32A0 (AT)	;A0->800232A0: 

70004390	4F90
LUI	V0,8002
JR	RA
LW	V0,32A0 (V0)	;V0=800232A0: 

7000439C	4F9C
LUI	AT,8002
JR	RA
SW	A0,329C (AT)	;A0->8002329C: 

700043A8	4FA8
LUI	V0,8002
JR	RA
LW	V0,329C (V0)	;V0=8002329C: 

700043B4	4FB4
LUI	V0,8002
ADDIU	V0,V0,32A8
LW	T0,0000 (V0)	;T0=p->video2.settings
SW	A0,0000 (SP)
SW	A1,0004 (SP)
SH	A0,0018 (T0)	;A0->video2+18: 
LW	T1,0000 (V0)	;T1=p->video2.settings
JR	RA
SH	A1,001A (T1)	;A1->video2+1A: 

700043D8	4FD8
LUI	T6,8002
LW	T6,32A8 (T6)	;T6=p->video2.settings
JR	RA
LH	V0,0018 (T6)	;V0=video2+18: 

700043E8	4FE8
LUI	T6,8002
LW	T6,32A8 (T6)	;T6=p->video2.settings
JR	RA
LH	V0,001A (T6)	;V0=video2+1A: 

700043F8	4FF8	set video2 text clip width (A0) and height (A1)
	A0=text clip width, A1=text clip height
LUI	V0,8002
ADDIU	V0,V0,32A8
LW	T0,0000 (V0)	;T0=800232A8: p->video2.settings
SW	A0,0000 (SP)
SW	A1,0004 (SP)
SH	A0,0004 (T0)	;A0->video2.txtClipW
LW	T1,0000 (V0)
JR	RA
SH	A1,0006 (T1)	;A1->video2.txtClipH

7000441C	501C	V0= video2 text clip width
LUI	T6,8002
LW	T6,32A8 (T6)	;T6=800232A8: p->video2.settings
JR	RA
LH	V0,0004 (T6)	;V0=video2+4: txtClipW

7000442C	502C	V0= video2 text clip height
LUI	T6,8002
LW	T6,32A8 (T6)	;T6=800232A8: p->video2.settings
JR	RA
LH	V0,0006 (T6)	;V0=video2+6: txtClipH

7000443C	503C	set video2 width (A0) and height (A1)
	accepts: A0=viewport width, A1=viewport height
LUI	V1,8002
ADDIU	V1,V1,32A8
ADDIU	SP,SP,FFE8
LW	T0,0000 (V1)	;T0=p->video2.settings
SW	RA,0014 (SP)
SW	A0,0018 (SP)	;SP+18=A0: viewport width
SW	A1,001C (SP)	;SP+1C=A1: viewport height
SH	A0,001C (T0)	;A0->video2.lrx
LW	T1,0000 (V1)	;T1=p->video2.settings
SH	A1,001E (T1)	;A1->video2.lry
LW	V0,0000 (V1)	;V0=p->video2.settings
LH	T2,001C (V0)	;T2=video2+1C: video2.lrx
LH	T3,001E (V0)	;T3=video2+1E: video2.lry
MTC1	T2,F4
MTC1	T3,F6
CVT.S.W	F12,F4	;F12= (float) lrx
JAL	7F077BD8
CVT.S.W	F14,F6	;F14= (float) lry
JAL	7F077C5C
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000449C	509C	V0= video2 lower-right x
LUI	T6,8002
LW	T6,32A8 (T6)	;T6=p->video2.settings
JR	RA
LH	V0,001C (T6)	;V0=video2+1C: video2.lrx

700044AC	50AC	V0= video2 lower-right y
LUI	T6,8002
LW	T6,32A8 (T6)	;T6=p->video2.settings
JR	RA
LH	V0,001E (T6)	;V0=video2+1E: video2.lry

700044BC	50BC	set video2 upper-left x (A0) and upper-left y (A1)
LUI	V1,8002
ADDIU	V1,V1,32A8
ADDIU	SP,SP,FFE8
LW	T0,0000 (V1)	;T0=p->video2.settings
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SW	A1,001C (SP)
SH	A0,0020 (T0)
LW	T1,0000 (V1)	;T1=p->video2.settings
SH	A1,0022 (T1)
LW	V0,0000 (V1)	;V0=p->video2.settings
LH	T2,0020 (V0)
LH	T3,0022 (V0)
MTC1	T2,F4
MTC1	T3,F6
CVT.S.W	F12,F4
JAL	7F077C14
CVT.S.W	F14,F6
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70004514	5114	V0= video2 upper-left x
LUI	T6,8002
LW	T6,32A8 (T6)	;T6=p->video2.settings
JR	RA
LH	V0,0020 (T6)	;V0=video2+20: video2.ulx

70004524	5124	V0= video2 upper-left y
LUI	T6,8002
LW	T6,32A8 (T6)	;T6=p->video2.settings
JR	RA
LH	V0,0022 (T6)	;V0=video2+22: video2.uly

70004534	5134	A0-> video2 ???
LUI	T6,8002
LW	T6,32A8 (T6)	;T6=p->video2.settings
JR	RA
SW	A0,0024 (T6)	;A0->video2+24: 

70004544	5144
ADDIU	SP,SP,FFE8
LUI	V1,8002
ADDIU	V1,V1,32A8
SWC1	F12,0018 (SP)
LWC1	F4,0018 (SP)
LW	T6,0000 (V1)	;T6=p->video2.settings
SW	RA,0014 (SP)
SWC1	F4,0008 (T6)
LW	V0,0000 (V1)	;V0=p->video2.settings
LWC1	F12,0010 (V0)
LWC1	F14,0008 (V0)
JAL	7F077C30	;F12->BONDdata+10A0, F14->BONDdata+10A4, A2[float]->BONDdata+10A8
LW	A2,000C (V0)
JAL	7F077C5C
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70004590	5190	F12->video2 page width
	accepts: F12=page width
ADDIU	SP,SP,FFE8
LUI	V1,8002
ADDIU	V1,V1,32A8
SWC1	F12,0018 (SP)
LWC1	F4,0018 (SP)
LW	T6,0000 (V1)	;T6=p->video2.settings
SW	RA,0014 (SP)
SWC1	F4,000C (T6)	;F12->video2.settings+C: video2.pagewidth
LW	V0,0000 (V1)	;V0=p->video2.settings
LWC1	F12,0010 (V0)	;F12=video2.settings+10: 
LWC1	F14,0008 (V0)	;F14=video2.settings+8: 
JAL	7F077C30	;F12->BONDdata+10A0, F14->BONDdata+10A4, A2[float]->BONDdata+10A8
LW	A2,000C (V0)	;A2=(float) page width
JAL	7F077C5C
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700045DC	51DC
LUI	T6,8002
LW	T6,32A8 (T6)
JR	RA
LWC1	F0,0008 (T6)	;F0=800232A8+8: video2.???

700045EC	51EC
ADDIU	SP,SP,FFE8
LUI	V1,8002
ADDIU	V1,V1,32A8
SWC1	F14,001C (SP)
LWC1	F4,001C (SP)
LW	T6,0000 (V1)	;T6=p->video2.settings
SW	RA,0014 (SP)
SWC1	F12,0018 (SP)
SWC1	F4,0008 (T6)
LWC1	F8,001C (SP)
LWC1	F6,0018 (SP)
LW	T7,0000 (V1)	;T7=p->video2.settings
DIV.S	F10,F6,F8
SWC1	F10,000C (T7)
LW	V0,0000 (V1)	;V0=p->video2.settings
LWC1	F12,0010 (V0)
LWC1	F14,0008 (V0)
JAL	7F077C30	;F12->BONDdata+10A0, F14->BONDdata+10A4, A2[float]->BONDdata+10A8
LW	A2,000C (V0)
JAL	7F077C5C
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70004650	5250
	accepts: F12=, F14=
ADDIU	SP,SP,FFE8
LUI	V1,8002
ADDIU	V1,V1,32A8
SWC1	F12,0018 (SP)
LWC1	F4,0018 (SP)
LW	T6,0000 (V1)	;T6=p->video2.settings
SW	RA,0014 (SP)
SWC1	F14,001C (SP)
SWC1	F4,0010 (T6)	;video2.settings+10 = F12 f/caller
LW	T7,0000 (V1)	;T7=p->video2.settings
LWC1	F6,001C (SP)
SWC1	F6,0014 (T7)	;video2.settings+14 = F14 f/caller
LW	V0,0000 (V1)	;V0=p->video2.settings
LWC1	F12,0010 (V0)	;F12= F12 f/caller
LWC1	F14,0008 (V0)
JAL	7F077C30	;F12->BONDdata+10A0, F14->BONDdata+10A4, A2[float]->BONDdata+10A8
LW	A2,000C (V0)
JAL	7F077C5C
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700046AC	52AC
	accepts: A0=p->???
LUI	V0,8002
ADDIU	V0,V0,32A8
LW	T6,0000 (V0)	;T6=p->video2.settings
LWC1	F4,0010 (T6)
SWC1	F4,0000 (A0)
LW	T7,0000 (V0)	;T7=p->video2.settings
LWC1	F6,0014 (T7)
JR	RA
SWC1	F6,0004 (A0)

700046D0	52D0	set setfillcolour with color (A1,A2,A3) in display list A0
	accepts: A0=p->display list target, A1=red, A2=green, A3=blue
LUI	T6,8002
LW	T6,32AC (T6)	;T6=800232AC: color output mode
OR	V0,A0,R0
LUI	T8,F700
BEQ	T6,R0,70004730	;1: 16bit color
SLL	T0,A1,0x18
SLL	T8,A1,0x8
SLL	T0,A2,0x3
ANDI	T1,T0,07C0	;T1= green
ANDI	T9,T8,F800	;T9= red
SRA	T3,A3,0x2
ANDI	T4,T3,003E	;T4= blue
OR	T2,T9,T1
OR	V1,T2,T4
ORI	T5,V1,0001
OR	V0,A0,R0
LUI	T7,F700
SW	T7,0000 (V0)
SLL	T6,T5,0x10
OR	T7,T6,T5
SW	T7,0004 (V0)
ADDIU	A0,A0,0008
JR	RA
OR	V0,A0,R0
//70004730:	0: 32bit color
SLL	T9,A2,0x10
OR	T1,T0,T9
SLL	T3,A3,0x8
OR	T2,T1,T3
ORI	T4,T2,00FF
SW	T4,0004 (V0)
ADDIU	A0,A0,0008
SW	T8,0000 (V0)
JR	RA
OR	V0,A0,R0

70004758	5358	image capture routine: 16bit jpeg
ADDIU	SP,SP,FEC8
SW	S1,0024 (SP)
SW	S2,0028 (SP)
SW	S0,0020 (SP)
LUI	S1,8003
SW	RA,002C (SP)
ADDIU	S1,S1,8490	;S1=80028490: "grab.%d.jpeg"
ADDIU	S0,SP,0038	;S0=SP+38: buffer for string
ADDIU	S2,SP,0034	;S2=SP+34: p->instance
//7000477C:
LUI	A2,8002
LW	A2,32C4 (A2)	;A2=800232C4: cur.jpeg16bit
OR	A0,S0,R0	;A0=S0: p->buffer
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A1,S1,R0	;A1=S1
OR	A0,S0,R0	;A0=S0: p->string
JAL	7F0D0098	;V0=TRUE if resource named A0 found on Indy and filesize set to A1
OR	A1,S2,R0	;A1=S2: @filesize
BEQ	V0,R0,700047B8	;branch if unique
//700047A0:	loop and increment value if found
LUI	A2,8002
LW	A2,32C4 (A2)
LUI	AT,8002
ADDIU	A2,A2,0001
BEQ	R0,R0,7000477C
SW	A2,32C4 (AT)	;cur.jpeg16bit +=1
//700047B8:	grab base image
LUI	A2,8002
LUI	A1,8003
LW	A2,32C4 (A2)	;A2=800232C4: cur.jpeg16bit
ADDIU	A1,A1,84A0	;A1=800284A0: "grab.%d.temp.uix"
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A0,S0,R0
JAL	7000441C	;V0= video2.txtClipW
NOP
SLL	S1,V0,0x10
SRA	T6,S1,0x10
JAL	7000442C	;V0= video2.txtClipH
OR	S1,T6,R0
MULTU	V0,S1
LUI	T7,8002
LW	T7,32A8 (T7)	;T7=800232A8: p->video2
OR	A0,S0,R0	;A0=S0: p->text
LW	A1,0028 (T7)	;A1= video2.buf
MFLO	A2		;A2=width * height
SLL	T8,A2,0x1
JAL	7F0CFFE0	;send capture data A1 of size A2 named A0
OR	A2,T8,R0	;A2=width * height * 2: size of VI buffer
//7000480C:	send command line: Uix2pix -xs{width} grab.{instance}.temp.Uix
LUI	A2,8002
LUI	A1,8003
LW	A2,32C4 (A2)	;A2=800232C4: cur.jpeg16bit
ADDIU	A1,A1,84B4	;A1=800284B4: "uix2pix grab.%d.temp.uix"
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A0,S0,R0
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//7000482C:	send command line: fromalias - probably a copy/rename routine
LUI	A2,8002
LW	A2,32C4 (A2)	;A2=800232C4: cur.jpeg16bit
LUI	A1,8003
ADDIU	A1,A1,84D0	;A1=800284D0: "fromalias grab.%d.temp.pix grab.%d.temp.rgb"
OR	A0,S0,R0
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A3,A2,R0
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//70004850:	send command line: imagecopy - format is jfif, converting raw rgb into jpeg
LUI	A2,8002
LW	A2,32C4 (A2)	;A2=800232C4: cur.jpeg16bit
LUI	A1,8003
ADDIU	A1,A1,84FC	;A1=800284FC: "imgcopy -fjfif grab.%d.temp.rgb grab.%d.jpeg"
OR	A0,S0,R0
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A3,A2,R0
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//70004874:	remove intermediate images
LUI	A2,8002
LW	A2,32C4 (A2)	;A2=800232C4: cur.jpeg16bit
LUI	A1,8003
ADDIU	A1,A1,852C	;A1=8002852C: "rm grab.%d.temp.uix grab.%d.temp.pix grab.%d.temp.rgb"
OR	A0,S0,R0
OR	A3,A2,R0
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
SW	A2,0010 (SP)
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//7000489C:	open image in imgview
LUI	A2,8002
LUI	A1,8003
LW	A2,32C4 (A2)	;A2=800232C4: cur.jpeg16bit
ADDIU	A1,A1,8564	;A1=80028564: "imgview grab.%d.jpeg"
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A0,S0,R0
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//700048BC:	return
LW	RA,002C (SP)
LW	S0,0020 (SP)
LW	S1,0024 (SP)
LW	S2,0028 (SP)
JR	RA
ADDIU	SP,SP,0138

700048D4	54D4	image capture routine: 32bit jpeg
ADDIU	SP,SP,FEC8
SW	S1,0020 (SP)
SW	S2,0024 (SP)
SW	S0,001C (SP)
LUI	S1,8003
SW	RA,002C (SP)
SW	S3,0028 (SP)
ADDIU	S1,S1,857C	;S1=8002857C: "grab.%d.jpeg"
ADDIU	S0,SP,0038	;S0=SP+38: p->buffer
ADDIU	S2,SP,0034	;S2=SP+34: p->instance
//700048FC:	find an unused instance
LUI	S3,8002
LW	A2,32C8 (S3)	;A2=800232C8: cur.jpeg32bit
OR	A0,S0,R0	;A0=S0: p->buffer
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A1,S1,R0
OR	A0,S0,R0	;A0=S0: p->string
JAL	7F0D0098	;V0=TRUE if resource named A0 found on Indy and filesize set to A1
OR	A1,S2,R0	;A1=S2: @filesize
BEQ	V0,R0,70004938	;branch if unique
//70004920:	loop and increment value if found
LUI	S3,8002
LW	S3,32C8 (S3)
LUI	AT,8002
ADDIU	S3,S3,0001
BEQ	R0,R0,700048FC
SW	S3,32C8 (AT)	;jpeg grab# +=1
//70004938:	grab base entry
LUI	S3,8002
LUI	A1,8003
LW	A2,32C8 (S3)	;A2=800232C8: cur.jpeg32bit
ADDIU	A1,A1,858C	;A1=8002858C: "grab.%d.temp.Uix"
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A0,S0,R0
JAL	7000441C	;V0= video2.txtClipW
NOP
SLL	S1,V0,0x10
SRA	T6,S1,0x10
JAL	7000442C	;V0= video2.txtClipH
OR	S1,T6,R0
MULTU	V0,S1
LUI	A1,803B
ADDIU	A1,A1,5000	;A1=803B5000
OR	A0,S0,R0	;A0=S0: p->string
MFLO	A2		;A2=width * height
SLL	T7,A2,0x2
JAL	7F0CFFE0	;send capture data A1 of size A2 named A0
OR	A2,T7,R0	;A2=width * height * 4: size of 32bit video buffer
//70004988:	send command line: Uix2pix -xs{width} grab.{instance}.temp.Uix
JAL	7000441C	;V0= video2.txtClipW
NOP
LUI	S3,8002
LUI	A1,8003
ADDIU	A1,A1,85A0	;A1=800285A0: "Uix2pix -xs%d grab.%d.temp.Uix"
LW	A3,32C8 (S3)	;A3=800232C8: cur.jpeg32bit
OR	A0,S0,R0
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A2,V0,R0	;A2=V0: width
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0	;A0=S0: p->string
//700049B4:	send command line: fromalias - probably a copy/rename routine
LUI	S3,8002
LW	A3,32C8 (S3)	;A3=800232C8: cur.jpeg32bit
LUI	A1,8003
ADDIU	A1,A1,85C0	;A1=800285C0: "fromalias grab.%d.temp.pix grab.%d.temp.rgb"
OR	A0,S0,R0
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A2,A3,R0
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//700049D8:	send command line: imagecopy - format is jfif, converting raw rgb into jpeg
LUI	S3,8002
LW	A3,32C8 (S3)
LUI	A1,8003
ADDIU	A1,A1,85EC	;A1=800285EC: "imgcopy -fjfif grab.%d.temp.rgb grab.%d.jpeg"
OR	A0,S0,R0
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A2,A3,R0
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//700049FC:	remove intermediate images
LUI	S3,8002
LW	A3,32C8 (S3)	;A3=800232C8: cur.jpeg32bit
LUI	A1,8003
ADDIU	A1,A1,861C	;A1=8002861C: "rm grab.%d.temp.Uix grab.%d.temp.pix grab.%d.temp.rgb"
OR	A0,S0,R0
OR	A2,A3,R0
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
SW	A3,0010 (SP)
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//70004A24:	open image in imgview
LUI	S3,8002
LUI	A1,8003
LW	A2,32C8 (S3)
ADDIU	A1,A1,8654	;A1=80028654: "imgview grab.%d.jpeg"
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A0,S0,R0
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//70004A44:	return
LW	RA,002C (SP)
LW	S0,001C (SP)
LW	S1,0020 (SP)
LW	S2,0024 (SP)
LW	S3,0028 (SP)
JR	RA
ADDIU	SP,SP,0138

70004A60	5660	image capture routine: 16bit rgb
ADDIU	SP,SP,FED0
SW	S1,001C (SP)
SW	S2,0020 (SP)
SW	S0,0018 (SP)
LUI	S1,8003
SW	RA,0024 (SP)
ADDIU	S1,S1,866C	;S1=8002866C: "grab.%d.rgb"
ADDIU	S0,SP,0030	;S0=SP+30: p->buffer
ADDIU	S2,SP,002C	;S2=SP+2C: p->instance
//70004A84:	find an unused instance
LUI	A2,8002
LW	A2,32CC (A2)	;A2=800232CC: cur.rgb16bit
OR	A0,S0,R0
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A1,S1,R0
OR	A0,S0,R0	;A0=S0: p->string
JAL	7F0D0098	;V0=TRUE if resource named A0 found on Indy and filesize set to A1
OR	A1,S2,R0	;A1=S2: @filesize
BEQ	V0,R0,70004AC0	;branch if unique
//70004AA8:	loop and increment value if found
LUI	A2,8002
LW	A2,32CC (A2)
LUI	AT,8002
ADDIU	A2,A2,0001
BEQ	R0,R0,70004A84
SW	A2,32CC (AT)	;cur.rgb16bit += 1
//70004AC0:	grab base entry
LUI	A2,8002
LUI	A1,8003
LW	A2,32CC (A2)	;A2=800232CC: cur.rgb16bit
ADDIU	A1,A1,8678	;A1=80028678: "grab.%d.temp.uix"
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A0,S0,R0
JAL	7000441C	;V0= video2.txtClipW
NOP
SLL	S1,V0,0x10
SRA	T6,S1,0x10
JAL	7000442C	;V0= video2.txtClipH
OR	S1,T6,R0
MULTU	V0,S1
LUI	T7,8002
LW	T7,32A8 (T7)	;T7=800232A8: p->video2.settings
OR	A0,S0,R0	;A0=S0: p->string
LW	A1,0028 (T7)	;A1=video2.buf
MFLO	A2		;A2=width * height
SLL	T8,A2,0x1
JAL	7F0CFFE0	;send capture data A1 of size A2 named A0
OR	A2,T8,R0	;A2=width * height * 2: size of screen buffer
//70004B14:	send command line: Uix2pix grab.{instance}.temp.uix
LUI	A2,8002
LUI	A1,8003
LW	A2,32CC (A2)	;A2=800232CC: cur.rgb16bit
ADDIU	A1,A1,868C	;A1=8002868C: "uix2pix grab.%d.temp.uix"
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A0,S0,R0
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//70004B34:	send command line: fromalias - probably a copy/rename routine
LUI	A2,8002
LW	A2,32CC (A2)	;A2=800232CC: cur.rgb16bit
LUI	A1,8003
ADDIU	A1,A1,86A8	;A1=800286A8: "fromalias grab.%d.temp.pix grab.%d.rgb"
OR	A0,S0,R0
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A3,A2,R0
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//70004B58:	remove intermediate images
LUI	A2,8002
LW	A2,32CC (A2)	;A2=800232CC: cur.rgb16bit
LUI	A1,8003
ADDIU	A1,A1,86D0	;A1=800286D0: "rm grab.%d.temp.uix grab.%d.temp.pix"
OR	A0,S0,R0
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A3,A2,R0
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//70004B7C:	open image in imgview
LUI	A2,8002
LUI	A1,8003
LW	A2,32CC (A2)	;A2=800232CC: cur.rgb16bit
ADDIU	A1,A1,86F8	;A1=800286F8: "imgview grab.%d.rgb"
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A0,S0,R0
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//70004B9C:	return
LW	RA,0024 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
JR	RA
ADDIU	SP,SP,0130

70004BB4	57B4	image capture routine: 32bit rgba
ADDIU	SP,SP,FED0
SW	S1,0018 (SP)
SW	S2,001C (SP)
SW	S0,0014 (SP)
LUI	S1,8003
SW	RA,0024 (SP)
SW	S3,0020 (SP)
ADDIU	S1,S1,870C	;S1=8002870C: "grab.%d.rgb"
ADDIU	S0,SP,0030	;S0=SP+30: p->buffer
ADDIU	S2,SP,002C	;S2=SP+2C: p->instance
//70004BDC:
LUI	S3,8002
LW	A2,32D0 (S3)	;A2=800232D0: cur.rgb32bit
OR	A0,S0,R0
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A1,S1,R0
OR	A0,S0,R0	;A0=S0: p->string
JAL	7F0D0098	;V0=TRUE if resource named A0 found on Indy and filesize set to A1
OR	A1,S2,R0	;A1=S2: @filesize
BEQ	V0,R0,70004C18	;branch if unique
//70004BDC:	loop and increment value if found
LUI	S3,8002
LW	S3,32D0 (S3)
LUI	AT,8002
ADDIU	S3,S3,0001
BEQ	R0,R0,70004BDC
SW	S3,32D0 (AT)	;cur.rgb32bit += 1
//70004C18:	grab base entry
LUI	S3,8002
LUI	A1,8003
LW	A2,32D0 (S3)	;A2=800232D0: cur.rgb32bit
ADDIU	A1,A1,8718	;A1=80028718: "grab.%d.temp.Uix"
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A0,S0,R0
JAL	7000441C	;V0= video2.txtClipW
NOP
SLL	S1,V0,0x10
SRA	T6,S1,0x10
JAL	7000442C	;V0= video2.txtClipH
OR	S1,T6,R0
MULTU	V0,S1
LUI	A1,803B
ADDIU	A1,A1,5000	;A1=803B5000
OR	A0,S0,R0
MFLO	A2		;A2=width * height
SLL	T7,A2,0x2
JAL	7F0CFFE0	;send capture data A1 of size A2 named A0
OR	A2,T7,R0	;A2=width * height * 4
//70004C68:	send command line: Uix2pix -xs{width} grab.{instance}.temp.Uix
JAL	7000441C	;V0= video2.txtClipW
NOP
LUI	S3,8002
LUI	A1,8003
ADDIU	A1,A1,872C	;A1=8002872C: "Uix2pix -xs%d grab.%d.temp.Uix"
LW	A3,32D0 (S3)	;A3=800232D0: cur.rgb32bit
OR	A0,S0,R0
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A2,V0,R0
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//70004C94:	send command line: fromalias - probably a copy/rename routine
LUI	S3,8002
LW	A3,32D0 (S3)	;A3=800232D0: cur.rgb32bit
LUI	A1,8003
ADDIU	A1,A1,874C	;A1=8002874C: "fromalias grab.%d.temp.pix grab.%d.rgb"
OR	A0,S0,R0
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A2,A3,R0
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//70004CB8:	remove intermediate images
LUI	S3,8002
LW	A3,32D0 (S3)	;A3=800232D0: cur.rgb32bit
LUI	A1,8003
ADDIU	A1,A1,8774	;A1=80028774: "rm grab.%d.temp.Uix grab.%d.temp.pix"
OR	A0,S0,R0
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A2,A3,R0
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//70004CDC:	open image in imgview
LUI	S3,8002
LUI	A1,8003
LW	A2,32D0 (S3)	;A2=800232D0: cur.rgb32bit
ADDIU	A1,A1,879C	;A1=8002879C: "imgview grab.%d.rgb"
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A0,S0,R0
JAL	7F0D00E0	;V0= response from command string A0 sent to host PC via Indy
OR	A0,S0,R0
//70004CFC:	return
LW	RA,0024 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
JR	RA
ADDIU	SP,SP,0130

70004D20	5920	V0=p->match in debug.notice.list or NULL if not found
	accepts: A0=p->name, A1=p->data
ADDIU	SP,SP,FFE0
SW	S0,0014 (SP)
LUI	S0,8002
LW	S0,32E8 (S0)	;S0=800232E8: p->first entry
SW	S1,0018 (SP)
OR	S1,A0,R0	;S1=A0: p->name
BEQ	S0,R0,70004D68	;return NULL if no table
SW	RA,001C (SP)
//70004D40:	test each entry for a match
LW	A0,0008 (S0)	;A0=entry+8: p->name
JAL	7000A84C	;V0= strcmp(A0,A1)
OR	A1,S1,R0	;A1=S1: p->name
BNEL	V0,R0,70004D60	;iterate if mismatch
LW	S0,0000 (S0)
BEQ	R0,R0,70004D6C	;return V0=p->match if found
OR	V0,S0,R0
//70004D5C:
LW	S0,0000 (S0)
BNEL	S0,R0,70004D44
LW	A0,0008 (S0)
OR	V0,R0,R0	;V0=NULL
//70004D6C:	return
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0020

70004D80	5980	V0=p->entry of size A0 allocated in debug.notice.list; entry allocated in block 6 on failure
	accepts: A0=size
LUI	V0,8002
LW	V0,32F8 (V0)	;V0=800232F8: p->end of debug.notice.list's data
LUI	T6,8006
ADDIU	T6,T6,0C90	;T6=80060C90: debug.notice.max
OR	V1,V0,R0	;V1=p->debug.notice.end
ADDU	V0,V0,A0	;V0=debug.notice.end + size
ADDIU	SP,SP,FFE8
SLTU	AT,T6,V0
BEQ	AT,R0,70004DC4	;update positions if didn't hit debug.notice.max
SW	RA,0014 (SP)
//70004DA8:	instead, return V0= A0 bytes allocated in bank 6
SUBU	V0,V0,A0
LUI	AT,8002
SW	V0,32F8 (AT)	;do not update debug.notice.end
JAL	70009720	;V0=p->A0 bytes of memory allocated in bank A1
ADDIU	A1,R0,0006
BEQ	R0,R0,70004DD4
LW	RA,0014 (SP)
//70004DC4:
LUI	AT,8002
SW	V0,32F8 (AT)	;update debug.notice.end
OR	V0,V1,R0	;V0=V1: p->this allocated entry in table
//70004DD0:
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70004DE0	59E0	V0=p->new entry added in debug.notice.list
	accepts: A0=p->name, A1=p->data
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SW	A1,001C (SP)
JAL	70004D80	;V0=p->entry of size A0 allocated in debug.notice.list
ADDIU	A0,R0,0010	;A0=10
LUI	V1,8002
ADDIU	V1,V1,32E8	;V1=800232E8: p->debug.notice.list
LW	T6,0000 (V1)	;T6=debug.notice.list
SW	T6,0000 (V0)	;entry+0 = p->previous entry
LW	T7,001C (SP)
SW	T7,0004 (V0)	;entry+4 = p->data
LW	T8,0018 (SP)
SW	T8,0008 (V0)	;entry+8 = p->name
LW	RA,0014 (SP)
SW	V0,0000 (V1)	;V0->800232E8: set new entry as start of list
ADDIU	SP,SP,0018
JR	RA
NOP

70004E2C	5A2C	add debug.notice "deb_c_debug"
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,8002
LUI	A1,8003
ADDIU	A1,A1,87B0	;A1=800287B0: "deb_c_debug"
JAL	70004E60	;V0=p->debug.notice.list entry for name A1 and data A0
ADDIU	A0,A0,32E0	;A0=800232E0: 
JAL	70004EE0
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70004E60	5A60	V0=p->debug.notice.list entry for name A1 and data A0; generates if not found
	accepts: A0=p->data, A1=p->name
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SW	A1,001C (SP)
JAL	70004D20	;V0=p->match in debug.notice.list or NULL if not found
OR	A0,A1,R0	;A0=A1: p->name of debug routine
BNE	V0,R0,70004E88	;return p->match if found
//70004E7C:	add entry if not found
LW	A0,001C (SP)	;A0=A1 f/caller: p->name
JAL	70004DE0	;V0=p->new entry added in debug.notice.list
LW	A1,0018 (SP)	;A1=A0 f/caller: p->data
//70004E88:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70004E98	5A98	scan debug.notice.list until a NULL pointer
LUI	V0,8002
LW	V0,32E8 (V0)	;V0=800232E8: 
BEQ	V0,R0,70004EB4	;return if zero
NOP
LW	V0,0000 (V0)
//70004EAC:	loop until end of linked pointer list
BNEL	V0,R0,70004EAC
LW	V0,0000 (V0)
//70004EB4:	return
JR	RA
NOP

70004EBC	5ABC	unconditional return
JR	RA
NOP

70004EC4	5AC4	(removed)
	accepts: A0=, A1=, A2=
SW	A0,0000 (SP)
SW	A1,0004 (SP)
JR	RA
SW	A2,0008 (SP)

70004EE0	5AE0	
ADDIU	SP,SP,FFE0
SW	RA,001C (SP)
JAL	700059A4	;set pointers to video buffers 1 & 2
NOP
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,3658	;A1=80063658
ADDIU	A0,A0,3640	;A0=80063640
JAL	7000D6D0
ADDIU	A2,R0,0001	;A2=1
LUI	T6,8006
ADDIU	T6,T6,1340	;T6=80061340: very oddly local stack pointer
LUI	A0,8006
LUI	A2,7000
ADDIU	T7,R0,0028
SW	T7,0014 (SP)	;SP+14= 28
ADDIU	A2,A2,4F54	;A2= 70004F54
ADDIU	A0,A0,0C90	;A0= 80060C90
SW	T6,0010 (SP)	;SP+10= 80061340: new stack pointer
ADDIU	A1,R0,0005	;A1= 5
JAL	7000D430	;initialize thread entry at A0 with values
OR	A3,R0,R0	;A3= 0
LUI	A0,8006
JAL	7000D580	;insert thread and execute if no thread currently running
ADDIU	A0,A0,0C90	;A0=80060C90
LW	RA,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

70004F54	5B54
ADDIU	SP,SP,FFC0
SW	S7,0030 (SP)
LUI	S7,8006
ADDIU	S7,S7,3640
SW	RA,0034 (SP)
SW	A0,0040 (SP)
SW	S6,002C (SP)
SW	S5,0028 (SP)
SW	S4,0024 (SP)
SW	S3,0020 (SP)
SW	S2,001C (SP)
SW	S1,0018 (SP)
SW	S0,0014 (SP)
SW	R0,003C (SP)
ADDIU	A0,R0,000C	;A0=entry C
OR	A1,S7,R0	;A1=80063640: 
JAL	7000DC50	;set interrupt table entry #A0 with p->data A1 and value A2
ADDIU	A2,R0,0010	;A2=10
//70004F9C:
LUI	AT,8006
LUI	S6,8002
SW	R0,3660 (AT)	;0->80063660: 
ADDIU	S6,S6,7728
ADDIU	S5,R0,000A
LUI	S4,FFC0
LUI	S3,7F00
ADDIU	S2,R0,0008
ADDIU	S1,SP,003C	;S1=SP+3C: p->buffer
//70004FC0:
OR	A0,S7,R0	;A0=80063640: 
OR	A1,S1,R0	;A1=p->buffer
JAL	7000DDD0
ADDIU	A2,R0,0001
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
ADDIU	A0,R0,0001
JAL	70010180	;V0=80027734: 
OR	S0,V0,R0	;S0=V0: new diagnostic status
LUI	AT,8006
BEQ	V0,R0,70004FC0	;loop while pointer NULL
SW	V0,365C (AT)	;V0->8006365C: 
//70004FEC:
LW	T6,0120 (V0)	;T6=thread+120: 
LUI	T0,8006
ANDI	T7,T6,007C
BNE	S2,T7,7000505C
NOP
//70005000:	must be a 7F- TLB address to load
LW	T8,0124 (V0)	;T8=thread+124: 
AND	T9,T8,S4	;T9= T8 & FFC00000
BNE	S3,T9,7000505C	;skip if not 7F
NOP
//70005010:	load 7F- address
LW	T0,365C (T0)
JAL	700019D8	;translates and loads ROM based on TLB address
LW	A0,0124 (T0)	;A0=thread+124: 
LUI	T1,8006
LW	T1,365C (T1)
LUI	T2,8006
LUI	A1,8006
SH	S5,0010 (T1)	;A->thread+10: set index
LW	T2,365C (T2)
OR	A0,S6,R0	;A0=80027728
SH	R0,0012 (T2)	;0->thread+12: 
JAL	700108AC	;insert thread A1 into thread list A0
LW	A1,365C (A1)	;A1=8006365C+0: thread
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
OR	A0,S0,R0	;A0=S0: status
JAL	70010AD0	;set priority of current thread to 2, then update, insert, and execute
NOP
BEQ	R0,R0,70004FC4
OR	A0,S7,R0	;A0=80063640: 
//7000505C:
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
OR	A0,S0,R0	;A0=S0: status
//70005064:	infinite loop!
BEQ	R0,R0,70005064
NOP
//7000506C:
NOP
NOP
NOP
NOP
NOP
//70005080:	unused return
LW	RA,0034 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
LW	S4,0024 (SP)
LW	S5,0028 (SP)
LW	S6,002C (SP)
LW	S7,0030 (SP)
JR	RA
ADDIU	SP,SP,0040

700050AC	5CAC	V0= SP, A3=SP usage within function range (A1,A0) with initial SP A2
	accepts: A0=p->opcode.cur, A1=p->opcode.start, A2=SP w/i function, A3=p->register buffer
ADDIU	SP,SP,FFF0
SW	A0,0010 (SP)
SW	S1,000C (SP)
SW	S0,0008 (SP)
OR	V1,A2,R0	;V1=A2: SP.actual
OR	V0,R0,R0	;V0=0	SP repositioned flag
OR	T0,R0,R0	;T0=0	SW RA flag
ADDIU	A0,R0,0020
OR	T1,R0,R0
OR	T2,A3,R0	;T2=A3: p->buffer
//700050D4:	init. buffer for 20 registers
ADDIU	T1,T1,0004
SW	R0,0000 (T2)
SW	R0,0004 (T2)
SW	R0,0008 (T2)
SW	R0,000C (T2)
BNE	T1,A0,700050D4
ADDIU	T2,T2,0010
//700050F0:	initialize search for stack use
LW	A0,0010 (SP)	;A0= f/caller: p->opcode.cur
LUI	S1,03E0
ORI	S1,S1,0008	;S1=03E00008: opcode JR RA
SLTU	AT,A0,A1
BNE	AT,R0,700051B8	;return if p->opcode.cur < p->opcode.start
ADDIU	S0,R0,001F	;S0=0x1F: RA register
LUI	T5,FFE0
LUI	T4,AFA0
LUI	T3,FFFF
LUI	T2,27BD
//70005118:	read opcodes backward
LW	T1,0000 (A0)	;T1= opcode.cur
ADDIU	A0,A0,FFFC	;A0-=4	p->opcode.prev
SLTU	AT,A0,A1	;TRUE if p->opcode.cur < p->opcode.start
AND	T7,T1,T3	;T7= opcode &FFFF0000: mask away immediate
BNE	T2,T7,70005158	;skip if not of type ADDIU SP,SP,xxxx
AND	T8,T1,T5	;T8= opcode & FFE00000: mask all but target register and type
//70005130:	opcode type ADDIU SP,SP,xxxx
SLL	T8,T1,0x10
SRA	T9,T8,0x10
BGTZ	T9,700051B8	;return if immediate positive (stack reset to original position)
ADDIU	V0,R0,0001	;V0=TRUE if SP repositioned
SRA	T6,T9,0x2
SLL	T7,T6,0x2	;T7=immediate to word boundry
BEQ	T0,R0,700051B0	;check position if SW RA wasn't found yet
SUBU	V1,V1,T7	;V1-=T7: correct SP.fake
BEQ	R0,R0,700051B8	;set appropriate return value
NOP
//70005158:	set expected SP address for register in buffer
BNE	T4,T8,700051A8	;skip if not of type SW rr,xxxx (SP)
SRL	A2,T1,0x10
ANDI	T9,A2,001F	;T9= opcode & 001F0000: source register saved
SLL	T7,T1,0x10
SRA	T8,T7,0x10
OR	A2,T9,R0	;A2= register saved
SRA	T9,T8,0x2
SLL	T6,T9,0x2	;T6= immediate to word boundry
SLL	T8,A2,0x2
ADDU	T9,A3,T8	;T9= buffer+offset: entry for register
ADDU	T7,T6,V1	;T7= imm.+SP.fake: address in stack for value
BNE	S0,A2,70005190	;if RA, set T0=TRUE
SW	T7,0000 (T9)	;set expected SP address to entry in buffer
ADDIU	T0,R0,0001	;T0=TRUE if SW RA
//70005190:	continue reading ops until SP repositioned and return address stored
BEQ	V0,R0,700051B0	;check position if SP wasn't repositioned
NOP
BEQ	T0,R0,700051B0	;check position if SW RA wasn't found yet
NOP
BEQ	R0,R0,700051B8	;set appropriate return value
NOP
//700051A8:	test at end of function
BEQ	T1,S1,700051B8	;set appropriate return if JR RA (absolute end of function)
NOP
//700051B0:	loop until at start of function
BEQL	AT,R0,7000511C	;loop until p->opcode.cur < p->opcode.start
LW	T1,0000 (A0)
//700051B8:	return corrected SP.fake if stack used in function
BEQ	V0,R0,700051D0	;return NULL if SP wasn't repositioned
LW	S0,0008 (SP)
BEQL	T0,R0,700051D4	;return NULL if SW RA wasn't found
OR	V0,R0,R0
BEQ	R0,R0,700051D4	;return SP.fake as set in function
OR	V0,V1,R0	;V0=V1: corrected SP.fake
//700051D0:	return NULL
OR	V0,R0,R0
//700051D4:
LW	S1,000C (SP)
JR	RA
ADDIU	SP,SP,0010

700051E0	5DE0	V0=TRUE if opcode that set RA A0 was a JAL or JALR type within bounds (70000450,70020D90)
	accepts: A0=p->70-mapped TLB function, presumably from RA
ANDI	T6,A0,0003
BNE	T6,R0,7000524C	;return FALSE if unaligned address
LUI	T7,7000
ADDIU	T7,T7,0450
SLTU	AT,A0,T7
BNE	AT,R0,7000524C	;return FALSE if prior to 70000450
LUI	T8,7002
ADDIU	T8,T8,0D90
SLTU	AT,T8,A0
BNEL	AT,R0,70005250	;return FALSE if after 70020D90
OR	V0,R0,R0
LW	V0,FFF8 (A0)	;V0= previous opcode
LUI	AT,FC00
ORI	AT,AT,003C
AND	T9,V0,AT	;T9=opcode & FC00003C: opcode type mask
ADDIU	AT,R0,0009
BNEL	T9,AT,70005234	;return TRUE if opcode type JALR
LUI	AT,FC00
JR	RA
ADDIU	V0,R0,0001
//70005230:	test for opcode type JAL
LUI	AT,FC00
AND	T0,V0,AT
LUI	AT,0C00
BNEL	T0,AT,70005250	;return TRUE if opcode type JAL
OR	V0,R0,R0
JR	RA
ADDIU	V0,R0,0001
//7000524C:	return FALSE
OR	V0,R0,R0
JR	RA
NOP

70005258	5E58	V0= strlen(A0)
	accepts: A0=p->string
LBU	V0,0000 (A0)	;V0=A0+0: next byte in string
OR	V1,R0,R0	;V1=0	init. count
ADDIU	A0,A0,0001
BEQ	V0,R0,7000528C	;return if NULL
NOP
//7000526C:
ADDIU	V1,V1,0001	;V1+=1	count+=1
SLTI	AT,V1,0100
BEQ	AT,R0,7000528C	;return if over 0x100 bytes
NOP
LBU	V0,0000 (A0)
ADDIU	A0,A0,0001
BNEL	V0,R0,70005270	;loop until NULL terminator found
ADDIU	V1,V1,0001
//7000528C:	return count
JR	RA
OR	V0,V1,R0

70005294	5E94	V0= address for subsequent data after one word, two strings at hardware A0
	accepts: A0=hardware address
ADDIU	SP,SP,FFE0
SW	A0,0020 (SP)
SW	RA,0014 (SP)
LUI	A0,8006
ADDIU	A0,A0,3670	;A0=80063670: p->target
LW	A1,0020 (SP)	;A1=A0 f/caller: hardware address
JAL	70005C1C	;loads A2 bytes from hardware A1 to A0
ADDIU	A2,R0,0060	;A2=60 bytes
LUI	T6,8006
LW	T6,3670 (T6)	;T6=80063670: 
LUI	V0,8006
LUI	AT,8006
LUI	T7,8006
ADDIU	V0,V0,3668
ADDIU	A0,T7,3674	;A0=80063674: p->string
SW	T6,3664 (AT)	;T6->80063664: 
JAL	70005258	;V0= strlen(A0)
SW	A0,0000 (V0)	;80063674 -> 80063668: p->string1
LUI	A0,8006
LW	A0,3668 (A0)	;A0=p->string1
LUI	AT,8006
ADDU	T8,V0,A0
ADDIU	T9,T8,0001	;T9=p->string+strlen+NULL terminator: p->string2
JAL	70005258	;V0= strlen(A0)
SW	T9,366C (AT)	;p->string2 -> 8006366C
LUI	A0,8006
LW	A0,366C (A0)	;A0=p->string2
JAL	70005258	;V0= strlen(A0)
SW	V0,0018 (SP)	;SP+18= strlen1
LW	T0,0020 (SP)	;T0= A0 f/caller: hardware address
LW	T2,0018 (SP)	;T2= strlen1
LW	RA,0014 (SP)
ADDU	T1,V0,T0
ADDU	V1,T1,T2
ADDIU	V1,V1,0006	;V1= hardware address + strlen2+NULL + strlen1+NULL + sizeof(word)
ANDI	T3,V1,0003
BEQ	T3,R0,70005334	;skip if word aligned
OR	A0,V1,R0
ORI	A0,V1,0003
ADDIU	A0,A0,0001	;word align
//70005334:	return address for subsequent data
OR	V0,A0,R0	;V0=A0: address for subsequent data
JR	RA
ADDIU	SP,SP,0020

70005340	5F40	scan for and load resourceID A0 from indy.read.buf
	accepts: A0=resourceID
ADDIU	SP,SP,FFD8
SW	S3,0020 (SP)
SW	S2,001C (SP)
LUI	V0,00E0
ORI	S3,V0,0004	;S3=E00004: hardware address in indy.read.buf
SW	S1,0018 (SP)
SW	S0,0014 (SP)
LUI	S2,8006
OR	S1,A0,R0	;S1=A0: resourceID
SW	RA,0024 (SP)
OR	S0,S3,R0	;S0=S3: hardware address in indy.read.buf
ADDIU	S2,S2,3664	;S2=80063664
//70005370:	scan for resourceID matching or greater than expected
JAL	70005294	;V0= address for subsequent data after one word, two strings at hardware A0
OR	A0,S0,R0	;A0=S0: hardware address in indy.read.buf
LW	V1,0000 (S2)	;V1= 80063664: indy.read.buf.resourceID
SLTU	AT,S1,V1
BNE	AT,R0,700053A0
NOP
BNE	V1,R0,70005398	;return FALSE if last entry
OR	S3,S0,R0	;S3=S0: current hardware address
BEQ	R0,R0,700053AC
OR	V0,R0,R0
//70005398:	loop for remaining entries
BEQ	R0,R0,70005370
OR	S0,V0,R0	;S0=V0: next hardware address
//700053A0:	return TRUE
JAL	70005294	;V0= address for subsequent data after one word, two strings at hardware A0
OR	A0,S3,R0	;A0=S3: hardware address
ADDIU	V0,R0,0001
//700053AC:
LW	RA,0024 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
JR	RA
ADDIU	SP,SP,0028

700053C8	5FC8	V0= TRUE if valid indy.read.buf.resourceID	[matches 826475BE]
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	70005294	;V0= address for subsequent data after one word, two strings at hardware A0
LUI	A0,00E0		;A0=E00000
LUI	V0,8006
LW	V0,3664 (V0)	;V0=80063664: p->indy.read.buf.resourceID
LW	RA,0014 (SP)
LUI	AT,8264
ORI	AT,AT,75BE	;AT=826475BE
XOR	T6,V0,AT
SLTIU	V0,T6,0001	;V0= TRUE if value = 826475BE
JR	RA
ADDIU	SP,SP,0018

700053FC	5FFC	unconditional return
JR	RA
NOP

70005404	6004	unconditional return
JR	RA
NOP

7000540C	600C	unconditional return
JR	RA
NOP

70005414	6014	V0=indy.read.buf.resourceID
LUI	V0,8006
JR	RA
LW	V0,3664 (V0)	;V0=80063664: indy.read.buf.resourceID

70005420	6020	V0=hardcoded SP for debug thread A1, corrected for address range A0
	accepts: A0=p->address space, A1=entry#
LUI	T6,8002
ADDIU	T6,T6,36DC
LW	AT,0000 (T6)	;AT=800236DC: hardcoded pointers to thread SP allocations
ADDIU	SP,SP,FFD0
ADDIU	A3,SP,001C	;A3=SP+1C: p->buffer.hi
SW	AT,0000 (A3)
LW	T9,0004 (T6)
LUI	T1,8002
ADDIU	T1,T1,36F0	;T1=800236F0: hardcoded pointers to thread SP allocations
SW	T9,0004 (A3)
LW	AT,0008 (T6)
ADDIU	T0,SP,0008	;T0=SP+8: p->buffer.lo
OR	A2,A0,R0	;A2=A0: 
SW	AT,0008 (A3)
LW	T9,000C (T6)
SW	T9,000C (A3)
LW	AT,0010 (T6)
SW	AT,0010 (A3)	;800236DC-800236EC -> SP+1C-SP+2C
LW	AT,0000 (T1)
SW	AT,0000 (T0)
LW	T4,0004 (T1)
SW	T4,0004 (T0)
LW	AT,0008 (T1)
SW	AT,0008 (T0)
LW	T4,000C (T1)
SW	T4,000C (T0)
LW	AT,0010 (T1)
BLEZ	A1,700054A0	;return NULL if A1 an invalid entry
SW	AT,0010 (T0)	;800236F0-80023700 -> SP+8-SP+18
SLTIU	AT,A1,0006
BNE	AT,R0,700054A8
SLL	V0,A1,0x2	;V0=A1->offset
//700054A0:	return NULL
BEQ	R0,R0,700054DC
OR	V0,R0,R0
//700054A8:
LUI	AT,8000
ADDU	T5,A3,V0
ADDU	T8,T0,V0
SLTU	AT,A2,AT
LW	V1,0000 (T5)	;V1=buffer.hi[entry]
BNE	AT,R0,700054CC	;skip if address < 80000000
LW	A0,0000 (T8)	;A0=buffer.lo[entry]
BEQ	R0,R0,700054DC
OR	V0,A0,R0	;V0=lo buffer entry
//700054CC:	convert SP to 70- address
LUI	AT,F000
AND	T7,A2,AT	;T7= A0's address domain
SUBU	T6,A0,V1	;T6=buffer.lo[entry] - buffer.hi[entry]
OR	V0,T7,T6	;V0=converted address
//700054DC:	return
JR	RA
ADDIU	SP,SP,0030

700054E4	60E4
	accepts: A0=p->address space, A1=entry#
LUI	T6,8002
ADDIU	T6,T6,3704
LW	AT,0000 (T6)	;AT=80023704: debugger: hardcoded pointers to thread SP allocations
ADDIU	SP,SP,FFE8
ADDIU	V0,SP,0004	;V0=SP+4: p->buffer
SW	AT,0000 (V0)
LW	T9,0004 (T6)
SW	T9,0004 (V0)
LW	AT,0008 (T6)
SW	AT,0008 (V0)
LW	T9,000C (T6)
SW	T9,000C (V0)
LW	AT,0010 (T6)
BLEZ	A1,7000552C	;return NULL if A1 an invalid entry
SW	AT,0010 (V0)	;80023704-80023714 -> SP+4-SP+14
SLTIU	AT,A1,0006
BNE	AT,R0,70005534
SLL	T0,A1,0x2	;T0=A1 -> offset
//7000552C:	return NULL
BEQ	R0,R0,70005558
OR	V0,R0,R0
//70005534:	return hardcoded SP
LUI	AT,8000
ADDU	T1,V0,T0
SLTU	AT,A0,AT
BNE	AT,R0,70005550	;skip if address < 80000000
LW	V1,0000 (T1)	;V1=buffer+offset: SP
BEQ	R0,R0,70005558
OR	V0,V1,R0	;V0=hardcoded SP
//70005550:	return root address space (bug?)
LUI	AT,F000
AND	V0,A0,AT	;V0=A0 & F0000000
//70005558:	return
JR	RA
ADDIU	SP,SP,0018

70005560	6160	V0= TRUE if F12 a normal single precision float
	accepts: F12=single float value
SWC1	F12,0000 (SP)
LW	A0,0000 (SP)	;A0= (hex) float
LUI	AT,007F
ORI	AT,AT,FFFF
AND	V0,A0,AT	;V0= float & 0x7FFFFF: significand
SLTIU	T6,V0,0001
BNE	T6,R0,7000559C	;return FALSE if no significand
OR	V0,T6,R0
SRL	V1,A0,0x17
ANDI	T7,V1,00FF	;T7= float & 7F800000: exponent
SLTU	V0,R0,T7
BEQ	V0,R0,7000559C	;return FALSE if no exponent
NOP
XORI	V0,T7,00FF
SLTU	V0,R0,V0	;return TRUE if not infinite
//7000559C:	return
JR	RA
NOP

700055A4	61A4	V0= TRUE if (A0,A1) a normal single precision float; would have set result as short at A0
	accepts: A0=(unused) p->target, A1=single-precision float
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
MTC1	A1,F12
JAL	70005560	;V0= TRUE if F12 a normal single precision float
SW	A0,0018 (SP)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700055C8	61C8	removed: set normality of single-precision floats A1, A2, A3, SP+10 in table at A0
	accepts: A0=(unused) p->target, A1=single-precision float 1, A2=single-precision float 2, A3=single-precision float 3, SP+10=single-precision float 4
MTC1	A1,F12
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
MFC1	A1,F12
SW	A0,0018 (SP)
SW	A2,0020 (SP)
JAL	700055A4	;V0= TRUE if (A0,A1) a normal single precision float
SW	A3,0024 (SP)
LW	A0,0018 (SP)
LW	A1,0020 (SP)	;A1= A2: single-precision float
JAL	700055A4	;V0= TRUE if (A0,A1) a normal single precision float
ADDIU	A0,A0,0002	;A0+=2
LW	A0,0018 (SP)
LW	A1,0024 (SP)	;A1= A3: single-precision float
JAL	700055A4	;V0= TRUE if (A0,A1) a normal single precision float
ADDIU	A0,A0,0004	;A0+=4
LW	A0,0018 (SP)
LW	A1,0028 (SP)	;A1= SP+10: single-precision float
JAL	700055A4	;V0= TRUE if (A0,A1) a normal single precision float
ADDIU	A0,A0,0006	;A0+=6
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70005628	6228	unconditional return
JR	RA
NOP

# stderr manager
70005630	6230	write char A2 to (A0,A1) in stderr
	accepts: A0=xpos, A1=ypos, A2=char
ANDI	T6,A2,00FF
SW	A2,0008 (SP)
ADDIU	AT,R0,0009
OR	A2,T6,R0
BEQ	T6,AT,70005654	;branch if tab
OR	V0,T6,R0
ADDIU	AT,R0,000A
BNE	T6,AT,7000565C	;branch if not line feed
NOP
//70005654:	change tab and linefeed into NULL
OR	A2,R0,R0	;A2=NULL
OR	V0,R0,R0	;V0=NULL
//7000565C:
BLEZ	V0,70005668
SLTI	AT,V0,0020
BNE	AT,R0,70005674
//70005668:	check if ASCII
SLTI	AT,V0,007F
BNE	AT,R0,70005678	;branch if in ASCII range (<7F)
NOP
//70005674:
ADDIU	A2,R0,003F	;A2= b'?'
//70005678:	verify xpos
BLTZ	A0,700056B4	;return if invalid xpos
SLTI	AT,A0,0048
BEQ	AT,R0,700056B4	;return if over 47
NOP
//70005688:	verify ypos
BLTZ	A1,700056B4	;return if invalid ypos
SLTI	AT,A1,0020
BEQ	AT,R0,700056B4	;return if over 1F lines
SLL	T7,A1,0x3
//70005698:	write to stderr buffer
ADDU	T7,T7,A1
SLL	T7,T7,0x3
SUBU	T7,T7,A1	;T7=ypos * 47: line offset
ADDU	T8,T7,A0	;T8= yoffset + xoffset
LUI	AT,8002
ADDU	AT,AT,T8
SB	A2,3718 (AT)	;A2->80023718+offset: print char to stderr buffer
//700056B4:	return
JR	RA
NOP

700056BC	62BC	write char A0 to stderr
	accepts: A0=char
ADDIU	SP,SP,FFD8
ANDI	A2,A0,00FF	;A2=char
SW	RA,001C (SP)
SW	S0,0018 (SP)
SW	A0,0028 (SP)
BEQ	A2,R0,700057B8	;return if NULL
OR	V0,A2,R0
ADDIU	AT,R0,0009
BNE	A2,AT,70005708	;branch if not tab
LUI	S0,8002
ADDIU	S0,S0,3FF8	;S0=80023FF8: stderr.curxpos
//700056E8:	for tabs, reenter and type a space until at a 8byte boundry
JAL	700056BC	;write char A0 to stderr
ADDIU	A0,R0,0020	;A0=b' '
LW	T6,0000 (S0)	;T6=80023FF8: stderr.curxpos
ANDI	T7,T6,0007
BNE	T7,R0,700056E8	;loop until at an 8byte boundry
NOP
BEQ	R0,R0,700057BC	;return
LW	RA,001C (SP)
//70005708:	test if linefeed (really treated as a carriage return
ADDIU	AT,R0,000A
BNE	V0,AT,70005730	;branch if not line feed
//70005710:	jump a line on a linefeed
LUI	V1,8002
ADDIU	V1,V1,3FFC
LW	T8,0000 (V1)	;T8=80023FFC: stderr.curypos
LUI	S0,8002
ADDIU	S0,S0,3FF8
ADDIU	T9,T8,0001
SW	T9,0000 (V1)	;advance stderr.curypos
SW	R0,0000 (S0)	;0->stderr.curxpos: reset to beginning of line
//70005730:	all other printable characters
LUI	V1,8002
ADDIU	V1,V1,3FFC
LW	A1,0000 (V1)	;A1=80023FFC: stderr.curypos
LUI	S0,8002
ADDIU	S0,S0,3FF8
SLTI	AT,A1,001F
BNE	AT,R0,70005774	;branch if ypos valid
ADDIU	A0,A1,FFE2	;A0=ypos-1E
//70005750:	if no room, scroll screen down one line
SW	V0,0024 (SP)
JAL	700057CC	;scroll stderr down one line
SB	A2,002B (SP)
LUI	V1,8002
ADDIU	V1,V1,3FFC
ADDIU	T0,R0,001E
LW	V0,0024 (SP)
LBU	A2,002B (SP)	;A2=char
SW	T0,0000 (V1)	;1E->stderr.curypos
//70005774:	print non-linefeed chars
ADDIU	AT,R0,000A
BEQL	V0,AT,700057BC	;return if line feed
LW	RA,001C (SP)
LW	A0,0000 (S0)	;A0=S0+0: xpos
JAL	70005630	;write char A2 to (A0,A1) in stderr
LW	A1,0000 (V1)	;A1=V1+0: ypos
LW	T1,0000 (S0)
LUI	V1,8002
ADDIU	V1,V1,3FFC
ADDIU	T2,T1,0001
SLTI	AT,T2,0047
BNE	AT,R0,700057B8	;return if more chars left in line
SW	T2,0000 (S0)
//700057A8:	advance to beginning of next line if necessary
LW	T4,0000 (V1)	;T4=stderr.curypos
SW	R0,0000 (S0)	;0->stderr.curxpos
ADDIU	T5,T4,0001
SW	T5,0000 (V1)	;stderr.curypos +=1
//700057B8:	return
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

700057CC	63CC	scroll stderr down one line
	accepts: A0=ypos
SLT	V0,R0,A0
BEQ	V0,R0,70005854	;return if 0 or negative
ADDIU	A0,A0,FFFF	;ypos-=1
//700057D8:
LUI	T0,8002
ADDIU	T0,T0,3FB1	;T0=80023FB1: start of line 1F
ADDIU	A3,R0,0047	;A3=47	line width
//700057E4:
LUI	T6,8002
ADDIU	A2,T6,3718	;A2=80023718: stderr.buf.start
OR	V1,A2,R0	;V1=A2
//700057F0:	copy next line to current, advancing screen down one
LBU	T7,0047 (A2)
LBU	T8,0048 (A2)
LBU	T9,0049 (A2)
ADDIU	V0,R0,0003
ADDIU	A1,V1,0003
SB	T7,0000 (A2)
SB	T8,0001 (A2)
SB	T9,0002 (A2)
//70005810:	more copying
LBU	T2,0048 (A1)
LBU	T3,0049 (A1)
LBU	T4,004A (A1)
LBU	T1,0047 (A1)
ADDIU	V0,V0,0004
ADDIU	A1,A1,0004
SB	T2,FFFD (A1)
SB	T3,FFFE (A1)
SB	T4,FFFF (A1)
BNE	V0,A3,70005810
SB	T1,FFFC (A1)
//7000583C:	loop for each column in row
ADDIU	A2,A2,0047
BNE	A2,T0,700057F0
ADDIU	V1,V1,0047
//70005848:	loop for each line in buffer
SLT	V0,R0,A0
BNE	V0,R0,700057E4
ADDIU	A0,A0,FFFF
//70005854:	return
JR	RA
NOP

7000585C	645C	print char A2 to stderr screen position (A0,A1) in video buffer 1
	accepts: A0=xpos, A1=ypos, A2=char
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SW	A1,001C (SP)
JAL	7000441C	;V0= video2.txtClipW
SW	A2,0020 (SP)
LBU	A1,0023 (SP)	;A1=A2 f/caller: char
BNEL	A1,R0,70005888	;branch if set
SLTI	AT,A1,0020
//70005880:	space by default
ADDIU	A1,R0,0020	;A1=20
//70005884:
SLTI	AT,A1,0020
BNE	AT,R0,70005974	;return if A1<20: unprintable control char
SLTI	AT,A1,007F
BEQ	AT,R0,70005974	;return if A1>=7F: not an ASCII supported char
//70005894:
LW	T6,0018 (SP)	;T6=A0 f/caller: xpos
LW	T3,001C (SP)	;T3=A1 f/caller: ypos
LUI	T8,8002
LW	T8,417C (T8)	;T8=8002417C: video buffer 1 base	[A03B5000]
MULTU	T3,V0
SLL	T7,T6,0x1	;T7=xpos -> pixel offset: offset.column
SLL	T6,A1,0x2	;T6=char->offset
LUI	A0,8002
ADDU	A0,A0,T6
ADDU	T9,T7,T8	;T9=video.buf + offset.column
LW	A0,3F80 (A0)	;A0=80023F80+offset: char bitcode
LUI	A1,8000		;A1=80000000: mask for upper bit of bitcode
OR	T0,R0,R0	;T0=0	bit count
SLL	T1,V0,0x1
MFLO	T4		;T4= text clip width * ypos: per-row offset
SLL	T5,T4,0x1	;T5= ypos.mod -> pixel offset: offset.row
ADDU	V1,T9,T5	;V1=video.buf + offset.column + offset.row
ADDIU	T2,R0,0007	;T2= 7 bits
ADDIU	A3,R0,0001
ORI	A2,R0,FFFF
//700058E4:	grab each bit of bitcode in the nibble
AND	T7,A0,A1	;T7=upper bit of bitcode
BEQ	T7,R0,700058F8	;if not set, write a black pixel
SLL	T8,A0,0x1	;T8=bitcode<<1: next bit
BEQ	R0,R0,700058FC
SH	A2,0000 (V1)	;FFFF->video.buf: white pixel
//700058F8:
SH	A3,0000 (V1)	;0001->video.buf: black pixel
//700058FC:	next bit
AND	T3,T8,A1	;T3=upper bit of bitcode
ADDIU	V1,V1,0002	;V1+=2: next pixel
BEQ	T3,R0,70005914
OR	A0,T8,R0
BEQ	R0,R0,70005918
SH	A2,0000 (V1)	;FFFF->video.buf: white pixel
//70005914:
SH	A3,0000 (V1)	;0001->video.buf: black pixel
//70005918:	next bit
SLL	T4,A0,0x1
AND	T9,T4,A1	;T9=upper bit of bitcode
OR	A0,T4,R0
BEQ	T9,R0,70005934	;if not set, write a black pixel
ADDIU	V1,V1,0002	;V1+=2: next pixel
BEQ	R0,R0,70005938
SH	A2,0000 (V1)	;FFFF->video.buf: white pixel
//70005934:
SH	A3,0000 (V1)	;0001->video.buf: black pixel
//70005938:
SLL	T5,A0,0x1
AND	T6,T5,A1	;T6=upper bit of bitcode
OR	A0,T5,R0
BEQ	T6,R0,70005954	;if not set, write a black pixel
ADDIU	V1,V1,0002	;V1+=2: next pixel
BEQ	R0,R0,70005958
SH	A2,0000 (V1)	;FFFF->video.buf: white pixel
//70005954:
SH	A3,0000 (V1)	;0001->video.buf: black pixel
//70005958:	loop for each nibble
ADDIU	V1,V1,0002
ADDIU	T0,T0,0001	;T0+=1	bitcount+=1
SLL	T7,A0,0x1
ADDU	V1,V1,T1
OR	A0,T7,R0	;A0<<=4
BNE	T0,T2,700058E4	;loop for each nibble in word
ADDIU	V1,V1,FFF8
//70005974:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70005984	6584	set pointers to video buffers 1 & 2 to A0 and A1, respectively
	accepts: A0=p->video buffer 1, A1=p->video buffer 2
LUI	V0,A000
OR	T6,A0,V0	;T6=A0000000 | A0: uncached address
LUI	AT,8002
SW	T6,417C (AT)	;A0->8002417C: video buffer 1 base
LUI	AT,8002
OR	T7,A1,V0	;T7=A0000000 | A1: uncached address
JR	RA
SW	T7,4180 (AT)	;A1->80024180: video buffer 2 base

700059A4	65A4	set pointers to video buffers 1 & 2
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,803B
LUI	A1,803E
ADDIU	A1,A1,A800	;A1=803DA800
JAL	70005984	;set pointers to video buffers 1 & 2 to A0 and A1, respectively
ADDIU	A0,A0,5000	;A0=803B5000
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700059D0	65D0	write stderr to video buffer A0
	accepts: A0=p->video buffer
ADDIU	SP,SP,FFC0
SW	RA,003C (SP)
SW	S0,0018 (SP)
OR	S0,A0,R0	;S0=A0: p->video.buf
SW	S8,0038 (SP)
SW	S7,0034 (SP)
SW	S6,0030 (SP)
SW	S5,002C (SP)
SW	S4,0028 (SP)
SW	S3,0024 (SP)
SW	S2,0020 (SP)
JAL	700059A4	;set pointers to video buffers 1 & 2
SW	S1,001C (SP)
LUI	AT,A000
OR	T6,S0,AT	;T6= A0000000 | A0 f/caller
LUI	AT,8002
JAL	7000441C	;V0= video2.txtClipW
SW	T6,417C (AT)	;T6->8002417C: set video buffer 1 base
ADDIU	S0,V0,FFF3	;S0=clip width - D
BGEZ	S0,70005A2C
SRA	T7,S0,0x2
//70005A24:
ADDIU	AT,S0,0003
SRA	T7,AT,0x2
//70005A2C:
JAL	7000442C	;V0= video2.txtClipH
OR	S0,T7,R0	;S0=x.margin
ADDIU	V1,V0,FFF6	;V1=clip height - A
ADDIU	AT,R0,0007
DIV	V1,AT
MFLO	V1		;V1/=7
ADDIU	S8,V1,FFFF	;S8= max #rows
BLEZ	S8,70005AD8	;return if off-screen
OR	S5,R0,R0	;S5=0	#rows
ADDIU	S6,S0,FFFB
ADDIU	S7,R0,001F	;S7=1F: #rows (top to bottom)
ADDIU	S4,R0,0130	;S4=130: #columns (left to right)
//70005A5C:
BLEZ	S6,70005AC0	;x.margin should be on-screen
SLL	S0,R0,0x2
SLL	T9,S5,0x3
ADDU	T9,T9,S5
SLL	T9,T9,0x3	;T9=count*48
SLL	S2,S5,0x3
LUI	T1,8002
ADDIU	T1,T1,3718	;T1=80023718: black background layer for debug menu (until 80024000)
SUBU	S2,S2,S5	;S2=count*7
SUBU	T9,T9,S5	;T9= count*48 - count*7
SLL	S3,S6,0x2
ADDIU	S3,S3,0014	;S3+=14: x.margin * 4 + 14: xpos.max
ADDU	S1,T9,T1	;S1=base + offset
ADDIU	S2,S2,0007
ADDIU	S0,S0,0014	;S0+=14: xpos.init
//70005A98:	write each char for row
OR	A0,S0,R0	;A0=S0: xpos
OR	A1,S2,R0	;A1=S2: ypos
JAL	7000585C	;directly write debug char A2 to screen position (A0,A1)
LBU	A2,0000 (S1)	;A2=byte from buffer
ADDIU	S0,S0,0004	;S0+=4	each byte represents one block
SLT	AT,S0,S3
BEQ	AT,R0,70005AC0	;newline if at max chars
ADDIU	S1,S1,0001
BNEL	S0,S4,70005A9C	;newline if at 130 chars
OR	A0,S0,R0
//70005AC0:	test if enough rows written
ADDIU	S5,S5,0001	;S5+=1	#rows+=1
SLT	AT,S5,S8
BEQL	AT,R0,70005ADC	;return if at max rows
LW	RA,003C (SP)
BNE	S5,S7,70005A5C	;loop if not at 1F rows
NOP
//70005AD8:	return
LW	RA,003C (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
LW	S5,002C (SP)
LW	S6,0030 (SP)
LW	S7,0034 (SP)
LW	S8,0038 (SP)
JR	RA
ADDIU	SP,SP,0040

70005B10	6710	V0=value of RA previously saved to the stack or -1 if impossible to retrieve
	Searches backward from caller for last instance of RA saved to stack.
OR	A0,RA,R0	;A0=RA: p->caller
ADDIU	V0,R0,FFFF	;V0= -1
//70005B18:
LW	T0,0000 (A0)	;T0=A0+0: opcode at address
ADDIU	T2,R0,27BD
SRL	T1,T0,0x10
BEQ	T1,T2,70005B50	;return if opcode in form: ADDIU	SP,SP,xxxx
NOP
ORI	T2,R0,AFBF
BEQL	T1,T2,70005B44	;branch if opcode in form: SW	RA,xxxx (SP)
SLL	T2,T0,0x10
J	70005B18
ADDIU	A0,A0,FFFC	;A0-=4: previous opcode
//70005B40:
SLL	T2,T0,0x10
SRA	T2,T2,0x10	;T2= opcode & 0x0000FFFF
ADD	T2,T2,SP	;T2+=SP: p->SP+offset
LW	V0,0000 (T2)	;V0= value of RA previously saved to the stack
//70005B50:	return
JR	RA
NOP

70005B60	6760
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,36E8	;A1=800636E8
ADDIU	A0,A0,36F0	;A0=800636F0
JAL	7000D6D0
ADDIU	A2,R0,0001	;A2=1
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70005B90	6790	read A2 bytes from hardware A1 to rdram A0
	accepts: A0=p->rdram target, A1=hardware address, A2=size
ADDIU	SP,SP,FFD8
SW	RA,0024 (SP)
SW	A1,002C (SP)
SW	A0,0028 (SP)
SW	A2,0030 (SP)
JAL	70010B20	;cache A1 bytes at A0 prior to hardware read request
OR	A1,A2,R0	;A1=A2: size
LW	T6,0028 (SP)
LW	T7,0030 (SP)
LUI	T8,8006
ADDIU	T8,T8,36F0	;T8=800636F0
LUI	A0,8006
ADDIU	A0,A0,36D0	;A0=800636D0
SW	T8,0018 (SP)
OR	A1,R0,R0	;A1=0
OR	A2,R0,R0	;A2=0: read
LW	A3,002C (SP)	;A3=A1 f/caller: hardware address
SW	T6,0010 (SP)	;SP+10=A0 f/caller: p->target
JAL	7000F6A0	;read or write (A2) SP+14 bytes between hardware A3 and rdram SP+10
SW	T7,0014 (SP)	;SP+14=A2 f/caller: size
LW	RA,0024 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

70005BF0	67F0	
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,8006
ADDIU	A0,A0,36F0	;A0=800636F0
OR	A1,R0,R0	;A1=0: NULL
JAL	7000DDD0
ADDIU	A2,R0,0001	;A2=1
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70005C1C	681C	loads A2 bytes from hardware A1 to rdram A0; redirects to 70005B90 and 70005BF0
	accepts: A0=p->rdram target, A1=hardware address, A2=size
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	70005B90	;read A2 bytes from hardware A1 to rdram A0
NOP
JAL	70005BF0
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70005C44	6844	V0=p->data at target A0 from hardware A1 of size A2
	accepts: A0=p->target, A1=hardware address, A2=size
OR	A3,A1,R0
ADDIU	SP,SP,FFD0
ORI	A1,A1,0001
XORI	T8,A1,0001	;T8=hardware address, aligned to short
SW	A0,0030 (SP)
SW	A2,0038 (SP)
SUBU	V1,A3,T8	;V1=difference between actual hardware and aligned address
ADDU	A2,V1,A2	;A2+=V1: 
ADDIU	A0,A0,000F
ORI	T6,A0,000F
ADDIU	A2,A2,000F
SW	RA,0014 (SP)
ORI	T0,A2,000F
XORI	A0,T6,000F	;A0=p->target, aligned to quadword
SW	A0,001C (SP)
XORI	A2,T0,000F	;A2=size, aligned to quadword
SW	V1,0018 (SP)
JAL	70005C1C	;loads A2 bytes from hardware A1 to A0
OR	A1,T8,R0
LW	RA,0014 (SP)
LW	V1,0018 (SP)
LW	A0,001C (SP)
ADDIU	SP,SP,0030
JR	RA
ADDU	V0,A0,V1	;V0=A0+V1: p->ROM data at target, corrected for alignment

70005CA8	68A8	write A2 bytes from rdram A0 to hardware A1
	accepts: A0=p->source, A1=hardware address, A2=size
ADDIU	SP,SP,FFD8
SW	RA,0024 (SP)
SW	A1,002C (SP)	;SP+2C= A1: hardware address
SW	A0,0028 (SP)	;SP+28= A0: p->target
SW	A2,0030 (SP)	;SP+30= A2: size
JAL	70010BD0	;cache A1 bytes at A0 prior to hardware write request
OR	A1,A2,R0	;A1=A2: size
LW	T6,0028 (SP)
LW	T7,0030 (SP)
LUI	T8,8006
ADDIU	T8,T8,36F0
LUI	A0,8006
ADDIU	A0,A0,36D0	;A0= 800636D0: 
SW	T8,0018 (SP)	;SP+18= 800636F0: 
OR	A1,R0,R0
ADDIU	A2,R0,0001	;A2=1: write
LW	A3,002C (SP)	;A3= A1 f/caller: hardware address
SW	T6,0010 (SP)	;SP+10= A0 f/caller: p->target
JAL	7000F6A0	;read or write (A2) SP+14 bytes between hardware A3 and rdram SP+10
SW	T7,0014 (SP)	;SP+14= A2 f/caller: size
LW	RA,0024 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

70005D08	6908	loads A2 bytes from rdram A0 to hardware A1; redirects to 70005CA8 and 70005BF0
	accepts: A0=p->rdram source, A1=hardware address, A2=size
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	70005CA8	;write A2 bytes from rdram A0 to hardware A1
NOP
JAL	70005BF0
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

# 
70005D30	6930
ADDIU	SP,SP,FF60
SW	RA,0034 (SP)
SW	S2,0030 (SP)
SW	S1,002C (SP)
JAL	70004E2C	;add debug.notice "deb_c_debug"
SW	S0,0028 (SP)
JAL	70005B60
NOP
JAL	700017E0	;establishes 7F- TLB buffer and management table
NOP
JAL	7F000BD0
NOP
JAL	70009380	;V0=p->debug.notice.list entry for memp_c_debug
NOP
JAL	70009D6C	;V0=p->debug.notice.list entry for mema_c_debug
NOP
JAL	7F0B37C0	;generate debug.notice.list entry for bg_c_debug using data at 800413F0
NOP
JAL	7000AD38	;vi_c_debug: initialize screen(?)
NOP
JAL	70003060
NOP
JAL	7F0CFF30	;initializes Indy if not ready
NOP
JAL	7000CEA8	;V0= 1; would have returned 0 if debug console present
NOP
LUI	AT,8002
JAL	7F0BCC28	;generate resource data filesize entries
SW	V0,41A4 (AT)	;V0->800241A4: debug flag
JAL	7F0CFDB0	;generate debug.notice.list entry for rsp_c_debug using data at 8004E9E0
NOP
JAL	7F0BD460	;generate debug.notice.list entry for dyn_c_debug using current mgfx allocations
NOP
JAL	7000B560	;joy_c_debug: initialize joystick manager
NOP
ADDIU	S1,SP,0060
ADDIU	S2,SP,009C
OR	A1,S2,R0
OR	A0,S1,R0
JAL	7000D6D0
ADDIU	A2,R0,0001
OR	S0,R0,R0
//70005DD8:
LUI	A1,0001
LUI	A2,8002
LUI	A3,8002
LW	A3,6984 (A3)
LW	A2,6980 (A2)	;A2,A3 = 80026980: 
ORI	A1,A1,86A0	;A0,A1= 186A0
JAL	7000EDA8	;(V0,V1) = (A0,A1) * (A2,A3)
ADDIU	A0,R0,0000
LUI	A3,000F
ORI	A3,A3,4240	;A2,A3 = F4240
OR	A0,V0,R0
OR	A1,V1,R0
JAL	7000ECA8	;(V0,V1) = (A0,A1) / (A2,A3)
ADDIU	A2,R0,0000
ADDIU	T6,R0,0000
ADDIU	T7,R0,0000
SW	T7,0014 (SP)
SW	T6,0010 (SP)
ADDIU	A0,SP,0078
OR	A2,V0,R0
OR	A3,V1,R0
SW	S1,0018 (SP)
JAL	70010C50
SW	S2,001C (SP)
OR	A0,S1,R0	;A1=S1: p->???
OR	A1,S2,R0	;A1=p->buffer
JAL	7000DDD0
ADDIU	A2,R0,0001
ADDIU	AT,R0,0001
BNEL	S0,AT,70005E68
SLTI	AT,S0,0002
//70005E54:
JAL	7000B6AC
NOP
BEQ	R0,R0,70005E7C
ADDIU	S0,S0,0001
//70005E64:
SLTI	AT,S0,0002
BNEL	AT,R0,70005E7C
ADDIU	S0,S0,0001
JAL	7000BD0C	;redirect to ramrom handlers if set
NOP
//70005E78:
ADDIU	S0,S0,0001
ADDIU	AT,R0,0004
BNEL	S0,AT,70005DDC
LUI	A1,0001
//70005E88:
LUI	A1,8003
ADDIU	A1,A1,90C0	;A1=800290C0: "-level_"
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A0,R0,0001	;A0=1st
BNE	V0,R0,70005EA8
//70005E9C:	if not found, reset debug flag
ADDIU	T8,R0,0001
LUI	AT,8002
SW	T8,41A4 (AT)	;1->800241A4: debug flag
//70005EA8:
JAL	7F0AF00C	;generate debug.notice.list entry for stan_c_debug using data at 80040F40
NOP
JAL	7F0D1A20	;generate debug.notice.list entry for game_c_debug using data at 8004EAE0
NOP
LUI	T9,8002
LW	T9,41A4 (T9)	;T9=800241A4: debug flag
BEQ	T9,R0,70005ED0	;skip if reading memory allocations from debug
//70005EC4:	tokenize default memory allocation string
LUI	A0,8003
JAL	7000A58C	;strtok(strcpy(mem_alloc_str, string),' ')
ADDIU	A0,A0,90C8	;A0= 800290C8: "          -ml0 -me0 -mgfx100 -mvtx50 -mt700 -ma400"
//70005ED0:	search for -m
LUI	A1,8003
ADDIU	A1,A1,90FC	;A1=800290FC: "-m"
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A0,R0,0001	;A0=1st
BEQ	V0,R0,70005F10
//70005EE4:	if "-m" memory allocation flags found, set allocation
LUI	A1,8003
ADDIU	A1,A1,9100	;A1=80029100: "-m"
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A0,R0,0001	;A0=1st
OR	A0,V0,R0	;A0=V0: allocation value
OR	A1,R0,R0	;A1=NULL
JAL	7000A9E0	;V0=strtol(A0,A1,A2)
OR	A2,R0,R0	;A2=default
SLL	T0,V0,0xA	;T0=value*A
LUI	AT,8002
SW	T0,41AC (AT)	;T0->800241AC: stage memory allocation
//70005F10:	allocate space for font and default text
LUI	A0,8009
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
ADDIU	A0,A0,E360	;A0=8008E360
LUI	AT,8000
JAL	70001AF8	;V0=p->end of free memory
OR	S0,V0,AT	;S0=800000000 | offset: 8008E360, mem.start
OR	A0,S0,R0	;A0=S0: p->start of free memory
JAL	700093AC	;initialize memory allocation table and set font and text bank sizes
SUBU	A1,V0,S0	;A1=mem.end-mem.start: size of free memory
JAL	7000999C	;reset memory bank A0
ADDIU	A0,R0,0006	;A0=bank 6
JAL	7F0C16EC	;initialize text bank and load the global text
NOP
JAL	7F0BD908	;lv_c_debug: load japanese font DLs to bank 6
NOP
JAL	700069C0	;V0= p->debug.notice.list entry for boss_c_debug using data at 800241A0
NOP
JAL	7F0ACB70	;unconditional return
NOP
JAL	7000ADA8	;unconditional return
NOP
JAL	7F09A2E0	;resets all player handicaps and perspectives to default (1.0)
NOP
JAL	7F0C0A70	;set COP0 Count to 800484AC, 800484B0
NOP
JAL	7F09B7A0	;unconditional return
NOP
JAL	70002730
NOP
JAL	7F000B80
NOP
JAL	7F000BC0	;unconditional return
NOP
JAL	7F000980
NOP
JAL	7F000AAC	;allocate, load, and expand animation tables
NOP
JAL	7F0000E0
NOP
JAL	7F000110	;reset counters for random bodies and heads
NOP
JAL	7F0009D0	;unconditional return
NOP
JAL	7F000B60
NOP
JAL	7F000000	;initialize menus and data at power-on
NOP
JAL	7F01D6E0
NOP
JAL	7F0BFC70	;clear ramrom block, buffer, and headings
NOP
LW	RA,0034 (SP)
LW	S0,0028 (SP)
LW	S1,002C (SP)
LW	S2,0030 (SP)
JR	RA
ADDIU	SP,SP,00A0

70005FF4	6BF4	activate "show mem use" debug memory display [800241B4]
ADDIU	T6,R0,0001
LUI	AT,8002
JR	RA
SW	T6,41B4 (AT)	;1->800241B4: show mem use

70006004	6C04	toggle "show mem bars" [800241B8]
LUI	V0,8002
ADDIU	V0,V0,41B8
LW	T6,0000 (V0)	;T6=800241B8: show mem bars flag
XORI	T7,T6,0001	;flag^=1
JR	RA
SW	T7,0000 (V0)	;update flag

7000601C	6C1C	init game loop
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	70005D30
NOP
JAL	7F0CFDDC
NOP
JAL	70006A30	;loads sound and music banks into memory segment 6
NOP
JAL	70006060	;main game loop; does not return!
NOP
BEQ	R0,R0,7000603C
NOP
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70006060	6C60	main game loop
ADDIU	SP,SP,FE20
SW	RA,003C (SP)
SW	S8,0038 (SP)
SW	S7,0034 (SP)
SW	S6,0030 (SP)
SW	S5,002C (SP)
SW	S4,0028 (SP)
SW	S3,0024 (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
//7000608C:	test memstring for "-level_##"
JAL	7F0D1A4C	;reset memory bank 5
SW	R0,01DC (SP)
LUI	A1,8003
ADDIU	A1,A1,9104	;A1=80029104: "-level_"
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A0,R0,0001	;A0=1
BEQ	V0,R0,700060DC
ADDIU	A0,R0,0001	;A0=1
LUI	A1,8003
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A1,A1,910C	;A1=8002910C: "-level_"
LBU	T7,0000 (V0)	;T7=1st level# byte
LBU	T6,0001 (V0)	;T6=2nd level# byte
LUI	AT,8002
SLL	T8,T7,0x2
ADDU	T8,T8,T7
SLL	T8,T8,0x1	;T8=upper byte * 0xA: to tens place
ADDU	T9,T6,T8	;T9=upper byte + lower
ADDIU	T0,T9,FDF0	;T0=# - 0x210: compensate for 0x30 on each byte of ASCII numerals	30*B, or 30*A + 30
SW	T0,41A8 (AT)	;T0->800241A8: stage#
//700060DC:	set stage defaults if not menus
LUI	T1,8002
LW	T1,41A8 (T1)	;T1=800241A8: stage#
ADDIU	AT,R0,005A
BEQ	T1,AT,70006160	;branch if stage 5A: title/menus
NOP
JAL	7F01DF90
NOP
JAL	7F01D590	;A0->folder#
OR	A0,R0,R0	;A0=0
JAL	7F01D59C	;A0->difficulty
OR	A0,R0,R0	;A0=0
LUI	A0,8002
JAL	7F01D5EC	;A0->stage#, set solo + p->briefing
LW	A0,41A8 (A0)	;A0=800241A8: stage#
//70006114:	test memstring for "-hard#"
LUI	A1,8003
ADDIU	A1,A1,9114	;A1=80029114: "-hard"
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A0,R0,0001	;A0=1
BEQ	V0,R0,70006160	;branch if string not present
ADDIU	A0,R0,0001	;A0=1
LUI	A1,8003
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A1,A1,911C	;A1=8002911C: "-hard"
LBU	A0,0000 (V0)	;A0=ASCII difficulty level
JAL	7F01D59C	;A0->difficulty [8002A8FC]; forces invalid difficulties to 0 (agent)
ADDIU	A0,A0,FFD0	;A0-=0x30: account for 0x30 ASCII extension
//70006144:	redundant code
LUI	A1,8003
ADDIU	A1,A1,9124	;A1=80029124: "-hard"
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A0,R0,0001	;A0=1
LBU	A0,0000 (V0)	;A0= ASCII difficulty level
JAL	7F0BFC1C	;A0->difficulty [8002A8FC]
ADDIU	A0,A0,FFD0	;A0-=0x30: account for 0x30 ASCII extension
//70006160:
JAL	7000D8E0	;V0=Count
NOP
JAL	7000A498	;set random number to A0+1
OR	A0,V0,R0	;A0= Count
LUI	S6,8003
LUI	S5,8008
ADDIU	S5,S5,A0B0	;S5=8007A0B0
ADDIU	S6,S6,9134	;S6=80029134
ADDIU	S7,SP,0058	;S7=SP+58: p->instance
ADDIU	S4,SP,005C	;S4=SP+5C: buffer for string
LW	S3,01A8 (SP)	;S3=SP+1A8: p->DL
//7000618C:
LUI	T3,8002
SW	R0,01D4 (SP)	;0->800201D4: 
ADDIU	T3,T3,4304	;T3=80024304
LW	AT,0000 (T3)	;AT=80024304: 
LW	T7,0004 (T3)	;T7=80024308: 
ADDIU	T2,SP,01B4	;T2=SP+1B4: 
SW	AT,0000 (T2)
SW	T7,0004 (T2)
LW	T7,000C (T3)	;T7=80024310: 
LW	AT,0008 (T3)	;AT=8002430C: 
OR	S8,R0,R0	;S8=0
SW	T7,000C (T2)
SW	AT,0008 (T2)
LW	AT,0010 (T3)	;AT=80024314: 
LW	T7,0014 (T3)	;T7=80024318: 
OR	S1,R0,R0	;S1=0
SW	AT,0010 (T2)
SW	T7,0014 (T2)
LW	T7,001C (T3)	;T7=80024320: 
LW	AT,0018 (T3)	;AT=8002431C: 
SW	T7,001C (T2)
SW	AT,0018 (T2)
//700061E4:	test if replaying or recording demos this stage load
JAL	7F0BFC10	;V0=difficulty
SW	R0,01AC (SP)
LUI	A0,8002
LW	A0,41A8 (A0)	;A0=800241A8: stage#
JAL	7F0C0640	;detect if recording or replaying demos this stage load
OR	A1,V0,R0	;A1=V0: difficulty
//700061FC:
LUI	T6,8002
LW	T6,41A4 (T6)	;T6=800241A4: switch stages flag
LUI	T8,8002
BEQ	T6,R0,700062EC	;branch if not set
NOP
LW	T8,41A8 (T8)	;T8=800241A8: stage#
ADDIU	AT,R0,005A
ADDIU	S0,R0,FFFF
BEQ	T8,AT,70006294	;branch if stage 5A: title/menus
NOP
//70006224:	detect if multiplayer
JAL	7F010290	;V0=#players
NOP
SLTI	AT,V0,0002	;TRUE if solo
BNE	AT,R0,70006294	;branch if solo
//70006234:	multiplayer stage prep
LUI	A1,8002
ADDIU	A1,A1,41BC	;A1=800241BC
LW	T9,0000 (A1)	;T9=800241BC: memstring table
OR	S0,R0,R0	;S0=0
LUI	A0,8002
BEQ	T9,R0,7000627C	;branch if NULL (end of table)
LUI	T0,8002
LW	A0,41A8 (A0)	;A0=800241A8: stage#
ADDIU	V0,T0,41BC	;V0=800241BC
LW	V1,0000 (V0)	;V1=800241BC: stage ID for memstring
ADDIU	A0,A0,0190	;A0+=0x190: MP stage# offset	same as stage+400...
//70006260:	loop until a match for MP stage
BEQL	A0,V1,70006280	;branch if stage IDs match
SLL	T1,S0,0x3
LW	V1,0008 (V0)	;V1=next memstring stage ID# entry
ADDIU	S0,S0,0001	;S0++	count++
ADDIU	V0,V0,0008	;V0+=8	next table entry
BNE	V1,R0,70006260	;loop for each entry
NOP
//7000627C:	check if invalid/NULL entry
SLL	T1,S0,0x3	;T1=offset to entry
ADDU	T5,A1,T1	;T5=800241BC+offset
LW	T4,0000 (T5)	;T4=800241BC+offset: memstring stage ID
BNE	T4,R0,70006294	;branch if not zero
NOP
ADDIU	S0,R0,FFFF	;S0=-1	default to skip
//70006294:	solo memstring lookup, which multi needlessly reuses
LUI	A1,8002
BGEZ	S0,700062DC	;skip if invalid entry
ADDIU	A1,A1,41BC	;A1=800241BC
LW	T2,0000 (A1)	;T2=800241BC: memstring stage ID
OR	S0,R0,R0	;S0=0	count=0
LUI	A0,8002
BEQ	T2,R0,700062DC	;branch if NULL
LUI	T3,8002
ADDIU	V0,T3,41BC	;V0=800241BC
LW	V1,0000 (V0)	;V1=800241BC: memstring stage ID
LW	A0,41A8 (A0)	;A0=800241A8: stage#
//700062C0:	loop until a hit found
BEQL	A0,V1,700062E0	;branch if matching entry
SLL	T7,S0,0x3
LW	V1,0008 (V0)	;V1=next memstring stage ID
ADDIU	S0,S0,0001	;S0++	count++
ADDIU	V0,V0,0008	;V0+=8	next memstring
BNE	V1,R0,700062C0	;loop for each entry
NOP
//700062DC:	tokenize memory allocation string
SLL	T7,S0,0x3
ADDU	T6,A1,T7	;T6=800241BC+offset: p->matching memstring entry
JAL	7000A58C	;strtok(strcpy(mem_alloc_str, string),' ')
LW	A0,0004 (T6)	;A0=p->memstring
//700062EC:	reinitialize memory bank
JAL	7000999C	;reset memory bank A0
ADDIU	A0,R0,0004	;A0=4
JAL	7F0BD1BC
ADDIU	A0,R0,0004	;A0=4
//700062FC:	determine -ma allocation
LUI	A1,8003
ADDIU	A1,A1,912C	;A1=8002912C: "-ma"
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A0,R0,0001	;A0=1
BEQ	V0,R0,7000633C	;branch if token not found
ADDIU	A0,R0,0001	;A0=1
LUI	A1,8003
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A1,A1,9130	;A1=80029130: "-ma"
OR	A0,V0,R0	;A0=V0: p->instance
OR	A1,R0,R0	;A1=NULL p->extra characters
JAL	7000A9E0	;V0=strtol(A0,A1,A2)
OR	A2,R0,R0	;A2=0	default target base
SLL	T8,V0,0xA	;T8=value * 0x400: total allocated memory
LUI	AT,8002
SW	T8,41B0 (AT)	;T8->800241B0: temp -ma allocation
//7000633C:	allocates "-ma" bytes to mem bank 4
LUI	A0,8002
LW	A0,41B0 (A0)	;A0=800241B0: temp -ma allocation
JAL	70009720	;V0=p->A0 bytes of memory allocated in bank A1
ADDIU	A1,R0,0004	;A1=bank 4
LUI	A1,8002
LW	A1,41B0 (A1)	;A1=800241B0: size
JAL	70009D98	;reset memtable with base allocation
OR	A0,V0,R0	;A0=V0: p->allocation
//7000635C:	reset player data
JAL	7F09A32C	;reset player data pointers
NOP
//70006364:	initialize stage
LUI	T9,8002
LW	T9,41A8 (T9)	;T9=800241A8: stage#
ADDIU	AT,R0,005A
BEQ	T9,AT,70006398	;branch if stage 5A: title/menus
NOP
JAL	7F010290	;V0=#players
ADDIU	S1,R0,0001	;S1=1	#players
SLTI	AT,V0,0002	;TRUE if solo
BNE	AT,R0,70006398	;branch if solo
NOP
//7000638C:	MP sets #players
JAL	7F010290	;V0=#players
NOP
OR	S1,V0,R0	;S1=V0: #players
//70006398:
JAL	7F09A38C	;initializes player data pointers and constructs viewports
OR	A0,S1,R0	;A0=S1: #players	0-title, 1-solo, 1,2,3,4-multi
JAL	7F0BD48C	;set vertex and graphics memory
NOP
JAL	7000B6AC	;??? - tests controller presence but iffy on particulars
NOP
LUI	A0,8002
JAL	7F0BDAB0
LW	A0,41A8 (A0)	;A0=800241A8: stage#
JAL	70003124	;initialize both video buffers
NOP
JAL	7000ADB0	;reset stdout display
NOP
JAL	7F0C0B4C
NOP
JAL	70002810
NOP
//700063DC:
LUI	A0,8006
ADDIU	A0,A0,D9A0	;A0=8005D9A0: 
ADDIU	A1,SP,01D4	;A1=SP+1D4: p->buffer
JAL	7000DDD0
OR	A2,R0,R0
BNE	V0,R0,70006410	;branch if not NULL
//700063F4:
LUI	A0,8006
ADDIU	A0,A0,D9A0	;A0=8005D9A0: 
ADDIU	A1,SP,01D4	;A1=SP+1D4: p->buffer
JAL	7000DDD0
OR	A2,R0,R0
BEQ	V0,R0,700063F4	;loop while NULL
NOP
//70006410:
LUI	T0,8002
LW	T0,42FC (T0)	;T0=800242FC: loaded stage#
BGEZ	T0,700068B4	;branch if not -1
//7000641C:
LUI	A0,8006
ADDIU	A0,A0,D9A0	;A0=8005D9A0: 
ADDIU	A1,SP,01D4	;A1=SP+1D4: p->buffer
JAL	7000DDD0
ADDIU	A2,R0,0001
LW	T1,01D4 (SP)
ADDIU	AT,R0,0001
LH	V1,0000 (T1)
BEQ	V1,AT,70006464
ADDIU	AT,R0,0002
BEQ	V1,AT,70006890
LUI	V0,8002
ADDIU	AT,R0,0005
BEQ	V1,AT,7000689C
LUI	V0,8002
LUI	V0,8002
BEQ	R0,R0,700068A4
LW	V0,42FC (V0)	;V0=800242FC: loaded stage#
//70006464:
JAL	7000D8E0	;V0=Count
NOP
LUI	T5,8005
LW	T5,84B0 (T5)	;T5=800484B0: 
LUI	AT,0005
ORI	AT,AT,EB61	;AT=5EB61
SUBU	V1,V0,T5
SLTU	AT,V1,AT	;TRUE if (Count - saved) < 5EB61
BEQ	AT,R0,70006498	;play ramrom after 5EB61+T5 cycles
LUI	V0,8002
LUI	V0,8002
BEQ	R0,R0,700068A4
LW	V0,42FC (V0)	;V0=800242FC: loaded stage#
//70006498:	step through ramrom demo file
LW	V0,42FC (V0)	;V0=800242FC: loaded stage#
SLTIU	AT,S8,0002
BGEZ	V0,700068A4	;branch if not stage -1
NOP
BEQ	AT,R0,700068A4	;branch if not solo?  set to 0, nothing seems to alter...
ADDIU	T4,SP,01B4
JAL	7F0BFC8C	;V0=TRUE if demos running [80048474]
SW	T4,0048 (SP)
BEQ	V0,R0,700064D0	;branch if demo not playing
NOP
JAL	7F0C0268	;iterate ramrom entries until end, and handle camera out
NOP
BEQ	R0,R0,700064D8
NOP
//700064D0:
JAL	7F0C0B4C
NOP
//700064D8:
JAL	70002CD8
NOP
JAL	70002810
NOP
JAL	70002854
LUI	A0,0002
JAL	7000BD0C	;redirect to ramrom replay and record handlers if set
NOP
JAL	70000988	;A0-> stderr.permitted [8002309C]
OR	A0,R0,R0	;A0=0	not permitted
JAL	7F0BD674	;V0=p->display list
NOP
//70006508:	if available, handle debug menu and ramrom packet record
LUI	T2,8002
LW	T2,4300 (T2)	;T2=80024300: state of debug menu
SW	V0,01A4 (SP)	;SP+1A4=V0: p->DL
OR	S3,V0,R0	;S3=V0: p->DL
BEQ	T2,R0,70006590	;branch if not available
NOP
JAL	7000C0EC	;cur.controller A0 horz.stick pos.
OR	A0,R0,R0	;A0=0	controller 1
SLL	S0,V0,0x18
SRA	T3,S0,0x18
OR	S0,T3,R0	;S0=horz.stick pos.
JAL	7000C1FC	;cur.controller A0 vert.stick pos.
OR	A0,R0,R0	;A0=0	controller 1
SLL	S1,V0,0x18
SRA	T7,S1,0x18
OR	S1,T7,R0	;S1=vert.stick pos.
OR	A0,R0,R0	;A0=0	player 1
JAL	7000C30C	;V0= player A0's buttons A1 held
ORI	A1,R0,FFFF	;A1= any and all
ANDI	S2,V0,FFFF	;S2=buttons held
OR	A0,R0,R0	;A0=0	player 1
JAL	7000C3AC	;V0= player A0's buttons A1 pressed
ORI	A1,R0,FFFF	;A1= any and all
SLL	A0,S0,0x18
SLL	A1,S1,0x18
SRA	T8,A1,0x18
SRA	T6,A0,0x18
OR	A0,T6,R0	;A0=horz.stick pos.
OR	A1,T8,R0	;A1=vert.stick pos.
ANDI	A2,S2,FFFF	;A2= buttons held
JAL	7F0905A0	;debug menu processor
ANDI	A3,V0,FFFF	;A3= buttons pressed
LUI	AT,8002
SW	V0,4300 (AT)	;V0->80024300: state of debug menu
//70006590:
JAL	7F0BEB88	;manage MP game when applicable
NOP
JAL	7F09B41C
NOP
//700065A0:	set up viewports when applicable 
LUI	T9,8002
LW	T9,41A8 (T9)	;T9=800241A8: stage#
ADDIU	AT,R0,005A
BEQ	T9,AT,70006610	;branch if stage 5A: title/menus
NOP
JAL	7F09A464	;#players
OR	S1,R0,R0	;S1=0	player count
BLEZ	V0,70006610	;branch if invalid #players
NOP
//700065C4:	set each player's viewport
JAL	7F09B528
OR	A0,S1,R0	;A0=S1: player#
JAL	7F09B10C	;set cur. player to A0
OR	A0,V0,R0	;A0=V0: player#
LW	S0,0000 (S5)	;S0=8007A0B0: p->BONDdata
LH	A0,07F0 (S0)	;A0=BONDdata+7F0: viewport width
JAL	7000443C	;set video2 width (A0) and height (A1)
LH	A1,07F2 (S0)	;A1=BONDdata+7F2: viewport height
LW	S0,0000 (S5)	;S0=8007A0B0: p->BONDdata
LH	A0,07F4 (S0)	;A0=BONDdata+7F4: viewport ulx
JAL	700044BC	;set video2 ulx (A0) and uly (A1)
LH	A1,07F6 (S0)	;A1=BONDdata+7F6: viewport uly
JAL	7F0BF800
NOP
JAL	7F09A464	;V0=#players
ADDIU	S1,S1,0001	;S1++	count++
SLT	AT,S1,V0	;TRUE if count < players
BNE	AT,R0,700065C4	;loop for each player
NOP
//70006610:	handle line mode when applicable
JAL	7F0BE30C
OR	A0,S3,R0	;A0=S3: p->DL
JAL	7F090FDC	;V0=line mode flag
OR	S3,V0,R0	;S3=V0: p->DL
BEQ	V0,R0,70006700	;branch if line mode not enabled
//70006624:	global microcode snippet to force line mode
ADDIU	A3,R0,FFFF	;A3=-1
OR	V0,S3,R0	;V0=S3: p->DL
ADDIU	S3,S3,0008	;S3+=8: next DL op
LUI	T0,E700
OR	V1,S3,R0	;V1=S3: p->DL
SW	T0,0000 (V0)	;DL+0= pipesync.u
SW	R0,0004 (V0)	;DL+0= pipesync.l
ADDIU	S3,S3,0008	;S3+=8: next DL op
//70006644:	set cycle type
LUI	T1,BA00
OR	A0,S3,R0	;A0=S3: p->DL
ORI	T1,T1,1402	;T1=BA001402
ADDIU	S3,S3,0008	;S3+=8: next DL op
SW	T1,0000 (V1)	;DL+0= setothermode_h.u: shift 14, 2 bits
SW	R0,0004 (V1)	;DL+4= setothermode_h.l: cycle type-1cycle
//7000665C:	white blend colour
OR	A1,S3,R0	;A1=S3: p->DL
LUI	T5,F900
ADDIU	S3,S3,0008	;S3+=8: next DL op
SW	T5,0000 (A0)	;DL+0= setblendcolour.u
SW	A3,0004 (A0)	;DL+4= setblendcolour.l: FFFFFFFF-white100%
//70006670:	
OR	A2,S3,R0	;A2=S3: p->DL
LUI	T4,EE00
ADDIU	S3,S3,0008	;S3+=8: next DL op
SW	T4,0000 (A1)	;DL+0= setprimdepth.u
SW	A3,0004 (A1)	;DL+4= setprimdepth.l: depth=max, Ddepth=max
//70006684:	set depth source to primitive
LUI	T2,B900
OR	V0,S3,R0	;V0=S3: p->DL
ORI	T2,T2,0201	;T2=B9000201
ADDIU	T3,R0,0004
ADDIU	S3,S3,0008	;S3+=8: next DL op
LUI	T7,B900
LUI	T6,0FA5
SW	T3,0004 (A2)	;DL+0= setothermode_l.l: depth source: primitive
SW	T2,0000 (A2)	;DL+4= setothermode_l.u: shift 2, 1 bit
//700066A8:	set blender
ORI	T6,T6,4040	;T6=0FA54040
ORI	T7,T7,031D	;T7=B900031D
OR	S0,S3,R0	;S0=S3: p->DL
SW	T7,0000 (V0)	;DL+4= setothermode_l.u: shift 3, 1D bits
SW	T6,0004 (V0)	;DL+0= setothermode_l.l: render mode: image read; converge delta-ST clamp; depth mode: force blender; blender: blend 1 machine, blend 1, blend colour memory, blend colour fog, blend alpha in, blend alpha fog, blend alpha shade, blend 0
//700066BC:	draws viewport as a fillrect?
JAL	7000441C	;V0= video2.txtClipW
ADDIU	S3,S3,0008	;S3+=8: next DL op
SLL	S1,V0,0x10
SRA	T8,S1,0x10
JAL	7000442C	;V0= video2.txtClipH
OR	S1,T8,R0	;S1= text clip width
ADDIU	T9,V0,FFFF	;T9= height-1
ANDI	T0,T9,03FF	;T0=height to 10 bits
ADDIU	T4,S1,FFFF	;T4=width-1
ANDI	T2,T4,03FF	;T2=width to 10 bits
SLL	T1,T0,0x2	;T1=height->lry
LUI	AT,F600
OR	T5,T1,AT	;T5= fillrect | lry
SLL	T3,T2,0xE	;T3=width->lrx
OR	T7,T5,T3	;T7= fillrect | lrx | lry
SW	T7,0000 (S0)	;DL+0= fillrect.u: lrx, lry
SW	R0,0004 (S0)	;DL+4= fillrect.l: ulx=0, uly=0
//70006700:	feed screen to VI
JAL	7000B27C	;draw screen display block to screen
OR	A0,S3,R0	;A0=S3: p->DL
//70006708:	test if displaying memory usage
JAL	7F090F34	;V0= memory usage display flag [80036F74]
OR	S3,V0,R0	;S3=V0: p->DL
BEQ	V0,R0,70006724	;branch if not displaying memory usage
NOP
JAL	70002958	;draw "display speed" display
OR	A0,S3,R0	;V0=S3: p->DL
OR	S3,V0,R0	;S3=V0: p->DL
//70006724:	display debug menu if applicable
LUI	T6,8002
LW	T6,4300 (T6)	;T6=80024300: state of debug menu
BEQL	T6,R0,7000674C	;branch if debug not available
OR	V0,S3,R0
JAL	7F090490	;display debug menu text on screen
NOP
JAL	7F08FE74
OR	A0,S3,R0	;V0=S3: p->DL
OR	S3,V0,R0	;S3=V0: p->DL
//70006748:	sync and end display list
OR	V0,S3,R0	;V0=S3: p->DL
ADDIU	S3,S3,0008	;S3+=8	next DL op
LUI	T8,E900
SW	T8,0000 (V0)	;DL+0= fullsync.u
SW	R0,0004 (V0)	;DL+4= fullsync.l
OR	V1,S3,R0	;V1=S3: p->DL
LUI	T9,B800
SW	T9,0000 (V1)	;DL+0= enddl.u
SW	R0,0004 (V1)	;DL+4= enddl.l
//7000676C:	handle show mem use, when applicable
LUI	T0,8002
LW	T0,41B4 (T0)	;T0=800241B4: 1- "show mem use"
ADDIU	S3,S3,0008	;S3+=8	next DL op
BEQ	T0,R0,700067A8	;branch if "show mem use" not set
NOP
JAL	700098F0	;V0=7; loop 6 times needlessly
NOP
JAL	7000A29C	;memory table sort and merge function
NOP
JAL	7F0BD774	;A0->SP+0; deleted debug routine
OR	A0,S3,R0	;V0=S3: p->DL
JAL	7F0C6650	;unconditional return
OR	A0,R0,R0	;A0=0
LUI	AT,8002
SW	R0,41B4 (AT)	;0->show mem use flag
//700067A8:	handle show mem bars, when applicable
LUI	T1,8002
LW	T1,41B8 (T1)	;T1=800241B8: 1- "show mem bars"
BEQ	T1,R0,700067C0	;branch if "show mem bars" not set
NOP
JAL	7F0BD810	;"show mem bars": F12=percentage of used geometry memory
OR	A0,S3,R0	;V0=S3: p->DL
//700067C0:
JAL	7F0BD69C	;V0=#microcode ops left in geometry buffer, starting at A0
OR	A0,S3,R0	;V0=S3: p->DL
JAL	7F0BD738
NOP
JAL	70003298
NOP
//700067D8:	handle grab task flag, when applicable
JAL	7F09106C	;V0= "grab task" debugger flag
NOP
BEQ	V0,R0,70006854	;branch if grab task not set
OR	A0,R0,R0	;A0=0	player 1
JAL	7000C3AC	;V0= player A0's buttons A1 pressed
ORI	A1,R0,C000	;A1=A, B buttons
BEQ	V0,R0,70006854	;branch if not pressed
OR	A0,R0,R0	;A0=0	player 1
JAL	7000C30C	;V0= player A0's buttons A1 held
ORI	A1,R0,C000	;A1=A, B buttons
ORI	AT,R0,C000
BNE	V0,AT,70006854	;branch if A+B was not precisely what was pressed
//70006808:	generate a unique name for this taskgrab
LUI	A2,8002
LW	A2,4324 (A2)	;A2=80024324: "taskgrab" ram dump #
OR	A0,S4,R0	;A0=S4: p->string buffer
JAL	7000AC94	;sprintf(A0,A1,A2,A3)
OR	A1,S6,R0	;A1=S6: 80029134="u64.taskgrab.%d.core"
OR	A0,S4,R0	;A0=S4: p->string
JAL	7F0D0098	;V0=TRUE if resource named A0 found on Indy and filesize set to A1
OR	A1,S7,R0	;A1=S7: @filesize
BEQ	V0,R0,70006844	;branch if unique
//7000682C:	loop and increment value if found
LUI	A2,8002
LW	A2,4324 (A2)	;A2=80024324: taskgrab count
LUI	AT,8002
ADDIU	A2,A2,0001
BEQ	R0,R0,70006808	;loop until file can be found
SW	A2,4324 (AT)	;taskgrab count++
//70006844:	generates capture entry for Indi debugger from 4MB of ram
OR	A0,S4,R0	;A0=S4: p->string
LUI	A1,8000		;A1=80000000	start address
JAL	7F0CFFE0	;send capture data A1 of size A2 named A0
LUI	A2,0040		;A2=0x400000	4MB size
//70006854:
LW	A0,01A4 (SP)	;A0=SP+1A4: org.p->DL
OR	A1,S3,R0	;A1=S3: p->DL
OR	A2,R0,R0	;A2=0
JAL	7F0CFE18
LW	A3,0048 (SP)	;A3=SP+48: 
JAL	70009E10	;merge and sort entries in default memory allocation table
ADDIU	S8,S8,0001	;S8++
LW	T4,01AC (SP)
LUI	A0,0001		;A0=10000
XORI	T2,T4,0001
JAL	70002854
SW	T2,01AC (SP)	;SP+1AC^=1
LUI	V0,8002
BEQ	R0,R0,700068A4
LW	V0,42FC (V0)
//70006890:
ADDIU	S8,S8,FFFF	;S8--	player count-1?
BEQ	R0,R0,700068A4
LW	V0,42FC (V0)
//7000689C:
ADDIU	S8,R0,0004	;S8=4	player count=4?
//700068A0:
LW	V0,42FC (V0)	;V0=800242FC: loaded stage#
BLTZ	V0,7000641C	;loop if stage# is -1
NOP
BNE	S8,R0,7000641C
NOP
//700068B4:	unload stage
JAL	7F0BFB20	;unload stage
NOP
JAL	7F0C08FC	;stop demos at end of stage
NOP
JAL	700099C4	;??? to memory bank A0
ADDIU	A0,R0,0004	;A0=bank 4
JAL	7F0BD1BC	;??? to memory bank A0
ADDIU	A0,R0,0004	;A0=bank 4
LUI	V0,8002
ADDIU	V0,V0,42FC	;V0=800242FC
LW	T5,0000 (V0)	;T5=800242FC: loaded stage#
LW	T7,01DC (SP)
LUI	AT,8002
ADDIU	T3,R0,FFFF	;T3=-1
SW	T5,41A8 (AT)	;stage#->800241A8: stage#
BEQ	T7,R0,7000618C	;loop if still zero, which as far as I know it always does
SW	T3,0000 (V0)	;-1->800242FC: loaded stage#
//700068F8:	do something with mem bank 5
JAL	7F0D1A7C
SW	S3,01A8 (SP)	;SP+1A8=S3: p->DL
//70006900:	return
LW	RA,003C (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
LW	S5,002C (SP)
LW	S6,0030 (SP)
LW	S7,0034 (SP)
LW	S8,0038 (SP)
JR	RA
ADDIU	SP,SP,01E0

70006930	7530	run title
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	70006950	;A0->loaded stage#
ADDIU	A0,R0,005A	;A0=5A: title
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70006950	7550	A0->loaded stage# [800242FC]
	accepts: A0=stage#
LUI	AT,8002
JR	RA
SW	A0,42FC (AT)	;A0->loaded stage

7000695C	755C	V0= stage# [800241A8]
LUI	V0,8002
JR	RA
LW	V0,41A8 (V0)	;V0=800241A8: stage#

70006968	7568	return to title screen from stage
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	7000695C	;V0= stage#
NOP
ADDIU	AT,R0,0036
BEQ	V0,AT,7000699C	;skip if stage#36: cuba
NOP
//70006984:	test if objectives complete
JAL	7F0574B8	;V0= TRUE if objectives completed
NOP
BEQ	V0,R0,7000699C	;skip if objectives incomplete
NOP
//70006994:
JAL	7F01D39C
NOP
//7000699C:	run title and return
JAL	70006930	;run title
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700069B4	75B4	V0=state of debug menu (1:on; 0:off)
LUI	V0,8002
JR	RA
LW	V0,4300 (V0)	;V0=80024300: state of debug menu

700069C0	75C0	V0= p->debug.notice.list entry for boss_c_debug using data at 800241A0
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,8002
LUI	A1,8003
ADDIU	A1,A1,914C	;A1=8002914C: "boss_c_debug"
JAL	70004E60	;V0=p->debug.notice.list entry for name A1 and data A0
ADDIU	A0,A0,41A0	;A0=800241A0: 
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700069F0	75F0
	accepts: A0=p->???
LHU	T6,0000 (A0)
OR	V0,R0,R0
OR	V1,A0,R0
BLEZ	T6,70006A28
NOP
LW	T7,0004 (V1)
ADDIU	V0,V0,0001
ADDIU	V1,V1,0008
ADDU	T8,T7,A1
SW	T8,FFFC (V1)
LHU	T9,0000 (A0)
SLT	AT,V0,T9
BNEL	AT,R0,70006A08
LW	T7,0004 (V1)
JR	RA
NOP

70006A30	7630	loads sound and music banks into memory segment 6
LUI	T6,8002
LB	T6,43F8 (T6)	;T6=800243F8: nonzero if sound can't be played
ADDIU	SP,SP,FF18
SW	RA,0024 (SP)
BNE	T6,R0,70006E68	;return if can't play music
SW	S0,0020 (SP)
LUI	A0,0002
ORI	A0,A0,E000	;A0=2E000
JAL	70009720	;V0=p->A0 bytes of memory allocated in bank A1
ADDIU	A1,R0,0006	;A1=bank 6
LUI	AT,0002
ORI	AT,AT,E000
OR	V1,V0,R0	;V1=p->allocation
OR	A1,V0,R0	;A1=p->allocation
//70006A68:
ADDU	A0,V0,AT	;A0=p->end of allocation
//70006A6C:	initialize buffer
ADDIU	V1,V1,0001
SLTU	AT,V1,A0
BNE	AT,R0,70006A6C
SB	R0,FFFF (V1)
//70006A7C:	allocate buffer for rom.sfx.ptr
LUI	S0,8006
ADDIU	S0,S0,3710	;S0=80063710: p->sound buffer entry
LUI	A2,0002
ORI	A2,A2,E000	;A2=2E000: size
JAL	70010D30	;init. sound buffer entry A0 for buffer A1 of size A2
OR	A0,S0,R0	;A0=S0: 80063710
LUI	T7,002F
LUI	T8,002F
ADDIU	T8,T8,BDE0	;T8=2EBDE0	rom.sfx.ptr.start
ADDIU	T7,T7,19A0	;T7=2F19A0	rom.sfx.ptr.end
SUBU	V0,T7,T8	;V0=sfx.size
SW	V0,0010 (SP)	;SP+10= sfx.size
SW	V0,0038 (SP)
OR	A0,R0,R0
OR	A1,R0,R0
OR	A2,S0,R0	;A2=S0: 80063710: snd.buf.entry
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
//70006AC4:	load rom.sfx.ptr to buffer and expand entries
LUI	A1,002F
SW	V0,00D4 (SP)	;SP+D4= V0: p->rom.sfx.ptr buffer
ADDIU	A1,A1,BDE0	;A1=2EBDE0: rom.sfx.ptr.start
OR	A0,V0,R0
JAL	70005C1C	;loads A2 bytes from hardware A1 to A0
LW	A2,0038 (SP)	;A2=sfx.ptr.size
LUI	A1,002F
ADDIU	A1,A1,19A0	;A1=2F19A0: rom.sfx.wbk.start
JAL	70010E74	;expand all offsets in soundtable A0, wavebank A1
LW	A0,00D4 (SP)	;A0=p->rom.sfx.ptr
//70006AEC:
LW	T9,00D4 (SP)	;T9=p->rom.sfx.ptr
LUI	T1,003C
LUI	T2,003B
LW	T0,0004 (T9)
ADDIU	T2,T2,4450	;T2=3B4450: rom.snd.ptr.start
ADDIU	T1,T1,87F0	;T1=3B87F0: rom.snd.ptr.end
LUI	AT,8006
SUBU	V0,T1,T2	;V0= end - start: rom.snd.ptr.size
SW	V0,0010 (SP)	;SP+10= rom.snd.ptr.size
SW	V0,0038 (SP)
OR	A0,R0,R0
OR	A1,R0,R0
OR	A2,S0,R0	;A2=S0: 80063710: snd.buf.entry
ADDIU	A3,R0,0001	;A3= 1 block
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
SW	T0,3720 (AT)
LUI	A1,003B
SW	V0,00CC (SP)	;SP+CC= V0: p->rom.snd.ptr buffer
ADDIU	A1,A1,4450	;A1=3B4450: rom.snd.ptr.start
OR	A0,V0,R0
JAL	70005C1C	;loads A2 bytes from hardware A1 to A0
LW	A2,0038 (SP)	;A2= rom.snd.ptr.size
LUI	A1,003C
ADDIU	A1,A1,87F0	;A1=3B87F0: rom.snd.bnk.start
JAL	70010E74	;expand all offsets in soundtable A0, wavebank A1
LW	A0,00CC (SP)	;A0= p->rom.snd.ptr buffer
LW	T3,00CC (SP)
LUI	AT,8006
ADDIU	T5,R0,0010
LW	T4,0004 (T3)
SW	T5,0010 (SP)	;SP+10= 10 bytes
OR	A0,R0,R0
OR	A1,R0,R0
OR	A2,S0,R0	;A2=S0: 80063710: snd.buf.entry
ADDIU	A3,R0,0001	;A3= 1 block
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
SW	T4,3724 (AT)
LUI	V1,8006
LUI	A1,0042
ADDIU	V1,V1,3734	;V1=80063734: music.data
ADDIU	A1,A1,9790	;A1=419790: rom.music.ptr.start
SW	V0,0000 (V1)
SW	A1,0038 (SP)
OR	A0,V0,R0
JAL	70005C1C	;loads A2 bytes from hardware A1 to A0
ADDIU	A2,R0,0010
LUI	T6,8006
LW	T6,3734 (T6)
OR	A0,R0,R0
OR	A1,R0,R0
LHU	V1,0000 (T6)
OR	A2,S0,R0	;A2=S0: 80063710: snd.buf.entry
ADDIU	A3,R0,0001	;A3= 1 block
SLL	T7,V1,0x3
ADDIU	V1,T7,0004
SW	V1,0010 (SP)
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
SW	V1,0040 (SP)
LW	V1,0040 (SP)
LUI	A3,8006
ADDIU	A3,A3,3734
ADDIU	A2,V1,000F
ORI	T8,A2,000F
SW	V0,0000 (A3)
XORI	A2,T8,000F
OR	A0,V0,R0
JAL	70005C1C	;loads A2 bytes from hardware A1 to A0
LW	A1,0038 (SP)	;A1= rom.music.ptr.start
LUI	A0,8006
LUI	A1,0042
ADDIU	A1,A1,9790	;A1=419790: rom.music.ptr.start
JAL	700069F0
LW	A0,3734 (A0)	;A0=80063734: 
ADDIU	T0,R0,18C8
SW	T0,0010 (SP)	;SP+10= 18C8 bytes
OR	A0,R0,R0
OR	A1,R0,R0
OR	A2,S0,R0	;A2=S0: 80063710: snd.buf.entry
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
LUI	AT,8006
ADDIU	T1,R0,1770
SW	V0,3838 (AT)
SW	T1,0010 (SP)	;SP+10= 1770 bytes
OR	A0,R0,R0
OR	A1,R0,R0
OR	A2,S0,R0	;A2=S0: 80063710: snd.buf.entry
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
LUI	A3,8006
ADDIU	A3,A3,383C
SW	V0,0000 (A3)
ADDIU	T3,V0,07D0
LUI	AT,8006
LUI	V1,8006
LUI	A0,8006
LUI	A1,8006
LUI	A2,8006
SW	T3,3840 (AT)
ADDIU	A2,A2,3836
ADDIU	A1,A1,37B8
LW	A0,3734 (A0)
ADDIU	V1,V1,3738
LHU	T4,0008 (A0)
ADDIU	A0,A0,0008
ADDIU	A1,A1,0002
SH	T4,0000 (V1)
LHU	T5,0002 (A0)
ANDI	V0,T4,FFFF
ANDI	T6,V0,0001
BEQ	T6,R0,70006CB4
SH	T5,FFFE (A1)
ADDIU	T7,V0,0001
SH	T7,0000 (V1)
BNE	A1,A2,70006C88
ADDIU	V1,V1,0002
ADDIU	T8,R0,0018
ADDIU	T9,R0,0080
ADDIU	T0,R0,0006
SW	R0,00A4 (SP)
SW	T8,00A8 (SP)
SW	T9,00AC (SP)
SW	R0,00B4 (SP)
SB	T0,00C0 (SP)
SW	R0,00BC (SP)
SW	S0,00B8 (SP)
JAL	70001BD0
ADDIU	A0,SP,00A4
ADDIU	T1,R0,0010
ADDIU	T2,R0,0040
ADDIU	T3,R0,0010
ADDIU	T4,R0,0010
ADDIU	T5,R0,0040
ADDIU	T6,R0,0010
ADDIU	T7,R0,0010
ADDIU	T8,R0,0040
ADDIU	T9,R0,0010
ADDIU	T0,R0,007C
SW	T1,0088 (SP)
SW	T2,008C (SP)
SB	T3,0090 (SP)
SW	S0,0094 (SP)
SW	R0,0098 (SP)
SW	R0,009C (SP)
SW	R0,00A0 (SP)
SW	T4,006C (SP)
SW	T5,0070 (SP)
SB	T6,0074 (SP)
SW	S0,0078 (SP)
SW	R0,007C (SP)
SW	R0,0080 (SP)
SW	R0,0084 (SP)
SW	T7,0050 (SP)
SW	T8,0054 (SP)
SB	T9,0058 (SP)
SW	S0,005C (SP)
SW	R0,0060 (SP)
SW	R0,0064 (SP)
SW	R0,0068 (SP)
SW	T0,0010 (SP)	;SP+10= 7C bytes
OR	A0,R0,R0
OR	A1,R0,R0
OR	A2,S0,R0	;A2=S0: 80063710: snd.buf.entry
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
LUI	AT,8006
ADDIU	T1,R0,007C
SW	V0,3728 (AT)	;V0->80063728: set p->music.ctrl.primary
SW	T1,0010 (SP)	;SP+10= 7C bytes
OR	A0,R0,R0
OR	A1,R0,R0
OR	A2,S0,R0	;A2=S0: 80063710: snd.buf.entry
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
LUI	AT,8006
ADDIU	T2,R0,007C
SW	V0,372C (AT)	;V0->8006372C: set p->music.ctrl.secondary
SW	T2,0010 (SP)	;SP+10= 7C bytes
OR	A0,R0,R0
OR	A1,R0,R0
OR	A2,S0,R0	;A2=S0: 80063710: snd.buf.entry
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
LUI	AT,8006
LUI	A0,8006
SW	V0,3730 (AT)	;V0->80063730: p->music.ctrl.tertiary
LW	A0,3728 (A0)	;A0=80063728: p->music.ctrl.primary
JAL	70012080
ADDIU	A1,SP,0088
LUI	A0,8006
LUI	A1,8006
LW	A1,3724 (A1)
JAL	700121F0
LW	A0,3728 (A0)	;A0=80063728: p->music.ctrl.primary
LUI	A0,8006
LW	A0,372C (A0)	;A0=8006372C: p->music.ctrl.secondary
JAL	70012080
ADDIU	A1,SP,006C
LUI	A0,8006
LUI	A1,8006
LW	A1,3724 (A1)
JAL	700121F0
LW	A0,372C (A0)	;A0=8006372C: p->music.ctrl.secondary
LUI	A0,8006
LW	A0,3730 (A0)	;A0=80063730: p->music.ctrl.tertiary
JAL	70012080
ADDIU	A1,SP,0050
LUI	A0,8006
LUI	A1,8006
LW	A1,3724 (A1)
JAL	700121F0
LW	A0,3730 (A0)	;A0=80063730: p->music.ctrl.tertiary
ADDIU	T3,R0,0040
ADDIU	T4,R0,0040
ADDIU	T5,R0,0008
SW	T3,00DC (SP)
SW	T4,00D8 (SP)
SW	T5,00E0 (SP)
SW	S0,00E4 (SP)
JAL	70007B20
ADDIU	A0,SP,00D8
JAL	70001F58
NOP
//70006E68:	return
LW	RA,0024 (SP)
LW	S0,0020 (SP)
ADDIU	SP,SP,00E8
JR	RA
NOP

70006E7C	7A7C	play music track A0 as primary
	accepts; A0=music track#
LUI	T6,8002
LB	T6,43F8 (T6)	;T6=800243F8: nonzero when sound can't be played
ADDIU	SP,SP,DEB8
SW	RA,001C (SP)
SW	S0,0018 (SP)
BNE	T6,R0,70006FBC	;return if sound disabled
SW	A0,2148 (SP)
//70006E98:	If something is already playing...
LUI	T7,8002
LW	T7,4334 (T7)	;T7=80024334: cur.track#
BEQL	T7,R0,70006EB4	;branch if nothing playing
LW	T8,2148 (SP)
//70006EA8:	..kill it.
JAL	70006FD0	;stop playing primary music track
NOP
//70006EB0:	set new track number and wait for previous to stop
LW	T8,2148 (SP)	;T8=track#
LUI	S0,8006
LUI	AT,8002
ADDIU	S0,S0,3728	;S0=80063728: p->music.primary controller block
SW	T8,4334 (AT)	;track#->80024334: set new track number
JAL	70012230	;V0= TRUE if music playing
LW	A0,0000 (S0)	;A0=music.ctrl.primary
BEQ	V0,R0,70006EE4	;skip if stopped
NOP
//70006ED4:	loop until it stops
JAL	70012230	;V0= TRUE if music playing
LW	A0,0000 (S0)	;A0=80063728: music.ctrl.primary
BNE	V0,R0,70006ED4
NOP
//70006EE4:
LUI	A3,8002
LW	A3,4334 (A3)	;A3=80024334: track#
LUI	T9,8006
LW	T9,3734 (T9)	;T9=80063734: p->music data table
SLL	T1,A3,0x3	;T1=track# -> offset
LUI	AT,0001
ADDU	T2,T9,T1
LW	A1,0004 (T2)	;A1=music.data+offset: ROM address for track
LUI	V1,8006
SLL	V0,A3,0x1	;V0=track#->offset
SLTU	AT,A1,AT
BEQ	AT,R0,70006F28	;if ROM < 10000, use the default sound
ADDU	V1,V1,V0
//70006F18:	default to solo death music
JAL	70006E7C	;play music track A0 as primary
ADDIU	A0,R0,0001	;A0=track 1
BEQ	R0,R0,70006FC0
LW	RA,001C (SP)
//70006F28:	load compressed music file from ROM
LHU	V1,3738 (V1)	;V1=80063738+offset: decompressed size, to nearest halword boundry
LUI	A2,8006
ADDU	A2,A2,V0
LHU	A2,37B8 (A2)	;A2=800637B8+offset: compressed size, to nearest halword boundry
LUI	T0,8006
ADDIU	V1,V1,000F
LW	T0,3838 (T0)	;T0=80063838: p->decompression target address
ORI	T3,V1,000F
XORI	T4,T3,000F
ADDIU	A2,A2,000F
ADDIU	V1,T4,0040	;V1=dec.size, to 0x10 boundry + 0x40
ORI	T5,A2,000F
XORI	A2,T5,000F
ADDU	T7,T0,V1	;T7=address + suspected size
SUBU	A0,T7,A2	;A0=address + suspected size - comp.size
SW	A0,0028 (SP)	;SP+28= address+difference in dec and comp sizes
JAL	70005C1C	;loads A2 bytes from hardware A1 to A0: comp.size from ROM to end of target buffer
SW	T0,2140 (SP)	;SP+2140= p->target
LW	A0,0028 (SP)	;A0=p->compressed
LW	A1,2140 (SP)	;A1=p->decompressed
JAL	7F0CE7F0	;decompress data A0 to A1, advancing past header
ADDIU	A2,SP,0034	;A2=SP+34
LUI	A0,8006
LUI	A1,8006
LW	A1,3838 (A1)	;A1=80063838: p->music binary
JAL	7001279C
ADDIU	A0,A0,3860	;A0=80063860: 
LUI	A1,8006
ADDIU	A1,A1,3860	;A1=80063860: 
JAL	70012D00
LW	A0,0000 (S0)	;A0=80063728: music.ctrl.primary
JAL	70007030
NOP
JAL	7000703C
ANDI	A0,V0,FFFF
JAL	70012D40
LW	A0,0000 (S0)	;A0=80063728: music.ctrl.primary
//70006FBC:	return
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,2148
JR	RA
NOP

70006FD0	7BD0	stop playing primary music track
LUI	T6,8002
LB	T6,43F8 (T6)	;T6=800243F8: nonzero when sound can't be played
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
BNE	T6,R0,70007020	;return if can't play sound
LUI	T7,8002
LW	T7,4334 (T7)	;T7=80024334: cur.track#
LUI	AT,8002
SW	R0,434C (AT)	;0->8002434C: 
BEQ	T7,R0,70007018	;branch if track 0: no music
LUI	A0,8006
JAL	70012230	;V0= TRUE if music playing
LW	A0,3728 (A0)	;A0=80063728: p->music.ctrl.primary
ADDIU	AT,R0,0001
BNE	V0,AT,70007018	;branch if not playing
//7000700C:
LUI	A0,8006
JAL	70012D70
LW	A0,3728 (A0)	;A0=80063728: p->music.ctrl.primary
//70007018:	kill music: track#=0
LUI	AT,8002
SW	R0,4334 (AT)	;0->80024334: track 0
//70007020:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70007030	7C30
LUI	V0,8002
JR	RA
LHU	V0,4338 (V0)	;V0=80024338: 

7000703C	7C3C
	accepts: A0=
LUI	T6,8002
LW	T6,4334 (T6)	;T6=80024334: music.track#
LUI	T8,8002
ANDI	A2,A0,FFFF
SLL	T7,T6,0x1
ADDU	T8,T8,T7
LH	T8,4358 (T8)	;T8=80024358+offset: 
ADDIU	SP,SP,FFE8
SW	A0,0018 (SP)
MULTU	A2,T8
SW	RA,0014 (SP)
LUI	AT,8002
LUI	A0,8006
SH	A2,4338 (AT)
LW	A0,3728 (A0)	;A0=80063728: p->music.ctrl.primary
MFLO	V0
SRL	T9,V0,0xF
SLL	A1,T9,0x10
SRA	T0,A1,0x10
JAL	70012DA0
OR	A1,T0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700070A0	7CA0
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	70007030
NOP
LUI	T6,8002
LW	T6,4334 (T6)
LUI	A0,8002
ADDIU	A0,A0,4358
SLL	T7,T6,0x1
ADDU	T8,A0,T7
SH	V0,0000 (T8)
LH	T9,0000 (A0)
LUI	V0,8002
ADDIU	V0,V0,4358
BLTZ	T9,700070F0
LW	RA,0014 (SP)
LH	T0,0002 (V0)
ADDIU	V0,V0,0002
BGEZL	T0,700070E4
LH	T0,0002 (V0)
JR	RA
ADDIU	SP,SP,0018

700070F8	7CF8
LUI	T6,8002
LW	T6,434C (T6)
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
BLTZ	T6,70007158
SWC1	F12,0018 (SP)
JAL	70007030
NOP
LUI	AT,8006
SH	V0,3844 (AT)
LUI	AT,8006
SH	R0,384A (AT)
LUI	AT,4270
MTC1	AT,F6
LWC1	F4,0018 (SP)
LUI	AT,8006
ADDIU	T9,R0,FFFF
MUL.S	F8,F4,F6
TRUNC.W.S	F10,F8
MFC1	T8,F10
NOP
SW	T8,3850 (AT)
LUI	AT,8002
SW	T9,434C (AT)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70007168	7D68
LUI	T6,8002
LW	T6,434C (T6)
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SWC1	F12,0018 (SP)
BGTZ	T6,700071F4
SW	A1,001C (SP)
LUI	A0,8006
JAL	70012D40
LW	A0,3728 (A0)	;A0=80063728: p->music.ctrl.primary
LHU	V0,001E (SP)
ORI	AT,R0,FFFF
LUI	T7,8006
BNE	V0,AT,700071B4
NOP
LHU	T7,3844 (T7)
LUI	AT,8006
BEQ	R0,R0,700071BC
SH	T7,384A (AT)
LUI	AT,8006
SH	V0,384A (AT)
LUI	AT,8006
SH	R0,3844 (AT)
LUI	AT,4270
MTC1	AT,F6
LWC1	F4,0018 (SP)
LUI	AT,8006
ADDIU	T0,R0,0001
MUL.S	F8,F4,F6
TRUNC.W.S	F10,F8
MFC1	T9,F10
NOP
SW	T9,3850 (AT)
LUI	AT,8002
SW	T0,434C (AT)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70007204	7E04
	accepts: A0=
LUI	T6,8002
LB	T6,43F8 (T6)	;T6=800243F8: nonzero if sound can't be played
ADDIU	SP,SP,DEB8
SW	RA,001C (SP)
SW	S0,0018 (SP)
BNE	T6,R0,70007344	;return if sound disabled
SW	A0,2148 (SP)
LUI	T7,8002
LW	T7,433C (T7)
BEQL	T7,R0,7000723C
LW	T8,2148 (SP)
JAL	70007358
NOP
LW	T8,2148 (SP)	;T8= A0 f/caller: 
LUI	S0,8006
LUI	AT,8002
ADDIU	S0,S0,372C
SW	T8,433C (AT)
JAL	70012230	;V0= TRUE if music playing
LW	A0,0000 (S0)	;A0=8006372C: p->music.ctrl.secondary
BEQ	V0,R0,7000726C
NOP
JAL	70012230	;V0= TRUE if music playing
LW	A0,0000 (S0)	;A0=8006372C: p->music.ctrl.secondary
BNE	V0,R0,7000725C
NOP
LUI	A3,8002
LW	A3,433C (A3)
LUI	T9,8006
LW	T9,3734 (T9)
SLL	T1,A3,0x3
LUI	AT,0001
ADDU	T2,T9,T1
LW	A1,0004 (T2)
LUI	V1,8006
SLL	V0,A3,0x1
SLTU	AT,A1,AT
BEQ	AT,R0,700072B0
ADDU	V1,V1,V0
JAL	70007204
ADDIU	A0,R0,0001
BEQ	R0,R0,70007348
LW	RA,001C (SP)
LHU	V1,3738 (V1)
LUI	A2,8006
ADDU	A2,A2,V0
LHU	A2,37B8 (A2)
LUI	T0,8006
ADDIU	V1,V1,000F
LW	T0,383C (T0)
ORI	T3,V1,000F
XORI	T4,T3,000F
ADDIU	A2,A2,000F
ADDIU	V1,T4,0040
ORI	T5,A2,000F
XORI	A2,T5,000F
ADDU	T7,T0,V1
SUBU	A0,T7,A2
SW	A0,0028 (SP)
JAL	70005C1C	;loads A2 bytes from hardware A1 to A0
SW	T0,2140 (SP)
LW	A0,0028 (SP)
LW	A1,2140 (SP)
JAL	7F0CE7F0	;decompress data A0 to A1, advancing past header
ADDIU	A2,SP,0034
LUI	A0,8006
LUI	A1,8006
LW	A1,383C (A1)
JAL	7001279C
ADDIU	A0,A0,3958	;A0= 80063958: 
LUI	A1,8006
ADDIU	A1,A1,3958	;A1= 80063958: 
JAL	70012D00
LW	A0,0000 (S0)	;A0=8006372C: p->music.ctrl.secondary
JAL	700073B8
NOP
JAL	700073C4
ANDI	A0,V0,FFFF
JAL	70012D40
LW	A0,0000 (S0)	;A0=8006372C: p->music.ctrl.secondary
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,2148
JR	RA
NOP

70007358	7F58
LUI	T6,8002
LB	T6,43F8 (T6)	;T6=800243F8: nonzero if sound can't be played
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
BNE	T6,R0,700073A8	;return if sound disabled
//7000736C:
LUI	T7,8002
LW	T7,433C (T7)	;T7=8002433C: 
LUI	AT,8002
SW	R0,4350 (AT)	;0->80024350: 
BEQ	T7,R0,700073A0
//70007380:
LUI	A0,8006
JAL	70012230	;V0= TRUE if music playing
LW	A0,372C (A0)	;A0=8006372C: p->music.ctrl.secondary
ADDIU	AT,R0,0001
BNE	V0,AT,700073A0	;skip if music stopped
//70007394:
LUI	A0,8006
JAL	70012D70
LW	A0,372C (A0)	;A0=8006372C: p->music.ctrl.secondary
//700073A0:
LUI	AT,8002
SW	R0,433C (AT)	;0->8002433C: 
//700073A8:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700073B8	7FB8
LUI	V0,8002
JR	RA
LHU	V0,4340 (V0)	;V0=80024340: 

700073C4	7FC4
	accepts: A0=
LUI	T6,8002
LW	T6,433C (T6)	;T6=8002433C: 
LUI	T8,8002
ANDI	A2,A0,FFFF
SLL	T7,T6,0x1
ADDU	T8,T8,T7
LH	T8,4358 (T8)	;T8=80024358+offset: 
ADDIU	SP,SP,FFE8
SW	A0,0018 (SP)
MULTU	A2,T8
SW	RA,0014 (SP)
LUI	AT,8002
LUI	A0,8006
SH	A2,4340 (AT)	;80024340 = A0 f/caller
LW	A0,372C (A0)	;A0=8006372C: p->music.ctrl.secondary
MFLO	V0
SRL	T9,V0,0xF
SLL	A1,T9,0x10
SRA	T0,A1,0x10
JAL	70012DA0
OR	A1,T0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70007428	8028
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	700073B8
NOP
LUI	T6,8002
LW	T6,433C (T6)
LUI	A0,8002
ADDIU	A0,A0,4358
SLL	T7,T6,0x1
ADDU	T8,A0,T7
SH	V0,0000 (T8)
LH	T9,0000 (A0)
LUI	V0,8002
ADDIU	V0,V0,4358
BLTZ	T9,70007478
LW	RA,0014 (SP)
LH	T0,0002 (V0)
ADDIU	V0,V0,0002
BGEZL	T0,7000746C
LH	T0,0002 (V0)
JR	RA
ADDIU	SP,SP,0018

70007480	8080
LUI	T6,8002
LW	T6,4350 (T6)
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
BLTZ	T6,700074E0
SWC1	F12,0018 (SP)
JAL	700073B8
NOP
LUI	AT,8006
SH	V0,3846 (AT)
LUI	AT,8006
SH	R0,384C (AT)
LUI	AT,4270
MTC1	AT,F6
LWC1	F4,0018 (SP)
LUI	AT,8006
ADDIU	T9,R0,FFFF
MUL.S	F8,F4,F6
TRUNC.W.S	F10,F8
MFC1	T8,F10
NOP
SW	T8,3854 (AT)
LUI	AT,8002
SW	T9,4350 (AT)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700074F0	80F0
LUI	T6,8002
LW	T6,4350 (T6)
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SWC1	F12,0018 (SP)
BGTZ	T6,7000757C
SW	A1,001C (SP)
LUI	A0,8006
JAL	70012D40
LW	A0,372C (A0)	;A0=8006372C: p->music.ctrl.secondary
LHU	V0,001E (SP)
ORI	AT,R0,FFFF
LUI	T7,8006
BNE	V0,AT,7000753C
NOP
LHU	T7,3846 (T7)
LUI	AT,8006
BEQ	R0,R0,70007544
SH	T7,384C (AT)
LUI	AT,8006
SH	V0,384C (AT)
LUI	AT,8006
SH	R0,3846 (AT)
LUI	AT,4270
MTC1	AT,F6
LWC1	F4,0018 (SP)
LUI	AT,8006
ADDIU	T0,R0,0001
MUL.S	F8,F4,F6
TRUNC.W.S	F10,F8
MFC1	T9,F10
NOP
SW	T9,3854 (AT)
LUI	AT,8002
SW	T0,4350 (AT)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000758C	818C
LUI	T6,8002
LB	T6,43F8 (T6)	;T6=800243F8: nonzero if sound can't be played
ADDIU	SP,SP,DEB8
SW	RA,001C (SP)
SW	S0,0018 (SP)
BNE	T6,R0,700076CC	;return if sound disabled
SW	A0,2148 (SP)
LUI	T7,8002
LW	T7,4344 (T7)
BEQL	T7,R0,700075C4
LW	T8,2148 (SP)
JAL	700076E0
NOP
LW	T8,2148 (SP)
LUI	S0,8006
LUI	AT,8002
ADDIU	S0,S0,3730
SW	T8,4344 (AT)
JAL	70012230	;V0= TRUE if music playing
LW	A0,0000 (S0)	;A0=80063730: p->music.ctrl.tertiary
BEQ	V0,R0,700075F4
NOP
JAL	70012230	;V0= TRUE if music playing
LW	A0,0000 (S0)	;A0=80063730: p->music.ctrl.tertiary
BNE	V0,R0,700075E4
NOP
LUI	A3,8002
LW	A3,4344 (A3)
LUI	T9,8006
LW	T9,3734 (T9)
SLL	T1,A3,0x3
LUI	AT,0001
ADDU	T2,T9,T1
LW	A1,0004 (T2)
LUI	V1,8006
SLL	V0,A3,0x1
SLTU	AT,A1,AT
BEQ	AT,R0,70007638
ADDU	V1,V1,V0
JAL	7000758C
ADDIU	A0,R0,0001
BEQ	R0,R0,700076D0
LW	RA,001C (SP)
LHU	V1,3738 (V1)
LUI	A2,8006
ADDU	A2,A2,V0
LHU	A2,37B8 (A2)
LUI	T0,8006
ADDIU	V1,V1,000F
LW	T0,3840 (T0)
ORI	T3,V1,000F
XORI	T4,T3,000F
ADDIU	A2,A2,000F
ADDIU	V1,T4,0040
ORI	T5,A2,000F
XORI	A2,T5,000F
ADDU	T7,T0,V1
SUBU	A0,T7,A2
SW	A0,0028 (SP)
JAL	70005C1C	;loads A2 bytes from hardware A1 to A0
SW	T0,2140 (SP)
LW	A0,0028 (SP)
LW	A1,2140 (SP)
JAL	7F0CE7F0	;decompress data A0 to A1, advancing past header
ADDIU	A2,SP,0034
LUI	A0,8006
LUI	A1,8006
LW	A1,3840 (A1)
JAL	7001279C
ADDIU	A0,A0,3A50
LUI	A1,8006
ADDIU	A1,A1,3A50
JAL	70012D00
LW	A0,0000 (S0)	;A0=80063730: p->music.ctrl.tertiary
JAL	70007740
NOP
JAL	7000774C
ANDI	A0,V0,FFFF
JAL	70012D40
LW	A0,0000 (S0)	;A0=80063730: p->music.ctrl.tertiary
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,2148
JR	RA
NOP

700076E0	82E0
LUI	T6,8002
LB	T6,43F8 (T6)	;T6=800243F8: nonzero if sound can't be played
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
BNE	T6,R0,70007730	;return if sound disabled
LUI	T7,8002
LW	T7,4344 (T7)
LUI	AT,8002
SW	R0,4354 (AT)
BEQ	T7,R0,70007728
LUI	A0,8006
JAL	70012230	;V0= TRUE if music playing
LW	A0,3730 (A0)	;A0=80063730: p->music.ctrl.tertiary
ADDIU	AT,R0,0001
BNE	V0,AT,70007728
LUI	A0,8006
JAL	70012D70
LW	A0,3730 (A0)	;A0=80063730: p->music.ctrl.tertiary
LUI	AT,8002
SW	R0,4344 (AT)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70007740	8340
LUI	V0,8002
JR	RA
LHU	V0,4348 (V0)	;V0=80024348: 

7000774C	834C
LUI	T6,8002
LW	T6,4344 (T6)
LUI	T8,8002
ANDI	A2,A0,FFFF
SLL	T7,T6,0x1
ADDU	T8,T8,T7
LH	T8,4358 (T8)
ADDIU	SP,SP,FFE8
SW	A0,0018 (SP)
MULTU	A2,T8
SW	RA,0014 (SP)
LUI	AT,8002
LUI	A0,8006
SH	A2,4348 (AT)
LW	A0,3730 (A0)	;A0=80063730: p->music.ctrl.tertiary
MFLO	V0
SRL	T9,V0,0xF
SLL	A1,T9,0x10
SRA	T0,A1,0x10
JAL	70012DA0
OR	A1,T0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700077B0
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	70007740
NOP
LUI	T6,8002
LW	T6,4344 (T6)
LUI	A0,8002
ADDIU	A0,A0,4358
SLL	T7,T6,0x1
ADDU	T8,A0,T7
SH	V0,0000 (T8)
LH	T9,0000 (A0)
LUI	V0,8002
ADDIU	V0,V0,4358
BLTZ	T9,70007800
LW	RA,0014 (SP)
LH	T0,0002 (V0)
ADDIU	V0,V0,0002
BGEZL	T0,700077F4
LH	T0,0002 (V0)
JR	RA
ADDIU	SP,SP,0018

70007808	8408
LUI	T6,8002
LW	T6,4354 (T6)
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
BLTZ	T6,70007868
SWC1	F12,0018 (SP)
JAL	70007740
NOP
LUI	AT,8006
SH	V0,3848 (AT)
LUI	AT,8006
SH	R0,384E (AT)
LUI	AT,4270
MTC1	AT,F6
LWC1	F4,0018 (SP)
LUI	AT,8006
ADDIU	T9,R0,FFFF
MUL.S	F8,F4,F6
TRUNC.W.S	F10,F8
MFC1	T8,F10
NOP
SW	T8,3858 (AT)
LUI	AT,8002
SW	T9,4354 (AT)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70007878	8478
LUI	T6,8002
LW	T6,4354 (T6)
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SWC1	F12,0018 (SP)
BGTZ	T6,70007904
SW	A1,001C (SP)
LUI	A0,8006
JAL	70012D40
LW	A0,3730 (A0)	;A0=80063730: p->music.ctrl.tertiary
LHU	V0,001E (SP)
ORI	AT,R0,FFFF
LUI	T7,8006
BNE	V0,AT,700078C4
NOP
LHU	T7,3848 (T7)
LUI	AT,8006
BEQ	R0,R0,700078CC
SH	T7,384E (AT)
LUI	AT,8006
SH	V0,384E (AT)
LUI	AT,8006
SH	R0,3848 (AT)
LUI	AT,4270
MTC1	AT,F6
LWC1	F4,0018 (SP)
LUI	AT,8006
ADDIU	T0,R0,0001
MUL.S	F8,F4,F6
TRUNC.W.S	F10,F8
MFC1	T9,F10
NOP
SW	T9,3858 (AT)
LUI	AT,8002
SW	T0,4354 (AT)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70007914	8514
LUI	T6,8002
LW	T6,434C (T6)
ADDIU	SP,SP,FFD0
SW	RA,0014 (SP)
BEQ	T6,R0,700079C0
NOP
JAL	70007030
NOP
LUI	A2,8006
LUI	T7,8006
LHU	T7,384A (T7)
ADDIU	A2,A2,3850
LW	T8,0000 (A2)
SUBU	A1,T7,V0
MTC1	A1,F4
MTC1	T8,F8
CVT.S.W	F6,F4
CVT.S.W	F10,F8
DIV.S	F16,F6,F10
TRUNC.W.S	F18,F16
MFC1	T0,F18
NOP
ADDU	A0,V0,T0
ANDI	T1,A0,FFFF
OR	A0,T1,R0
JAL	7000703C
SH	T1,002E (SP)
LUI	A2,8006
ADDIU	A2,A2,3850
LW	T2,0000 (A2)
LHU	A0,002E (SP)
ADDIU	T3,T2,FFFF
BGTZ	T3,700079C0
SW	T3,0000 (A2)
BNE	A0,R0,700079B4
LUI	A0,8006
JAL	70012D70
LW	A0,3728 (A0)	;A0=80063728: p->music.ctrl.primary
LUI	A2,8006
ADDIU	A2,A2,3850
SW	R0,0000 (A2)
LUI	AT,8002
SW	R0,434C (AT)
LUI	T5,8002
LW	T5,4350 (T5)
BEQ	T5,R0,70007A64
NOP
JAL	700073B8
NOP
LUI	A2,8006
LUI	T6,8006
LHU	T6,384C (T6)
ADDIU	A2,A2,3854
LW	T7,0000 (A2)
SUBU	A1,T6,V0
MTC1	A1,F4
MTC1	T7,F6
CVT.S.W	F8,F4
CVT.S.W	F10,F6
DIV.S	F16,F8,F10
TRUNC.W.S	F18,F16
MFC1	T9,F18
NOP
ADDU	A0,V0,T9
ANDI	T0,A0,FFFF
OR	A0,T0,R0
JAL	700073C4
SH	T0,0026 (SP)
LUI	A2,8006
ADDIU	A2,A2,3854
LW	T1,0000 (A2)
LHU	A0,0026 (SP)
ADDIU	T2,T1,FFFF
BGTZ	T2,70007A64
SW	T2,0000 (A2)
BNE	A0,R0,70007A58
LUI	A0,8006
JAL	70012D70
LW	A0,372C (A0)	;A0=8006372C: p->music.ctrl.secondary
LUI	A2,8006
ADDIU	A2,A2,3854
SW	R0,0000 (A2)
LUI	AT,8002
SW	R0,4350 (AT)
LUI	T4,8002
LW	T4,4354 (T4)
BEQL	T4,R0,70007B0C
LW	RA,0014 (SP)
JAL	70007740
NOP
LUI	A2,8006
LUI	T5,8006
LHU	T5,384E (T5)
ADDIU	A2,A2,3858
LW	T6,0000 (A2)
SUBU	A1,T5,V0
MTC1	A1,F4
MTC1	T6,F8
CVT.S.W	F6,F4
CVT.S.W	F10,F8
DIV.S	F16,F6,F10
TRUNC.W.S	F18,F16
MFC1	T8,F18
NOP
ADDU	A0,V0,T8
ANDI	T9,A0,FFFF
OR	A0,T9,R0
JAL	7000774C
SH	T9,001E (SP)
LUI	A2,8006
ADDIU	A2,A2,3858
LW	T0,0000 (A2)
LHU	A0,001E (SP)
ADDIU	T1,T0,FFFF
BGTZ	T1,70007B08
SW	T1,0000 (A2)
BNE	A0,R0,70007AFC
LUI	A0,8006
JAL	70012D70
LW	A0,3730 (A0)	;A0=80063730: p->music.ctrl.tertiary
LUI	A2,8006
ADDIU	A2,A2,3858
SW	R0,0000 (A2)
LUI	AT,8002
SW	R0,4354 (AT)
LW	RA,0014 (SP)
ADDIU	SP,SP,0030
JR	RA
NOP

70007B20	8720
ADDIU	SP,SP,FFB0
SW	S2,0028 (SP)
LUI	S2,8002
ADDIU	S2,S2,43F0
SW	RA,002C (SP)
SW	S1,0024 (SP)
SW	S0,0020 (SP)
LW	T6,0008 (A0)
LW	T7,0000 (S2)
ORI	T9,R0,80E8
OR	S1,A0,R0
SW	T6,0044 (T7)
LW	T8,0000 (S2)
OR	A0,R0,R0
OR	A1,R0,R0
SW	R0,003C (T8)
LW	T0,0000 (S2)
ADDIU	A3,R0,0001	;A3= 1 block
SW	T9,0048 (T0)
LW	T1,0000 (S1)
LW	A2,000C (S1)
SLL	T2,T1,0x6
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
SW	T2,0010 (SP)
LW	T3,0000 (S2)
OR	A0,R0,R0
OR	A1,R0,R0
SW	V0,0040 (T3)
LW	T4,0004 (S1)
LW	A2,000C (S1)
ADDIU	A3,R0,0001	;A3= 1 block
SLL	T5,T4,0x3
SUBU	T5,T5,T4
SLL	T5,T5,0x2
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
SW	T5,0010 (SP)
LW	A0,0000 (S2)
OR	A1,V0,R0
LW	A2,0004 (S1)
JAL	700130AC
ADDIU	A0,A0,0014
LW	T6,0000 (S2)
LUI	AT,8002
ADDIU	S0,R0,0001
LW	T7,0040 (T6)
SW	T7,43EC (AT)
LW	T8,0000 (S1)
SLTIU	AT,T8,0002
BNEL	AT,R0,70007C18
LW	A2,000C (S1)
LW	T9,0000 (S2)
SLL	T0,S0,0x6
LW	V0,0040 (T9)
ADDU	A0,T0,V0
JAL	7000EAC0
ADDIU	A1,A0,FFC0
LW	T1,0000 (S1)
ADDIU	S0,S0,0001
SLTU	AT,S0,T1
BNEL	AT,R0,70007BEC
LW	T9,0000 (S2)
LW	A2,000C (S1)
ADDIU	T2,R0,0007
SW	T2,0010 (SP)	;SP+10= 7 bytes
OR	A0,R0,R0
OR	A1,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0002	;A3= 2 blocks
LUI	V1,8006
ADDIU	V1,V1,3BA4
SW	V0,0000 (V1)
LW	A2,000C (S1)
ADDIU	T3,R0,0007
SW	T3,0010 (SP)	;SP+10 = 7 bytes
OR	A0,R0,R0
OR	A1,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0002	;A3= 2 blocks
LUI	V1,8006
ADDIU	V1,V1,3BA4
LW	T4,0000 (V1)
LUI	A0,8006
ADDIU	A0,A0,3BA8
SW	V0,0000 (A0)
ADDIU	A1,R0,7FFF
SH	A1,0000 (T4)
LW	T5,0000 (V1)
LW	T7,0000 (A0)
ADDIU	S0,R0,0003
LH	T6,0000 (T5)
SLL	V0,S0,0x1
SH	T6,0000 (T7)
LW	T8,0000 (V1)
SH	A1,0002 (T8)
LW	T9,0000 (V1)
LW	T1,0000 (A0)
LH	T0,0002 (T9)
SH	T0,0002 (T1)
LW	T2,0000 (V1)
SH	A1,0004 (T2)
LW	T3,0000 (V1)
LW	T5,0000 (A0)
LH	T4,0004 (T3)
SH	T4,0004 (T5)
LW	T6,0000 (V1)
ADDU	T7,T6,V0
SH	A1,0000 (T7)
LW	T8,0000 (V1)
LW	T1,0000 (A0)
ADDU	T9,T8,V0
LH	T0,0000 (T9)
ADDU	T2,T1,V0
SH	T0,0000 (T2)
LW	T3,0000 (V1)
ADDU	T4,T3,V0
SH	A1,0002 (T4)
LW	T5,0000 (V1)
LW	T8,0000 (A0)
ADDU	T6,T5,V0
LH	T7,0002 (T6)
ADDU	T9,T8,V0
SH	T7,0002 (T9)
LW	T1,0000 (V1)
ADDU	T0,T1,V0
SH	A1,0004 (T0)
LW	T2,0000 (V1)
LW	T5,0000 (A0)
ADDU	T3,T2,V0
LH	T4,0004 (T3)
ADDU	T6,T5,V0
LUI	T5,8002
SH	T4,0004 (T6)
LW	T8,0000 (V1)
ADDU	T7,T8,V0
SH	A1,0006 (T7)
LW	T9,0000 (V1)
LW	T2,0000 (A0)
LUI	T8,7000
ADDU	T1,T9,V0
LH	T0,0006 (T1)
ADDU	T3,T2,V0
ADDIU	T8,T8,7DDC
SH	T0,0006 (T3)
LW	T4,0000 (S2)
LW	T5,76E0 (T5)
SW	T5,0038 (T4)
LW	T6,0000 (S2)
SW	R0,0000 (T6)
LW	T7,0000 (S2)
SW	T8,0008 (T7)
LW	S0,0000 (S2)
SW	S0,0004 (S0)
LW	S0,0000 (S2)
LW	A0,0038 (S0)
JAL	70013120
OR	A1,S0,R0
LW	S0,0000 (S2)
ADDIU	T9,R0,0020
SH	T9,0038 (SP)
ADDIU	A1,SP,0038
LW	A2,0048 (S0)
JAL	70012EFC
ADDIU	A0,S0,0014
LW	S0,0000 (S2)
ADDIU	A0,S0,0014
JAL	70013020
ADDIU	A1,S0,0028
LW	T1,0000 (S2)
SW	V0,004C (T1)
LW	RA,002C (SP)
LW	S2,0028 (SP)
LW	S1,0024 (SP)
LW	S0,0020 (SP)
JR	RA
ADDIU	SP,SP,0050

70007DDC	89DC
ADDIU	SP,SP,FFB0
SW	S4,0028 (SP)
SW	S3,0024 (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
OR	S0,A0,R0
SW	RA,002C (SP)
ADDIU	S1,A0,0028
ADDIU	S2,A0,0014
ADDIU	S3,R0,0020
ADDIU	S4,SP,003C
LH	T6,0028 (S0)
ADDIU	T7,R0,0020
OR	A1,S4,R0
BNE	S3,T6,70007E38
OR	A0,S0,R0
SH	T7,003C (SP)
LW	A2,0048 (S0)
JAL	70012EFC
OR	A0,S2,R0
BEQ	R0,R0,70007E44
OR	A0,S2,R0
JAL	70007E80
OR	A1,S1,R0
OR	A0,S2,R0
JAL	70013020
OR	A1,S1,R0
BEQ	V0,R0,70007E0C
SW	V0,004C (S0)
LW	T8,0050 (S0)
ADDU	T9,T8,V0
SW	T9,0050 (S0)
LW	RA,002C (SP)
LW	S4,0028 (SP)
LW	S3,0024 (SP)
LW	S2,0020 (SP)
LW	S1,001C (SP)
LW	S0,0018 (SP)
JR	RA
ADDIU	SP,SP,0050

70007E80	8A80
ADDIU	SP,SP,FF30
SW	S8,0038 (SP)
SW	S7,0034 (SP)
SW	S5,002C (SP)
SW	S1,001C (SP)
ADDIU	T6,R0,0001
OR	S5,A1,R0
OR	S7,A0,R0
SW	RA,003C (SP)
SW	S6,0030 (SP)
SW	S4,0028 (SP)
SW	S3,0024 (SP)
SW	S2,0020 (SP)
SW	S0,0018 (SP)
SW	T6,0080 (SP)
SW	R0,007C (SP)
SW	R0,0074 (SP)
LW	S1,0078 (SP)
ADDIU	S8,R0,0001
LW	T7,0074 (SP)
BEQL	T7,R0,70007EF4
LW	S1,0004 (S5)
SW	S1,00A0 (SP)
LHU	T8,0000 (S5)
SH	T8,009C (SP)
LW	T9,0008 (S5)
ADDIU	S5,SP,009C
SW	T9,00A4 (SP)
LW	S1,0004 (S5)
LW	S2,0008 (S1)
BNE	S2,R0,70007F10
ADDIU	A0,SP,0072
JAL	70008AF0
ADDIU	A1,SP,0070
BEQ	R0,R0,7000891C
LW	RA,003C (SP)
//70007F10:
LW	T0,0000 (S1)
LW	S6,0004 (S2)
SW	T0,0074 (SP)
LHU	V1,0000 (S5)
SLTI	AT,V1,0101
BNE	AT,R0,70007F58
OR	V0,V1,R0
ADDIU	AT,R0,0200
BEQ	V0,AT,700088A8
ADDIU	AT,R0,0400
BEQ	V0,AT,70008388
ADDIU	AT,R0,0800
BEQ	V0,AT,70008690
ADDIU	AT,R0,1000
BEQL	V0,AT,7000838C
ADDIU	AT,R0,1000
BEQ	R0,R0,700088D8
ANDI	V0,V1,02D1
//70007F58:
SLTI	AT,V0,0041
BNE	AT,R0,70007F7C
ADDIU	AT,R0,0080
BEQ	V0,AT,70008890
ADDIU	AT,R0,0100
BEQL	V0,AT,7000854C
LBU	T6,003F (S1)
BEQ	R0,R0,700088D8
ANDI	V0,V1,02D1
//70007F7C:
SLTI	AT,V0,0011
BNE	AT,R0,70007F9C
ADDIU	T1,V0,FFFF
ADDIU	AT,R0,0040
BEQL	V0,AT,70008770
LBU	T9,003E (S1)
BEQ	R0,R0,700088D8
ANDI	V0,V1,02D1
//70007F9C:
SLTIU	AT,T1,0010
BEQ	AT,R0,700088D4
SLL	T1,T1,0x2
LUI	AT,8003
ADDU	AT,AT,T1
LW	T1,9160 (AT)	;T1=80029160+offset: p->handler
JR	T1
NOP
//70007FBC:
LBU	V0,003F (S1)
ADDIU	AT,R0,0005
LUI	T3,8002
BEQ	V0,AT,70007FD8
ADDIU	AT,R0,0004
BNEL	V0,AT,7000891C
LW	RA,003C (SP)
SH	R0,00CA (SP)
LBU	T2,0036 (S1)
SB	R0,00CC (SP)
LH	T3,43F4 (T3)
SH	T2,00C8 (SP)
LW	T4,0044 (S7)
ADDIU	A1,S1,000C
ADDIU	A2,SP,00C8
SLT	S0,T3,T4
XORI	S0,S0,0001
BEQ	S0,R0,70008018
NOP
LBU	V1,003E (S1)
ANDI	T5,V1,0010
BEQL	T5,R0,7000802C
LW	T6,007C (SP)
JAL	70013258
LW	A0,0038 (S7)
SW	V0,007C (SP)
LBU	V1,003E (S1)
LW	T6,007C (SP)
ADDIU	S3,S1,000C
ORI	T7,V1,0004
BNE	T6,R0,7000814C
OR	A1,S3,R0
ANDI	T7,V1,0012
BNE	T7,R0,70008054
ADDIU	T9,R0,0004
LW	T8,0038 (S1)
BLEZ	T8,7000807C
NOP
LW	T0,0038 (S1)
SB	T9,003F (S1)
ADDIU	A0,S7,0014
ADDIU	T1,T0,FFFF
SW	T1,0038 (S1)
OR	A1,S5,R0
JAL	70012EFC
ORI	A2,R0,8235
BEQ	R0,R0,7000891C
LW	RA,003C (SP)
BEQ	S0,R0,7000813C
LUI	V0,8002
LW	V0,43E8 (V0)
ADDIU	S4,SP,005C
ADDIU	S3,R0,0003
ADDIU	S2,R0,0003
LBU	V1,003E (V0)
ANDI	T2,V1,0012
BNE	T2,R0,700080F8
ANDI	T3,V1,0004
BEQ	T3,R0,700080F8
NOP
LBU	T4,003F (V0)
ADDIU	T5,R0,0080
ADDIU	A0,S7,0014
BEQ	S2,T4,700080F8
OR	A1,S4,R0
SH	T5,005C (SP)
SW	V0,0060 (SP)
SB	S3,003F (V0)
OR	S0,R0,R0
SW	V0,006C (SP)
JAL	70012EFC
ADDIU	A2,R0,03E8
LW	V0,006C (SP)
LW	A0,0038 (S7)
OR	A2,R0,R0
ADDIU	A3,R0,03E8
JAL	700133A0
ADDIU	A1,V0,000C
LW	V0,006C (SP)
BEQ	S0,R0,70008108
LW	V0,0004 (V0)
BNEL	V0,R0,70008098
LBU	V1,003E (V0)
BNE	S0,R0,7000812C
ADDIU	T6,R0,0002
SW	T6,0038 (S1)
ADDIU	A0,S7,0014
OR	A1,S5,R0
JAL	70012EFC
ADDIU	A2,R0,03E9
BEQ	R0,R0,7000891C
LW	RA,003C (SP)
JAL	70008948
OR	A0,S1,R0
BEQ	R0,R0,7000891C
LW	RA,003C (SP)
JAL	70008948
OR	A0,S1,R0
BEQ	R0,R0,7000891C
LW	RA,003C (SP)
SB	T7,003E (S1)
LW	A2,0008 (S2)
LW	A0,0038 (S7)
JAL	70013440
ADDIU	S4,S7,0014
ADDIU	T8,R0,0001
SB	T8,003F (S1)
LUI	T9,8002
LH	T9,43F4 (T9)
LUI	AT,8002
LUI	T3,8006
ADDIU	T0,T9,0001
SH	T0,43F4 (AT)
LW	V0,0000 (S2)
LH	T0,0034 (S1)
LBU	T2,000D (S2)
LBU	T9,000C (V0)
LW	T1,0000 (V0)
LBU	T4,0002 (S6)
MULTU	T9,T0
MTC1	T1,F4
ANDI	T5,T4,003F
ADDIU	AT,R0,3F01
LW	T3,3BA4 (T3)
SLL	T6,T5,0x1
CVT.S.W	F6,F4
ADDU	T7,T3,T6
LH	T8,0000 (T7)
LWC1	F8,002C (S1)
MFLO	T1
LWC1	F16,0028 (S1)
DIV.S	F10,F6,F8
MULTU	T1,T2
OR	A1,S3,R0
OR	A2,R0,R0
OR	A3,R0,R0
MFLO	T4
NOP
NOP
DIV	T4,AT
MFLO	T5
ADDIU	AT,R0,7FFF
DIV.S	F18,F10,F16
MULTU	T8,T5
MFLO	A0
NOP
NOP
DIV	A0,AT
TRUNC.W.S	F4,F18
MFLO	T3
ADDIU	A0,T3,FFFF
OR	V1,A0,R0
MFC1	S0,F4
BGEZ	A0,70008230
NOP
BEQ	R0,R0,70008230
OR	V1,R0,R0
LW	A0,0038 (S7)
JAL	700133A0
SW	V1,0090 (SP)
LW	V1,0090 (SP)
LW	A0,0038 (S7)
OR	A1,S3,R0
SLL	A2,V1,0x10
SRA	T6,A2,0x10
OR	A2,T6,R0
JAL	700133A0
OR	A3,S0,R0
LBU	T7,003C (S1)
LBU	T9,000C (S2)
OR	V0,R0,R0
ADDIU	A2,R0,007F
ADDU	V1,T7,T9
ADDIU	V1,V1,FFC0
BLEZ	V1,70008284
OR	A1,S3,R0
BEQ	R0,R0,70008284
OR	V0,V1,R0
SLTI	AT,V0,007F
BEQ	AT,R0,700082A8
NOP
BLEZ	V1,700082A0
OR	V0,R0,R0
BEQ	R0,R0,700082A8
ANDI	A2,V1,00FF
BEQ	R0,R0,700082A8
ANDI	A2,V0,00FF
JAL	700134D0
LW	A0,0038 (S7)
LWC1	F6,002C (S1)
LWC1	F8,0028 (S1)
LW	A0,0038 (S7)
OR	A1,S3,R0
MUL.S	F10,F6,F8
MFC1	A2,F10
JAL	70013560
NOP
LBU	T1,0003 (S6)
LBU	T0,003D (S1)
OR	A1,S3,R0
ANDI	T2,T1,000F
ADDU	V1,T0,T2
SLL	T4,V1,0x3
BGEZ	T4,700082F8
OR	V1,T4,R0
BEQ	R0,R0,700082FC
OR	V0,R0,R0
OR	V0,V1,R0
SLTI	AT,V0,0080
BNE	AT,R0,70008310
NOP
BEQ	R0,R0,70008324
ADDIU	V1,R0,007F
BGEZ	V1,70008320
OR	V0,V1,R0
BEQ	R0,R0,70008320
OR	V0,R0,R0
OR	V1,V0,R0
LW	A0,0038 (S7)
JAL	700135F0
ANDI	A2,V1,00FF
ADDIU	T8,R0,0040
SH	T8,00AC (SP)
SW	S1,00B0 (SP)
LW	T5,0000 (S2)
LWC1	F4,002C (S1)
LWC1	F8,0028 (S1)
LW	T3,0000 (T5)
OR	A0,S4,R0
ADDIU	A1,SP,00AC
MTC1	T3,F16
NOP
CVT.S.W	F18,F16
DIV.S	F6,F18,F4
DIV.S	F10,F6,F8
TRUNC.W.S	F16,F10
MFC1	A2,F16
JAL	70012EFC
NOP
LHU	V0,0000 (S5)
ANDI	T7,V0,02D1
BEQ	R0,R0,700088D8
OR	V0,T7,R0
ADDIU	AT,R0,1000
BNEL	V1,AT,700083A8
LBU	V0,003F (S1)
LBU	T9,003E (S1)
ANDI	T1,T9,0002
BEQ	T1,R0,70008474
NOP
LBU	V0,003F (S1)
ADDIU	S4,S7,0014
OR	A0,S4,R0
BEQ	V0,S8,700083D4
OR	A1,S1,R0
ADDIU	AT,R0,0004
BEQ	V0,AT,70008454
ADDIU	AT,R0,0005
BEQ	V0,AT,70008454
NOP
BEQ	R0,R0,70008464
ADDIU	AT,R0,0002
JAL	70008A30
ADDIU	A2,R0,0040
LW	T0,0000 (S2)
LWC1	F6,0028 (S1)
LWC1	F10,002C (S1)
LW	T2,0008 (T0)
LW	A0,0038 (S7)
ADDIU	A1,S1,000C
MTC1	T2,F18
OR	A2,R0,R0
CVT.S.W	F4,F18
DIV.S	F8,F4,F6
DIV.S	F16,F8,F10
TRUNC.W.S	F18,F16
MFC1	S0,F18
JAL	700133A0
OR	A3,S0,R0
BEQ	S0,R0,70008444
ADDIU	T8,R0,0080
SH	T8,00AC (SP)
SW	S1,00B0 (SP)
OR	A0,S4,R0
ADDIU	A1,SP,00AC
JAL	70012EFC
OR	A2,S0,R0
ADDIU	T5,R0,0002
BEQ	R0,R0,7000844C
SB	T5,003F (S1)
JAL	70008948
OR	A0,S1,R0
BEQ	R0,R0,70008460
LHU	V1,0000 (S5)
JAL	70008948
OR	A0,S1,R0
LHU	V1,0000 (S5)
ADDIU	AT,R0,0002
BNE	V1,AT,70008474
ADDIU	T3,R0,1000
SH	T3,0000 (S5)
ANDI	V1,T3,FFFF
BEQ	R0,R0,700088D8
ANDI	V0,V1,02D1
LBU	T7,003F (S1)
LW	T6,0008 (S5)
ADDIU	A1,S1,000C
BNE	S8,T7,700084E0
SB	T6,003C (S1)
LBU	T1,000C (S2)
ANDI	T9,T6,00FF
OR	V0,R0,R0
ADDU	V1,T9,T1
ADDIU	V1,V1,FFC0
BLEZ	V1,700084B4
ADDIU	A2,R0,007F
BEQ	R0,R0,700084B4
OR	V0,V1,R0
SLTI	AT,V0,007F
BEQ	AT,R0,700084D8
NOP
BLEZ	V1,700084D0
OR	V0,R0,R0
BEQ	R0,R0,700084D8
ANDI	A2,V1,00FF
BEQ	R0,R0,700084D8
ANDI	A2,V0,00FF
JAL	700134D0
LW	A0,0038 (S7)
LHU	V0,0000 (S5)
ANDI	T0,V0,02D1
BEQ	R0,R0,700088D8
OR	V0,T0,R0
LBU	T2,003F (S1)
LWC1	F4,0008 (S5)
BNE	S8,T2,70008538
SWC1	F4,002C (S1)
LWC1	F6,002C (S1)
LWC1	F8,0028 (S1)
LW	A0,0038 (S7)
ADDIU	A1,S1,000C
MUL.S	F10,F6,F8
MFC1	A2,F10
JAL	70013560
NOP
LBU	T4,003E (S1)
ANDI	T8,T4,0020
BEQL	T8,R0,7000853C
LHU	V0,0000 (S5)
JAL	700089C4
OR	A0,S1,R0
LHU	V0,0000 (S5)
ANDI	T5,V0,02D1
BEQ	R0,R0,700088D8
OR	V0,T5,R0
LBU	T6,003F (S1)
LW	T3,0008 (S5)
ADDIU	A1,S1,000C
BNE	S8,T6,700085B8
SB	T3,003D (S1)
LBU	T9,0003 (S6)
ANDI	T7,T3,00FF
ANDI	T1,T9,000F
ADDU	V1,T7,T1
SLL	T0,V1,0x3
BGEZ	T0,70008580
OR	V1,T0,R0
BEQ	R0,R0,70008584
OR	V0,R0,R0
OR	V0,V1,R0
SLTI	AT,V0,0080
BNE	AT,R0,70008598
NOP
BEQ	R0,R0,700085AC
ADDIU	V1,R0,007F
BGEZ	V1,700085A8
OR	V0,V1,R0
BEQ	R0,R0,700085A8
OR	V0,R0,R0
OR	V1,V0,R0
LW	A0,0038 (S7)
JAL	700135F0
ANDI	A2,V1,00FF
LHU	V0,0000 (S5)
ANDI	T2,V0,02D1
BEQ	R0,R0,700088D8
OR	V0,T2,R0
LBU	T8,003F (S1)
LW	T4,0008 (S5)
ADDIU	A1,S1,000C
BNE	S8,T8,70008680
SH	T4,0034 (S1)
LW	T0,0000 (S2)
LH	T4,0034 (S1)
LBU	T3,0002 (S6)
LBU	T2,000D (T0)
ADDIU	AT,R0,3F01
ANDI	T6,T3,003F
MULTU	T2,T4
LBU	T3,000D (S2)
SLL	T9,T6,0x1
LUI	T5,8006
LW	T5,3BA4 (T5)
ADDIU	A3,R0,03E8
ADDU	T7,T5,T9
LH	T1,0000 (T7)
MFLO	T8
NOP
NOP
MULTU	T8,T3
MFLO	T6
NOP
NOP
DIV	T6,AT
MFLO	T5
ADDIU	AT,R0,7FFF
NOP
MULTU	T1,T5
MFLO	A0
NOP
NOP
DIV	A0,AT
MFLO	T9
ADDIU	A0,T9,FFFF
BGEZ	A0,7000866C
OR	V1,A0,R0
BEQ	R0,R0,7000866C
OR	V1,R0,R0
SLL	A2,V1,0x10
SRA	T7,A2,0x10
OR	A2,T7,R0
JAL	700133A0
LW	A0,0038 (S7)
LHU	V0,0000 (S5)
ANDI	T0,V0,02D1
BEQ	R0,R0,700088D8
OR	V0,T0,R0
LBU	T2,003F (S1)
ADDIU	A1,S1,000C
BNE	S8,T2,70008764
NOP
LW	V0,0000 (S2)
LH	T2,0034 (S1)
LBU	T8,000D (S2)
LBU	T0,000D (V0)
LW	T4,0008 (V0)
LBU	T6,0002 (S6)
MULTU	T0,T2
MTC1	T4,F16
ANDI	T1,T6,003F
ADDIU	AT,R0,3F01
LUI	T3,8006
LW	T3,3BA4 (T3)
SLL	T5,T1,0x1
CVT.S.W	F18,F16
ADDU	T9,T3,T5
LH	T7,0000 (T9)
MFLO	T4
LWC1	F4,0028 (S1)
LWC1	F8,002C (S1)
MULTU	T4,T8
DIV.S	F6,F18,F4
MFLO	T6
NOP
NOP
DIV	T6,AT
MFLO	T1
ADDIU	AT,R0,7FFF
DIV.S	F10,F6,F8
MULTU	T7,T1
MFLO	A0
NOP
NOP
DIV	A0,AT
TRUNC.W.S	F16,F10
MFLO	T3
ADDIU	A0,T3,FFFF
OR	V1,A0,R0
MFC1	S0,F16
BGEZ	A0,70008748
NOP
BEQ	R0,R0,70008748
OR	V1,R0,R0
SLL	A2,V1,0x10
SRA	T5,A2,0x10
OR	A2,T5,R0
LW	A0,0038 (S7)
JAL	700133A0
OR	A3,S0,R0
LHU	V1,0000 (S5)
BEQ	R0,R0,700088D8
ANDI	V0,V1,02D1
LBU	T9,003E (S1)
ANDI	T0,T9,0002
BNEL	T0,R0,70008884
LHU	V0,0000 (S5)
LW	V0,0000 (S2)
LH	T5,0034 (S1)
LBU	T0,000D (S2)
LBU	T3,000D (V0)
LBU	T4,0002 (S6)
ADDIU	AT,R0,3F01
MULTU	T3,T5
ANDI	T8,T4,003F
LUI	T2,8006
LW	T2,3BA4 (T2)
SLL	T6,T8,0x1
ADDIU	S4,S7,0014
ADDU	T7,T2,T6
LH	T1,0000 (T7)
MFLO	T9
NOP
NOP
MULTU	T9,T0
MFLO	T4
NOP
NOP
DIV	T4,AT
MFLO	T8
ADDIU	AT,R0,7FFF
NOP
MULTU	T1,T8
MFLO	A0
NOP
NOP
DIV	A0,AT
MFLO	T2
ADDIU	A0,T2,FFFF
BGEZ	A0,7000880C
OR	V1,A0,R0
BEQ	R0,R0,7000880C
OR	V1,R0,R0
LW	T6,0004 (V0)
LWC1	F6,0028 (S1)
LWC1	F10,002C (S1)
MTC1	T6,F18
SLL	A2,V1,0x10
SRA	T3,A2,0x10
CVT.S.W	F4,F18
OR	A2,T3,R0
LW	A0,0038 (S7)
ADDIU	A1,S1,000C
DIV.S	F8,F4,F6
DIV.S	F16,F8,F10
TRUNC.W.S	F18,F16
MFC1	S0,F18
JAL	700133A0
OR	A3,S0,R0
ADDIU	T5,R0,0002
SH	T5,00AC (SP)
SW	S1,00B0 (SP)
OR	A0,S4,R0
ADDIU	A1,SP,00AC
JAL	70012EFC
OR	A2,S0,R0
LBU	T9,003E (S1)
ANDI	T0,T9,0020
BEQL	T0,R0,70008884
LHU	V0,0000 (S5)
JAL	700089C4
OR	A0,S1,R0
LHU	V0,0000 (S5)
ANDI	T4,V0,02D1
BEQ	R0,R0,700088D8
OR	V0,T4,R0
JAL	70008948
OR	A0,S1,R0
LHU	V0,0000 (S5)
ANDI	T1,V0,02D1
BEQ	R0,R0,700088D8
OR	V0,T1,R0
LBU	T8,003E (S1)
ANDI	T2,T8,0010
BEQ	T2,R0,700088CC
NOP
LW	A0,000C (S5)
LH	A1,000A (S5)
JAL	70008E08	;sets sound effect A1 using instance A2 in buffer A0
LW	A2,0030 (S1)
LHU	V1,0000 (S5)
BEQ	R0,R0,700088D8
ANDI	V0,V1,02D1
ANDI	V0,V1,02D1
LW	V1,0074 (SP)
BEQ	V1,R0,700088F8
OR	S1,V1,R0
BNEL	V0,R0,700088FC
LW	T3,0080 (SP)
LBU	T6,003E (V1)
ANDI	T7,T6,0001
SW	T7,0080 (SP)
LW	T3,0080 (SP)
BNEL	T3,R0,7000891C
LW	RA,003C (SP)
BEQL	V1,R0,7000891C
LW	RA,003C (SP)
BEQL	V0,R0,70007ED0
LW	T7,0074 (SP)
SW	S1,0078 (SP)
LW	RA,003C (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
LW	S5,002C (SP)
LW	S6,0030 (SP)
LW	S7,0034 (SP)
LW	S8,0038 (SP)
JR	RA
ADDIU	SP,SP,00D0

70008948	9548
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
SW	A0,0020 (SP)
LBU	T7,003E (A0)
OR	T6,A0,R0
LUI	T9,8002
ANDI	T8,T7,0004
BEQ	T8,R0,70008994
NOP
LW	T9,43F0 (T9)
ADDIU	A1,T6,000C
LW	A0,0038 (T9)
JAL	70013690
SW	A1,001C (SP)
LUI	T0,8002
LW	T0,43F0 (T0)
LW	A1,001C (SP)
JAL	70013710
LW	A0,0038 (T0)
JAL	70008D04
LW	A0,0020 (SP)
LUI	A0,8002
LW	A0,43F0 (A0)
LW	A1,0020 (SP)
ORI	A2,R0,FFFF
JAL	70008A30
ADDIU	A0,A0,0014
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

700089C4	95C4
ADDIU	SP,SP,FFD0
SW	RA,0014 (SP)
LW	T6,0008 (A0)
OR	A3,A0,R0
LW	T7,0004 (T6)
LB	A0,0005 (T7)
JAL	700137C0
SW	A3,0030 (SP)
LW	A3,0030 (SP)
LUI	A0,8002
LW	A0,43F0 (A0)
LWC1	F4,002C (A3)
ADDIU	T8,R0,0010
SH	T8,0020 (SP)
MUL.S	F6,F0,F4
ADDIU	A1,SP,0020
ORI	A2,R0,8235
SW	A3,0024 (SP)
ADDIU	A0,A0,0014
SWC1	F6,001C (SP)
LW	T9,001C (SP)
JAL	70012EFC
SW	T9,0028 (SP)
LW	RA,0014 (SP)
ADDIU	SP,SP,0030
JR	RA
NOP

70008A30	9630
ADDIU	SP,SP,FFB8
SW	S2,0020 (SP)
OR	S2,A0,R0
SW	RA,002C (SP)
SW	S4,0028 (SP)
SW	S3,0024 (SP)
OR	S3,A1,R0
ANDI	S4,A2,FFFF
SW	S1,001C (SP)
SW	S0,0018 (SP)
SW	A2,0050 (SP)
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
ADDIU	A0,R0,0001
SW	V0,0030 (SP)
LW	S0,0008 (S2)
BEQ	S0,R0,70008AC8
NOP
LW	T6,0010 (S0)
LW	S1,0000 (S0)
BNE	S3,T6,70008AC0
NOP
LHU	T7,000C (S0)
AND	T8,T7,S4
BEQ	T8,R0,70008AC0
NOP
BEQ	S1,R0,70008AAC
NOP
LW	T9,0008 (S1)
LW	T0,0008 (S0)
ADDU	T1,T9,T0
SW	T1,0008 (S1)
JAL	7000EA90
OR	A0,S0,R0
OR	A0,S0,R0
JAL	7000EAC0
OR	A1,S2,R0
BNE	S1,R0,70008A74
OR	S0,S1,R0
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
LW	A0,0030 (SP)
LW	RA,002C (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
JR	RA
ADDIU	SP,SP,0048

70008AF0	96F0
LUI	T0,8002
ADDIU	T0,T0,43E4
LW	V0,0000 (T0)
SW	A0,0000 (SP)
LW	V1,0008 (T0)
LW	A2,0004 (T0)
BEQ	V0,R0,70008B24
OR	A3,R0,R0
LW	V0,0000 (V0)
ADDIU	A3,A3,0001
ANDI	T6,A3,FFFF
BNE	V0,R0,70008B10
OR	A3,T6,R0
BEQ	V1,R0,70008B40
OR	A0,R0,R0
LW	V1,0000 (V1)
ADDIU	A0,A0,0001
ANDI	T7,A0,FFFF
BNE	V1,R0,70008B2C
OR	A0,T7,R0
BEQ	A2,R0,70008B5C
OR	V1,R0,R0
LW	A2,0004 (A2)
ADDIU	V1,V1,0001
ANDI	T8,V1,FFFF
BNE	A2,R0,70008B48
OR	V1,T8,R0
LW	T9,0000 (SP)
OR	V0,V1,R0
SH	A0,0000 (T9)
JR	RA
SH	A3,0000 (A1)

70008B70	9770
	accepts: A0=sound data offset?, A1=sample address?
ADDIU	SP,SP,FFC8
LUI	V1,8002
ADDIU	V1,V1,43E4
SW	S0,0018 (SP)
LW	S0,0008 (V1)
SW	RA,001C (SP)
SW	A0,0038 (SP)
SW	A1,003C (SP)
BEQ	S0,R0,70008CF0
LW	A2,0004 (A1)
ADDIU	A0,R0,0001
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
SW	A2,0030 (SP)
SW	V0,0028 (SP)
LW	T7,0000 (S0)
LUI	V1,8002
ADDIU	V1,V1,43E4
OR	A0,S0,R0
JAL	7000EA90
SW	T7,0008 (V1)
LUI	V1,8002
ADDIU	V1,V1,43E4
LW	V0,0000 (V1)
LW	A2,0030 (SP)
BEQL	V0,R0,70008BF4
SW	R0,0004 (S0)
SW	V0,0000 (S0)
SW	R0,0004 (S0)
LW	T8,0000 (V1)
SW	S0,0004 (T8)
BEQ	R0,R0,70008C00
SW	S0,0000 (V1)
SW	R0,0004 (S0)
SW	R0,0000 (S0)
SW	S0,0000 (V1)
SW	S0,0004 (V1)
LW	A0,0028 (SP)
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
SW	A2,0030 (SP)
LW	A0,003C (SP)
LW	A2,0030 (SP)
LUI	AT,3F80
LW	T9,0000 (A0)
MTC1	AT,F4
ADDIU	T1,R0,0005
LW	V1,0004 (T9)
ADDIU	T2,R0,0002
SB	T1,003F (S0)
ADDIU	T0,V1,0001
SLTIU	T0,T0,0001
ADDIU	A1,T0,0040
SB	A1,0036 (S0)
SW	T2,0038 (S0)
SW	A0,0008 (S0)
SWC1	F4,002C (S0)
LBU	T3,0003 (A2)
SW	R0,0030 (S0)
ANDI	T5,T3,00F0
ANDI	T6,T5,0020
BEQ	T6,R0,70008C94
SB	T5,003E (S0)
LBU	A0,0004 (A2)
SW	A1,0024 (SP)
SLL	T7,A0,0x2
SUBU	T7,T7,A0
SLL	T7,T7,0x3
ADDU	T7,T7,A0
SLL	T7,T7,0x2
JAL	700137C0
ADDIU	A0,T7,E890
LW	A1,0024 (SP)
BEQ	R0,R0,70008CC8
SWC1	F0,0028 (S0)
LBU	T8,0004 (A2)
LB	T0,0005 (A2)
SW	A1,0024 (SP)
SLL	T9,T8,0x2
SUBU	T9,T9,T8
SLL	T9,T9,0x3
ADDU	T9,T9,T8
SLL	T9,T9,0x2
ADDU	A0,T9,T0
JAL	700137C0
ADDIU	A0,A0,E890
LW	A1,0024 (SP)
SWC1	F0,0028 (S0)
ADDIU	AT,R0,0040
BEQ	A1,AT,70008CE0
ADDIU	T3,R0,0040
LBU	T1,003E (S0)
ORI	T2,T1,0002
SB	T2,003E (S0)
ADDIU	T4,R0,7FFF
SB	R0,003D (S0)
SB	T3,003C (S0)
SH	T4,0034 (S0)
LW	RA,001C (SP)
OR	V0,S0,R0
LW	S0,0018 (SP)
JR	RA
ADDIU	SP,SP,0038

70008D04	9904
LUI	V0,8002
ADDIU	V0,V0,43E4
LW	T6,0000 (V0)
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
BNEL	A0,T6,70008D2C
LW	T8,0004 (V0)
LW	T7,0000 (A0)
SW	T7,0000 (V0)
LW	T8,0004 (V0)
BNE	A0,T8,70008D3C
NOP
LW	T9,0004 (A0)
SW	T9,0004 (V0)
JAL	7000EA90
SW	A0,0018 (SP)
LUI	V0,8002
ADDIU	V0,V0,43E4
LW	V1,0008 (V0)
LW	A0,0018 (SP)
BEQL	V1,R0,70008D78
SW	R0,0004 (A0)
SW	V1,0000 (A0)
SW	R0,0004 (A0)
LW	T0,0008 (V0)
SW	A0,0004 (T0)
BEQ	R0,R0,70008D80
SW	A0,0008 (V0)
SW	R0,0004 (A0)
SW	R0,0000 (A0)
SW	A0,0008 (V0)
LBU	T1,003E (A0)
LUI	V0,8002
ADDIU	V0,V0,43F4
ANDI	T2,T1,0004
BEQL	T2,R0,70008DA8
LW	V0,0030 (A0)
LH	T3,0000 (V0)
ADDIU	T4,T3,FFFF
SH	T4,0000 (V0)
LW	V0,0030 (A0)
SB	R0,003F (A0)
BEQL	V0,R0,70008DCC
LW	RA,0014 (SP)
LW	T5,0000 (V0)
BNEL	A0,T5,70008DC8
SW	R0,0030 (A0)
SW	R0,0000 (V0)
SW	R0,0030 (A0)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70008DD8	99D8
	accepts: A0=p->SE buffer, A1=value
SW	A1,0004 (SP)
BEQ	A0,R0,70008DE8
ANDI	T6,A1,00FF
SB	T6,0036 (A0)
JR	RA
NOP

70008DF0	99F0	V0= TRUE if SE playing flag set [A0+0x3F]
	accepts: A0=p->SE buffer
BEQ	A0,R0,70008E00	;return if A0 NULL
OR	V0,R0,R0
JR	RA
LBU	V0,003F (A0)
//70008DE0:
JR	RA
NOP

70008E08	9A08	sets sound effect A1 using instance A2 in buffer A0
	accepts: A0=p->SE buffer, A1=effect#, A2=p->SE instance
	SE instance is as follows:
	0x0	4	p->SE entry
	0x4	4	target volume
	0x8	4	audible range (timer)
	0xC	4	initial volume
	0x10	4	p->preset emitting sound
	0x14	4	p->object emitting sound
ADDIU	SP,SP,FF80
LUI	T7,8002
LB	T7,43F8 (T7)	;T7=800243F8: nonzero if sound can't be played
SW	S1,001C (SP)
SLL	S1,A1,0x10
SRA	T6,S1,0x10
SW	S8,0038 (SP)
SW	S7,0034 (SP)
SW	S4,0028 (SP)
OR	S8,A0,R0
OR	S1,T6,R0
SW	RA,003C (SP)
SW	S6,0030 (SP)
SW	S5,002C (SP)
SW	S3,0024 (SP)
SW	S2,0020 (SP)
SW	S0,0018 (SP)
SW	A1,0084 (SP)
SW	A2,0088 (SP)
OR	S7,R0,R0
SH	R0,006E (SP)
BEQ	T7,R0,70008E6C
OR	S4,R0,R0
BEQ	R0,R0,70008FF0	;return 0 if sound disabled
OR	V0,R0,R0
//70008E6C:
BNE	S1,R0,70008E7C
ADDIU	S6,SP,0050
BEQ	R0,R0,70008FF0
OR	V0,R0,R0
//70008E7C:
LUI	S5,8002
ADDIU	S5,S5,43F0
LW	S3,0064 (SP)
LW	T8,000C (S8)
SLL	T9,S1,0x2
OR	A0,S8,R0
ADDU	T0,T8,T9
LW	S2,000C (T0)
JAL	70008B70
OR	A1,S2,R0
BEQ	V0,R0,70008F48
OR	S0,V0,R0
LW	T1,0000 (S5)
ADDIU	T2,R0,0001
OR	A1,S6,R0
SW	V0,003C (T1)
SH	T2,0050 (SP)
SW	V0,0054 (SP)
LW	T3,0004 (S2)
LBU	T5,003E (V0)
LBU	S3,0001 (T3)
ANDI	T6,T5,0010
SLL	T4,S3,0x6
ADDU	T4,T4,S3
SLL	T4,T4,0x3
ADDU	T4,T4,S3
SLL	T4,T4,0x2
SUBU	T4,T4,S3
SLL	T4,T4,0x2
ADDU	T4,T4,S3
SLL	T4,T4,0x2
ADDU	T4,T4,S3
BEQ	T6,R0,70008F34
OR	S3,T4,R0
LBU	T7,003E (V0)
OR	A1,S6,R0
ADDIU	A2,S4,0001
ANDI	T8,T7,FFEF
SB	T8,003E (V0)
LW	A0,0000 (S5)
JAL	70012EFC
ADDIU	A0,A0,0014
ADDIU	T9,S3,0001
SW	T9,0068 (SP)
BEQ	R0,R0,70008F44
SH	S1,006E (SP)
LW	A0,0000 (S5)
ADDIU	A2,S3,0001
JAL	70012EFC
ADDIU	A0,A0,0014
OR	S7,S0,R0
LW	V0,0004 (S2)
ADDU	S4,S4,S3
LBU	T1,0002 (V0)
LBU	T0,0000 (V0)
ANDI	T2,T1,00C0
SLL	T3,T2,0x2
ADDU	S1,T0,T3
SLL	T4,S1,0x10
SRA	S1,T4,0x10
BEQ	S1,R0,70008F80
NOP
BNEL	S0,R0,70008E8C
LW	T8,000C (S8)
SW	S3,0064 (SP)
BEQL	S7,R0,70008FE0
LW	T4,0088 (SP)
LBU	T6,003E (S7)
ADDIU	T0,R0,0200
ADDIU	A1,SP,0040
ORI	T7,T6,0001
SB	T7,003E (S7)
LW	T8,0088 (SP)
ORI	T2,T7,0010
SW	T8,0030 (S7)
LH	T9,006E (SP)
BEQL	T9,R0,70008FE0
LW	T4,0088 (SP)
SB	T2,003E (S7)
LH	T3,006E (SP)
LW	A0,0000 (S5)
SH	T0,0040 (SP)
SW	S7,0044 (SP)
SW	S8,004C (SP)
LW	A2,0068 (SP)
SW	T3,0048 (SP)
JAL	70012EFC
ADDIU	A0,A0,0014
LW	T4,0088 (SP)
OR	V0,S7,R0
BEQ	T4,R0,70008FF0
NOP
SW	S7,0000 (T4)
LW	RA,003C (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
LW	S5,002C (SP)
LW	S6,0030 (SP)
LW	S7,0034 (SP)
LW	S8,0038 (SP)
JR	RA
ADDIU	SP,SP,0080

70009020	9C20	decativates sound effect
	accepts: A0=p->SE buffer
ADDIU	SP,SP,FFD8
ADDIU	T6,R0,0400
SW	RA,0014 (SP)
SH	T6,0018 (SP)
BEQ	A0,R0,7000905C
SW	A0,001C (SP)
LBU	T7,003E (A0)
ADDIU	A1,SP,0018
OR	A2,R0,R0
ANDI	T8,T7,FFEF
SB	T8,003E (A0)
LUI	A0,8002
LW	A0,43F0 (A0)
JAL	70012EFC
ADDIU	A0,A0,0014
LW	RA,0014 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

7000906C	9C6C
ADDIU	SP,SP,FFB0
SW	S2,0020 (SP)
ANDI	S2,A0,00FF
SW	RA,002C (SP)
SW	A0,0050 (SP)
SW	S4,0028 (SP)
SW	S3,0024 (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
ADDIU	A0,R0,0001
LUI	S0,8002
LW	S0,43E4 (S0)
SW	V0,004C (SP)
OR	S1,S2,R0
BEQ	S0,R0,700090FC
ADDIU	S4,SP,003C
LUI	S3,8002
ADDIU	S3,S3,43F0
ADDIU	S2,R0,FFEF
ADDIU	T6,R0,0400
SH	T6,003C (SP)
SW	S0,0040 (SP)
LBU	V0,003E (S0)
OR	A1,S4,R0
AND	T7,V0,S1
BNE	S1,T7,700090F0
AND	T8,V0,S2
SB	T8,003E (S0)
LW	A0,0000 (S3)
OR	A2,R0,R0
JAL	70012EFC
ADDIU	A0,A0,0014
LW	S0,0000 (S0)
BNEL	S0,R0,700090C0
ADDIU	T6,R0,0400
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
LW	A0,004C (SP)
LW	RA,002C (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
JR	RA
ADDIU	SP,SP,0050

70009124	9D24
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	7000906C
ADDIU	A0,R0,0001
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70009144	9D44
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	7000906C
ADDIU	A0,R0,0011
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70009164	9D64
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	7000906C
ADDIU	A0,R0,0003
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70009184	9D84
ADDIU	SP,SP,FFD8
SW	RA,0014 (SP)
SW	A1,002C (SP)
SH	A1,0018 (SP)
SW	A0,001C (SP)
BEQ	A0,R0,700091B8
SW	A2,0020 (SP)
LUI	A0,8002
LW	A0,43F0 (A0)
ADDIU	A1,SP,0018
OR	A2,R0,R0
JAL	70012EFC
ADDIU	A0,A0,0014
LW	RA,0014 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

700091C8	9DC8
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	70009264
OR	A0,R0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700091E8	9DE8
ADDIU	SP,SP,FFE0
SW	S1,0018 (SP)
SW	S0,0014 (SP)
ANDI	S1,A0,FFFF
SW	RA,001C (SP)
SW	A0,0020 (SP)
OR	S0,R0,R0
ANDI	A0,S0,00FF
JAL	70009284
ANDI	A1,S1,FFFF
ADDIU	S0,S0,0001
ANDI	T6,S0,00FF
SLTI	AT,T6,0007
BNE	AT,R0,70009204
OR	S0,T6,R0
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0020

70009238	9E38
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	AT,8002
JAL	700091C8
SWC1	F12,43FC (AT)
JAL	700091E8
ANDI	A0,V0,FFFF
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70009264	9E64
LUI	T7,8006
LW	T7,3BA8 (T7)
ANDI	T6,A0,00FF
SLL	T8,T6,0x1
SW	A0,0000 (SP)
ADDU	T9,T7,T8
JR	RA
LHU	V0,0000 (T9)

70009284	9E84
ADDIU	SP,SP,FFB8
LUI	T7,8006
LW	T7,3BA8 (T7)
SW	S3,0020 (SP)
ANDI	S3,A0,00FF
SW	S0,0014 (SP)
ANDI	T6,A1,FFFF
MTC1	T6,F4
LUI	S0,8002
SLL	V0,S3,0x1
SW	RA,0024 (SP)
SW	S2,001C (SP)
SW	S1,0018 (SP)
SW	A0,0048 (SP)
SW	A1,004C (SP)
LW	S0,43E4 (S0)
ADDU	T8,T7,V0
SH	T6,0000 (T8)
BGEZ	T6,700092E4
CVT.S.W	F6,F4
LUI	AT,4F80
MTC1	AT,F8
NOP
ADD.S	F6,F6,F8
LUI	AT,8002
LWC1	F10,43FC (AT)
LUI	T1,8006
LW	T1,3BA4 (T1)
MUL.S	F16,F6,F10
LUI	S1,8002
ADDU	T2,T1,V0
ADDIU	S1,S1,43F0
ADDIU	S2,SP,0030
TRUNC.W.S	F18,F16
MFC1	T0,F18
BEQ	S0,R0,70009364
SH	T0,0000 (T2)
LW	V0,0008 (S0)
BEQL	V0,R0,7000935C
LW	S0,0000 (S0)
LW	T3,0004 (V0)
ADDIU	T6,R0,0800
OR	A1,S2,R0
LBU	T4,0002 (T3)
OR	A2,R0,R0
ANDI	T5,T4,003F
BNEL	S3,T5,7000935C
LW	S0,0000 (S0)
LW	A0,0000 (S1)
SH	T6,0030 (SP)
SW	S0,0034 (SP)
JAL	70012EFC
ADDIU	A0,A0,0014
LW	S0,0000 (S0)
BNEL	S0,R0,7000931C
LW	V0,0008 (S0)
LW	RA,0024 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
JR	RA
ADDIU	SP,SP,0048

70009380	9F80	V0=p->debug.notice.list entry for memp_c_debug
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,8002
LUI	A1,8003
ADDIU	A1,A1,91A0	;A1=800291A0: "memp_c_debug"
JAL	70004E60	;V0=p->debug.notice.list entry for name A1 and data A0
ADDIU	A0,A0,4400	;A0=80024400
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700093AC	9FAC	initialize memory allocation table and set font and text bank sizes
	accepts: A0=p->buffer, A1=size
LUI	V0,8006
ADDIU	V0,V0,3BB0	;V0=80063BB0: mem.tbl
ADDIU	SP,SP,FFC0
ADDU	T7,A0,A1	;T7=buffer+size: p->end of buffer
LUI	T9,8002
SW	RA,0014 (SP)
SW	A1,0044 (SP)
SW	A0,0000 (V0)	;A0->mem.tbl.start: set buffer.start
SW	T7,0008 (V0)	;T7->mem.tbl.end: set buffer.end
ADDIU	T9,T9,4414	;T9=80024414: default allocations for each block
LW	AT,0000 (T9)
LW	T1,0004 (T9)
ADDIU	T8,SP,0020
SW	AT,0000 (T8)	;80024414+0 -> SP+20: mf.bank	[2]
SW	T1,0004 (T8)	;80024414+4 -> SP+24: mf.alloc	[0]
LW	T1,000C (T9)
LW	AT,0008 (T9)
LUI	A1,8003
SW	T1,000C (T8)	;80024414+C -> SP+2C: ml.alloc	[52]
SW	AT,0008 (T8)	;80024414+8 -> SP+28: ml.bank	[4]
LW	AT,0010 (T9)
LW	T1,0014 (T9)
ADDIU	A1,A1,91B0	;A1=800291B0: "-mf"
SW	AT,0010 (T8)	;80024414+10-> SP+30: me.bank	[6]
SW	T1,0014 (T8)	;80024414+14-> SP+34: me.alloc	[F]
LW	T1,001C (T9)
LW	AT,0018 (T9)
ADDIU	A0,R0,0001	;A0=1st instance
SW	T1,001C (T8)	;80024414+1C-> SP+3C: None.alloc	[0]
JAL	7000A6A0	;V0=p->A0th instance of token A1
SW	AT,0018 (T8)	;80024414+18-> SP+38: None.bank	[0]
BEQ	V0,R0,70009450
ADDIU	A0,R0,0001	;A0=1st instance
//70009430:	if "-mf" found, grab the allocation value
LUI	A1,8003
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A1,A1,91B4	;A1=800291B4: "-mf"
OR	A0,V0,R0	;A0=V0: p->value
OR	A1,R0,R0	;A1=NULL
JAL	7000A9E0	;V0=strtol(A0,A1,A2)
OR	A2,R0,R0	;A2=default base
SW	V0,0024 (SP)	;SP+24= mf.alloc
//70009450:	search for "-ml"
LUI	A1,8003
ADDIU	A1,A1,91B8	;A1=800291B8: "-ml"
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A0,R0,0001	;A0=1st instance
BEQ	V0,R0,70009488
ADDIU	A0,R0,0001	;A0=1st instance
//70009468:	if "-ml" found, grab the allocation value
LUI	A1,8003
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A1,A1,91BC	;A1=800291BC: "-ml"
OR	A0,V0,R0
OR	A1,R0,R0	;A1=NULL
JAL	7000A9E0	;V0=strtol(A0,A1,A2)
OR	A2,R0,R0	;A2=default base
SW	V0,002C (SP)	;SP+2C= ml.alloc
//70009488:	search for "-me"
LUI	A1,8003
ADDIU	A1,A1,91C0	;A1=800291C0: "-me"
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A0,R0,0001	;A0=1st instance
BEQ	V0,R0,700094C0
ADDIU	A0,R0,0001	;A0=1st instance
//700094A0:	if "-me" found, grab the allocation value
LUI	A1,8003
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A1,A1,91C4	;A1=800291C4: "-me"
OR	A0,V0,R0
OR	A1,R0,R0	;A1=NULL
JAL	7000A9E0	;V0=strtol(A0,A1,A2)
OR	A2,R0,R0	;A2=default base
SW	V0,0034 (SP)	;SP+34= me.alloc
//700094C0:	If me.alloc is zero...
LW	V1,0034 (SP)	;V1=me.alloc
LUI	T2,8005
BNE	V1,R0,700094FC	;if set, no correction needed
NOP
//700094D0:	...fry mf.alloc and select font/text bank size for current language...
LW	T2,84D0 (T2)	;T2=800484D0: language
SW	R0,0024 (SP)	;0->mf.alloc
ADDIU	V0,R0,0128
BEQ	T2,R0,700094EC	;if english (0), V0=128: fonttxtsize
LW	T3,0044 (SP)	;T3=A1 f/caller: size
BEQ	R0,R0,700094EC	;else V0=134: fonttxtsize
ADDIU	V0,R0,0134
//700094EC:	...then set ml.alloc and me.alloc
SLL	V1,V0,0xA	;V1=fonttxtsize<<A
SUBU	T4,T3,V1	;T4=size - fonttxtsize
SW	T4,002C (SP)	;update ml.alloc
SW	V1,0034 (SP)	;update me.alloc
//700094FC:	then fill in the table
JAL	70009514	;initialize allocations using table A0
ADDIU	A0,SP,0020	;A0=SP+20: allocation sizes
LW	RA,0014 (SP)
ADDIU	SP,SP,0040
JR	RA
NOP

70009514	A114	initialize allocations using table A0
	accepts: A0=p->allocation sizes
	tf	mf	tl	ml	te	me
	Couplets: 0x0 is bank#, 0x4 size.  List ends with bank 0.
ADDIU	SP,SP,FF80
LUI	T6,8002
SW	RA,0024 (SP)
SW	S3,0020 (SP)
SW	S2,001C (SP)
SW	S1,0018 (SP)
SW	S0,0014 (SP)
ADDIU	T6,T6,4434	;T6=80024434: default tbl.tmp values
LW	AT,0000 (T6)
ADDIU	S2,SP,0060	;S2=SP+60: tbl.tmp
LUI	S3,8006
SW	AT,0000 (S2)	;80024434+0 -> SP+60
LW	T9,0004 (T6)
OR	V0,A0,R0	;V0=A0: p->allocations
ADDIU	S3,S3,3BB0	;S3=80063BB0: mem.tbl
SW	T9,0004 (S2)	;80024434+4 -> SP+64
LW	AT,0008 (T6)
ADDIU	S0,SP,0060	;S0=SP+60: tbl.tmp.start
ADDIU	S1,SP,007C	;S1=SP+7C: tbl.tmp.end
SW	AT,0008 (S2)	;80024434+8 -> SP+68
LW	T9,000C (T6)
SW	T9,000C (S2)	;80024434+C -> SP+6C
LW	AT,0010 (T6)
SW	AT,0010 (S2)	;80024434+10-> SP+70
LW	T9,0014 (T6)
SW	T9,0014 (S2)	;80024434+14-> SP+74
LW	AT,0018 (T6)
SW	AT,0018 (S2)	;80024434+18-> SP+78
LW	V1,0000 (A0)	;V1=tbl+0: bank#
//70009588:	fill tbl.tmp with each couplet
LW	T0,0004 (V0)	;T0=tbl+4: size
SLL	T1,V1,0x2	;T1= tbl+0->offset
ADDU	T2,S2,T1
SW	T0,0000 (T2)	;mf.alloc->tbl.tmp[tbl+0]
LW	V1,0008 (V0)	;V1=tbl+8: bank#
ADDIU	V0,V0,0008	;V0+=8
BNEL	V1,R0,7000958C
LW	T0,0004 (V0)	;T0=size
//700095A8:	change list of sizes into list of offsets
LW	V1,0000 (S0)	;V1=size
ADDIU	A0,SP,0078	;A0=SP+78: penultimate entry
//700095B0:	iterate table
LW	T4,0004 (S0)	;T4=next size
ADDIU	S0,S0,0004	;S0+=4	next entry
SLTU	AT,S0,A0
ADDU	V0,T4,V1	;V0=next size + running total
OR	V1,V0,R0	;V1=running total
BNE	AT,R0,700095B0	;loop until end of table
SW	V0,0000 (S0)	;update in-place
//700095CC:	turn it into a DW list
LW	T5,0008 (S3)	;T5=mem.tbl+8: buffer.end
LW	T8,0000 (S3)	;T8=mem.tbl+0: buffer.start
LW	V0,0078 (SP)	;SP+78= offset to bank6, which is total allocation size
ADDIU	S0,SP,0060	;S0=SP+60: tbl.tmp
SUBU	V1,T5,T8	;V1=end-start: buffer.sz
SRA	T6,V1,0x1F
SRA	T0,V0,0x1F
SW	T0,0030 (SP)	;SP+30= sign of alloc.sz
SW	T6,0038 (SP)	;SP+38= sign of buffer.sz
SW	V1,003C (SP)	;SP+3C= buffer.sz
SW	V0,0034 (SP)	;SP+34= alloc.sz
//700095F8:	update tmp.tbl with the percentage of memory each will be allocated
LW	A1,0000 (S0)	;A1=tbl.tmp+n: alloc.cur
LW	A2,0038 (SP)	;A2= sign of buffer.sz
LW	A3,003C (SP)	;A3= buffer.sz
JAL	7000EDA8	;(V0,V1) = (A0,A1) * (A2,A3)
SRA	A0,A1,0x1F	;A0= sign of alloc.cur
OR	A0,V0,R0
OR	A1,V1,R0	;A1=V1: alloc.cur * buffer.sz
LW	A2,0030 (SP)	;A2=sign of alloc.sz
JAL	7000ED4C	;(V0,V1) = (A0,A1) / (A2,A3) [signed division]
LW	A3,0034 (SP)	;A3= alloc.sz
ADDIU	S0,S0,0004	;S0+=4
SLTU	AT,S0,S1
BNE	AT,R0,700095F8	;loop for each entry
SW	V1,FFFC (S0)	;update alloc cur: alloc.cur * buffer.sz / alloc.sz
//70009630:
ADDIU	S0,SP,0060	;S0=SP+60: tbl.tmp.start
ADDIU	V0,SP,007C	;V0=SP+7C: tbl.tmp.end
//70009638:	All blocks should be quad aligned!
LW	T3,0000 (S0)
ADDIU	S0,S0,0004	;S0+=4	next entry
SLTU	AT,S0,V0
ORI	T4,T3,000F
XORI	T5,T4,000F
BNE	AT,R0,70009638	;loop for each entry
SW	T5,FFFC (S0)	;tmp.tmp.cur &= ~F
//70009654:	sets only the first two entries as banks 1&2
LW	A2,0000 (S3)	;A2=mem.tbl+0: buffer.start
LW	T8,0060 (SP)	;T8=tmp.tbl.bnk1
LW	T7,0064 (SP)
LUI	AT,8006
ADDU	T6,T8,A2	;T6=bank1 offset + buffer.start
SW	T6,3BC0 (AT)	;T6->80063BC0: mem.bank1.start
SW	R0,3BC4 (AT)	;0 ->80063BC4: mem.bank1.???
LUI	AT,8006
ADDU	V0,T7,A2	;V0=bank2 offset + buffer.start
SW	V0,3BC8 (AT)	;V0->80063BC8: mem.bank1.end
LW	T0,0068 (SP)
LUI	AT,8006
SW	V0,3BD0 (AT)	;V0->80063BD0: mem.bank2.start
SW	R0,3BD4 (AT)	;0 ->80063BD4: mem.bank2.???
LUI	AT,8006
ADDU	T1,T0,A2	;T1=bank3 offset + buffer.start
SW	T1,3BD8 (AT)	;T1->80063BD8: mem.bank2.end
//70009698:	set remaining entries
ADDIU	A3,R0,0002
SLL	T9,A3,0x4	;T9=2<<4: 20
ADDU	V0,S3,T9	;V0=mem.tbl + bank3 offset
SLL	T2,A3,0x2
ADDU	S0,S2,T2	;S0=tbl.tmp + 8: offset to entries for banks 3+
LW	T8,0008 (S0)
LW	T6,000C (S0)
LW	T5,0004 (S0)
LW	T7,0010 (S0)
LW	T3,0000 (S0)
ADDU	A0,T8,A2	;A0=bank5 offset + buffer.start
ADDU	A1,T6,A2	;A1=bank6 offset + buffer.start
ADDU	V1,T5,A2	;V1=bank4 offset + buffer.start
ADDU	T0,T7,A2	;T0=bank end offset + buffer.start
ADDU	T4,T3,A2	;T4=bank3 offset + buffer.start
SW	T0,0048 (V0)	;T0->80063C18: mem.bank6.end
SW	V1,0020 (V0)	;V1->80063BF0: mem.bank4.start
SW	A1,0038 (V0)	;A1->80063C08: mem.bank5.end
SW	A1,0040 (V0)	;A1->80063C10: mem.bank6.start
SW	A0,0028 (V0)	;A0->80063BF8: mem.bank4.end
SW	A0,0030 (V0)	;A0->80063C00: mem.bank5.start
SW	R0,0024 (V0)	;0 ->80063BF4: mem.bank4.???
SW	R0,0034 (V0)	;0 ->80063C04: mem.bank5.???
SW	R0,0044 (V0)	;0 ->80063C14: mem.bank6.???
SW	T4,0010 (V0)	;T4->80063BE0: mem.bank3.start
SW	R0,0014 (V0)	;0 ->80063BE4: mem.bank3.???
SW	V1,0018 (V0)	;V1->80063BE8: mem.bank3.end
LW	RA,0024 (SP)
LW	S3,0020 (SP)
LW	S2,001C (SP)
LW	S1,0018 (SP)
LW	S0,0014 (SP)
JR	RA
ADDIU	SP,SP,0080

70009720	A320	V0=p->A0 bytes of memory allocated in bank A1
	accepts: A0=size, A1=bank
ADDIU	SP,SP,FFE8
SW	A1,001C (SP)	;SP+1C=A1: bank#
ANDI	A3,A1,00FF	;A3=bank
LUI	A1,8006
LUI	T2,8002
ADDIU	T2,T2,4404	;T2=80024404: p->malloc.err
ADDIU	A1,A1,3BB0	;A1=80063BB0: mem.tbl
SW	RA,0014 (SP)
OR	A2,A0,R0	;A2=size
SLL	T8,A3,0x4	;T8=bank*10
//70009748:
ADDU	V1,A1,T8	;V1=80063BB0+offset: mem.bank#
LW	V0,0004 (V1)	;V0=bank+4: 
BNE	V0,R0,7000976C
OR	T0,V0,R0	;T0=V0: 
//70009758:	error: unable to allocate
ADDIU	T9,R0,0001
LUI	AT,8002
SW	T9,4404 (AT)	;1->80024404: unable to allocate
//70009764:	infinite loop!
BEQ	R0,R0,70009764
NOP
//7000976C:
LW	A0,0008 (V1)	;A0=bank+8: 
ADDU	T5,V0,A2
SLTU	AT,A0,V0
BEQL	AT,R0,70009794
SLTU	AT,A0,T5
JAL	700098F0	;V0=7; loop 6 times needlessly
ADDIU	A3,R0,0006
//70009788:
BEQ	R0,R0,70009788
NOP
//70009790:
SLTU	AT,A0,T5
BEQL	AT,R0,700097E8
ADDU	T5,V0,A2
LW	T7,0064 (A1)
LW	T6,0068 (A1)
ADDIU	A3,R0,0006
ADDU	T8,T7,A2
SLTU	AT,T6,T8
BNE	AT,R0,700097D4
NOP
LW	V0,0000 (T2)
ADDIU	T9,R0,0001
SW	T9,0000 (T2)
BNEL	V0,R0,70009748
SLL	T8,A3,0x4
BEQ	R0,R0,70009748
SLL	T8,A3,0x4
//700097D4:
JAL	700098F0	;V0=7; loop 6 times needlessly
NOP
//700097DC:
BEQ	R0,R0,700097DC
NOP
//700097E4:
ADDU	T5,V0,A2
SW	T5,0004 (V1)
SW	T0,000C (V1)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
OR	V0,T0,R0
JR	RA
NOP

70009804	A404	???; updates bank A2 size registry in light of entry at A0 of size A1
	accepts: A0=p->allocated data, A1=size of data, A2=bank#
LUI	T7,8002
LW	T7,4404 (T7)	;T7=80024404: 
ADDIU	SP,SP,FFE8
SW	A2,0020 (SP)
ANDI	T6,A2,00FF
OR	A2,T6,R0	;A2->byte
SW	RA,0014 (SP)
SW	A1,001C (SP)
BEQ	T7,R0,70009840	;skip if not set
OR	A3,A0,R0	;A3=A0: p->data
LUI	T8,8006
LW	T8,3C1C (T8)	;T8=80063C1C: 
BNE	A0,T8,70009840
NOP
ADDIU	A2,R0,0006	;default to bank 6
//70009840:
LUI	T2,8006
ADDIU	T2,T2,3BB0
SLL	T9,A2,0x4
ADDU	A1,T9,T2	;A1=80063BB0 + (bank*10): offset to bank A2
LW	A0,0004 (A1)	;A0=mem+4: cur.start
BNEL	A0,R0,70009868	;skip if set
LW	A2,000C (A1)
//7000985C:	infinite loop!
BEQ	R0,R0,7000985C
NOP
//70009864:
LW	A2,000C (A1)	;A2=mem+C: 
LW	T3,001C (SP)
BEQL	A3,A2,70009880	;branch if matches A0 f/caller
SUBU	V0,A0,A2
BEQ	R0,R0,700098E0	;return 2: no match
ADDIU	V0,R0,0002
//7000987C:
SUBU	V0,A0,A2	;V0= cur.start - cur.end(?)
SUBU	V1,T3,V0	;V1= size of data - size of resource
BGTZ	V1,70009898	;if zero, return 1
ADDU	T4,A0,V1	;T4= cur.start + difference
SW	T4,0004 (A1)	;update cur.start
BEQ	R0,R0,700098E0	;return 1: match
ADDIU	V0,R0,0001
//70009898:
LW	V0,0008 (A1)	;V0=mem+8: bank.end
ADDU	T5,A0,V1	;T5=cur.start + difference
SLTU	AT,V0,A0
BEQL	AT,R0,700098C0	;go infinite if cur.start > bank.end
SLTU	AT,V0,T5
JAL	700098F0	;V0=7; loop 6 times needlessly
ADDIU	A2,R0,0006
//700098B4:	infinite loop!
BEQ	R0,R0,700098B4
NOP
//700098BC:
SLTU	AT,V0,T5
BEQ	AT,R0,700098D8	;go infinite if (cur.start+difference) > bank.end
ADDU	T6,A0,V1
JAL	700098F0	;V0=7; loop 6 times needlessly
ADDIU	A2,R0,0006
//700098D0:	infinite loop!
BEQ	R0,R0,700098D0
NOP
//700098D8:	return 1 and update cur.start
SW	T6,0004 (A1)	;cur.start += difference
ADDIU	V0,R0,0001
//700098E0:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700098F0	A4F0	V0=7; loop 6 times with no apparent purpose; originally a mem table method
ADDIU	V0,R0,0001
ADDIU	V0,V0,0001
ANDI	T6,V0,00FF
SLTI	AT,T6,0007
BNE	AT,R0,700098F4	;loop 6 times, for apparently no reason
OR	V0,T6,R0
JR	RA
NOP

70009910	A510	V0= total allocated size of bank A0
	accepts: A0=bank#
LUI	T7,8002
LW	T7,4404 (T7)	;T7=80024404: 
SW	A0,0000 (SP)
ANDI	T6,A0,00FF
BEQ	T7,R0,7000992C	;if not set, use default bank (6)
OR	A0,T6,R0
ADDIU	A0,R0,0006
//7000992C:	if bank 4, make sure it's filled
ADDIU	AT,R0,0004
BNE	A0,AT,70009950	;if not bank 4, skip
LUI	A1,8006
ADDIU	A1,A1,3BB0
LW	T8,0040 (A1)	;T8=bank4+0: start of bank
LW	T9,0048 (A1)	;T9=bank4+8: end of bank
BNE	T8,T9,70009950	;if same, use default bank (6)
NOP
ADDIU	A0,R0,0006
//70009950:	retrieve total used by bank
LUI	A1,8006
ADDIU	A1,A1,3BB0
SLL	T0,A0,0x4
ADDU	V1,A1,T0	;V1=80063BB0 + (bank * 10): offset to bank# A0
LW	T1,0008 (V1)	;T1=mem+8: end of bank
LW	T2,0004 (V1)	;T2=mem+4: start of cur.entry
JR	RA
SUBU	V0,T1,T2	;V0= total allocated in bank A0

70009970	A570	allocate A0 coded #bytes in bank
	accepts: A0=size/bank# entry (ssssssss ssssssss sssssssss sssssbbb)
ADDIU	SP,SP,FFE8
OR	A1,A0,R0
SW	RA,0014 (SP)
ANDI	T6,A1,0007
OR	A1,T6,R0	;A1= A0&7: bank#
JAL	70009720	;V0=p->A0 bytes of memory allocated in bank A1
SRL	A0,A0,0x3	;A0>>=3: size
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000999C	A59C	reset memory bank A0
	accepts: A0=bank#
ANDI	T6,A0,00FF
LUI	T8,8006
ADDIU	T8,T8,3BB0
SLL	T7,T6,0x4	;T7=bank#*10: bank->offset
ADDU	V0,T7,T8	;V0=80063BB0+offset: mem.bank#
LW	T9,0000 (V0)	;T9=mem.bank#.start
SW	A0,0000 (SP)
SW	R0,000C (V0)	;0->mem.bank#.???
JR	RA
SW	T9,0004 (V0)	;mem.bank#.start -> mem.bank#.???

700099C4	A5C4	
	accepts: A0=bank#
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	700098F0	;V0=7; loop 6 times needlessly
SW	A0,0018 (SP)
LBU	T6,001B (SP)	;T6=bank#
LUI	T8,8006
ADDIU	T8,T8,3BB0
SLL	T7,T6,0x4	;T7=bank#->offset
ADDU	V0,T7,T8	;V0=80063BB0+offset: mem.bank#
LW	T9,0004 (V0)	;T9=mem.bank#.???
BEQL	T9,R0,700099FC	;skip if NULL
LW	RA,0014 (SP)
SW	R0,0004 (V0)	;0->mem.bank#.???
//700099F8:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70009A10	A610	swap allocation entries at A0 and A1; may also be used to swap doublewords
	accepts: A0=p->DW1, A1=p->DW2
LW	T6,0000 (A1)
LW	V0,0000 (A0)
LW	V1,0004 (A0)
SW	T6,0000 (A0)
LW	T7,0004 (A1)
SW	T7,0004 (A0)
SW	V0,0000 (A1)
JR	RA
SW	V1,0004 (A1)

70009A34	A634	merge allocation entry A1 with A0; deletes A1
	accepts: A0=alloc.parent, A1=alloc.child
LW	T6,0004 (A0)
LW	T7,0004 (A1)
ADDU	T8,T6,T7
SW	T8,0004 (A0)
SW	R0,0000 (A1)
JR	RA
SW	R0,0004 (A1)

70009A50	A650	merge and sort entries in memory allocation table A0
	accepts: A0=p->allocation table
ADDIU	SP,SP,FFD0
SW	S4,0028 (SP)
SW	S0,0018 (SP)
ADDIU	S0,A0,0010
ADDIU	S4,A0,0FE8
SW	S3,0024 (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
SLTU	AT,S4,S0
SW	RA,002C (SP)
OR	S3,R0,R0
ADDIU	S1,A0,0008
BNE	AT,R0,70009AF4
OR	S2,R0,R0
LW	T6,0004 (S0)
BEQL	T6,R0,70009AE8
ADDIU	S0,S0,0008
LW	V0,0000 (S0)
OR	A0,S0,R0
SLTU	AT,V0,S2
BEQL	AT,R0,70009AB8
LW	T7,0004 (S1)
JAL	70009A10	;swap allocation entries at A0 and A1
OR	A1,S1,R0
LW	V0,0000 (S0)
LW	T7,0004 (S1)
OR	A0,S1,R0
OR	A1,S0,R0
ADDU	T8,T7,S2
BNEL	V0,T8,70009AE0
OR	S1,S0,R0
JAL	70009A34	;merge allocation entry A1 with A0
ADDIU	S3,R0,0001
OR	S0,S1,R0
LW	V0,0000 (S1)
OR	S1,S0,R0
OR	S2,V0,R0
ADDIU	S0,S0,0008
SLTU	AT,S4,S0
BEQL	AT,R0,70009A8C
LW	T6,0004 (S0)
LW	RA,002C (SP)
OR	V0,S3,R0
LW	S3,0024 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S4,0028 (SP)
JR	RA
ADDIU	SP,SP,0030

70009B18	A718	merge and sort default memory allocation table until at its most efficient
ADDIU	SP,SP,FFE0
SW	S0,0018 (SP)
LUI	S0,8006
ADDIU	S0,S0,3C28	;S0=80063C28: memory allocation table
SW	RA,001C (SP)
JAL	70009A50	;merge and sort entries in memory allocation table A0
OR	A0,S0,R0	;A0=S0
BEQL	V0,R0,70009B50	;branch if table wasn't altered
LW	RA,001C (SP)
//70009B3C:	loop until static
JAL	70009A50	;merge and sort entries in memory allocation table A0
OR	A0,S0,R0
BNE	V0,R0,70009B3C
NOP
//70009B4C:	return
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

70009B60	A760
ADDIU	SP,SP,FFD8
SW	S2,001C (SP)
SW	S3,0020 (SP)
SW	S1,0018 (SP)
SW	S0,0014 (SP)
ADDIU	S2,A0,0010
SW	RA,0024 (SP)
OR	S0,S2,R0
ADDIU	S1,A0,0FE8
OR	S3,R0,R0
SLTU	AT,S1,S2
BNEL	AT,R0,70009C10
ADDIU	S3,S3,0001
LW	A0,0004 (S0)
ADDIU	A1,S0,0008
BNEL	A0,R0,70009BB0
LW	V0,0008 (S0)
BEQ	R0,R0,70009C58
OR	V0,S0,R0
LW	V0,0008 (S0)
LW	V1,0000 (S0)
SLTU	AT,V0,V1
BEQL	AT,R0,70009BD8
ADDU	T6,V1,A0
JAL	70009A10	;swap allocation entries at A0 and A1
OR	A0,S0,R0
LW	A0,0004 (S0)
LW	V0,0008 (S0)
LW	V1,0000 (S0)
ADDU	T6,V1,A0
BNE	V0,T6,70009BFC
ADDIU	A1,S0,0008
LW	T7,000C (S0)
SW	R0,0008 (S0)
SW	R0,000C (S0)
ADDU	T8,A0,T7
SW	T8,0004 (S0)
BEQ	R0,R0,70009C58
OR	V0,A1,R0
SLTU	AT,S1,A1
BEQ	AT,R0,70009B94
OR	S0,A1,R0
OR	S0,S2,R0
ADDIU	S3,S3,0001
SLTI	AT,S3,01FC
BNEL	AT,R0,70009B8C
SLTU	AT,S1,S2
SLTU	AT,S1,S2
ADDIU	V0,R0,FFFF
BNE	AT,R0,70009C54
OR	V1,S2,R0
LW	A0,0004 (S0)
SLTU	AT,A0,V0
BEQL	AT,R0,70009C48
ADDIU	S0,S0,0008
OR	V1,S0,R0
OR	V0,A0,R0
ADDIU	S0,S0,0008
SLTU	AT,S1,S0
BEQL	AT,R0,70009C30
LW	A0,0004 (S0)
OR	V0,V1,R0
LW	RA,0024 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
JR	RA
ADDIU	SP,SP,0028

70009C74	A874
LUI	T7,8006
LW	T7,3C20 (T7)
LUI	T1,8006
LW	T1,3C24 (T1)
SUBU	T8,A0,T7
SLL	T9,T8,0x7
SUBU	T9,T9,T8
SLL	T9,T9,0x2
DIV	T9,T1
MFLO	A2
LUI	T3,8006
ADDIU	T3,T3,3C28
SLL	T2,A2,0x3
ADDU	V0,T2,T3
LW	T0,0014 (V0)
ADDIU	SP,SP,FFE8
ADDIU	A3,V0,0010
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SW	A1,001C (SP)
OR	T6,A0,R0
BNE	T1,R0,70009CD4
NOP
BREAK	00001C00	;Break: division by zero
ADDIU	AT,R0,FFFF
BNE	T1,AT,70009CEC
LUI	AT,8000
BNE	T9,AT,70009CEC
NOP
BREAK	00001800
OR	V1,A3,R0
BEQL	T0,R0,70009D0C
LW	T5,0000 (V1)
LW	T4,000C (V1)
ADDIU	V1,V1,0008
BNEL	T4,R0,70009CFC
LW	T4,000C (V1)
LW	T5,0000 (V1)
ADDIU	AT,R0,FFFF
BNEL	T5,AT,70009D50
LW	T8,0018 (SP)
BEQ	T0,R0,70009D30
OR	V1,A3,R0
LW	T6,FFFC (V1)
ADDIU	V1,V1,FFF8
BNEL	T6,R0,70009D24
LW	T6,FFFC (V1)
LW	T7,0000 (V1)
LUI	A0,8006
BNEL	T7,R0,70009D50
LW	T8,0018 (SP)
JAL	70009B60
ADDIU	A0,A0,3C28
OR	V1,V0,R0
LW	T8,0018 (SP)
SW	T8,0000 (V1)
LW	T9,001C (SP)
SW	T9,0004 (V1)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70009D6C	A96C	V0=p->debug.notice.list entry for mema_c_debug
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,8002
LUI	A1,8003
ADDIU	A1,A1,91D0	;A1=800291D0: "mema_c_debug"
JAL	70004E60	;V0=p->debug.notice.list entry for name A1 and data A0
ADDIU	A0,A0,4450	;A0=80024450: 
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70009D98	A998	reinitialize allocated memory table with p->block A0 of size A1
	accepts: A0=p->allocated block, A1=size
LUI	V1,8006
ADDIU	V1,V1,3C28	;V1=80063C28
ADDIU	A2,R0,FFFF
SW	A2,0FF0 (V1)	;-1-> 80064C18
SW	A2,0FF8 (V1)	;-1-> 80064C20
ADDIU	T6,R0,FFFF
LUI	A2,8006
LUI	V0,8006
SW	R0,0000 (V1)	;0 -> 80063C28
SW	R0,0004 (V1)	;0 -> 80063C2C
SW	R0,0008 (V1)	;0 -> 80063C30
SW	R0,000C (V1)	;0 -> 80063C34
SW	R0,0FF4 (V1)	;0 -> 80064C1C
SW	T6,0FFC (V1)	;-1-> 80064C24
ADDIU	V0,V0,3C38	;V0=80063C38: start
ADDIU	A2,A2,4C10	;A2=80064C10: end
//70009DD8:	blank entire memory segment
ADDIU	V0,V0,0008
SLTU	AT,A2,V0
SW	R0,FFF8 (V0)
BEQ	AT,R0,70009DD8
SW	R0,FFFC (V0)
//70009DEC:
LUI	V0,8006
LUI	A2,8006
ADDIU	A2,A2,3C24
ADDIU	V0,V0,3C20
SW	A0,0000 (V0)	;A0->80063C20
SW	A0,0010 (V1)	;A0->80063C38
SW	A1,0000 (A2)	;A1->80063C24
JR	RA
SW	A1,0014 (V1)	;A1->80063C3C

70009E10	AA10	merge and sort entries in default memory allocation table; redirects to 70009A50: A0=80063C28
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,8006
JAL	70009A50	;merge and sort entries in memory allocation table A0
ADDIU	A0,A0,3C28	;A0=80063C28: default memory allocation table
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70009E34	AA34	
ADDIU	SP,SP,FFD0
SW	S2,001C (SP)
SW	S1,0018 (SP)
OR	S2,A0,R0
SW	S5,0028 (SP)
SW	S0,0014 (SP)
LUI	S1,8006
SW	RA,002C (SP)
SW	S4,0024 (SP)
SW	S3,0020 (SP)
ADDIU	S1,S1,3C38
ADDIU	A0,R0,FFFF
OR	A1,R0,R0
OR	S0,R0,R0
ADDIU	S5,R0,FFFF
ADDIU	A2,R0,0010
LW	V1,0004 (S1)
ADDIU	S0,S0,0001
SLTU	AT,V1,S2
BNE	AT,R0,70009EBC
SUBU	V0,V1,S2
LW	T6,0000 (S1)
SLTU	AT,V0,A0
SRL	T7,S2,0x2
BEQ	S5,T6,70009EC4
NOP
BEQ	AT,R0,70009EBC
SLTIU	AT,V0,0040
OR	A0,V0,R0
BNE	AT,R0,70009EC4
OR	A1,S1,R0
SLTU	AT,V0,T7
BNE	AT,R0,70009EC4
NOP
BNE	S0,A2,70009E74
ADDIU	S1,S1,0008
BNEL	A1,R0,70009F64
LW	V1,0000 (A1)
LW	T8,0004 (S1)
OR	S0,R0,R0
ADDIU	S4,R0,0008
SLTU	AT,T8,S2
BEQ	AT,R0,70009EF8
LUI	S3,8006
LW	T9,000C (S1)
ADDIU	S1,S1,0008
SLTU	AT,T9,S2
BNEL	AT,R0,70009EE8
LW	T9,000C (S1)
LW	T0,0000 (S1)
ADDIU	S3,S3,3C28
BNEL	S5,T0,70009F60
OR	A1,S1,R0
LUI	S1,8006
ADDIU	S1,S1,3C38
JAL	70009A50	;merge and sort entries in memory allocation table A0
OR	A0,S3,R0	;A0=S3: 80063C28
ADDIU	S0,S0,0001
BNE	S0,S4,70009F10
NOP
LW	T1,0014 (S3)
SLTU	AT,T1,S2
BEQL	AT,R0,70009F4C
LW	T3,0000 (S1)
LW	T2,000C (S1)
ADDIU	S1,S1,0008
SLTU	AT,T2,S2
BNEL	AT,R0,70009F38
LW	T2,000C (S1)
LW	T3,0000 (S1)
BNEL	S5,T3,70009F60
OR	A1,S1,R0
BEQ	R0,R0,70009F84
OR	V0,R0,R0
OR	A1,S1,R0
LW	V1,0000 (A1)
LW	T5,0004 (A1)
ADDU	T4,V1,S2
SUBU	T6,T5,S2
SW	T4,0000 (A1)
BNE	T6,R0,70009F80
SW	T6,0004 (A1)
SW	R0,0000 (A1)
OR	V0,V1,R0
LW	RA,002C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
LW	S4,0024 (SP)
LW	S5,0028 (SP)
JR	RA
ADDIU	SP,SP,0030

70009FA8	ABF8	
LUI	T9,8006
LW	T9,3C38 (T9)
LUI	T8,8006
ADDIU	T2,R0,FFFF
ADDIU	T8,T8,3C38
OR	A3,A1,R0
BEQ	T2,T9,70009FF4
OR	V1,T8,R0
LW	A1,0000 (T8)
BNEL	A0,A1,70009FE8
LW	A1,0008 (V1)
LW	A2,0004 (V1)
SLTU	AT,A2,A3
BEQL	AT,R0,7000A000
ADDU	T3,A1,A3
LW	A1,0008 (V1)
ADDIU	V1,V1,0008
BNE	T2,A1,70009FCC
NOP
JR	RA
OR	V0,R0,R0
ADDU	T3,A1,A3
SUBU	T4,A2,A3
SW	T3,0000 (V1)
BNE	T4,R0,7000A014
SW	T4,0004 (V1)
SW	R0,0000 (V1)
OR	V0,A0,R0
JR	RA
NOP

7000A020	AC20	???; redirect to 70009C74
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	70009C74
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000A040	AC40	
LUI	V1,8006
LUI	V0,8006
ADDIU	V0,V0,4C08
ADDIU	V1,V1,3C28
ADDIU	V1,V1,0020
BNEL	V1,V0,7000A054
ADDIU	V1,V1,0020
JR	RA
NOP

7000A064	AC64	
LUI	T6,8006
LW	T6,3C38 (T6)
ADDIU	A2,R0,FFFF
LUI	A0,8006
OR	V0,R0,R0
OR	V1,R0,R0
BEQ	A2,T6,7000A0A8
ADDIU	A0,A0,3C38
LW	A1,0004 (A0)
SLTU	AT,V1,A1
BEQ	AT,R0,7000A098
ADDU	V0,V0,A1
OR	V1,A1,R0
LW	T7,0008 (A0)
ADDIU	A0,A0,0008
BNEL	A2,T7,7000A088
LW	A1,0004 (A0)
BNE	V0,R0,7000A0BC
SUBU	T8,V0,V1
MTC1	R0,F0
JR	RA
NOP
MTC1	T8,F4
MTC1	V0,F10
BGEZ	T8,7000A0DC
CVT.S.W	F6,F4
LUI	AT,4F80
MTC1	AT,F8
NOP
ADD.S	F6,F6,F8
BGEZ	V0,7000A0F4
CVT.S.W	F16,F10
LUI	AT,4F80
MTC1	AT,F18
NOP
ADD.S	F16,F16,F18
DIV.S	F0,F6,F16
JR	RA
NOP

7000A100	AD00	generate ordered list of 200 largest allocated blocks of memory
	note this list is set to SP+54, which is not printed and invalid on return...
ADDIU	SP,SP,EF98
LUI	A0,8006
LW	A0,3C38 (A0)	;A0=80063C38: p->first entry in allocation table
SW	S5,002C (SP)
SW	S0,0018 (SP)
ADDIU	S5,R0,FFFF	;S5= -1
SW	S2,0020 (SP)
LUI	S0,8006
SW	RA,003C (SP)
SW	S8,0038 (SP)
SW	S7,0034 (SP)
SW	S6,0030 (SP)
SW	S4,0028 (SP)
SW	S3,0024 (SP)
SW	S1,001C (SP)
//7000A13C:
LUI	V1,8000
OR	S2,R0,R0	;S2=0	linecount
ADDIU	S0,S0,3C38	;S0=80063C38
BEQ	S5,A0,7000A16C	;branch if first entry -1	-1=end of list
OR	V0,R0,R0	;V0=0	size=0
//7000A150:	loop for each entry
LW	T7,0008 (S0)	;T7=next entry+0: p->next block
LW	T6,0004 (S0)	;T6=entry+4: p->cur.size
ADDIU	S0,S0,0008	;S0+=8	p->next entry
BNE	S5,T7,7000A150	;loop until end of list
ADDU	V0,V0,T6	;V0+=size	total allocated size
LUI	S0,8006
ADDIU	S0,S0,3C38	;S0=80063C38
//7000A16C:	ready loop...
LUI	S8,8003
LUI	S6,8003
ADDIU	S1,SP,0054	;S1=SP+54: p->buffer
ADDIU	S6,S6,91E0	;S6=800291E0: "%d"
ADDIU	S8,S8,91E4	;S8=800291E4: "..."
OR	S3,R0,R0	;S3=0	largest allocated size
OR	S4,R0,R0	;S4=0
ADDIU	S7,R0,00C8	;S7=0xC8
//7000A18C:
BEQ	S5,A0,7000A1C4	;branch if no list
NOP
//7000A194:	loop to find largest allocation
LW	V0,0004 (S0)	;V0=entry+4: size
SLTU	AT,V0,V1	;TRUE if V0 < 0x80000000
BEQ	AT,R0,7000A1B4	;branch if size negative or pointer
SLTU	AT,S3,V0	;TRUE if largest < cur.size
BEQL	AT,R0,7000A1B8	;branch if largest entry smaller than this one
LW	T8,0008 (S0)
OR	S3,V0,R0	;S3=V0: largest allocation = cur.size
ADDIU	S4,S4,0001	;S4++	#entries labelled largest
//7000A1B4:	loop to grab largest size
LW	T8,0008 (S0)	;T8=next entry+0: p->block
ADDIU	S0,S0,0008	;S0+=8	next entry
BNEL	S5,T8,7000A198	;loop if not end of list
LW	V0,0004 (S0)
//7000A1C4:	append string with allocation values
BEQ	S4,R0,7000A250	;branch if first entry was largest
LUI	S0,8006
ADDIU	S0,S0,3C38	;S0=80063638
BEQ	S5,A0,7000A244	;branch if no valid entries
OR	S4,R0,R0	;S4=0
LW	V0,0004 (S0)	;V0=entry+4: size
SLTI	AT,S2,00C8	;TRUE if linecount < 0xC8: within screen bounds
BNEL	S3,V0,7000A228	;branch if not largest allocation
LW	T0,0008 (S0)
//7000A1E8:	largest allocation is displayed if more lines
BEQ	AT,R0,7000A20C	;branch if linecount larger than 0xC8
OR	A0,S1,R0	;A0=S1: p->buffer
ADDIU	A2,V0,0200	;A2=size+0x200: round up
SRL	T9,A2,0xA	;T9=size/0x400: #mem.segments
OR	A2,T9,R0	;A2=#memory segments
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A1,S6,R0	;A1=S6: 800291E0: "%d "
BEQ	R0,R0,7000A220
ADDU	S1,S1,V0	;S1+=V0: p->string+strlen	allows concatenation
//7000A20C:	S2=0xC8 displays etc when unable to display more (...)
BNE	S2,S7,7000A220	;branch if S2 isn't 0xC8
OR	A0,S1,R0	;A0=S1: p->buffer
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A1,S8,R0	;A1=S6: 800291E0: "..."
ADDU	S1,S1,V0	;S1+=V0: p->string+strlen	allows concatenation
//7000A220:	increment line count
ADDIU	S2,S2,0001	;S2++	linecount++
//7000A224:
LW	T0,0008 (S0)	;T0=next entry+0: p->block
ADDIU	S0,S0,0008	;S0+=8	next entry
BNEL	S5,T0,7000A1DC	;loop while entries still exist
LW	V0,0004 (S0)
//7000A234:	loop to print next largest allocated block
LUI	S0,8006
LUI	A0,8006
LW	A0,3C38 (A0)	;A0=80063C38: p->1st block
ADDIU	S0,S0,3C38	;S0=80063C38
OR	V1,S3,R0	;V1=S3: largest allocated size
BEQ	R0,R0,7000A18C
OR	S3,R0,R0	;S3=0	size=0
//7000A250:	if all lines can't be displayed, list the total entries
SLTI	AT,S2,00C9	;TRUE if linecount < 0xC9
BNE	AT,R0,7000A26C	;return if linecount okay
OR	A0,S1,R0	;A0=S1: p->string
LUI	A1,8003
ADDIU	A1,A1,91E8	;A1=800291E8: "[%d]"
JAL	7000AC94	;sprintf(A0,A1,A2,A3,...)
OR	A2,S2,R0	;A2=S2: linecount
//7000A26C:	return
LW	RA,003C (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
LW	S5,002C (SP)
LW	S6,0030 (SP)
LW	S7,0034 (SP)
LW	S8,0038 (SP)
JR	RA
ADDIU	SP,SP,1068

7000A29C	AE9C	debug memory table sort and merge function: generate list of allocated memory, sort and merge table, then generate a new list
ADDIU	SP,SP,FFD8
SW	RA,0024 (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
JAL	7000A100	;generate ordered list of allocated memory blocks
SW	S0,0018 (SP)
//7000A2B4:	sort allocation table A0
LUI	S1,8006
ADDIU	S1,S1,3C28	;S1=80063C28: table of memory allocations
OR	S0,R0,R0	;S0=0	count=0
ADDIU	S2,R0,01FC	;S2=1FC
//7000A2C4:	loop for each possible entry
JAL	70009A50	;merge and sort entries in memory allocation table A0
OR	A0,S1,R0	;A0=S1: p->allocation table
ADDIU	S0,S0,0001	;S0++	count++
BNE	S0,S2,7000A2C4	;loop 0x1FC times
NOP
//7000A2D8:
JAL	7000A100	;generate ordered list of allocated memory blocks
NOP
//7000A2E0:	return
LW	RA,0024 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
JR	RA
ADDIU	SP,SP,0028

7000A2F8	AEF8
ADDIU	SP,SP,FFD8
LUI	T7,8006
LW	T7,3C38 (T7)
SW	S3,0020 (SP)
LUI	T6,8006
ADDIU	S3,R0,FFFF
SW	S2,001C (SP)
SW	S0,0014 (SP)
ADDIU	T6,T6,3C38
OR	S2,A0,R0
SW	RA,0024 (SP)
SW	S1,0018 (SP)
BEQ	S3,T7,7000A354
OR	S0,T6,R0
LW	S1,0000 (T6)
LW	T8,0004 (S0)
OR	A1,S0,R0
JALR	RA,S2
ADDU	A0,S1,T8
LW	S1,0008 (S0)
ADDIU	S0,S0,0008
BNEL	S3,S1,7000A338
LW	T8,0004 (S0)
LW	RA,0024 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
JR	RA
ADDIU	SP,SP,0028

7000A370	AF70
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
JAL	70009B18	;merge and sort default memory allocation table until at its most efficient
SW	R0,0018 (SP)
LUI	T6,8006
LW	T6,3C38 (T6)
ADDIU	A1,R0,FFFF
LUI	V0,8006
LW	A0,0018 (SP)
BEQ	A1,T6,7000A3C0
ADDIU	V0,V0,3C38
LW	V1,0004 (V0)
SLTU	AT,A0,V1
BEQL	AT,R0,7000A3B4
LW	T7,0008 (V0)
OR	A0,V1,R0
LW	T7,0008 (V0)
ADDIU	V0,V0,0008
BNEL	A1,T7,7000A3A0
LW	V1,0004 (V0)
BEQ	A0,R0,7000A3D0
LW	RA,0014 (SP)
BEQ	R0,R0,7000A3D4
OR	V0,A0,R0
OR	V0,R0,R0
JR	RA
ADDIU	SP,SP,0020

7000A3DC	AFDC
ADDIU	SP,SP,FFE8
SLTU	AT,A1,A2
SW	RA,0014 (SP)
SW	A0,0018 (SP)
BEQ	AT,R0,7000A418
OR	A3,A1,R0
ADDU	A0,A0,A1
JAL	70009FA8
SUBU	A1,A2,A1
BNE	V0,R0,7000A410
NOP
BEQ	R0,R0,7000A434
OR	V0,R0,R0
BEQ	R0,R0,7000A434
ADDIU	V0,R0,0001
SLTU	AT,A2,A3
BEQ	AT,R0,7000A430
LW	T1,0018 (SP)
ADDU	A0,T1,A2
JAL	7000A020
SUBU	A1,A3,A2
ADDIU	V0,R0,0001
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000A450	B050	V0= random number
LUI	A0,8002
LD	A0,4460 (A0)	;A0=80024460: random seed
LUI	AT,8002
DSLL32	A2,A0,0x1F
DSLL	A1,A0,0x1F
DSRL	A2,A2,0x1F
DSRL32	A1,A1,0x0
DSLL32	A0,A0,0xC
OR	A2,A2,A1
DSRL32	A0,A0,0x0
XOR	A2,A2,A0
DSRL	A0,A2,0x14
ANDI	A0,A0,0FFF
XOR	A0,A0,A2
DSLL32	V0,A0,0x0
SD	A0,4460 (AT)	;update random
JR	RA
DSRA32	V0,V0,0x0

7000A498	B098	set random random number to A0+1
	accepts: A0= value
DADDIU	A0,A0,0001
LUI	AT,8002
SD	A0,4460 (AT)	;A0+1 -> 80024460
JR	RA
ADDIU	A0,R0,0000	;return 0: okay!

7000A4AC	B0AC	V0= rand num, using double at A0 as seed
	accepts: A0=p->seed
LD	A3,0000 (A0)
DSLL32	A2,A3,0x1F
DSLL	A1,A3,0x1F
DSRL	A2,A2,0x1F
DSRL32	A1,A1,0x0
DSLL32	A3,A3,0xC
OR	A2,A2,A1
DSRL32	A3,A3,0x0
XOR	A2,A2,A3
DSRL	A3,A2,0x14
ANDI	A3,A3,0FFF
XOR	A3,A3,A2
DSLL32	V0,A3,0x0
SD	A3,0000 (A0)
JR	RA
DSRA32	V0,V0,0x0

7000A4F0	B0F0	V0= strtok(A0,' '); returns V0= p->last character read in string
	accepts: A0=p->string
	Replaces spaces with NULLs, filling struct at 80024470 with results.
		80024470	#strings
		80024474	p->current substring#
		80024478	list of pointers to the start of each string
LUI	A1,8002
LUI	A2,8002
LUI	T6,8003
ADDIU	A2,A2,4470
ADDIU	A1,A1,4474
ADDIU	T6,T6,91F0
ADDIU	T7,R0,0001
SW	T6,0000 (A1)	;p->"[%d]" -> 80024474: set default p->str.cur
SW	T7,0000 (A2)	;1 -> 80024470: set default #strings
LBU	V0,0000 (A0)	;A0=next char from string
ADDIU	A3,R0,0020	;A3= b' '
BEQ	V0,R0,7000A584	;return if NULL
NOP
BNEL	A3,V0,7000A544	;skip if not a space
LW	V1,0000 (A2)
//7000A52C:	replace a run of spaces with NULLs
LBU	T8,0001 (A0)
SB	R0,0000 (A0)
ADDIU	A0,A0,0001
BEQL	A3,T8,7000A530
LBU	T8,0001 (A0)
//7000A540:	sets end of string as start of next
LW	V1,0000 (A2)	;V1=str.num
SLL	T9,V1,0x2	;str.num -> offset
ADDU	T0,A1,T9
SW	A0,0000 (T0)	;A0->80024474+offset: set p->string in table
ADDIU	T1,V1,0001
SW	T1,0000 (A2)	;str.num+=1
LBU	V0,0000 (A0)
SLTI	AT,V0,0021
BNE	AT,R0,7000A57C	;skip if whitespace character
NOP
//7000A568:	find end of whitespace run
LBU	V0,0001 (A0)
ADDIU	A0,A0,0001	;str.cur+=1
SLTI	AT,V0,0021
BEQL	AT,R0,7000A56C	;loop until next char is whitespace
LBU	V0,0001 (A0)
//7000A57C:	scan string until NULL terminator
BNE	V0,R0,7000A524
NOP
//7000A584:	return V0= p->last character read in string
JR	RA
OR	V0,A0,R0

7000A58C	B18C	strtok(strcpy(mem_alloc_str, string),' '); used to handle memory allocation string
	accepts: A0=p->string
ADDIU	SP,SP,FFE8
OR	A1,A0,R0	;A1=A0: p->string
SW	RA,0014 (SP)
LUI	A0,8006
JAL	7000A770	;V0= strcpy(A0,A1)
ADDIU	A0,A0,4C30	;A0=80064C30: command line buffer
LUI	A0,8006
JAL	7000A4F0	;strtok(A0,' ')
ADDIU	A0,A0,4C30	;A0=80064C30: command line buffer
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000A5C0	B1C0	handle command line options sent via debugger
	returns V0=TRUE only if "debug mode" enabled
ADDIU	SP,SP,FFC0
SW	S1,001C (SP)
SW	RA,0024 (SP)
LUI	S1,00FF
SW	S2,0020 (SP)
SW	S0,0018 (SP)
SW	R0,0028 (SP)	;0->SP+28: return FALSE by default
JAL	7000CEA8	;V0= 1; would have returned 0 if debug console present
ORI	S1,S1,B000	;S1=00FFB000
BEQ	V0,R0,7000A5F8	;branch if debugger present
LUI	S0,8006
LUI	AT,8006
BEQ	R0,R0,7000A61C
SW	R0,4C30 (AT)	;0->80064C30: NULL->buffer
//7000A5F8:	copy string from debug console to buffer
LUI	S2,8006
ADDIU	S2,S2,4EB0	;S2=80064EB0
ADDIU	S0,S0,4C30	;S0=80064C30
OR	A0,S1,R0	;A0=S1: hardware address
JAL	70013810	;copies word from hardware A0 to rdram A1
OR	A1,S0,R0	;A1=S0: target address
ADDIU	S0,S0,0004	;S0+=4
BNE	S0,S2,7000A604	;loop to copy 0x280 bytes
ADDIU	S1,S1,0004	;S1+=4
//7000A61C:	test for "debug mode" flag
LUI	A0,8006
JAL	7000A4F0	;strtok(A0,' ')
ADDIU	A0,A0,4C30	;A0=80064C30: p->buffer
LUI	A1,8003
ADDIU	A1,A1,91F4	;A1=800291F4: "-d"
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A0,R0,0001	;A0=1: 1st instance
BEQ	V0,R0,7000A648	;branch if not found
ADDIU	A0,R0,0001	;A0=1: 1st instance
ADDIU	T6,R0,0001
SW	T6,0028 (SP)	;1->SP+28: returns TRUE, not FALSE
//7000A648:	test for "sound disabled" flag
LUI	A1,8003
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A1,A1,91F8	;A1=800291F8: "-s"
BEQ	V0,R0,7000A668	;branch if not found
ADDIU	A0,R0,0001	;A0=1: 1st instance
ADDIU	T7,R0,0001
LUI	AT,8002
SB	T7,43F8 (AT)	;1->800243F8: disable sound
//7000A668:	test for "japanese" flag
LUI	A1,8003
JAL	7000A6A0	;V0=p->A0th instance of token A1
ADDIU	A1,A1,91FC	;A1=800291FC: "-j"
BEQ	V0,R0,7000A684	;branch if not found
ADDIU	T8,R0,0001
LUI	AT,8005
SB	T8,84D0 (AT)	;1->800484D0: language
//7000A684:	return
LW	RA,0024 (SP)
LW	V0,0028 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
JR	RA
ADDIU	SP,SP,0038

7000A6A0	B2A0	V0=p->A0th instance of token A1 in currently strtok'd string
	accepts: A0=instance, A1=p->string
ADDIU	SP,SP,FFD0
SW	S2,001C (SP)
OR	S2,A0,R0	;S2=A0: instance#
SW	RA,002C (SP)
SW	S4,0024 (SP)
OR	S4,A1,R0	;S4=A1: p->string
SW	S5,0028 (SP)
SW	S3,0020 (SP)
SW	S1,0018 (SP)
SW	S0,0014 (SP)
JAL	7001387C	;V0= strlen(A0)
OR	A0,A1,R0	;A0=A1: p->token
LUI	S5,8002
ADDIU	S5,S5,4470
LW	T6,0000 (S5)	;T6=80024470: #strings
OR	S3,V0,R0	;S3=V0: query string length
ADDIU	S1,R0,0001	;S1=1	string.count
SLTI	AT,T6,0002
BNE	AT,R0,7000A73C	;return NULL if NULL source string
LUI	S0,8002
ADDIU	S0,S0,4478	;S0=80024478: list of strtok'd strings
//7000A6F4:	look for substring in source
OR	A0,S4,R0	;A0=S4: p->query string
LW	A1,0000 (S0)	;A1=S0+0: source string
JAL	7000A898	;V0= strncmp(A0,A1,A2)
OR	A2,S3,R0	;A2=S3: length
BNEL	V0,R0,7000A728	;continue if not found
LW	T8,0000 (S5)
ADDIU	S2,S2,FFFF	;S2-=1	instance count--
BNEL	S2,R0,7000A728	;continue if a later instance
LW	T8,0000 (S5)
LW	T7,0000 (S0)
BEQ	R0,R0,7000A740	;return p->source+length
ADDU	V0,T7,S3
//7000A724:	test each string for a hit
LW	T8,0000 (S5)	;T8= #strings
ADDIU	S1,S1,0001	;S1+=1	string.count++
ADDIU	S0,S0,0004	;S0+=4: p->next tokenized string
SLT	AT,S1,T8
BNEL	AT,R0,7000A6F8	;loop while strings remain
OR	A0,S4,R0
OR	V0,R0,R0	;V0=NULL: string not found
//7000A740:	return
LW	RA,002C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
LW	S4,0024 (SP)
LW	S5,0028 (SP)
JR	RA
ADDIU	SP,SP,0030

7000A770	B370	V0= strcpy(A0,A1)
	accepts: A0=p->target, A1=p->source
LBU	V0,0000 (A1)
ADDIU	V1,A0,0001
ADDIU	A1,A1,0001
BEQ	V0,R0,7000A798
SB	V0,0000 (A0)
LBU	V0,0000 (A1)
ADDIU	V1,V1,0001
ADDIU	A1,A1,0001
BNE	V0,R0,7000A784
SB	V0,FFFF (V1)
JR	RA
OR	V0,A0,R0

7000A7A0	B3A0	V0= strncpy(A0,A1,A2)
	accepts: A0=p->target, A1=p->source, A2=length
LBU	V0,0000 (A1)
ADDIU	V1,A0,0001
ADDIU	A1,A1,0001
BEQ	V0,R0,7000A7D4
SB	V0,0000 (A0)
ADDIU	A2,A2,FFFF
BEQL	A2,R0,7000A7D8
OR	V0,A2,R0
LBU	V0,0000 (A1)
ADDIU	V1,V1,0001
ADDIU	A1,A1,0001
BNE	V0,R0,7000A7B4
SB	V0,FFFF (V1)
OR	V0,A2,R0
BEQ	A2,R0,7000A7F4
ADDIU	A2,A2,FFFF
OR	V0,A2,R0
SB	R0,0000 (V1)
ADDIU	V1,V1,0001
BNE	A2,R0,7000A7E0
ADDIU	A2,A2,FFFF
JR	RA
OR	V0,A0,R0

7000A7FC	B3FC	V0= strcat(A0,A1)
	accepts: A0=p->target, A1=p->source
LBU	T6,0000 (A0)
OR	V0,A0,R0
BEQL	T6,R0,7000A820
LBU	V1,0000 (A1)
LBU	T7,0001 (V0)
ADDIU	V0,V0,0001
BNEL	T7,R0,7000A810
LBU	T7,0001 (V0)
LBU	V1,0000 (A1)
ADDIU	V0,V0,0001
ADDIU	A1,A1,0001
BEQ	V1,R0,7000A844
SB	V1,FFFF (V0)
LBU	V1,0000 (A1)
ADDIU	V0,V0,0001
ADDIU	A1,A1,0001
BNE	V1,R0,7000A830
SB	V1,FFFF (V0)
JR	RA
OR	V0,A0,R0

7000A84C	B44C	V0= strcmp(A0,A1); V0=0 if same or sign of differing character
	accepts: A0=p->string1, A1=p->string2
	On return, A0 and A1 will be p->first differing character
LBU	V0,0000 (A0)
LBU	V1,0000 (A1)
ADDIU	A0,A0,0001
BEQ	V0,V1,7000A878
SLT	AT,V0,V1
BEQ	AT,R0,7000A870
NOP
//7000A868:	return negative difference
JR	RA
ADDIU	V0,R0,FFFF
//7000A870:	return positive difference
JR	RA
ADDIU	V0,R0,0001
//7000A878:	continue testing for length of string
BNE	V0,R0,7000A888
NOP
//7000A880:	return identical
JR	RA
OR	V0,R0,R0
//7000A888:	retest with next char
BEQ	R0,R0,7000A84C
ADDIU	A1,A1,0001
//7000A890:	unreachable return
JR	RA
NOP

7000A898	B498	V0= strncmp(A0,A1,A2)
	accepts: A0=p->string1, A1=p->string2, A2=length
BNEL	A2,R0,7000A8AC
LBU	V0,0000 (A0)
JR	RA
OR	V0,R0,R0
LBU	V0,0000 (A0)
LBU	V1,0000 (A1)
ADDIU	A2,A2,FFFF
ADDIU	A0,A0,0001
BEQ	V0,V1,7000A8D8
SLT	AT,V0,V1
BEQ	AT,R0,7000A8D0
NOP
JR	RA
ADDIU	V0,R0,FFFF
JR	RA
ADDIU	V0,R0,0001
BNE	V0,R0,7000A8E8
NOP
JR	RA
OR	V0,R0,R0
BEQ	R0,R0,7000A898
ADDIU	A1,A1,0001
JR	RA
NOP

7000A8F8	B4F8	V0=toupper(A0)
	accepts: A0=char
ANDI	T6,A0,00FF
SW	A0,0000 (SP)
SLTI	AT,T6,0061
BNE	AT,R0,7000A924
OR	A0,T6,R0
SLTI	AT,T6,007B
BEQ	AT,R0,7000A924
ADDIU	V0,T6,FFE0
ANDI	T7,V0,00FF
JR	RA
OR	V0,T7,R0
OR	V0,A0,R0
JR	RA
NOP

7000A930	B530	V0=isdigit(A0)
	accepts: A0=char
ANDI	T6,A0,00FF
SLTI	V0,T6,0030
XORI	V0,V0,0001
BEQ	V0,R0,7000A948
SW	A0,0000 (SP)
SLTI	V0,T6,003A
JR	RA
NOP

7000A950	B550	V0=isalpha(A0)
	accepts: A0=char
ANDI	T6,A0,00FF
SLTI	V0,T6,0061
SW	A0,0000 (SP)
BNE	V0,R0,7000A970
OR	V1,T6,R0
SLTI	V0,T6,007B
BNE	V0,R0,7000A984
NOP
SLTI	V0,V1,0041
XORI	V0,V0,0001
BEQ	V0,R0,7000A984
NOP
SLTI	V0,V1,005B
JR	RA
NOP

7000A98C	B58C	V0=isspace(A0)
	accepts: A0=char
ANDI	T6,A0,00FF
XORI	V0,T6,0020
SLTIU	V0,V0,0001
BNE	V0,R0,7000A9D8
SW	A0,0000 (SP)
XORI	V0,T6,0009
SLTIU	V0,V0,0001
BNE	V0,R0,7000A9D8
NOP
XORI	V0,T6,000A
SLTIU	V0,V0,0001
BNE	V0,R0,7000A9D8
NOP
XORI	V0,T6,000C
SLTIU	V0,V0,0001
BNE	V0,R0,7000A9D8
NOP
XORI	V0,T6,000B
SLTIU	V0,V0,0001
JR	RA
NOP

7000A9E0	B5E0	V0=strtol(A0,A1,A2)
	accepts: A0=p->string, A1=@last character read or NULL, A2=base (hex by default)
ADDIU	SP,SP,FFA0
SW	S3,0024 (SP)
OR	S3,A2,R0
SW	RA,002C (SP)
SW	S4,0028 (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
SW	A1,0064 (SP)
BLTZ	A2,7000AA20
OR	A3,A0,R0
ADDIU	AT,R0,0001
BEQ	A2,AT,7000AA20
SLTI	AT,A2,0025
BNEL	AT,R0,7000AA28
LBU	A0,0000 (A3)
ADDIU	S3,R0,000A
LBU	A0,0000 (A3)
OR	S2,A3,R0
JAL	7000A98C
SW	A3,0060 (SP)
BEQL	V0,R0,7000AA54
LBU	V0,0000 (S2)
ADDIU	S2,S2,0001
JAL	7000A98C
LBU	A0,0000 (S2)
BNEL	V0,R0,7000AA40
ADDIU	S2,S2,0001
LBU	V0,0000 (S2)
ADDIU	AT,R0,002D
BEQL	V0,R0,7000AC30
LW	V0,0064 (SP)
BNE	V0,AT,7000AA74
ADDIU	T6,R0,0001
SW	T6,005C (SP)
BEQ	R0,R0,7000AA90
ADDIU	S2,S2,0001
ADDIU	AT,R0,002B
BNEL	V0,AT,7000AA90
SW	R0,005C (SP)
SW	R0,005C (SP)
BEQ	R0,R0,7000AA90
ADDIU	S2,S2,0001
SW	R0,005C (SP)
ADDIU	AT,R0,0010
BNE	S3,AT,7000AAC4
NOP
LBU	T7,0000 (S2)
ADDIU	AT,R0,0030
BNE	T7,AT,7000AAC4
NOP
JAL	7000A8F8
LBU	A0,0001 (S2)
ADDIU	AT,R0,0058
BNE	V0,AT,7000AAC4
NOP
ADDIU	S2,S2,0002
BNE	S3,R0,7000AB00
LBU	V0,0000 (S2)
ADDIU	AT,R0,0030
BNE	V0,AT,7000AB00
ADDIU	S3,R0,000A
JAL	7000A8F8
LBU	A0,0001 (S2)
ADDIU	AT,R0,0058
BNE	V0,AT,7000AAF8
ADDIU	S3,R0,0008
ADDIU	S2,S2,0002
BEQ	R0,R0,7000AAF8
ADDIU	S3,R0,0010
BEQ	R0,R0,7000AB00
LBU	V0,0000 (S2)
ANDI	S0,V0,00FF
SW	S2,0044 (SP)
SW	R0,0040 (SP)
OR	S1,R0,R0
BEQ	S0,R0,7000ABE0
OR	V1,S0,R0
ADDIU	S4,R0,FFFF
ANDI	A0,S0,00FF
JAL	7000A930
SW	V1,0034 (SP)
BEQ	V0,R0,7000AB40
LW	V1,0034 (SP)
ADDIU	S0,V1,FFD0
ANDI	T8,S0,00FF
BEQ	R0,R0,7000AB64
OR	S0,T8,R0
JAL	7000A950
ANDI	A0,S0,00FF
BEQL	V0,R0,7000ABE4
LW	T2,0044 (SP)
JAL	7000A8F8
ANDI	A0,S0,00FF
ADDIU	S0,V0,FFC9
ANDI	T9,S0,00FF
OR	S0,T9,R0
SLT	AT,S0,S3
BEQ	AT,R0,7000ABE0
ADDIU	T1,R0,0001
DIVU	S4,S3
MFLO	V0
SLTU	AT,V0,S1
BNE	S3,R0,7000AB88
NOP
BREAK	00001C00	;Break: division by zero
BNE	AT,R0,7000ABB8
NOP
BNE	S1,V0,7000ABC0
NOP
DIVU	S4,S3
MFHI	T0
SLTU	AT,T0,S0
BNE	S3,R0,7000ABB0
NOP
BREAK	00001C00	;Break: division by zero
BEQ	AT,R0,7000ABC0
NOP
BEQ	R0,R0,7000ABD0
SW	T1,0040 (SP)
MULTU	S1,S3
MFLO	S1
ADDU	S1,S1,S0
NOP
LBU	S0,0001 (S2)
ADDIU	S2,S2,0001
BNE	S0,R0,7000AB1C
OR	V1,S0,R0
LW	T2,0044 (SP)
LW	V0,0064 (SP)
BEQL	S2,T2,7000AC30
LW	V0,0064 (SP)
BEQL	V0,R0,7000AC00
LW	T3,0040 (SP)
SW	S2,0000 (V0)
LW	T3,0040 (SP)
LW	T4,005C (SP)
BEQ	T3,R0,7000AC14
NOP
BEQ	R0,R0,7000AC44
ADDIU	V0,R0,FFFF
BEQ	T4,R0,7000AC24
OR	V1,S1,R0
BEQ	R0,R0,7000AC44
SUBU	V0,R0,S1
BEQ	R0,R0,7000AC44
OR	V0,V1,R0
LW	V0,0064 (SP)
LW	T5,0060 (SP)
BEQL	V0,R0,7000AC44
OR	V0,R0,R0
SW	T5,0000 (V0)
OR	V0,R0,R0
LW	RA,002C (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
JR	RA
ADDIU	SP,SP,0060

7000AC70	B870	V0= mempcpy(A0,A1,A2)
	accepts: A0=p->target, A1=p->source, A2=length
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	70013850	;V0= memcpy(A0,A1,A2)
SW	A2,0020 (SP)
LW	RA,0014 (SP)
LW	T6,0020 (SP)
ADDIU	SP,SP,0018
JR	RA
ADDU	V0,V0,T6	;V0+=length: p->final byte

7000AC94	B894	sprintf(A0,A1,A2,A3,...) - calls c-parser; NULL terminates strings it outputs
	accepts: A0=p->final string, A1=p->string to parse, A2=argument1, A3=argument2, SP+10=argument3, etc...
	argument format:
		long value for all integer types
		double value for float types; use two sequential arguments for upper and lower half of value
		pointer for string type
		character (as int) for char type
ADDIU	SP,SP,FFE0
SW	A0,0020 (SP)
SW	RA,0014 (SP)
SW	A1,0024 (SP)
SW	A2,0028 (SP)
SW	A3,002C (SP)
LUI	A0,7001
ADDIU	A0,A0,AC70
ADDIU	A3,SP,0028
LW	A2,0024 (SP)
JAL	70013F60
LW	A1,0020 (SP)
BLTZ	V0,7000ACD8
OR	V1,V0,R0
LW	T6,0020 (SP)
ADDU	T7,T6,V0
SB	R0,0000 (T7)
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
ADDIU	V0,V1,FFFF
JR	RA
NOP

7000ACF0	B8F0	call 700145B0: A0=96, A1=80064ED0, A2=80064EB0, A3=8
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A1,8006
LUI	A2,8006
ADDIU	A2,A2,4EB0	;A2= 80064EB0
ADDIU	A1,A1,4ED0	;A1= 80064ED0
ADDIU	A0,R0,0096	;A0= 96
JAL	700145B0
ADDIU	A3,R0,0008	;A3= 8
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000AD30	B930	unconditional return
JR	RA
NOP

7000AD38	B938	
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,8002
LUI	A1,8003
ADDIU	A1,A1,9200	;A1=80029200: "vi_c_debug"
JAL	70004E60	;V0=p->debug.notice.list entry for name A1 and data A0
ADDIU	A0,A0,4500	;A0=80024500: 
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,4EF0	;A1=80064EF0
ADDIU	A0,A0,4F10	;A0=80064F10
JAL	7000D6D0
ADDIU	A2,R0,0008	;A2=8
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000AD80	B980
SW	A0,0000 (SP)
SW	A1,0004 (SP)
JR	RA
OR	V0,R0,R0

7000AD90	B990
SW	A0,0000 (SP)
SW	A1,0004 (SP)
JR	RA
OR	V0,R0,R0

7000ADA0	B9A0	unconditional return
JR	RA
NOP

7000ADA8	B9A8	unconditional return
JR	RA
NOP

7000ADB0	B9B0	reset stdout display; redirects to 7000AF00
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	7000AF00	;reset stdout display
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000ADD0	B9D0	write char A2 to stdout at position (A0,A1)
	accepts: A0=xpos, A1=ypos, A2=char
SW	A2,0008 (SP)
ANDI	T6,A2,00FF	;T6=char
LUI	V1,8002
LUI	T0,8002
LUI	T2,8002
LUI	T1,8002
OR	A2,T6,R0	;A2=char
SW	A0,0000 (SP)
ADDIU	T1,T1,68B0
ADDIU	T2,T2,6710	;T2=80026710: p->color table end
ADDIU	T0,T0,6610	;T0=80026610: p->color table start
LW	V1,68AC (V1)	;V1=800268AC: stdout.curfgcolor
OR	V0,R0,R0	;V0=0	default color index
OR	A3,R0,R0	;A3=0	color table offset
//7000AE08:	check if color already in table
LW	T7,0004 (T0)	;T7=table.fgcolor
ADDIU	T0,T0,0008	;T0+=8	next entry
ADDU	T9,T2,A3
BNEL	V1,T7,7000AE30	;loop on color mismatch
ADDIU	V0,V0,0001
//7000AE1C:
LW	T8,0004 (T1)	;T8=stdout.curbgcolor
LW	T3,0004 (T9)	;T7=table.bgcolor
BEQL	T8,T3,7000AEA8	;branch if colors match
LW	T6,0000 (SP)
//7000AE2C:	loop for each color entry
ADDIU	V0,V0,0001
SLTI	AT,V0,0020
BNE	AT,R0,7000AE08	;loop through all 20 entries
ADDIU	A3,A3,0008
//7000AE3C:	add color pair to index if not found
LUI	A3,8002
ADDIU	A3,A3,6810
LW	V1,0000 (A3)	;V1=80026810: stdout.#colors
LUI	T6,8002
ADDIU	T6,T6,68A8
LW	AT,0000 (T6)	;AT= 800268A8: stdout.curbgcolor
LUI	T4,8002
ADDIU	T4,T4,6610
SLL	A0,V1,0x3
ADDU	T5,A0,T4
SW	AT,0000 (T5)	;bgcolor-> entry.bgcolor
LW	T9,0004 (T6)
ADDU	T8,T2,A0
ADDIU	T7,V1,0001
SW	T9,0004 (T5)	;fgcolor-> entry.fgcolor
LW	AT,0000 (T1)
SW	AT,0000 (T8)
LW	T4,0004 (T1)
SW	T4,0004 (T8)
BGEZ	T7,7000AE9C
ANDI	T5,T7,001F
BEQ	T5,R0,7000AE9C	;correct table if 20 entries
NOP
ADDIU	T5,T5,FFE0
//7000AE9C:	update #colors in table
SW	T5,0000 (A3)	;stdout.#color -=20
OR	V0,T5,R0	;V0=index
//7000AEA4:	write char to stdout buffer
LW	T6,0000 (SP)	;T6=ypos
SLL	T3,A1,0x1
LUI	T4,8002
SLL	T9,T6,0x3
ADDU	T9,T9,T6
SLL	T9,T9,0x2
SUBU	T9,T9,T6
SLL	T9,T9,0x1	;T9=ypos*46
ADDU	T8,T9,T3	;T9= (ypos*46) + (xpos*2)
ADDIU	T4,T4,5030
ADDU	V1,T8,T4
SB	A2,0000 (V1)	;char-> 80025030+offset: write char to stdout buffer
JR	RA
SB	V0,0001 (V1)	;V0-> 80025031 + offset: write color index to stdout buffer

7000AEDC	BADC	reset stdout x and y positions to upper left margin
LUI	T6,8002
LW	T6,4FA0 (T6)	;T6=80024FA0: stdout.xmargin
LUI	AT,8002
LUI	T7,8002
LW	T7,4FA4 (T7)	;T7=80024FA4: stdout.ymargin
SW	T6,4FA8 (AT)	;stdout.xmargin -> 80024FA8: reset stdout.xpos
LUI	AT,8002
JR	RA
SW	T7,4FAC (AT)	;stdout.ymargin -> 80024FAC: reset stdout.ypos

7000AF00	BB00	reset stdout display
ADDIU	SP,SP,FFD8
SW	S3,0020 (SP)
SW	S2,001C (SP)
SW	S1,0018 (SP)
SW	RA,0024 (SP)
SW	S0,0014 (SP)
ADDIU	S1,R0,0050
OR	S2,R0,R0
ADDIU	S3,R0,0023
//7000AF24:	reset xpos
OR	S0,R0,R0
//7000AF28:	clear each char individually
OR	A0,S0,R0	;A0=S0: xpos
OR	A1,S2,R0	;A1=S2: ypos
JAL	7000ADD0	;write char A2 to stdout at position (A0,A1)
OR	A2,R0,R0	;A2=NULL
ADDIU	S0,S0,0001
BNEL	S0,S1,7000AF2C	;clear 50 columns
OR	A0,S0,R0
//7000AF44:	then clear 23 rows
ADDIU	S2,S2,0001
BNEL	S2,S3,7000AF28
OR	S0,R0,R0
//7000AF50:
JAL	7000AEDC	;reset stdout x and y positions to upper left margin
NOP
JAL	7000ADA0	;unconditional return
NOP
//7000AF60:	return
LW	RA,0024 (SP)
LUI	AT,8002
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
SW	R0,6810 (AT)
JR	RA
ADDIU	SP,SP,0028

7000AF84	BB84	removed: copy stdout char from position (A0,A1) to (A2,A3)
	accepts: A0=source x, A1=source y, A2=target x, A3=target y
SW	A0,0000 (SP)
SW	A1,0004 (SP)
SW	A2,0008 (SP)
JR	RA
SW	A3,000C (SP)

7000AF98	BB98	scroll stdout A0 lines; A0 should be a negative offset (-2 scrolls up two lines)
	accepts: A0=number of lines to push up
ADDIU	SP,SP,FFD8
SW	S3,0020 (SP)
SW	S2,001C (SP)
SW	S1,0018 (SP)
SW	RA,0024 (SP)
SW	S0,0014 (SP)
ADDIU	S1,R0,0021	;S1=0x21: final line
ADDIU	S2,R0,0050
ADDIU	S3,A0,0021	;S3=A0+0x21: ysource
//7000AFBC:	copy each line from bottom to top
BLTZ	S3,7000AFF4	;erase line 0x21 if invalid
SLTI	AT,S3,0023
BEQ	AT,R0,7000AFF4	;erase line 0x21 if over line 0x22
OR	S0,R0,R0	;S0=0	init. count
//7000AFCC:	copy line
OR	A0,S0,R0	;A0=S0: count
OR	A1,S3,R0	;A1= A0+0x21: ysource
OR	A2,S0,R0	;A2=S0: count
JAL	7000AF84	;removed: copy stdout char from position (A0,A1) to (A2,A3)
OR	A3,S1,R0	;A3= ytarget
ADDIU	S0,S0,0001	;count+=1
BNEL	S0,S2,7000AFD0	;loop 0x50 times
OR	A0,S0,R0
BEQ	R0,R0,7000B018	;V0=S1: ypos.cur
OR	V0,S1,R0
//7000AFF4:	erase line: fill line 0x21 with NULLs
OR	S0,R0,R0	;S0=0	init. count
//7000AFF8:
OR	A0,S0,R0	;A0=S0: count
OR	A1,S1,R0	;A1=ypos.cur
JAL	7000ADD0	;write char A2 to stdout at position (A0,A1)
OR	A2,R0,R0	;A2=0	NULL
ADDIU	S0,S0,0001	;count+=1
BNEL	S0,S2,7000AFFC	;loop 0x50 times
OR	A0,S0,R0
OR	V0,S1,R0	;V0=S1: ypos.cur
//7000B018:	copy previous line
ADDIU	S3,S3,FFFF	;S3-=1	ysource-=1
BNE	S1,R0,7000AFBC
ADDIU	S1,S1,FFFF	;S1-=1	ytarget-=1
//7000B024:	return
LW	RA,0024 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
JR	RA
ADDIU	SP,SP,0028

7000B040	AC40	translates and saves stdout text position (A0,A1)
	accepts: A0=xpos, A1=ypos
LUI	T6,8002
LW	T6,4FA0 (T6)	;T6=80024FA0: stdout.xmargin
LUI	T7,8002
LW	T7,4FA4 (T7)	;T7=80024FA4: stdout.ymargin
LUI	AT,8002
ADDU	A0,A0,T6
SW	A0,4FA8 (AT)	;xpos+offset -> 80024FA8: stdout.xpos
LUI	AT,8002
ADDU	A1,A1,T7
JR	RA
SW	A1,4FAC (AT)	;ypos+offset -> 80024FAC: stdout.ypos

7000B06C	AC6C	set stdout text (foreground) color, alpha inverted (debug menu)
	accepts: A0=red, A1=green, A2=blue, A3=alpha
SLL	T6,A0,0x18
SLL	T7,A1,0x10
OR	T8,T6,T7	;T8=RR.GG.00.00
SLL	T9,A2,0x8
ADDIU	T1,R0,00FF
SUBU	T2,T1,A3	;T2=FF-alpha: invert alpha
OR	T0,T8,T9
OR	T3,T0,T2	;T3=RR.GG.BB.AA
LUI	AT,8002
JR	RA
SW	T3,68AC (AT)	;rgba -> 800268AC: stdout.fgcurcolor

7000B098	BC98	set stdout background color, alpha inverted
	accepts: A0=red, A1=green, A2=blue, A3=inverse alpha
SLL	T6,A0,0x18
SLL	T7,A1,0x10
OR	T8,T6,T7
SLL	T9,A2,0x8
ADDIU	T1,R0,00FF
SUBU	T2,T1,A3	;T2=FF - A3: inverse alpha
OR	T0,T8,T9
OR	T3,T0,T2
LUI	AT,8002
JR	RA
SW	T3,68B4 (AT)	;rgba -> 800268B4: stdout.bgcurcolor

7000B0C4	BCC4	write char A0 to stdout (debug menu)
	accepts: A0=char
ADDIU	SP,SP,FFD8
SW	RA,0014 (SP)
JAL	7000441C	;V0= video2.txtClipW
SW	A0,0028 (SP)	;SP+28=char
ADDIU	T6,V0,FFF3
BGEZ	T6,7000B0E8	;branch if value positive
SRA	T7,T6,0x2	;T7=txt.width-margin / 2
ADDIU	AT,T6,0003
SRA	T7,AT,0x2
//7000B0E8:	grab y margin
JAL	7000442C	;V0= video2.txtClipH
SW	T7,0024 (SP)	;SP+24= xmargin
ADDIU	T0,V0,FFF6
ADDIU	AT,R0,0007
DIV	T0,AT
LBU	A2,002B (SP)	;A2=char A0
MFLO	T0		;T0=(txt.height-margin) / 7
LUI	V0,8002
BEQ	A2,R0,7000B120	;skip if NULL
OR	V1,A2,R0	;V1=A2: char
SLTI	AT,V1,0020
BNE	AT,R0,7000B148	;branch if a control char
SLTI	AT,V1,007F
BEQ	AT,R0,7000B148	;branch if not ASCII
//7000B120:	valid ASCII chars
LUI	A3,8002
ADDIU	A3,A3,4FAC
ADDIU	V0,V0,4FA8
LW	A0,0000 (V0)	;A0=80024FA8: stdout.curxpos
LW	A1,0000 (A3)	;A1=80024FAC: stdout.curypos
SW	V1,001C (SP)	;SP+1C= char
JAL	7000ADD0	;write char A2 to stdout at position (A0,A1)
SW	T0,0020 (SP)	;SP+20= ymargin
//7000B140:
LW	V1,001C (SP)	;V1= char
LW	T0,0020 (SP)	;T0= ymargin
//7000B148:	advance stdout.curxpos by one
LUI	V0,8002
ADDIU	V0,V0,4FA8
LW	T9,0000 (V0)	;stdout.curxpos
LUI	A3,8002
ADDIU	AT,R0,000D
ADDIU	T1,T9,0001
ADDIU	A3,A3,4FAC
BEQ	V1,AT,7000B184	;move down a line if carriage return
SW	T1,0000 (V0)	;stdout.curxpos +=1
ADDIU	AT,R0,000A
BEQ	V1,AT,7000B184	;move down a line if line feed
LW	T3,0024 (SP)	;T3=xmargin
SLT	AT,T1,T3
BNEL	AT,R0,7000B1B4	;move down a line if exceeds xmargin
LW	RA,0014 (SP)
//7000B184:	move stdout.curypos to a new line when required
LW	T5,0000 (A3)	;stdout.curypos
LUI	T4,8002
LW	T4,4FA0 (T4)	;T4= stdout.leftmargin
ADDIU	T6,T5,0001
SLT	AT,T6,T0
SW	T6,0000 (A3)	;stdout.curypos +=1
BNE	AT,R0,7000B1B0	;return if stdout.curypos within ymargin
SW	T4,0000 (V0)	;stdout.curxpos = stdout.leftmargin: x to beginning of new line
//7000B1A4:	if beyond bounds, reset to top of screen
LUI	T8,8002
LW	T8,4FA4 (T8)	;T8=stdout.uppermargin
SW	T8,0000 (A3)	;stdout.curypos = stdout.uppermargin
//7000B1B0:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

7000B1C0	BDC0	write char A2 to (A0,A1) in stdout, translating position (debug menu)
	accepts: A0=xpos, A1=ypos, A2=char
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	7000B040	;translates and saves stdout text position (A0,A1)
SW	A2,0020 (SP)
JAL	7000B0C4	;write char A0 to stdout
LBU	A0,0023 (SP)	;A0=char
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000B1E8	ADE8	write string A0 to stdout (debug menu)
	accepts: A0=p->string
ADDIU	SP,SP,FFE0
SW	RA,001C (SP)
SW	S1,0018 (SP)
SW	S0,0014 (SP)
LBU	S0,0000 (A0)
OR	S1,A0,R0	;S1=A0: p->string
BEQ	S0,R0,7000B21C	;return if NULL
ANDI	A0,S0,00FF
//7000B208:	read each char until NULL
JAL	7000B0C4	;write char A0 to stdout
ADDIU	S1,S1,0001
LBU	S0,0000 (S1)
BNEL	S0,R0,7000B208
ANDI	A0,S0,00FF
//7000B21C:	return
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0020

7000B230	BE30	write string A2 to (A0,A1) in stdout
	accepts: A0=xpos, A1=ypos, A2=p->string
ADDIU	SP,SP,FFE0
SW	RA,001C (SP)
SW	S1,0018 (SP)
OR	S1,A2,R0	;S1=A2: p->string
JAL	7000B040	;translates and saves stdout text position (A0,A1)
SW	S0,0014 (SP)
LBU	S0,0000 (S1)	;S0= next char in string
BEQ	S0,R0,7000B268	;return if NULL
//7000B250:	write string to stdout
ANDI	A0,S0,00FF	;A0= char
JAL	7000B0C4	;write char A0 to stdout
ADDIU	S1,S1,0001	;S1+=1	string.next()
LBU	S0,0000 (S1)
BNEL	S0,R0,7000B254	;loop through string
ANDI	A0,S0,00FF
//7000B268:	return
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0020

7000B27C	BE7C	write stdout to screen
	accepts: A0=p->display list
ADDIU	SP,SP,FF78
SW	S5,002C (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
LUI	A3,8002
OR	S0,A0,R0	;S0=A0: p->DL
SW	RA,003C (SP)
SW	S8,0038 (SP)
SW	S7,0034 (SP)
SW	S6,0030 (SP)
SW	S4,0028 (SP)
SW	S3,0024 (SP)
SW	S2,0020 (SP)
OR	S1,A0,R0	;S1=A0: DL
ADDIU	A2,R0,FFFF	;A2=-1
ADDIU	A3,A3,6610	;A3=80026610: #colours
OR	S5,R0,R0	;S5=0
OR	T0,R0,R0	;T0=0: offset to current entry
//7000B2C4:	set entry in column
LUI	T6,8002
ADDIU	A1,T6,5030	;A1=80025030: p->screen entries
ADDU	A0,T0,A1	;A0=p->current entry
//7000B2D0:	read entries to allocate space
LBU	V0,0000 (A0)	;V0=char
ADDIU	A1,A1,0046	;A1+=46: next entry in row
LBU	V1,0001 (A0)	;V1=colour#
BEQ	V0,R0,7000B2F8	;branch if no entry
NOP
BEQL	V1,A2,7000B2F8	;branch if invalid colour
ADDIU	S1,S1,0018
ADDIU	S1,S1,0010	;S1+=10: 
OR	A2,V1,R0	;A2=colour#
ADDIU	S1,S1,0018	;S1+=18: 
//7000B2F8:	loop for each row and column
BNE	A1,A3,7000B2D0	;loop until end of screen
ADDIU	A0,A0,0046	;A0+=46: next entry in row
ADDIU	T0,T0,0002	;T0+=2: next entry in column
SLTI	AT,T0,0046
BNEZ	AT,7000B2C4	;loop for each entry in column
NOP
//7000B310:	determine what percentage of commands remaings
JAL	7F0BD77C	;V0=#commands that can fit in block
OR	A0,S0,R0	;A0=S0: DL start
SUBU	A0,S1,S0	;A0=S1-S0: allocated size
BGTZ	A0,7000B32C	;branch if something to write
ADDIU	V1,V0,F800	;V1=#commands-0x800
BEQ	R0,R0,7000B528	;return if nothing to write
OR	V0,S0,R0	;V0=S0: DL
//7000B32C:	set 0% remaining
BGTZ	V1,7000B340	;branch if at least 0x800 commands can be written
ADDIU	S4,R0,FFFF	;S4=-1
LUI	AT,8002
BEQ	R0,R0,7000B398
SW	R0,68B8 (AT)	;0->800268B8: percentage remaining
//7000B340:	compute percentage of command memory remaining
SLT	AT,V1,A0
BEQ	AT,R0,7000B38C	;set 0x100 if #commands greater than allocation
SLL	T7,V1,0x8
SUBU	T7,T7,V1	;T7=#commands * 0xFF
DIV	T7,A0
BNE	A0,R0,7000B360
NOP
BREAK	00001C00	;Break: division by zero
//7000B360:	catch funky division
ADDIU	AT,R0,FFFF
BNE	A0,AT,7000B378
LUI	AT,8000
BNE	T7,AT,7000B378
NOP
BREAK	00001800
//7000B378:	% remaining
LUI	AT,8002
MFLO	T8
SW	T8,68B8 (AT)	;#commands * 0xFF / allocation ->800268B8: percentage remaining
BEQ	R0,R0,7000B39C
OR	V0,S0,R0	;V0=S0: p->DL
//7000B38C:	100% (256)
ADDIU	T9,R0,0100
LUI	AT,8002
SW	T9,68B8 (AT)	;0x100->800268B8: percentage remaining
OR	V0,S0,R0	;V0=S0: p->DL
//7000B39C:
LUI	T2,8002
ADDIU	T2,T2,4FB0	;T2=80024FB0: display list snippet
LUI	T1,0600
SW	T1,0000 (V0)	;06000000 -> DL+0: rsp_displaylist: push
SW	T2,0004 (V0)	;80024FB0 -> DL+4: rsp_displaylist: use display list snippet
LUI	S8,8002
LUI	S7,8002
ADDIU	S0,S0,0008	;S0+=8: next DL
ADDIU	S7,S7,6610	;S7=80026610: primary colour index
ADDIU	S8,S8,6710	;S8=80026710: enviroment colour index
SW	R0,0040 (SP)	;SP+40=0
OR	S5,R0,R0	;S%=0
ADDIU	S6,R0,0050	;S6=0x50
//7000B3D0:
LW	T3,0040 (SP)	;T3=offset to entry in column
LUI	T4,8002
ADDIU	T4,T4,5030	;T4=80025030: p->screen entries
OR	S1,R0,R0	;S1=0	count
ADDU	S2,T3,T4	;S2=p->entry in column
//7000B3E4:	grab entry
LBU	S3,0000 (S2)	;S3=char
LBU	V1,0001 (S2)	;V1=colour#
BEQL	S3,R0,7000B504	;skip if no text
ADDIU	S1,S1,0001
BEQ	V1,S4,7000B42C	;branch if colour# -1 (invalid)
SLL	V0,V1,0x3	;V0=colour#*8	colour->offset
//7000B3FC:	write colourizer ops
ADDU	T5,S7,V0	;T5=80026610+offset: p->foreground colour
LW	AT,0000 (T5)	;AT=prim colour upper op [FA000000]
ADDU	T8,S8,V0	;T8=80026710+offset: p->background colour
ADDIU	S0,S0,0010	;S0+=10: next 2 DL ops
SW	AT,FFF0 (S0)	;AT->DL-10: rdp_setprimcolour upper half
LW	T7,0004 (T5)	;T7=80026614+offset: prim colour
OR	S4,V1,R0	;S4=V1: offset in colour tables
SW	T7,FFF4 (S0)	;T7->DL-C:  rdp_setprimcolour: colour
LW	AT,0000 (T8)	;AT=env colour upper op [FB000000]
SW	AT,FFF8 (S0)	;AT->DL-8:  rdp_setenvcolour upper half
LW	T1,0004 (T8)	;T7=80026714+offset: background colour
SW	T1,FFFC (S0)	;T1->DL-4:  rdp_setenvcolour: colour
//7000B42C:	test if you can draw text, apparently skipped randomly
JAL	7000A450	;V0=random#
NOP
LUI	T3,8002
LW	T3,68B8 (T3)	;T3=800268B8: percentage remaining
ANDI	T2,V0,00FF	;T2=random byte
SLTU	AT,T2,T3
BEQL	AT,R0,7000B504	;skip writing text if rand >= remaining, which is stupid
ADDIU	S1,S1,0001
JAL	7F0BD77C	;V0=#commands that can fit in block
OR	A0,S0,R0	;A0=S0: DL
SLTI	AT,V0,0400
BNEZ	AT,7000B500	;don't write if there isn't at least 0x400 commands available
OR	V0,S0,R0	;V0=S0: DL
//7000B460:	draw text using textrect
SLL	V1,S1,0x4	;V1=S1*0x10: count*0x10
SLL	A0,S5,0x3
SUBU	A0,A0,S5
ADDIU	T4,V1,0010	;T4=(S1+1)*10
ANDI	T6,T4,0FFF	;T6=((S1+1)*10) & 0xFFF
SLL	A0,A0,0x2	;A0=S5*1C
ANDI	T2,V1,0FFF	;T2=(S1*0x10) & 0xFFF
SLL	T3,T2,0xC	;T3=T2 * 0x1000: lower right x
SLL	T5,T6,0xC	;T5=T6 * 0x1000: upper left x
ADDIU	T9,A0,001C	;T9=(S5+1)*1C
ANDI	T4,A0,0FFF	;T4=(S5*1C) & 0xFFF: lower right y
LUI	AT,E400
ADDIU	A2,S3,FFE0	;A2=char-0x20
SRA	T2,A2,0x5	;T2=(char-0x20) / 0x20
OR	T7,T5,AT	;T7=E4000000 | ulx
OR	T6,T3,T4	;T6=lrx | lry
ANDI	T8,T9,0FFF	;T8=(S5+1)*1C) & 0xFFF: upper left y
OR	T1,T7,T8	;T1=E4000000 | ulx | uly
SLL	T3,T2,0x3
SUBU	T3,T3,T2
ADDIU	S0,S0,0008	;S0+=8: next DL op
OR	A1,S0,R0	;A1=S0: DL
SLL	T3,T3,0x5	;T3=(char-0x20) / 0x20 * 0xE0: bank#
SW	T1,0000 (V0)	;T1->DL+0: rdp_texrect: upper word
ANDI	T8,A2,001F	;T8=(char-0x20) & 0x1F
SW	T6,0004 (V0)	;T6->DL+4: rdp_texrect: lower word
SLL	T1,T8,0x17	;T1=((char-0x20) & 0x1F)*0x800000: entry in bank [0F800000]
ANDI	T4,T3,FFFF	;T4=T3->short
ADDIU	S0,S0,0008	;S0+=8: next DL op
LUI	T5,B400
SW	T5,0000 (A1)	;T5->DL+8: rsp_rdphalf_1: upper word
OR	A3,S0,R0	;A3=S0: DL
OR	T6,T1,T4	;T6=entry in bank | bank#: upper left s | upper left t
SW	T6,0004 (A1)	;T6->DL+C: rsp_rdphalf_1: lower word, of formula 0F80.01C0
LUI	T9,0400
ORI	T9,T9,0400	;T9=04000400: dsdx|dtdy
LUI	T5,B300
SW	T5,0000 (A3)	;T5->DL+10: rsp_rdphalf_2: upper word
SW	T9,0004 (A3)	;T9->DL+14: rsp_rdphalf_2: change in s/x, t/y
ADDIU	S0,S0,0008	;S0+=8: next DL op
//7000B500:	loop for each row and column (in a rather silly way...)
ADDIU	S1,S1,0001	;S1++
BNE	S1,S6,7000B3E4	;branch if count < 0x50
ADDIU	S2,S2,0046	;S2+=46: next character in row
LW	T7,0040 (SP)	;T7=SP+40: offset to entry in column
ADDIU	S5,S5,0001	;S5++	count++
ADDIU	AT,R0,0023	;AT=0x23: #characters in a column
ADDIU	T8,T7,0002	;T8=T7+2: next entry in column
BNE	S5,AT,7000B3D0	;loop for each character in column
SW	T8,0040 (SP)	;save updated value
//7000B524:	return
OR	V0,S0,R0	;V0=S0: p->DL
LW	RA,003C (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
LW	S5,002C (SP)
LW	S6,0030 (SP)
LW	S7,0034 (SP)
LW	S8,0038 (SP)
JR	RA
ADDIU	SP,SP,0088

# joystick manager

7000B560	C160	
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,8002
LUI	A1,8003
ADDIU	A1,A1,9390	;A1=80029390: "joy_c_debug"
JAL	70004E60	;V0=p->debug.notice.list entry for name A1 and data A0
ADDIU	A0,A0,68C0	;A0=800268C0: 
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,5368	;A1=80065368
ADDIU	A0,A0,5370	;A1=80065370
JAL	7000D6D0
ADDIU	A2,R0,0001	;A2=1
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,5388	;A1=80065388
ADDIU	A0,A0,5390	;A0=80065390
JAL	7000D6D0
ADDIU	A2,R0,0001	;A2=1
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,53A8	;A1=800653A8
ADDIU	A0,A0,53B0	;A0=800653B0
JAL	7000D6D0
ADDIU	A2,R0,0001	;A2=1
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,53C8	;A1=800653C8
ADDIU	A0,A0,53D0	;A0=800653D0
JAL	7000D6D0
ADDIU	A2,R0,0001	;A2=1
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,5328	;A1=80065328
ADDIU	A0,A0,5350	;A0=80065350
JAL	7000D6D0
ADDIU	A2,R0,000A	;A2=A
LUI	A1,8006
ADDIU	A1,A1,5350	;A1= 80065350
ADDIU	A0,R0,0005	;A0= entry 5
JAL	7000DC50	;set interrupt table entry #A0 with p->data A1 and value A2
OR	A2,R0,R0	;A2= 0
ADDIU	T6,R0,0001
LUI	AT,8002
SW	T6,6918 (AT)
LUI	AT,8002
SW	R0,6924 (AT)
LUI	T7,8006
LUI	AT,8002
ADDIU	V0,T7,4F30
LUI	A1,8006
SW	R0,6928 (AT)
ADDIU	A1,A1,5328
OR	V1,V0,R0
ADDIU	A0,R0,FFFF
SW	R0,01E0 (V1)
SW	R0,01E4 (V1)
SW	R0,01E8 (V1)
SW	R0,01EC (V1)
SW	A0,01F8 (V1)
ADDIU	V0,V0,01FC
ADDIU	V1,V1,01FC
SB	R0,FE1A (V0)
SB	R0,FE19 (V0)
SB	R0,FE18 (V0)
SH	R0,FE16 (V0)
SB	R0,FE14 (V0)
SB	R0,FE13 (V0)
SB	R0,FE12 (V0)
SH	R0,FE10 (V0)
SB	R0,FE0E (V0)
SB	R0,FE0D (V0)
SB	R0,FE0C (V0)
SH	R0,FE0A (V0)
SH	R0,FE04 (V0)
SB	R0,FE06 (V0)
SB	R0,FE07 (V0)
BNE	V0,A1,7000B63C
SB	R0,FE08 (V0)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000B6AC	C2AC
LUI	T6,8002
LW	T6,6918 (T6)	;T6=80026918: 
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
BEQ	T6,R0,7000B718
LUI	A0,8006
ADDIU	A0,A0,5370
ADDIU	A1,SP,001C
JAL	7000DF10
OR	A2,R0,R0
LUI	A0,8006
ADDIU	A0,A0,5390	;A0=80065390: 
ADDIU	A1,SP,001C	;A1=SP+1C: p->buffer
JAL	7000DDD0
ADDIU	A2,R0,0001
JAL	7000B810	;tests for disconnected controllers
NOP
LUI	A0,8006
ADDIU	A0,A0,53B0	;A0=800653B0: 
ADDIU	A1,SP,001C	;A1=SP+1C: p->buffer
JAL	7000DF10
OR	A2,R0,R0
LUI	A0,8006
ADDIU	A0,A0,53D0	;A0=800653D0: 
ADDIU	A1,SP,001C	;A1=SP+1C: p->buffer
JAL	7000DDD0
ADDIU	A2,R0,0001
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7000B728	B328	removed: V0=3 (output enabled | slot filled)
	accepts: A0=p->controller.packet
SW	A0,0000 (SP)
JR	RA
ADDIU	V0,R0,0003

7000B734	B334	test controller A0 for rumble pak and generate rumble commands if found
	accepts: A0=controller#
LUI	T6,8002
ADDIU	T6,T6,68D8
SLL	V0,A0,0x2
ADDU	A3,V0,T6
LW	T7,0000 (A3)	;A3=800268D8+offset: ctrl.rumble.present
ADDIU	SP,SP,FFD8
SW	RA,0014 (SP)
BLTZ	T7,7000B800
OR	A2,A0,R0	;A2=controller#
//7000B758:
LUI	T8,8006
ADDIU	T8,T8,53E8
ADDU	V1,V0,T8
LHU	T9,0000 (V1)
ANDI	T0,T9,0004
BEQL	T0,R0,7000B804
LW	RA,0014 (SP)
//7000B774:
LBU	T1,0002 (V1)
LUI	A0,8006
ADDIU	A0,A0,5350
ANDI	T2,T1,0001
BEQ	T2,R0,7000B800
//7000B788:
SLL	T3,A2,0x2
SUBU	T3,T3,A2
SLL	T3,T3,0x2
ADDU	T3,T3,A2
LUI	T4,8006
ADDIU	T4,T4,53F8
SLL	T3,T3,0x3	;T3=controller# * 68
ADDU	A1,T3,T4	;A1=800653F8+offset: 
SW	A1,0020 (SP)
SW	A2,0028 (SP)
JAL	70014740	;V0= device on PIF channel A2
SW	A3,001C (SP)
//7000B7B8:	return if not a rumble pak
ADDIU	AT,R0,000A	;AT= 8 (rumble pak) | 2 (port filled)
LW	A1,0020 (SP)	;A1= controller packet
LW	A2,0028 (SP)	;A2= channel#
BEQ	V0,AT,7000B7D4	;proceed if rumble pak preset
LW	A3,001C (SP)
ADDIU	AT,R0,000B	;AT= 8 (rumble pak) | 2 (port filled) | 1 (output enabled)
BNE	V0,AT,7000B800	;return if a rumble pak isn't ready in the slot
//7000B7D4:	rumble if required
LUI	A0,8006
ADDIU	A0,A0,5350	;A0=80065350
JAL	7000CD38	;handle rumble pak output to channel A2 using packet A1
SW	A3,001C (SP)
BNE	V0,R0,7000B7F8	;set presence invalid on error
LW	A3,001C (SP)
//7000B7EC:	set presence valid
ADDIU	T5,R0,0001
BEQ	R0,R0,7000B800
SW	T5,0000 (A3)	;1->ctrl.rumble.present
//7000B7F8:	set presence invalid
ADDIU	T6,R0,FFFF
SW	T6,0000 (A3)	;-1->ctrl.rumble.present
//7000B800:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

7000B810	C410	test for disconnected controllers
LUI	V0,8002
ADDIU	V0,V0,692C
LW	T6,0000 (V0)	;T6=8002692C: 
ADDIU	SP,SP,FFC8
SW	RA,001C (SP)
BEQ	T6,R0,7000B85C
SW	S0,0018 (SP)
//7000B82C:
LUI	A0,8006
LUI	A1,8002
LUI	A2,8006
SW	R0,0000 (V0)	;0->8002692C: 
ADDIU	A2,A2,53E8	;A2=800653E8: controller status target
ADDIU	A1,A1,68D0	;A1=800268D0: controller presence flags
JAL	70014900
ADDIU	A0,A0,5350	;A0=80065350: p->thread list
ADDIU	T7,R0,0001
LUI	AT,8002
BEQ	R0,R0,7000B8F0
SW	T7,691C (AT)	;1->8002691C: 
//7000B85C:
LUI	A0,8006
ADDIU	S0,R0,000F
JAL	70014CC0	;retrieve current controller status from PIF, storing at 80067CA0
ADDIU	A0,A0,5350	;A0=80065350: p->thread list
LUI	A0,8006
ADDIU	A0,A0,5350	;A0=80065350: p->thread list
OR	A1,R0,R0	;A1= NULL
JAL	7000DDD0
ADDIU	A2,R0,0001
LUI	A0,8006
JAL	70014D44	;return status list in A0 for current PIF status in buffer
ADDIU	A0,A0,53E8	;A0=800653E8: controller 1 status f/PIF
LUI	T8,8006
LBU	T8,53EB (T8)
LUI	T0,8006
LUI	T2,8006
ANDI	T9,T8,0008
BEQ	T9,R0,7000B8AC
LUI	T4,8006
ADDIU	S0,R0,000E
//7000B8AC:
LBU	T0,53EF (T0)
LUI	AT,8002
ANDI	T1,T0,0008
BEQ	T1,R0,7000B8C4
NOP
ADDIU	S0,S0,FFFE
//7000B8C4:
LBU	T2,53F3 (T2)
ANDI	T3,T2,0008
BEQ	T3,R0,7000B8D8
NOP
ADDIU	S0,S0,FFFC
//7000B8D8:
LBU	T4,53F7 (T4)
ANDI	T5,T4,0008
BEQ	T5,R0,7000B8EC
NOP
ADDIU	S0,S0,FFF8
//7000B8EC:
SB	S0,68D0 (AT)
OR	S0,R0,R0
//7000B8F4:
ADDIU	S0,S0,0001
SLL	T6,S0,0x18
SRA	S0,T6,0x18
SLTI	AT,S0,0004
BNEL	AT,R0,7000B8F8
ADDIU	S0,S0,0001
//7000B90C:
LUI	A3,8002
LUI	A2,8002
ADDIU	A2,A2,68D8
ADDIU	A3,A3,68D4
OR	S0,R0,R0
//7000B920:
LUI	T9,8002
LBU	T9,68D0 (T9)
ADDIU	T8,R0,0001
SLLV	A1,T8,S0
AND	T0,T9,A1
BEQ	T0,R0,7000B9B0
LBU	V1,0000 (A3)
//7000B93C:
LUI	T1,8006
ADDIU	T1,T1,53E8
SLL	A0,S0,0x2
ADDU	V0,A0,T1
LHU	T2,0000 (V0)
ANDI	T3,T2,0003
BEQL	T3,R0,7000B9B4
AND	T9,V1,A1
LBU	T4,0003 (V0)
SLTIU	V0,V1,0001
AND	T5,V0,A1
BNEL	T4,R0,7000B9B4
AND	T9,V1,A1
BNE	T5,R0,7000B980
ADDU	T6,A2,A0
LW	T7,0000 (T6)
BGTZ	T7,7000B9A4
//7000B980:
OR	A0,S0,R0
JAL	7000B734	;test for and handle rumble for controller A0
SW	A1,0024 (SP)
LUI	A3,8002
ADDIU	A3,A3,68D4
LUI	A2,8002
ADDIU	A2,A2,68D8
LBU	V1,0000 (A3)
LW	A1,0024 (SP)
//7000B9A4:
OR	T8,V1,A1
BEQ	R0,R0,7000B9CC
SB	T8,0000 (A3)
//7000B9B0:
AND	T9,V1,A1
BEQ	T9,R0,7000B9CC
XOR	T0,V1,A1
SLL	T1,S0,0x2
ADDU	T2,A2,T1
SB	T0,0000 (A3)
SW	R0,0000 (T2)
//7000B9CC:
ADDIU	S0,S0,0001
SLL	T3,S0,0x18
SRA	S0,T3,0x18
SLTI	AT,S0,0004
BNE	AT,R0,7000B920
NOP
//7000B9E4:	return
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0038
JR	RA
NOP

7000B9F8	C670	V0= #controllers connected
LUI	T6,8002
LW	T6,68C4 (T6)	;T6=800268C4: p->ctrl.input.index.cur
LUI	V0,8002
LW	V1,01F8 (T6)	;V1=T6+1F8: 
BLTZ	V1,7000BA20	;if -1, derive from controller presence flags
NOP
SLL	V0,V1,0x18
SRA	T7,V0,0x18
JR	RA
OR	V0,T7,R0	;V0= ->byte
//7000BA20:	detect controller 1
LBU	V0,68D0 (V0)	;V0=800268D0: controller presence flags
ANDI	T8,V0,0001
BNE	T8,R0,7000BA38	;return 0 if controller 1 not present
ANDI	T9,V0,0002
JR	RA
OR	V0,R0,R0
//7000BA38:	detect controller 2
BNE	T9,R0,7000BA48	;return 1 if controller 2 not present
ANDI	T0,V0,0004
JR	RA
ADDIU	V0,R0,0001
//7000BA48:	detect controller 3
BNE	T0,R0,7000BA58	;return 2 if controller 3 not present
ANDI	T1,V0,0008
JR	RA
ADDIU	V0,R0,0002
//7000BA58:	detect controller 4
BNE	T1,R0,7000BA68	;return 3 if controller 4 not present
ADDIU	V0,R0,0004
JR	RA
ADDIU	V0,R0,0003
//7000BA68:	return 4 if all present
JR	RA
NOP

7000BA70	C670	V0= controller presence flags
LUI	V0,8002
JR	RA
LBU	V0,68D0 (V0)	;V0=800268D0: controller presence flags

7000BA7C	C67C	occillcate rumble pak when requested
	Note: this function patched in later versions.
ADDIU	SP,SP,FFC8
SW	S4,0028 (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
SW	S6,0030 (SP)
SW	S5,002C (SP)
SW	S3,0024 (SP)
SW	S2,0020 (SP)
LUI	S0,8002
LUI	S1,8002
LUI	S4,8002
SW	RA,0034 (SP)
ADDIU	S4,S4,6908
ADDIU	S1,S1,68E8
ADDIU	S0,S0,68F8
OR	S2,R0,R0	;S2=0	player count
OR	S3,R0,R0	;S3=0	channel error offset
ADDIU	S5,R0,0001
ADDIU	S6,R0,0004
//7000BAC8:
LW	V0,0000 (S4)	;V0=80026908: 
LW	T6,0000 (S1)	;T6=800268E8: rumble state flag
SLL	T7,S2,0x2
SUBU	T7,T7,S2
BEQ	T6,V0,7000BB44
SLL	T7,T7,0x2
ADDU	T7,T7,S2
LUI	T8,8006
ADDIU	T8,T8,53F8
SLL	T7,T7,0x3	;T7=S2*68: S2->offset
BNE	S5,V0,7000BB20
ADDU	A0,T7,T8	;A0=800653F8+offset: player S2's controller packet
//7000BAF8:
JAL	7000CAAC	;send rumble on to controller packet A0 via PIFram
NOP
BNE	V0,R0,7000BB10	;branch if error
LUI	T9,8002
BEQ	R0,R0,7000BB44
SW	S5,0000 (S1)	;1->800268E8: 
//7000BB10:	reset flag on error
ADDIU	T9,T9,68D8
ADDU	V0,S3,T9
BEQ	R0,R0,7000BB44
SW	R0,0000 (V0)	;0->800268D8+offset: reset flag for channel on error
//7000BB20:	disable rumble
JAL	7000C980	;send rumble off to controller packet A0 via PIFram
NOP
BNE	V0,R0,7000BB38	;branch if error
LUI	T0,8002
BEQ	R0,R0,7000BB44
SW	R0,0000 (S1)	;0->800268E8: 
//7000BB38:	reset flag on error
ADDIU	T0,T0,68D8
ADDU	V0,S3,T0
SW	R0,0000 (V0)	;0->800268D8+offset: reset flag for channel on error
//7000BB44:
LW	V0,0000 (S0)
ADDIU	S2,S2,0001
ADDIU	S3,S3,0004
BGTZ	V0,7000BB60
ADDIU	S1,S1,0004
BEQ	R0,R0,7000BB74
SW	R0,0000 (S0)
//7000BB60:
ADDIU	T1,V0,FFFF
BGTZ	T1,7000BB74
SW	T1,0000 (S0)
SW	R0,0000 (S0)
SW	R0,0000 (S4)
//7000BB74:	iterate for each player
ADDIU	S4,S4,0004
BNE	S2,S6,7000BAC8
ADDIU	S0,S0,0004
//7000BB80:	return
LW	RA,0034 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
LW	S5,002C (SP)
LW	S6,0030 (SP)
JR	RA
ADDIU	SP,SP,0038

7000BBA8	C7A8	set ramrom replay TLB handler to A0, command size to A1
	accepts: A0=p->TLB ramrom replay handler, A1=#controllers/command size
LUI	AT,8002
SW	A0,6924 (AT)	;A0->80026924: 
LUI	AT,8006
JR	RA
SW	A1,5324 (AT)	;A1->80065324: 

7000BBBC	C7BC	set ramrom record TLB handler to A0
	accepts: A0=p->TLB ramrom record handler
LUI	AT,8002
JR	RA
SW	A0,6928 (AT)	;A0->80026928: 

7000BBC8	C7C8	
	accepts: A0=p->controller input index
LW	T6,01E0 (A0)
LW	T7,01E8 (A0)
OR	V0,R0,R0
ADDIU	T1,R0,0014
SW	T6,01E4 (A0)
SW	T7,01E0 (A0)
SLL	T8,V0,0x1
ADDU	V1,A0,T8
SH	R0,01F0 (V1)
LW	T9,01E0 (A0)
LW	A1,01E4 (A0)
BEQ	A1,T9,7000BCEC
ADDIU	T2,A1,0001
DIV	T2,T1
SLL	A3,V0,0x2
MFHI	A2
SUBU	A3,A3,V0
SLL	A3,A3,0x1
BNE	T1,R0,7000BC1C
NOP
BREAK	00001C00	;Break: division by zero
ADDIU	AT,R0,FFFF
BNE	T1,AT,7000BC34
LUI	AT,8000
BNE	T2,AT,7000BC34
NOP
BREAK	00001800
ADDIU	T6,A2,0013
DIV	T6,T1
MFHI	T7
SLL	T8,T7,0x2
SLL	T3,A2,0x2
SUBU	T8,T8,T7
SUBU	T3,T3,A2
SLL	T8,T8,0x3
SLL	T3,T3,0x3
ADDU	T9,A0,T8
ADDU	T4,A0,T3
ADDU	T2,T9,A3
LHU	T0,0000 (T2)
ADDU	T5,T4,A3
LHU	A1,0000 (T5)
LHU	T3,01F0 (V1)
NOR	T4,T0,R0
BNE	T1,R0,7000BC84
NOP
BREAK	00001C00	;Break: division by zero
ADDIU	AT,R0,FFFF
BNE	T1,AT,7000BC9C
LUI	AT,8000
BNE	T6,AT,7000BC9C
NOP
BREAK	00001800
AND	T5,A1,T4
OR	T6,T3,T5
SH	T6,01F0 (V1)
LW	T7,01E0 (A0)
ADDIU	T8,A2,0001
BEQL	A2,T7,7000BCF0
ADDIU	V0,V0,0001
DIV	T8,T1
MFHI	A2
BNE	T1,R0,7000BCCC
NOP
BREAK	00001C00	;Break: division by zero
ADDIU	AT,R0,FFFF
BNE	T1,AT,7000BCE4
LUI	AT,8000
BNE	T8,AT,7000BCE4
NOP
BREAK	00001800
BEQ	R0,R0,7000BC38
ADDIU	T6,A2,0013
ADDIU	V0,V0,0001
SLL	T9,V0,0x18
SRA	V0,T9,0x18
SLTI	AT,V0,0004
BNEL	AT,R0,7000BBE4
SLL	T8,V0,0x1
JR	RA
NOP

7000BD0C	C90C	redirect to ramrom handlers if set
LUI	V0,8002
LW	V0,6924 (V0)	;V0=80026924: p->ramrom replay TLB handler
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
BEQ	V0,R0,7000BD48	;branch if not replaying
//7000BD20:	use the replay handler
LUI	A0,8006
LUI	A1,8006
LW	A1,530C (A1)	;A1=8006530C: 
JALR	RA,V0		;jump to replay handler (7F0C0080)
ADDIU	A0,A0,512C	;A0=8006512C: 
LUI	AT,8006
LUI	A0,8006
SW	V0,5314 (AT)	;V0->80065314: 
JAL	7000BBC8
ADDIU	A0,A0,512C	;A0=8006512C: 
//7000BD48:
LUI	A0,8006
JAL	7000BBC8
ADDIU	A0,A0,4F30	;A0=80064F30: p->cur.point in controller input index
LUI	V0,8002
LW	V0,6928 (V0)	;V0=80026928: p->ramrom record TLB handler
LUI	A0,8006
ADDIU	A0,A0,4F30	;A0=80064F30: p->cur.point in controller input index
BEQL	V0,R0,7000BD7C	;branch if not recording
LW	RA,0014 (SP)
//7000BD6C:	record controller input packet
LW	A1,01E4 (A0)	;A1=cont.index+1E4: [E]
JALR	RA,V0		;jump to record handler (7F0BFE5C)
LW	A2,01E0 (A0)	;A2=cont.index+1E0: [F]
//7000BD78:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000BD88	C988
ADDIU	SP,SP,FFB0
SW	RA,0014 (SP)
LUI	A0,8006
ADDIU	A0,A0,5370	;A0=80065370: 
ADDIU	A1,SP,004C	;A1=SP+4C: p->buffer
JAL	7000DDD0
OR	A2,R0,R0
BNE	V0,R0,7000BDFC
LUI	T6,8002
LW	T6,68C8 (T6)
LUI	A0,8006
ADDIU	A0,A0,5350	;A0=80065350: 
BEQ	T6,R0,7000BDD0
ADDIU	A1,SP,004C	;A1=SP+4C: p->buffer
JAL	7000DDD0
ADDIU	A2,R0,0001
LUI	AT,8002
SW	R0,68C8 (AT)
//7000BDD0:
LUI	A0,8006
ADDIU	A0,A0,5390
ADDIU	A1,SP,004C
JAL	7000DF10
OR	A2,R0,R0
LUI	V1,8002
ADDIU	V1,V1,68CC
LW	T7,0000 (V1)
ADDIU	T8,T7,0001
BEQ	R0,R0,7000C0DC
SW	T8,0000 (V1)
//7000BDFC:
LUI	A0,8006
ADDIU	A0,A0,53B0	;A0=800653B0: 
ADDIU	A1,SP,004C	;A1=SP+4C: p->buffer
JAL	7000DDD0
OR	A2,R0,R0
BNE	V0,R0,7000BE58
LUI	A0,8006
JAL	70014D70	;retrieve controller input from PIF, storing at 80067CA0
ADDIU	A0,A0,5350
ADDIU	T9,R0,0001
LUI	AT,8002
LUI	A0,8006
SW	T9,68C8 (AT)
ADDIU	A0,A0,53D0
ADDIU	A1,SP,004C
JAL	7000DF10
OR	A2,R0,R0
LUI	V1,8002
ADDIU	V1,V1,68CC
LW	T3,0000 (V1)
ADDIU	T4,T3,FFFF
BEQ	R0,R0,7000C0DC
SW	T4,0000 (V1)
//7000BE58:
LUI	V1,8002
ADDIU	V1,V1,68CC
LW	T5,0000 (V1)
LUI	T6,8002
BNEL	T5,R0,7000C0E0
LW	RA,0014 (SP)
LW	T6,691C (T6)
LUI	A0,8006
ADDIU	A0,A0,5350	;A0=80065350: 
BEQ	T6,R0,7000C0DC
ADDIU	A1,SP,004C	;A1=SP+4C: p->buffer
JAL	7000DDD0
OR	A2,R0,R0
BNE	V0,R0,7000C0DC
LUI	A1,8006
LUI	AT,8002
ADDIU	A1,A1,4F30
SW	R0,68C8 (AT)
LW	V0,01E8 (A1)
ADDIU	AT,R0,0014
LW	T8,01E4 (A1)
ADDIU	V1,V0,0001
DIV	V1,AT
MFHI	V1
BNEL	V1,T8,7000BEC8
SLL	T9,V1,0x2
OR	V1,V0,R0
//7000BEC4:
SLL	T9,V1,0x2
SUBU	T9,T9,V1
SLL	T9,T9,0x3
ADDU	A0,A1,T9
JAL	70014E34
SW	V1,0040 (SP)
LW	V0,0040 (SP)
ADDIU	AT,R0,0014
LUI	A0,8002
ADDIU	T3,V0,0013
DIV	T3,AT
ADDIU	A0,A0,6920
LW	T5,0000 (A0)
MFHI	T4
ADDIU	AT,R0,0078
ADDIU	T6,T5,0001
DIV	T6,AT
LUI	A1,8006
ADDIU	A1,A1,4F30
MFHI	T8
SW	T4,01EC (A1)
SW	T6,0000 (A0)
BNE	T8,R0,7000BF38
SW	V0,01E8 (A1)
JAL	7000B810	;tests for disconnected controllers
NOP
LUI	A1,8006
ADDIU	A1,A1,4F30
LW	V0,01E8 (A1)
//7000BF38:
SLL	T9,V0,0x2
SUBU	T9,T9,V0
SLL	T9,T9,0x3
ADDU	A2,A1,T9
OR	A0,R0,R0
ADDIU	A3,R0,0006
MULTU	A0,A3
MFLO	V0
ADDU	T3,A2,V0
LBU	V1,0004 (T3)
BNE	V1,R0,7000BF8C
NOP
LW	T4,01EC (A1)
SLL	T5,T4,0x2
SUBU	T5,T5,T4
SLL	T5,T5,0x3
ADDU	T6,A1,T5
ADDU	T7,T6,V0
LBU	T8,0004 (T7)
BNE	T8,R0,7000BFB8
NOP
BEQ	V1,R0,7000BFC8
ADDIU	A0,A0,0001
LW	T9,01EC (A1)
SLL	T3,T9,0x2
SUBU	T3,T3,T9
SLL	T3,T3,0x3
ADDU	T4,A1,T3
ADDU	T5,T4,V0
LBU	T6,0004 (T5)
BNEL	T6,R0,7000BFCC
SLL	T7,A0,0x18
JAL	7000B810	;tests for disconnected controllers
NOP
BEQ	R0,R0,7000BFDC
NOP
//7000BFC8:
SLL	T7,A0,0x18
SRA	A0,T7,0x18
SLTI	AT,A0,0004
BNE	AT,R0,7000BF50
NOP
JAL	7000BA7C
NOP
LUI	A0,8006
JAL	70014D70	;retrieve controller input from PIF, storing at 80067CA0
ADDIU	A0,A0,5350
LUI	V1,8002
LW	V1,6970 (V1)
ADDIU	T9,R0,0001
LUI	AT,8002
SW	T9,68C8 (AT)
LUI	AT,8002
ADDIU	V1,V1,0001
SW	V1,6970 (AT)
SLTI	AT,V1,003C
BNE	AT,R0,7000C0DC
LUI	T1,8002
LUI	A0,8002
LUI	A1,8002
LUI	V1,8002
LUI	T2,8002
ADDIU	T2,T2,6970
ADDIU	V1,V1,6960
ADDIU	A1,A1,6950
ADDIU	A0,A0,6940
ADDIU	T1,T1,6930
LW	V0,0000 (T1)
BNEL	V0,R0,7000C074
SW	R0,0000 (T1)
LW	T3,0000 (A0)
BNEL	T3,R0,7000C074
SW	R0,0000 (T1)
LW	T4,0000 (A1)
BNEL	T4,R0,7000C074
SW	R0,0000 (T1)
LW	T5,0000 (V1)
BEQL	T5,R0,7000C084
LW	V0,0004 (T1)
SW	R0,0000 (T1)
SW	R0,0000 (A0)
SW	R0,0000 (A1)
SW	R0,0000 (V1)
LW	V0,0004 (T1)
BNEL	V0,R0,7000C0B4
SW	R0,0004 (T1)
LW	T6,0004 (A0)
BNEL	T6,R0,7000C0B4
SW	R0,0004 (T1)
LW	T7,0004 (A1)
BNEL	T7,R0,7000C0B4
SW	R0,0004 (T1)
LW	T8,0004 (V1)
BEQL	T8,R0,7000C0C4
ADDIU	V1,V1,0008
SW	R0,0004 (T1)
SW	R0,0004 (A0)
SW	R0,0004 (A1)
SW	R0,0004 (V1)
ADDIU	V1,V1,0008
ADDIU	T1,T1,0008
ADDIU	A0,A0,0008
BNE	V1,T2,7000C040
ADDIU	A1,A1,0008
LUI	AT,8002
SW	R0,6970 (AT)
LW	RA,0014 (SP)
ADDIU	SP,SP,0050
JR	RA
NOP

7000C0EC	CCEC	V0= current position left<->right of controller A0's control stick
	accepts: A0=controller#
LUI	V1,8002
LW	V1,68C4 (V1)
SW	A0,0000 (SP)
SLL	T6,A0,0x18
LW	T8,01F8 (V1)
SRA	T7,T6,0x18
OR	A0,T7,R0
BGEZ	T8,7000C144
LUI	T9,8002
LBU	T9,68D0 (T9)
LUI	T3,8002
ADDIU	T3,T3,6930
SRAV	T0,T9,T7
ANDI	T1,T0,0001
BNE	T1,R0,7000C144
SLL	T2,T7,0x2
ADDU	V1,T2,T3
LW	T4,0000 (V1)
OR	V0,R0,R0
ADDIU	T5,T4,0001
JR	RA
SW	T5,0000 (V1)
LW	T6,01E0 (V1)
SLL	T9,A0,0x2
SUBU	T9,T9,A0
SLL	T7,T6,0x2
SUBU	T7,T7,T6
SLL	T7,T7,0x3
ADDU	T8,V1,T7
SLL	T9,T9,0x1
ADDU	T0,T8,T9
LB	V0,0002 (T0)
JR	RA
NOP

7000C174	CD74	V0= previous position left<->right of controller A0's control stick
	accepts: A0=controller#
LUI	V1,8002
LW	V1,68C4 (V1)
SW	A0,0000 (SP)
SLL	T6,A0,0x18
LW	T8,01F8 (V1)
SRA	T7,T6,0x18
OR	A0,T7,R0
BGEZ	T8,7000C1CC
LUI	T9,8002
LBU	T9,68D0 (T9)
LUI	T3,8002
ADDIU	T3,T3,6930
SRAV	T0,T9,T7
ANDI	T1,T0,0001
BNE	T1,R0,7000C1CC
SLL	T2,T7,0x2
ADDU	V1,T2,T3
LW	T4,0000 (V1)
OR	V0,R0,R0
ADDIU	T5,T4,0001
JR	RA
SW	T5,0000 (V1)
LW	T6,01E4 (V1)
SLL	T9,A0,0x2
SUBU	T9,T9,A0
SLL	T7,T6,0x2
SUBU	T7,T7,T6
SLL	T7,T7,0x3
ADDU	T8,V1,T7
SLL	T9,T9,0x1
ADDU	T0,T8,T9
LB	V0,0002 (T0)
JR	RA
NOP

7000C1FC	CDFC	V0= current position up<->down of controller A0's control stick
	accepts: A0=controller#
LUI	V1,8002
LW	V1,68C4 (V1)
SW	A0,0000 (SP)
SLL	T6,A0,0x18
LW	T8,01F8 (V1)
SRA	T7,T6,0x18
OR	A0,T7,R0
BGEZ	T8,7000C254
LUI	T9,8002
LBU	T9,68D0 (T9)
LUI	T3,8002
ADDIU	T3,T3,6940
SRAV	T0,T9,T7
ANDI	T1,T0,0001
BNE	T1,R0,7000C254
SLL	T2,T7,0x2
ADDU	V1,T2,T3
LW	T4,0000 (V1)
OR	V0,R0,R0
ADDIU	T5,T4,0001
JR	RA
SW	T5,0000 (V1)
LW	T6,01E0 (V1)
SLL	T9,A0,0x2
SUBU	T9,T9,A0
SLL	T7,T6,0x2
SUBU	T7,T7,T6
SLL	T7,T7,0x3
ADDU	T8,V1,T7
SLL	T9,T9,0x1
ADDU	T0,T8,T9
LB	V0,0003 (T0)
JR	RA
NOP

7000C284	CE84	V0= previous position up<->down of controller A0's control stick
	accepts: A0=controller#
LUI	V1,8002
LW	V1,68C4 (V1)
SW	A0,0000 (SP)
SLL	T6,A0,0x18
LW	T8,01F8 (V1)
SRA	T7,T6,0x18
OR	A0,T7,R0
BGEZ	T8,7000C2DC
LUI	T9,8002
LBU	T9,68D0 (T9)
LUI	T3,8002
ADDIU	T3,T3,6940
SRAV	T0,T9,T7
ANDI	T1,T0,0001
BNE	T1,R0,7000C2DC
SLL	T2,T7,0x2
ADDU	V1,T2,T3
LW	T4,0000 (V1)
OR	V0,R0,R0
ADDIU	T5,T4,0001
JR	RA
SW	T5,0000 (V1)
LW	T6,01E4 (V1)
SLL	T9,A0,0x2
SUBU	T9,T9,A0
SLL	T7,T6,0x2
SUBU	T7,T7,T6
SLL	T7,T7,0x3
ADDU	T8,V1,T7
SLL	T9,T9,0x1
ADDU	T0,T8,T9
LB	V0,0003 (T0)
JR	RA
NOP

7000C30C	CF0C	test player A0's controller for button mask A1 held
	accepts: A0=controller#, A1=button mask
LUI	V1,8002
LW	V1,68C4 (V1)	;V1=800268C4: p->current point in controller input index
SW	A0,0000 (SP)
SW	A1,0004 (SP)
LW	T9,01F8 (V1)
SLL	T6,A0,0x18
SRA	T7,T6,0x18
ANDI	T8,A1,FFFF
OR	A1,T8,R0	;(unsigned short) A1
BGEZ	T9,7000C370
OR	A0,T7,R0	;(short) A0
//7000C338:	return 0 if controller not present
LUI	T0,8002
LBU	T0,68D0 (T0)	;T0=800268D0: controller presence flags
LUI	T4,8002
ADDIU	T4,T4,6950
SRAV	T1,T0,T7	;flags>>controller
ANDI	T2,T1,0001	;T2= flag for player A0
BNE	T2,R0,7000C370	;skip if controller present
SLL	T3,T7,0x2
ADDU	V1,T3,T4
LW	T5,0000 (V1)	;T5=80026950+offset: presence failure flag on hold
OR	V0,R0,R0	;V0= no buttons pressed
ADDIU	T6,T5,0001
JR	RA
SW	T6,0000 (V1)	;set presence failure flag on hold
//7000C370:	return V0= requested buttons held
LW	T7,01E0 (V1)	;T7= ctrl.input.index + 1E0: previous index
SLL	T0,A0,0x2
SUBU	T0,T0,A0
SLL	T8,T7,0x2
SUBU	T8,T8,T7
SLL	T8,T8,0x3	;T8= index * 0x18
ADDU	T9,V1,T8
SLL	T0,T0,0x1	;T0= A0 * 6
ADDU	T1,T9,T0
LHU	T2,0000 (T1)	;T2= ctrl.input.index + section T7 + controller A0: previous buttons
AND	V0,T2,A1
ANDI	T3,V0,FFFF
OR	V0,T3,R0	;V0= previous & mask
JR	RA
NOP

7000C3AC	CFAC	test player A0's controller for button mask A1 pressed
	accepts: A0=player#, A1=button mask
	8000	A button	4000	B button	2000	Z button	1000	Start button
	0800	up-Dpad		0400	down-Dpad	0200	left-Dpad	0100	right-Dpad
	0020	L button	0010	R button
	0008	up-C button	0004	down-C button	0002	left-C button	0001	right-C button
LUI	V1,8002
LW	V1,68C4 (V1)	;V1=800268C4: p->current point in controller input index
SW	A0,0000 (SP)
SW	A1,0004 (SP)
LW	T9,01F8 (V1)	;T9=ctrl.input.index+1F8: 
SLL	T6,A0,0x18
SRA	T7,T6,0x18
ANDI	T8,A1,FFFF
OR	A1,T8,R0	;(unsigned short) A1
BGEZ	T9,7000C410	;skip if not -1
OR	A0,T7,R0	;(short) A0
//7000C3D8:	return 0 if controller not present
LUI	T0,8002
LBU	T0,68D0 (T0)	;T0=800268D0: controller presence flags
LUI	T4,8002
ADDIU	T4,T4,6960
SRAV	T1,T0,T7	;flags>>controller
ANDI	T2,T1,0001	;T2= flag for player A0
BNE	T2,R0,7000C410	;skip if controller present
SLL	T3,T7,0x2
ADDU	V1,T3,T4
LW	T5,0000 (V1)	;T5=80026960+offset: presence failure flag
OR	V0,R0,R0	;V0= no buttons pressed
ADDIU	T6,T5,0001
JR	RA
SW	T6,0000 (V1)	;set presence failure flag on press
//7000C410:	return V0= requested buttons pressed
SLL	T7,A0,0x1
ADDU	T8,V1,T7
LHU	T9,01F0 (T8)	;T9= ctrl.input.index + controller.offset + 1F0: current buttons pressed
AND	V0,T9,A1
ANDI	T0,V0,FFFF
OR	V0,T0,R0	;V0= buttons & mask
JR	RA
NOP

7000C430	D030	print controller button state
	accepts: A0=p->target, A1=value
	print 16 bits in A1 as ' ' or '1' to string A0, top to bottom
SW	A1,0004 (SP)
ANDI	V1,A1,FFFF	;V1= A1 f/caller: shift
ADDIU	A1,R0,0011
ADDIU	V0,R0,000F
//7000C440:	if upper bit set, print '1', not ' '
SRAV	T7,V1,V0	;T7= A1 / 0x8000
ANDI	T8,T7,0001	;T8= 0x8000 bit set
SLT	T9,R0,T8
MULTU	T9,A1
ADDIU	V0,V0,FFFF	;V0-=1
ADDIU	A0,A0,0001
MFLO	T0		;T0= bit * 0x11
ADDIU	T1,T0,0020	;T1= b' ' or b'1' if bit set
BGEZ	V0,7000C440
SB	T1,FFFF (A0)	;set byte
//7000C468:	return
JR	RA
NOP

7000C470	D070	V0= #controllers connected; loops and redetects once for each controller
ADDIU	SP,SP,FFE0
SW	RA,001C (SP)
SW	S0,0018 (SP)
JAL	7000B9F8	;V0= #controllers connected
OR	S0,R0,R0
BLEZL	V0,7000C4A4	;return if none
LW	RA,001C (SP)
//7000C48C:	loop once for each detected controller
JAL	7000B9F8	;V0= #controllers connected
ADDIU	S0,S0,0001
SLT	AT,S0,V0
BNE	AT,R0,7000C48C	;loop until S0 matches #connected
NOP
//7000C4A0:	return
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7000C4B4	D0B4	V0=state of player A0's control stick; -2 left : 1 right
	accepts: A0=player#, A1=tolerance.low, A2=tolerance.high
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SLL	T6,A0,0x18
SRA	A0,T6,0x18
SW	A1,001C (SP)
JAL	7000C0EC	;cur.controller A0 horz.stick pos.
SW	A2,0020 (SP)
ADDIU	A0,V0,003C
SLTI	AT,A0,0079
BNE	AT,R0,7000C4E8
LW	A1,001C (SP)
ADDIU	A0,R0,0078
BGEZ	A0,7000C4F4
LW	T8,0020 (SP)
OR	A0,R0,R0
SUBU	T9,T8,A1
MULTU	A0,T9
ADDIU	AT,R0,0078
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
MFLO	T0
NOP
NOP
DIV	T0,AT
MFLO	T1
ADDU	V0,T1,A1
JR	RA
NOP

7000C528	7128	V0=state of player A0's control stick; -2 down : 1 up
	accepts: A0=player#, A1=tolerance.low, A2=tolerance.high
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SLL	T6,A0,0x18
SRA	A0,T6,0x18
SW	A1,001C (SP)
JAL	7000C1FC	;cur.controller A0 vert.stick pos.
SW	A2,0020 (SP)
ADDIU	A0,V0,003C
SLTI	AT,A0,0079
BNE	AT,R0,7000C55C
LW	A1,001C (SP)
ADDIU	A0,R0,0078
BGEZ	A0,7000C568
LW	T8,0020 (SP)
OR	A0,R0,R0
SUBU	T9,T8,A1
MULTU	A0,T9
ADDIU	AT,R0,0078
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
MFLO	T0
NOP
NOP
DIV	T0,AT
MFLO	T1
ADDU	V0,T1,A1
JR	RA
NOP

7000C59C	D19C
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SLL	T6,A0,0x18
SRA	A0,T6,0x18
SW	A1,001C (SP)
JAL	7000C0EC	;cur.controller A0 horz.stick pos.
SW	A2,0020 (SP)
ADDIU	A0,V0,003C
SLTI	AT,A0,0079
BNE	AT,R0,7000C5D0
LWC1	F2,001C (SP)
ADDIU	A0,R0,0078
BGEZL	A0,7000C5E0
MTC1	A0,F4
OR	A0,R0,R0
MTC1	A0,F4
LUI	AT,42F0
MTC1	AT,F8
CVT.S.W	F6,F4
LWC1	F16,0020 (SP)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
SUB.S	F18,F16,F2
DIV.S	F10,F6,F8
MUL.S	F4,F10,F18
JR	RA
ADD.S	F0,F4,F2

7000C60C	D20C
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SLL	T6,A0,0x18
SRA	A0,T6,0x18
SW	A1,001C (SP)
JAL	7000C1FC	;cur.controller A0 vert.stick pos.
SW	A2,0020 (SP)
ADDIU	A0,V0,003C
SLTI	AT,A0,0079
BNE	AT,R0,7000C640
LWC1	F2,001C (SP)
ADDIU	A0,R0,0078
BGEZL	A0,7000C650
MTC1	A0,F4
OR	A0,R0,R0
MTC1	A0,F4
LUI	AT,42F0
MTC1	AT,F8
CVT.S.W	F6,F4
LWC1	F16,0020 (SP)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
SUB.S	F18,F16,F2
DIV.S	F10,F6,F8
MUL.S	F4,F10,F18
JR	RA
ADD.S	F0,F4,F2

7000C67C	D27C
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
LUI	A0,8006
ADDIU	A0,A0,5370
ADDIU	A1,SP,001C
JAL	7000DF10
OR	A2,R0,R0
LUI	A0,8006
ADDIU	A0,A0,5390	;A0=80065390: 
ADDIU	A1,SP,001C	;A1=SP+1C: p->buffer
JAL	7000DDD0
ADDIU	A2,R0,0001
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7000C6BC	D2BC
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
LUI	A0,8006
ADDIU	A0,A0,53B0
ADDIU	A1,SP,001C
JAL	7000DF10
OR	A2,R0,R0
LUI	A0,8006
ADDIU	A0,A0,53D0	;A0=800653D0: 
ADDIU	A1,SP,001C	;A1=SP+1C: p->buffer
JAL	7000DDD0
ADDIU	A2,R0,0001
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7000C6FC	D2FC
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
JAL	7000C67C
NOP
LUI	A0,8006
JAL	70014FD0
ADDIU	A0,A0,5350
JAL	7000C6BC
SW	V0,001C (SP)
LW	RA,0014 (SP)
LW	V0,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7000C734	D334
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
SW	A0,0020 (SP)
JAL	7000C67C
SW	A1,0024 (SP)
LUI	A0,8006
ADDIU	A0,A0,5350
LBU	A1,0023 (SP)
JAL	70015040
LW	A2,0024 (SP)
JAL	7000C6BC
SW	V0,001C (SP)
LW	RA,0014 (SP)
LW	V0,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7000C778	D378
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
SW	A0,0020 (SP)
JAL	7000C67C
SW	A1,0024 (SP)
LUI	A0,8006
ADDIU	A0,A0,5350
LBU	A1,0023 (SP)
JAL	70015340
LW	A2,0024 (SP)
JAL	7000C6BC
SW	V0,001C (SP)
LW	RA,0014 (SP)
LW	V0,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7000C7BC	D3BC
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
SW	A0,0020 (SP)
SW	A1,0024 (SP)
JAL	7000C67C
SW	A2,0028 (SP)
LUI	A0,8006
ADDIU	A0,A0,5350
LBU	A1,0023 (SP)
LW	A2,0024 (SP)
JAL	70015820
LW	A3,0028 (SP)
JAL	7000C6BC
SW	V0,001C (SP)
LW	RA,0014 (SP)
LW	V0,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7000C808	D408
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
SW	A0,0020 (SP)
SW	A1,0024 (SP)
JAL	7000C67C
SW	A2,0028 (SP)
LUI	A0,8006
ADDIU	A0,A0,5350
LBU	A1,0023 (SP)
LW	A2,0024 (SP)
JAL	70015960
LW	A3,0028 (SP)
JAL	7000C6BC
SW	V0,001C (SP)
LW	RA,0014 (SP)
LW	V0,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7000C854	C454	triggers A1 seconds of rumble on controller A0
	accepts: A0=controller#, A1=(float) seconds
LUI	T6,8002
LW	T6,6924 (T6)	;T6=80026924: rumble disabled flag
MTC1	A1,F12		;F12=A1: #seconds
SLL	V1,A0,0x2	;V1=controller# -> offset
BNE	T6,R0,7000C8D4	;return if rumble disabled
//7000C868:
LUI	T7,8002
ADDU	T7,T7,V1
LW	T7,68D8 (T7)	;T7=800268D8+offset: ctrl.rumble.preset
LUI	T1,8002
LUI	AT,4270
BLEZ	T7,7000C8D4	;return if no rumble pak to rumble
ADDU	T1,T1,V1
//7000C884:	if duration is longer than current duration, replace it
MTC1	AT,F4		;F4= 60.0	[42700000]
LUI	T8,8002
ADDIU	T8,T8,68F8
MUL.S	F6,F12,F4	;F6=#seconds * 60.0: 'millisecond' value
ADDU	A0,V1,T8
LW	T0,0000 (A0)	;T0=800268F8+offset: ctrl.rumble.dur
ADDIU	T2,R0,0001
TRUNC.W.S	F8,F6
MFC1	V0,F8		;V0=milliseconds
NOP
SLT	AT,T0,V0
BEQ	AT,R0,7000C8BC	;if shorter time, skip it
NOP
SW	V0,0000 (A0)	;set ctrl.rumble.dur
//7000C8BC:
LW	T1,68E8 (T1)	;T1=800268E8+offset: 
LUI	AT,8002
ADDU	AT,AT,V1
BNE	T1,R0,7000C8D4	;return if set
NOP
SW	T2,6908 (AT)	;1->80026908+offset: rumble activated
//7000C8D4:	return
JR	RA
NOP

7000C8DC	D4DC	reset controller and rumble pak detection
ADDIU	T6,R0,0001
LUI	AT,8002
SW	T6,68E8 (AT)	;1->800268E8[0]
LUI	AT,8002
SW	R0,6908 (AT)	;0->80026908[0]
LUI	AT,8002
ADDIU	T7,R0,0001
SW	T7,68EC (AT)	;1->800268E8[1]
LUI	AT,8002
SW	R0,690C (AT)	;0->80026908[1]
LUI	AT,8002
ADDIU	T8,R0,0001
SW	T8,68F0 (AT)	;1->800268E8[2]
LUI	AT,8002
SW	R0,6910 (AT)	;0->80026908[2]
LUI	AT,8002
ADDIU	T9,R0,0001
SW	T9,68F4 (AT)	;1->800268E8[3]
LUI	AT,8002
JR	RA
SW	R0,6914 (AT)	;0->80026908[3]

7000C930	D530	set controller input index to set A0
	accepts: A0=index
SLL	T6,A0,0x7
SUBU	T6,T6,A0
LUI	T7,8006
ADDIU	T7,T7,4F30
SLL	T6,T6,0x2
ADDU	T8,T6,T7
LUI	AT,8002
JR	RA
SW	T8,68C4 (AT)

7000C954	D554	V0=current controller input index
LUI	T6,8002
LW	T6,68C4 (T6)
LUI	T7,8006
ADDIU	T7,T7,4F30
ADDIU	AT,R0,01FC
SUBU	V0,T6,T7
DIV	V0,AT
MFLO	V0
JR	RA
NOP

7000C980	D580	send rumble off to controller packet A0 via PIFram [800655A0+offset]
	accepts: A0=p->controller packet
	returns: V0=0 if okay, 4 if I/O error, 8 if not present
ADDIU	SP,SP,FFB0
SW	RA,0014 (SP)
JAL	70015E60
SW	A0,0050 (SP)	;A0->SP+50: controller.packet
LW	T7,0050 (SP)	;T7=SP+50: 
ADDIU	T6,R0,0003
LUI	AT,8006
SB	T6,7CE0 (AT)	;3->80067CE0: PIFcomand-write mempak
LW	T8,0008 (T7)	;T8=packet+8: controller#
LUI	T0,8006
ADDIU	T0,T0,55A0	;T0=800655A0: 
SLL	T9,T8,0x6	;T9=T8 * 0x40
ADDU	A1,T9,T0	;A1=800655A0 + offset: p->data to be written
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
ADDIU	A0,R0,0001	;A0=1: write
//7000C9BC:
LW	T1,0050 (SP)	;T1=SP+50: p->controller.packet
OR	A1,R0,R0	;A1= NULL
ADDIU	A2,R0,0001	;A2=1
JAL	7000DDD0
LW	A0,0004 (T1)	;A0=packet+4: 
LUI	A1,8006
ADDIU	A1,A1,7D70	;A1=80067D70: p->target
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
OR	A0,R0,R0	;A0=0: read
//7000C9E0:
LW	T2,0050 (SP)	;T2=SP+50: p->controller.packet
OR	A1,R0,R0	;A1= NULL
ADDIU	A2,R0,0001
JAL	7000DDD0
LW	A0,0004 (T2)	;A0=packet+4: 
//7000C9F4:	offset target address for correct channel#
LW	T3,0050 (SP)	;T3=SP+50: p->controller.packet
LUI	V1,8006
ADDIU	V1,V1,7D70	;V1=80067D70: p->target/source
LW	A0,0008 (T3)	;A0=packet+8: controller #
ADDIU	T4,SP,001C	;T4=SP+1C: space for data on stack
BEQL	A0,R0,7000CA2C	;branch if A0=0: channel 0 (controller 1)
OR	T7,V1,R0
BLEZ	A0,7000CA28
OR	V0,R0,R0	;V0=0
//7000CA18:	skip to start of channel
ADDIU	V0,V0,0001	;V0++
SLT	AT,V0,A0	;TRUE if count < A0: 
BNE	AT,R0,7000CA18
ADDIU	V1,V1,0001	;V1++	p->source++
//7000CA28:	copy data from buffer to stack
OR	T7,V1,R0	;T7=p->source
ADDIU	T6,V1,0024	;T6=end of source
//7000CA30:	loop
LWL	AT,0000 (T7)
LWR	AT,0003 (T7)	;AT=word from target
ADDIU	T7,T7,000C
ADDIU	T4,T4,000C
SW	AT,FFF4 (T4)
LWL	AT,FFF8 (T7)
LWR	AT,FFFB (T7)
SW	AT,FFF8 (T4)
LWL	AT,FFFC (T7)
LWR	AT,FFFF (T7)
BNE	T7,T6,7000CA30
SW	AT,FFFC (T4)
//7000CA60:	determine error status for retrieved data
LWL	AT,0000 (T7)
LWR	AT,0003 (T7)
SW	AT,0000 (T4)
LBU	V0,001E (SP)	;V0=SP+1E: r byte (error flag return)
LBU	T0,0042 (SP)	;T0=SP+42: data.CRC
ANDI	T8,V0,00C0
SRA	A0,T8,0x4	;A0&=0xC0 / 0x10
BNE	A0,R0,7000CA90	;branch if something set
NOP
BEQ	T0,R0,7000CA90	;branch if data.CRC 0
NOP
ADDIU	A0,R0,0004	;4->SP+48: force "I/O error"
//7000CA90:
JAL	70015EA4
SW	A0,0048 (SP)	;SP+48=error status
LW	RA,0014 (SP)
LW	V0,0048 (SP)	;V0=error status
ADDIU	SP,SP,0050
JR	RA
NOP

7000CAAC	D6AC	send rumble on to controller packet A0 via PIFram
	accepts; A0=p->controller packet
ADDIU	SP,SP,FFB0
SW	RA,0014 (SP)
JAL	70015E60
SW	A0,0050 (SP)
LW	T7,0050 (SP)
ADDIU	T6,R0,0003
LUI	AT,8006
SB	T6,7CE0 (AT)
LW	T8,0008 (T7)
LUI	T0,8006
ADDIU	T0,T0,56A0
SLL	T9,T8,0x6
ADDU	A1,T9,T0
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
ADDIU	A0,R0,0001
LW	T1,0050 (SP)	;T1=SP+50: p->controller.packet
OR	A1,R0,R0	;A1= NULL
ADDIU	A2,R0,0001
JAL	7000DDD0
LW	A0,0004 (T1)	;A0=controller.packet+4: 
LUI	A1,8006
ADDIU	A1,A1,7D70
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
OR	A0,R0,R0
LW	T2,0050 (SP)	;T2=SP+50: p->controller.packet
OR	A1,R0,R0	;A1= NULL
ADDIU	A2,R0,0001
JAL	7000DDD0
LW	A0,0004 (T2)	;A0=controller.packet+4
LW	T3,0050 (SP)
LUI	V1,8006
ADDIU	V1,V1,7D70
LW	A0,0008 (T3)
ADDIU	T4,SP,001C
BEQL	A0,R0,7000CB58
OR	T7,V1,R0
BLEZ	A0,7000CB54
OR	V0,R0,R0
ADDIU	V0,V0,0001
SLT	AT,V0,A0
BNE	AT,R0,7000CB44
ADDIU	V1,V1,0001
OR	T7,V1,R0
ADDIU	T6,V1,0024
LWL	AT,0000 (T7)
LWR	AT,0003 (T7)
ADDIU	T7,T7,000C
ADDIU	T4,T4,000C
SW	AT,FFF4 (T4)
LWL	AT,FFF8 (T7)
LWR	AT,FFFB (T7)
SW	AT,FFF8 (T4)
LWL	AT,FFFC (T7)
LWR	AT,FFFF (T7)
BNE	T7,T6,7000CB5C
SW	AT,FFFC (T4)
LWL	AT,0000 (T7)
LWR	AT,0003 (T7)
SW	AT,0000 (T4)
LBU	V0,001E (SP)
LBU	T0,0042 (SP)
ADDIU	AT,R0,00EB
ANDI	T8,V0,00C0
SRA	A0,T8,0x4
BNE	A0,R0,7000CBC0
NOP
BEQ	T0,AT,7000CBC0
NOP
ADDIU	A0,R0,0004
JAL	70015EA4
SW	A0,0048 (SP)
LW	RA,0014 (SP)
LW	V0,0048 (SP)
ADDIU	SP,SP,0050
JR	RA
NOP

7000CBDC	D7DC	generate PIF command: A3=request write data at A2 to block A1 of channel A0; exclusively used for rumble pak
	accepts: A0=channel#, A1=block#, A2=p->start.buffer, A3=@target (0x40)
ADDIU	SP,SP,FFA8
SW	S0,0018 (SP)
OR	S0,A0,R0
SW	RA,001C (SP)
SW	A1,005C (SP)
OR	V1,A3,R0
OR	T0,R0,R0
OR	V0,A3,R0
ADDIU	T0,T0,0001
SLTI	AT,T0,000F
ADDIU	V0,V0,0004
BNE	AT,R0,7000CBFC
SW	R0,FFFC (V0)
ADDIU	T6,R0,0001
SW	T6,003C (A3)
ADDIU	T7,R0,00FF
ADDIU	T8,R0,0023
ADDIU	T9,R0,0001
ADDIU	T1,R0,0003
SB	T7,002C (SP)
SB	T8,002D (SP)
SB	T9,002E (SP)
SB	T1,002F (SP)
SW	A2,0060 (SP)
SW	V1,0054 (SP)
JAL	70015F80	;V0= PIFram address.CRC for address A0
LHU	A0,005E (SP)
LHU	T2,005E (SP)
ADDIU	T5,R0,00FF
LW	V1,0054 (SP)
SLL	T3,T2,0x5
OR	T4,V0,T3
SH	T4,0030 (SP)
LW	A2,0060 (SP)
SB	T5,0052 (SP)
ADDIU	V0,SP,004C
ADDIU	A0,SP,002C
LBU	T6,0000 (A2)
ADDIU	A0,A0,0001
SLTU	AT,A0,V0
ADDIU	A2,A2,0001
BNE	AT,R0,7000CC70
SB	T6,0005 (A0)
BEQ	S0,R0,7000CCD4
ADDIU	T7,SP,002C
BLEZ	S0,7000CCD4
OR	T0,R0,R0
ANDI	A0,S0,0003
BEQ	A0,R0,7000CCB8
OR	V0,A0,R0
ADDIU	T0,T0,0001
SB	R0,0000 (V1)
BNE	V0,T0,7000CCA4
ADDIU	V1,V1,0001
BEQ	T0,S0,7000CCD4
ADDIU	T0,T0,0004
SB	R0,0001 (V1)
SB	R0,0002 (V1)
SB	R0,0003 (V1)
ADDIU	V1,V1,0004
BNE	T0,S0,7000CCB8
SB	R0,FFFC (V1)
OR	T1,V1,R0
ADDIU	T9,T7,0024
LW	AT,0000 (T7)
ADDIU	T7,T7,000C
ADDIU	T1,T1,000C
SWL	AT,FFF4 (T1)
SWR	AT,FFF7 (T1)
LW	AT,FFF8 (T7)
SWL	AT,FFF8 (T1)
SWR	AT,FFFB (T1)
LW	AT,FFFC (T7)
SWL	AT,FFFC (T1)
BNE	T7,T9,7000CCDC
SWR	AT,FFFF (T1)
LW	AT,0000 (T7)
ADDIU	T2,R0,00FE
ADDIU	V1,V1,0028
SWL	AT,0000 (T1)
SWR	AT,0003 (T1)
SB	T2,0000 (V1)
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0058
JR	RA
NOP

7000CD38	D938	handle rumble pak output to channel A2 using packet A1; generates required PIF commands
	accepts: A0=p->???, A1=controller packet [800653F8+pl.*0x68], A2=PIF channel#
ADDIU	SP,SP,FFA8
SW	S0,0020 (SP)
SW	RA,0024 (SP)
ADDIU	A3,R0,0080
OR	S0,A2,R0	;S0=A2: controller# (channel)
SW	A0,0004 (A1)	;A0->packet+4: p->???
SW	A2,0008 (A1)	;A2->packet+8: channel#
SW	R0,0000 (A1)	;0 ->packet+0: 
SB	A3,0065 (A1)	;80->packet+65: device type
ADDIU	V0,SP,0030	;V0=SP+30: start of buffer
ADDIU	V1,SP,0050	;A1=SP+50: end of buffer
//7000CD64:	fill buffer with 0x80's
ADDIU	V0,V0,0001	;V0++	buffer++
SLTU	AT,V0,V1
BNE	AT,R0,7000CD64
SB	A3,FFFF (V0)	;80->buffer
//7000CD74:
OR	A1,S0,R0	;A1=S0: channel#
ADDIU	A2,R0,0400	;A2=0x400: slot+0x8000 - device controller
ADDIU	A3,SP,0030	;A3=SP+30: p->data
SW	R0,0010 (SP)	;SP+10=0: 
JAL	70016100	;sends data A3 to controller slot A1 at address A2, returning status
SW	A0,0058 (SP)	;A0->SP+58: [80065350]
ADDIU	AT,R0,0002
BNE	V0,AT,7000CDB4	;branch if no problem
OR	V1,V0,R0	;V1=V0: error return...
LW	A0,0058 (SP)
OR	A1,S0,R0	;A1=S0: channel#
ADDIU	A2,R0,0400	;A2=0x400: device controller
ADDIU	A3,SP,0030	;A3=SP+30: p->data
JAL	70016100	;sends data A3 to controller slot A1 at address A2, returning status
SW	R0,0010 (SP)
//7000CDB0:	return if still invalid
OR	V1,V0,R0
BEQ	V0,R0,7000CDC4
LW	A0,0058 (SP)
BEQ	R0,R0,7000CE8C
OR	V0,V1,R0
//7000CDC4:
OR	A1,S0,R0	;A1=S0: channel#
ADDIU	A2,R0,0400	;A2=0x400: block#
JAL	700164B0	;reads block A2 from controller A1 to @A3
ADDIU	A3,SP,0030	;A3=SP+30: p->data
BEQ	V0,R0,7000CDE4	;branch if no problem
LBU	T6,004F (SP)	;T6=last byte of data
BEQ	R0,R0,7000CE90
LW	RA,0024 (SP)
//7000CDE4:
ADDIU	AT,R0,0080
BEQ	T6,AT,7000CDF8	;branch if equals 0x80 (rumble paks always return 0x80)
LUI	A0,8006
BEQ	R0,R0,7000CE8C	;return 0xB: not a rumble pak
ADDIU	V0,R0,000B
//7000CDF8:
LUI	V1,8006
LUI	A1,8006
ADDIU	A1,A1,57C0	;A1=800657C0: end of stop.buffer
ADDIU	V1,V1,57A0	;V1=800657A0: start of stop.buffer
ADDIU	A0,A0,57C0	;A0=800657C0: start.buffer
ADDIU	V0,R0,0001
//7000CE10:	fill rumble buffers
ADDIU	V1,V1,0004	;V1+=4	next word in stop.buffer
SB	V0,0001 (A0)	;1->start.buffer
SB	R0,FFFD (V1)	;0->stop.buffer
SB	V0,0002 (A0)
SB	R0,FFFE (V1)
SB	V0,0003 (A0)
SB	R0,FFFF (V1)
ADDIU	A0,A0,0004
SB	V0,FFFC (A0)
BNE	V1,A1,7000CE10	;loop until buffers filled
SB	R0,FFFC (V1)
//7000CE3C:
LUI	T7,8006
ADDIU	T7,T7,56A0
LUI	A2,8006
SLL	V0,S0,0x6	;V0=S0*0x40: player#->offset
ADDU	A3,V0,T7	;A3=800656A0+offset: data.recv
SW	V0,002C (SP)
ADDIU	A2,A2,57C0	;A2=800657C0: data.sent
OR	A0,S0,R0	;A0=S0: channel#
JAL	7000CBDC	;generate PIF command: A3=request write data at A2 to block A1 of channel A0
ADDIU	A1,R0,0600	;A1=600: rumble pak controller
LW	V0,002C (SP)
LUI	T8,8006
ADDIU	T8,T8,55A0
LUI	A2,8006
ADDIU	A2,A2,57A0	;A2=800657A0: data.sent
OR	A0,S0,R0	;A0=S0: channel#
ADDIU	A1,R0,0600	;A1=600: rumble pak controller
JAL	7000CBDC	;generate PIF command: A3=request write data at A2 to block A1 of channel A0
ADDU	A3,V0,T8	;A3=800655A0+offset: data.recv
OR	V0,R0,R0
//7000CE8C:
LW	RA,0024 (SP)
LW	S0,0020 (SP)
ADDIU	SP,SP,0058
JR	RA
NOP

7000CEA0	DAA0	unconditional return
JR	RA
NOP

7000CEA8	DAA8	V0=1; would have returned 0 if debug console present
JR	RA
ADDIU	V0,R0,0001

7000CEB0	DAB0	V0=-1; unknown use with Indy I/O
JR	RA
ADDIU	V0,R0,FFFF

7000CEB8	DAB8	unconditional return; used to write data to entries on Indy
	accepts: A0=p->buffer, A1=size of buffer
JR	RA
NOP

7000CEC0	DAC0	unconditional return; used to read data from entries on Indy
	accepts: A0=p->buffer, A1=size of buffer
JR	RA
NOP

7000CEC8	DAC8	unconditional return
JR	RA
NOP

7000CED0	DAD0	unconditional return
JR	RA
NOP

7000CED8	DAD8	unconditional return
JR	RA
NOP

7000CEE0	DAE0	unconditional return
JR	RA
NOP

7000CEE8	DAE8	write A2 chars in string A1 to stderr
	accepts: A0=p->target (unused), A1=p->string, A2=length
ADDIU	SP,SP,FFD8
SW	S2,0020 (SP)
SW	S0,0018 (SP)
OR	S2,A2,R0	;S2=A2: length
SW	RA,0024 (SP)
SW	S1,001C (SP)
SW	A0,0028 (SP)
BEQ	A2,R0,7000CF28
OR	S0,R0,R0
OR	S1,A1,R0	;S1=A1: p->string
//7000CF10:	write string to stderr
LBU	A0,0000 (S1)	;A0=S1+0
ADDIU	S0,S0,0001
JAL	700056BC	;write char A0 to stderr
ADDIU	S1,S1,0001
BNEL	S0,S2,7000CF14	;loop through string
LBU	A0,0000 (S1)
//7000CF28:	return
LW	RA,0024 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
ADDIU	SP,SP,0028
JR	RA
ADDIU	V0,R0,0001

7000CF44	DB44	c-style expansion of string A0 to stderr
	accepts: A0=p->string, A1=arg[1], A2=arg[2], A3=arg[3], SP+10+4n = arg[n]
	call 70013F60: A0=7000CEE8, A1=NULL, A2=A0, A3=p->args
ADDIU	SP,SP,FFE0
SW	A0,0020 (SP)
SW	RA,0014 (SP)
SW	A1,0024 (SP)
SW	A2,0028 (SP)
SW	A3,002C (SP)
LUI	A0,7001
ADDIU	A0,A0,CEE8	;A0= 7000CEE8: write A2 chars in string A1 to stderr
ADDIU	A3,SP,0024	;A3=p->further arguments
LW	A2,0020 (SP)	;A2=A0 f/caller
JAL	70013F60	;c-style string parser
OR	A1,R0,R0	;A1=0
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7000CF90	DB90	sets PI cart request: write or read (A0) A3 bytes between ROM A1 and rdram A2
	accepts: A0=mode (0-write;1-read), A1=hardware offset, A2=rdram address, A3=size
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)
SW	A1,002C (SP)
SW	A2,0030 (SP)
SW	A3,0034 (SP)
SW	S1,0018 (SP)
SW	S0,0014 (SP)
LUI	T6,A460
LW	S0,0010 (T6)	;S0=A4600010: PI Status
ANDI	T7,S0,0003
BEQ	T7,R0,7000CFD8	;branch if ready
NOP
//7000CFC4:	loop until ready
LUI	T8,A460
LW	S0,0010 (T8)
ANDI	T9,S0,0003
BNE	T9,R0,7000CFC4
NOP
//7000CFD8:	set ram and rom addresses
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
LW	A0,0030 (SP)
LUI	T0,A460
SW	V0,0000 (T0)	;V0->A4600000: PI rdram address
LUI	T1,8000
LW	T1,0308 (T1)	;T1=80000308: cart base address
LW	T2,002C (SP)	;T2= A1 f/caller: hardware offset
LUI	AT,1FFF
ORI	AT,AT,FFFF
OR	T3,T1,T2
AND	T4,T3,AT	;T4= (base | offset) & 1FFFFFFF: translated hardware address
LUI	T5,A460
SW	T4,0004 (T5)	;T4->A4600004: PI hardware address
//7000D00C:	read or write based on mode
LW	S1,0028 (SP)	;S1=A0 f/caller: mode
BEQ	S1,R0,7000D028
ADDIU	AT,R0,0001
BEQ	S1,AT,7000D03C
NOP
BEQ	R0,R0,7000D050
NOP
//7000D028:	write to rdram
LW	T6,0034 (SP)	;T6=A3 f/caller: length
LUI	T8,A460
ADDIU	T7,T6,FFFF
BEQ	R0,R0,7000D058
SW	T7,000C (T8)	;length-1 -> A460000C: PI Write Length
//7000D03C:	read from rdram and write to hardware
LW	T9,0034 (SP)
LUI	T1,A460
ADDIU	T0,T9,FFFF
BEQ	R0,R0,7000D058
SW	T0,0008 (T1)	;length-1 -> A4600008: PI Read Length
//7000D050:	return -1: error!
BEQ	R0,R0,7000D05C
ADDIU	V0,R0,FFFF
//7000D058:	return 0: okay!
OR	V0,R0,R0
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0028

7000D070	DC70	V0= PI Status
LUI	T6,A460
JR	RA
LW	V0,0010 (T6)	;V0=A4600010: PI Status

7000D080	DC80	initialize PIF, interrupt handlers, C0- and 7F- TLB segments, init NMIbuffer if cold run, init 64DD if present
ADDIU	SP,SP,FFC0
SW	RA,001C (SP)
ADDIU	T6,R0,0001
LUI	AT,8006
SW	S0,0018 (SP)
SW	R0,0038 (SP)
JAL	70017B30	;V0= COP0 status register
SW	T6,57E0 (AT)	;800657E0= 1
OR	S0,V0,R0	;S0=Status
LUI	AT,2000
JAL	70017B20	;A0->COP0 status register
OR	A0,S0,AT	;A0=Status | 20000000
//7000D0B0:
LUI	A0,0100
JAL	7000D420	;V0= COP1 control, then sets COP1 control to A0
ORI	A0,A0,0800	;A0=01000800
LUI	A0,1FC0
ORI	A0,A0,07FC	;A0=1FC007FC: PIF status
JAL	70017B40	;copy value from uncached address A0 to A1
ADDIU	A1,SP,003C	;A1= SP+3C: buffer for value
BEQ	V0,R0,7000D0EC	;branch if okay
NOP
//7000D0D4:	repeat until SI ready and pull successful
LUI	A0,1FC0
ORI	A0,A0,07FC
JAL	70017B40
ADDIU	A1,SP,003C
BNE	V0,R0,7000D0D4
NOP
//7000D0EC:
LW	A1,003C (SP)	;A1= PIF Status
LUI	A0,1FC0
ORI	A0,A0,07FC	;A0=1FC007FC: PIF Status
ORI	T7,A1,0008	;PIF Status | 8: initialize PIF
JAL	70017B90	;write value A1 to uncached address A0
OR	A1,T7,R0
BEQ	V0,R0,7000D12C	;skip if okay
NOP
//7000D10C:	repeat until successful
LW	A1,003C (SP)
LUI	A0,1FC0
ORI	A0,A0,07FC
ORI	T8,A1,0008
JAL	70017B90
OR	A1,T8,R0
BNE	V0,R0,7000D10C
NOP
//7000D12C:	copy interrupt handler from 70010190 to 80000000
LUI	T0,7001
ADDIU	T0,T0,0190	;T0=70010190
LW	AT,0000 (T0)
LUI	T9,8000
LUI	T5,7001
SW	AT,0000 (T9)
LW	T3,0004 (T0)
ADDIU	T5,T5,0190	;T5=70010190
LUI	T4,8000
SW	T3,0004 (T9)
LW	AT,0008 (T0)
ORI	T4,T4,0080	;next target: 80000080
LUI	T1,7001
SW	AT,0008 (T9)
LW	T3,000C (T0)
ADDIU	T1,T1,0190	;T1=70010190
LUI	T2,8000
SW	T3,000C (T9)
//7000D174:	copy interrupt handler from 70010190 to 80000080
LW	AT,0000 (T5)
ORI	T2,T2,0100	;T2=80000100
LUI	T6,7001
SW	AT,0000 (T4)
LW	T8,0004 (T5)
ADDIU	T6,T6,0190	;T6=70010190
LUI	T7,8000
SW	T8,0004 (T4)
LW	AT,0008 (T5)
ORI	T7,T7,0180	;T7=80000180
LUI	A0,8000		;A0=80000000
SW	AT,0008 (T4)
LW	T8,000C (T5)
ADDIU	A1,R0,0190	;A1=190
SW	T8,000C (T4)
//7000D1B0:	copy interrupt handler from 70010190 to 80000100
LW	AT,0000 (T1)
SW	AT,0000 (T2)
LW	T3,0004 (T1)
SW	T3,0004 (T2)
LW	AT,0008 (T1)
SW	AT,0008 (T2)
LW	T3,000C (T1)
SW	T3,000C (T2)
//7000D1D0:	copy interrupt handler from 70010190 to 80000180
LW	AT,0000 (T6)
SW	AT,0000 (T7)
LW	T8,0004 (T6)
SW	T8,0004 (T7)
LW	AT,0008 (T6)
SW	AT,0008 (T7)
LW	T8,000C (T6)
JAL	70010BD0	;cache 190 bytes at 80000000 prior to hardware write request
SW	T8,000C (T7)
LUI	A0,8000
JAL	7000D350	;invalidate Cache for A1 bytes at A0
ADDIU	A1,R0,0190
JAL	70001780	;sets TLB indexed entry 0 to mirror 1KB of rdram from 80000000 to C0000000
NOP
ADDIU	A0,R0,0004	;A0=B0000004: clock rate or some stupid thing
JAL	70017BE0	;copies word at uncached hardware address A0 to A1
ADDIU	A1,SP,0038	;A1=SP+38: p->buffer
LW	T0,0038 (SP)	;T0=value
ADDIU	AT,R0,FFF0
AND	T9,T0,AT	;T9=T0 & (~F)
BEQ	T9,R0,7000D23C	;skip if not set
SW	T9,0038 (SP)
//7000D228:	if set, override the default
LUI	AT,8002
OR	T3,T9,R0
ADDIU	T2,R0,0000
SW	T2,6980 (AT)	;80026980= 0
SW	T3,6984 (AT)	;80026984= value
//7000D23C:
LUI	A0,8002
LUI	A1,8002
LW	A1,6984 (A1)	;A1=80026984: default of 03B9ACA0
LW	A0,6980 (A0)	;A0=80026980: default of 0
ADDIU	A2,R0,0000	;A2=0
JAL	7000EDA8	;(V0,V1) = (A0,A1) * (A2,A3)
ADDIU	A3,R0,0003	;A3=3
SW	V0,0020 (SP)	;SP+20= DW result
SW	V1,0024 (SP)
LW	A1,0024 (SP)
LW	A0,0020 (SP)
ADDIU	A2,R0,0000
JAL	7000ECA8	;(V0,V1) = (A0,A1) / (A2,A3)
ADDIU	A3,R0,0004	;A3=4
LUI	T1,8000
LW	T1,030C (T1)	;T1=8000030C: True if reset via NMI
LUI	AT,8002
SW	V0,6980 (AT)	;V0->80026980: 3/4(0000000003B9ACA0)
BNE	T1,R0,7000D29C	;branch if retaining data
SW	V1,6984 (AT)
//7000D28C:	initialize 40 bytes at 8000031C: reset data stuff
LUI	A0,8000
ADDIU	A0,A0,031C	;A0=8000031C
JAL	70017C40	;initialize A1 bytes at A0 to zero
ADDIU	A1,R0,0040	;A1=40
//7000D29C:	prep for 64DD Status read
LUI	T5,A460
LW	T4,0010 (T5)	;T4=A4600010: PI Status
ANDI	T7,T4,0003
BEQ	T7,R0,7000D2CC	;skip if ready
SW	T4,0030 (SP)	;SP+30= PI Status
//7000D2B0:	loop until ready
LUI	T6,A460
LW	T8,0010 (T6)
SW	T8,0030 (SP)
LW	T0,0030 (SP)
ANDI	T9,T0,0003
BNE	T9,R0,7000D2B0
NOP
//7000D2CC:	64DD presence test
LUI	T2,A500
LW	T3,0508 (T2)	;T3= A5000508: 64DD Status
ANDI	T1,T3,FFFF	;T1=bottom half of register; nonzero if presence error
BNE	T1,R0,7000D304	;branch if set, which it only will be if invalid
SW	T3,0034 (SP)	;SP+34= value
ADDIU	T5,R0,0001
LUI	AT,8002
LUI	A1,7001
SW	T5,6990 (AT)	;1->80026990: 64DD disk present
ADDIU	A1,A1,7D30	;A1=70017D30
JAL	70017CE0	;set entry A0 in 80027700 to A1
ADDIU	A0,R0,0001	;A0=1
BEQ	R0,R0,7000D30C
NOP
//7000D304:	disk not found
LUI	AT,8002
SW	R0,6990 (AT)	;0->80026990: 64DD not present
//7000D30C:	return
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0040
JR	RA
NOP

7000D320	DF20	set index writeback invalidate for 2000 bytes at 80000000
LUI	T0,8000
ADDIU	T2,R0,2000
ADDU	T1,T0,T2
ADDIU	T1,T1,FFF0
CACHE	0000 (T0), D, Index Writeback Invalidate
SLTU	AT,T0,T1
BNE	AT,R0,7000D330
ADDIU	T0,T0,0010
JR	RA
NOP

7000D350	DF50	invalidate Cache for A1 bytes at A0
	accepts: A0=p->address, A1=size
BLEZ	A1,7000D398	;return if no data
NOP
ADDIU	T3,R0,4000
SLTU	AT,A1,T3
BEQ	AT,R0,7000D3A0	;if A1>=4000, branch
NOP
OR	T0,A0,R0	;T0=A0: address
ADDU	T1,A0,A1	;T1= address+size
SLTU	AT,T0,T1
BEQ	AT,R0,7000D398	;return if range backward
NOP
ANDI	T2,T0,001F
ADDIU	T1,T1,FFE0
SUBU	T0,T0,T2	;align to 0x20 chunks
//7000D388:	loop for A1 bytes
CACHE	0000 (T0), I, Hit Invalidate
SLTU	AT,T0,T1
BNE	AT,R0,7000D388
ADDIU	T0,T0,0020
//7000D398:	return
JR	RA
NOP
//7000D3A0:
LUI	T0,8000
ADDU	T1,T0,T3
ADDIU	T1,T1,FFE0	;align to 0x20 chunks
//7000D3AC:	loop for A1 bytes
CACHE	0000 (T0), I, Index Invalidate
SLTU	AT,T0,T1
BNE	AT,R0,7000D3AC
ADDIU	T0,T0,0020
JR	RA
NOP

7000D3D0	DFD0	remove TLB index A0
	accepts: A0=index
MFC0	T0,EntryHi	;T0= cur.EntryHi
MTC0	A0,Index	;COP0 Index = A0
LUI	T1,8000
MTC0	T1,EntryHi	;COP0 EntryHi = 80000000: VPN2 invalid range
MTC0	R0,EntryLo0	;COP0 EntryLo0 = 0: invalid
MTC0	R0,EntryLo1	;COP0 EntryLo1 = 0: invalid
NOP
TLBWI
NOP
NOP
NOP
NOP
MTC0	T0,EntryHi	;restore EntryHi
JR	RA
NOP

7000D410	E010	V0= COP1 Control
CFC1	V0,F31
JR	RA
NOP

7000D420	E020	V0= COP1 Control, replacing with A0
	accepts: A0=new value
CFC1	V0,F31
CTC1	A0,F31
JR	RA
NOP

7000D430	E030	initialize thread entry at A0 with...stuff
	accepts: A0=p->target, A1=value, A2=p->function.eret, A3=A0 passed to function.eret, SP+10=p->stack.new, SP+14=p->parent
	sets entry A0 with given values
	thread entry:
	0x0	4	p->entry
	0x4	4	p->parent
	0x8	4	0
	0xC	4	p->previous
	0x10	2	index 1-8
	0x12	2	
	0x14	4	
	0x18	4	True sets FPU regs
	all values 20-100 are doublewords set to AT-RA
	0x108	8	Mult LO
	0x110	8	Mult HI
	0x118	4	COP0 Status mask
	0x11C	4	function to execute 'game' when table erets
	0x128	4	MI (or is it COP0?) mask
	0x12C	4	COP1 Status
	all values 0x130 - 0x1B0 are double float values set to F0-F30
ADDIU	SP,SP,FFD8
SW	A0,0028 (SP)	;SP+28= A0
SW	A1,002C (SP)	;SP+2C= A1
LW	T6,002C (SP)	;T6= A1
LW	T7,0028 (SP)	;T7= A0
SW	RA,001C (SP)
SW	A2,0030 (SP)	;SP+30= A2: thread root funct.
SW	A3,0034 (SP)	;SP+34= A3
SW	S0,0018 (SP)
SW	T6,0014 (T7)	;A0+14 = A1
LW	T9,0028 (SP)	;T9= A0
LW	T8,003C (SP)	;T8= SP+14 f/ caller
SW	T8,0004 (T9)	;A0+4 = SP+14
LW	T0,0028 (SP)	;T0= A0
SW	R0,0000 (T0)	;A0+0 = 0
LW	T1,0028 (SP)	;T1= A0
SW	R0,0008 (T1)	;A0+8 = 0
LW	T3,0028 (SP)	;T3= A0
LW	T2,0030 (SP)	;T2= A2
SW	T2,011C (T3)	;A0+11C= A2: thread root function
LW	T4,0034 (SP)	;T4= A3
LW	T5,0028 (SP)	;T5= A0
OR	T7,T4,R0	;T7= A3
SRA	T6,T4,0x1F
SW	T6,0038 (T5)	;A0+38 = sign of A3
SW	T7,003C (T5)	;A0+3C = A3
LW	T8,0038 (SP)	;T8=SP+10 f/caller: new stack pointer
LW	T9,0028 (SP)	;T9= A0
LUI	T4,7001
OR	T1,T8,R0	;T1= T8
SLTIU	AT,T1,0010	;TRUE if T8<10
SRA	T0,T8,0x1F	;T0=sign of T8
SUBU	T2,T0,AT	;T2=sign of T8 - (T8<10): -1 if negative, a pointer, or 0-F
ADDIU	T3,T1,FFF0
SW	T3,00F4 (T9)	;A0+F4 = T8-10
SW	T2,00F0 (T9)	;A0+F0 = T2: new stack pointer
LW	T5,0028 (SP)	;T5= A0
ADDIU	T4,T4,0A80	;T4=70010A80
OR	T7,T4,R0	;T7= T4
SRA	T6,T4,0x1F
SW	T6,0100 (T5)	;A0+100 = sign of 70010A80: new RA
SW	T7,0104 (T5)	;A0+104 = 70010A80: saved as doubleword
LW	T1,0028 (SP)	;T1= A0
LUI	T8,003F
ORI	T8,T8,FF01
SW	T8,0020 (SP)	;SP+20 = 003FFF01
ORI	T0,R0,FF03
SW	T0,0118 (T1)	;A0+118 = 0000FF03
LW	T2,0020 (SP)
LW	T4,0028 (SP)	;T4= A0
LUI	AT,003F
AND	T3,T2,AT
SRL	T9,T3,0x10	;T9= (003FFF01 & 3F0000) / 10000
SW	T9,0128 (T4)	;A0+128 = 3F
LW	T7,0028 (SP)	;T7= A0
LUI	T6,0100
ORI	T6,T6,0800
SW	T6,012C (T7)	;A0+12C = 01000800
LW	T5,0028 (SP)	;T5= A0
ADDIU	T8,R0,0001
SW	R0,0018 (T5)	;A0+18 = 0
LW	T0,0028 (SP)	;T0= A0
SH	T8,0010 (T0)	;A0+10 = 1
LW	T1,0028 (SP)	;T1= A0
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SH	R0,0012 (T1)	;A0+12 = 0
//7000D538:	hmm... exceptions disabled in case you're running the thread right now.
LUI	T2,8002
LW	T2,772C (T2)	;T2=8002772C: p->80027720
LW	T3,0028 (SP)	;T3= A0
OR	S0,V0,R0	;S0=V0: interrupt flag
LUI	AT,8002
SW	T2,000C (T3)	;A0+C = p->previous thread
LW	T9,0028 (SP)	;T9= A0
OR	A0,S0,R0	;A0=S0: set interrupt flag
JAL	70018610	;A0->COP0 status
SW	T9,772C (AT)	;A0 -> 8002772C
//7000D560:	return
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

7000D580	E180	insert thread and execute if no thread currently running
	accepts: A0=p->thread
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)
SW	S1,0018 (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0014 (SP)
LW	T6,0028 (SP)	;T6= A0 f/caller
ADDIU	AT,R0,0001
OR	S0,V0,R0	;S0=V0: interrupt flag
LHU	S1,0010 (T6)	;S1=tbl+10: 
BEQ	S1,AT,7000D5DC	;branch if 1
ADDIU	AT,R0,0008
BNE	S1,AT,7000D65C	;skip if 8
NOP
//7000D5B8:	insert thread entry into list
LW	T8,0028 (SP)	;T8= A0 f/caller
ADDIU	T7,R0,0002
LUI	A0,8002
SH	T7,0010 (T8)	;2->tbl+10: smallest index for an existing list
LW	A1,0028 (SP)	;A1= A0 f/caller
JAL	700108AC	;insert thread A1 into thread list A0
ADDIU	A0,A0,7728	;A0=80027728: p->thread entry list
BEQ	R0,R0,7000D65C
NOP
//7000D5DC:	if the entry is lonely...
LW	T9,0028 (SP)	;T9= A0 f/caller
LW	T0,0008 (T9)	;T0=tbl+8: p->thread.prev
BEQ	T0,R0,7000D5FC	;skip if NULL
NOP
//7000D5EC:	...but it has friends
LUI	T1,8002
ADDIU	T1,T1,7728
BNE	T0,T1,7000D620	;branch if not 80027728 (NULL entry at end of list)
NOP
//7000D5FC:	...then let it join the crowd
LW	T3,0028 (SP)	;T3= A0 f/caller
ADDIU	T2,R0,0002
LUI	A0,8002
SH	T2,0010 (T3)	;2->tbl+10: smallest index for an existing list
LW	A1,0028 (SP)	;A1= A0 f/caller
JAL	700108AC	;insert thread A1 into thread list A0
ADDIU	A0,A0,7728	;A0=80027728
BEQ	R0,R0,7000D65C
NOP
//7000D620:	pop and relink if NULL entry follows
LW	T5,0028 (SP)
ADDIU	T4,R0,0008
SH	T4,0010 (T5)	;2->tbl+10: largest index for any list
LW	T6,0028 (SP)
LW	A0,0008 (T6)	;A0=tbl+8: p->tbl.prev
JAL	700108AC	;insert thread A1 into thread list A0
OR	A1,T6,R0	;A1= A0 f/caller
LW	T7,0028 (SP)
JAL	700108F4	;V0= popped thread A0
LW	A0,0008 (T7)	;A0=p->tbl.prev
OR	S1,V0,R0	;S1=V0: popped thread
LUI	A0,8002
ADDIU	A0,A0,7728	;A0=80027728
JAL	700108AC	;insert thread A1 into thread list A0
OR	A1,S1,R0	;A1=S1: p->popped thread
//7000D65C:	check if cur.thread is valid
LUI	T8,8002
LW	T8,7730 (T8)	;T8=80027730: p->cur.thread
BNE	T8,R0,7000D67C	;branch a thread currently running
NOP
//7000D66C:	execute thread if one isn't running
JAL	70010904	;execute thread
NOP
BEQ	R0,R0,7000D6B4
NOP
//7000D67C:	Otherwise, throw onto the stack.
LUI	T9,8002
LUI	T1,8002
LW	T1,7728 (T1)	;T1=80027728: p->last.thread (?)
LW	T9,7730 (T9)	;T9=80027730: p->cur.thread
LW	T2,0004 (T1)	;T2=last.thread.priority
LW	T0,0004 (T9)	;T0=cur.thread.priority
SLT	AT,T0,T2
BEQ	AT,R0,7000D6B4	;return if cur>=last
NOP
//7000D6A0:	reset index for cur.thread, update, insert, and execute
ADDIU	T3,R0,0002
LUI	A0,8002
SH	T3,0010 (T9)	;2->cur.thread.index
JAL	700107AC	;update current thread's data with current registers, then insert and execute
ADDIU	A0,A0,7728	;A0=80027728
//7000D6B4:	enable interrupts and return
JAL	70018610	;A0->COP0 status
OR	A0,S0,R0	;A0=S0: flag
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0028

7000D6D0	E2D0	
	accepts: A0=p->???, A1=p->??? or NULL, A2=
LUI	T6,8002
LUI	T7,8002
ADDIU	T6,T6,7720
ADDIU	T7,T7,7720
SW	T6,0000 (A0)	;A0+0= 80027720
SW	T7,0004 (A0)	;A0+4= 80027720
SW	R0,0008 (A0)	;A0+8= 0
SW	R0,000C (A0)	;A0+C= 0
SW	A2,0010 (A0)	;A0+10=A2: 
JR	RA
SW	A1,0014 (A0)	;A0+14=A1: 

7000D740	E340	remove user threads if 2 or 8; update and execute cur.thread if thread.index 4 or A0 is NULL
	accepts: A0=p->thread or NULL
ADDIU	SP,SP,FFC8
SW	RA,0024 (SP)
SW	A0,0038 (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LW	T6,0038 (SP)	;T6=A0 f/caller: p->thread
OR	S0,V0,R0
BNE	T6,R0,7000D774
NOP
BEQ	R0,R0,7000D77C	;S1=4: default index
ADDIU	S1,R0,0004
//7000D774:	get index from thread if valid
LW	T7,0038 (SP)
LHU	S1,0010 (T7)	;S1=thread+10: index
//7000D77C:
OR	S2,S1,R0	;S2=S1: index
ADDIU	AT,R0,0002
BEQ	S2,AT,7000D7C4	;branch if index=2
ADDIU	AT,R0,0004
BEQ	S2,AT,7000D7A4	;branch if index=4
ADDIU	AT,R0,0008
BEQ	S2,AT,7000D7C4	;branch if index=8
NOP
BEQ	R0,R0,7000D7E0	;return if any other index
NOP
//7000D7A4:	index 4
LUI	T9,8002
LW	T9,7730 (T9)	;T9=80027730: p->cur.thread
ADDIU	T8,R0,0001
OR	A0,R0,R0	;A0=0
JAL	700107AC	;update current thread's data with current registers, then insert and execute
SH	T8,0010 (T9)	;cur.thread.index = 1
BEQ	R0,R0,7000D7E0
NOP
//7000D7C4:	index 2,8: remove
LW	T1,0038 (SP)
ADDIU	T0,R0,0001
SH	T0,0010 (T1)	;thread.index = 1
LW	T2,0038 (SP)
LW	A0,0008 (T2)	;A0=thread.parent
JAL	70010A90	;remove thread pointer A1 from thread A0
OR	A1,T2,R0	;A1=cur.thread
//7000D7E0:	restore interrupts and return
JAL	70018610	;A0->COP0 status
OR	A0,S0,R0
LW	RA,0024 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
JR	RA
ADDIU	SP,SP,0038

7000D800	E400	change priority to A1 for thread A0 or current thread if NULL
	accepts: A0=p->thread or NULL, A1=priority
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)	;SP+28=A0: p->thread
SW	A1,002C (SP)	;SP+2C=A1
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LW	T6,0028 (SP)	;T6=A0 f/caller
OR	S0,V0,R0	;S0=V0: flag
BNE	T6,R0,7000D834
NOP
//7000D828:	if 0, grab cur.thread f/ list
LUI	T7,8002
LW	T7,7730 (T7)	;T7=80027730+0: p->cur.thread
SW	T7,0028 (SP)
//7000D834:	If A1 doesn't match the priority...
LW	T8,0028 (SP)	;T8=p->thread
LW	T0,002C (SP)	;T0=A1 f/caller
LW	T9,0004 (T8)	;T9=thread+4: priority
BEQ	T9,T0,7000D8C4	;return if A1 matches priority
NOP
//7000D848:	...set it to match...
SW	T0,0004 (T8)	;A1->thread.priority
LUI	T2,8002
LW	T2,7730 (T2)	;T2=80027730+0: p->cur.thread
LW	T1,0028 (SP)	;T1=p->thread
BEQ	T1,T2,7000D88C	;skip a few steps if this is the current thread
NOP
//7000D860:	...if it isn't the first thread...
LHU	T3,0010 (T1)	;T3=thread+10: index
ADDIU	AT,R0,0001
BEQ	T3,AT,7000D88C	;skip if this is the original thread
NOP
//7000D870:	...reload this thread.
LW	A0,0008 (T1)	;A0=thread+8: thread.parent
JAL	70010A90	;remove thread pointer A1 from thread A0
OR	A1,T1,R0	;A1=p->thread
LW	T4,0028 (SP)
LW	A0,0008 (T4)	;A0=thread+8: thread.parent
JAL	700108AC	;insert thread A1 into thread list A0
OR	A1,T4,R0	;A1=p->thread
//7000D88C:	test if cur.thread comes before parent
LUI	T5,8002
LUI	T7,8002
LW	T7,7728 (T7)
LW	T5,7730 (T5)
LW	T9,0004 (T7)	;T9= last.thread.priority (?)
LW	T6,0004 (T5)	;T6= cur.thread.priority
SLT	AT,T6,T9
BEQ	AT,R0,7000D8C4	;return if cur priority >= to it's parent
NOP
//7000D8B0:	reindex cur.thread to 2
ADDIU	T0,R0,0002
LUI	A0,8002
SH	T0,0010 (T5)	;2->cur.thread.index
JAL	700107AC	;update current thread's data with current registers, then insert and execute
ADDIU	A0,A0,7728	;A0=80027728
//7000D8C4:	restore interrupts and return
JAL	70018610	;A0->COP0 status
OR	A0,S0,R0	;A0=S0: flag
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

7000D8E0	E4E0	V0=COP0 Count
MFC0	V0,Count/DPC-End
JR	RA
NOP

7000D8F0	E4F0
LUI	T6,8002
LW	T6,69A0 (T6)
ADDIU	SP,SP,FFD0
SW	RA,001C (SP)
BNE	T6,R0,7000DA68
SW	A0,0030 (SP)
JAL	70018630
NOP
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,69B8	;A1=800669B8
ADDIU	A0,A0,69A0	;A0=800669A0
JAL	7000D6D0
ADDIU	A2,R0,0005	;A2=5
LUI	AT,8006
ADDIU	T7,R0,000D
SH	T7,69D0 (AT)
SB	R0,69D2 (AT)
SW	R0,69D4 (AT)
LUI	AT,8006
ADDIU	T8,R0,000E
LUI	A1,8006
LUI	A2,8006
SH	T8,69E8 (AT)
SB	R0,69EA (AT)
SW	R0,69EC (AT)
ADDIU	A2,A2,69D0	;A2= 800669D0
ADDIU	A1,A1,69A0	;A1= 800669A0
JAL	7000DC50	;set interrupt table entry #A0 with p->data A1 and value A2
ADDIU	A0,R0,0007	;A0= entry 7
LUI	A1,8006
LUI	A2,8006
ADDIU	A2,A2,69E8	;A2= 800669E8
ADDIU	A1,A1,69A0	;A1= 800669A0
JAL	7000DC50	;set interrupt table entry #A0 with p->data A1 and value A2
ADDIU	A0,R0,0003	;A0= entry 3
ADDIU	T9,R0,FFFF
SW	T9,0028 (SP)
JAL	70018A30
OR	A0,R0,R0
SW	V0,0024 (SP)
LW	T0,0024 (SP)
LW	T1,0030 (SP)
SLT	AT,T0,T1
BEQ	AT,R0,7000D9B8
NOP
SW	T0,0028 (SP)
OR	A0,R0,R0	;A0=NULL
JAL	7000D800	;change priority to A1 for thread A0 or current thread if NULL
OR	A1,T1,R0	;A1=T1: priority
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
NOP
LUI	AT,8002
LUI	T4,8006
LUI	T3,8006
ADDIU	T4,T4,69A0
ADDIU	T2,R0,0001
ADDIU	T3,T3,57F0
SW	T2,69A0 (AT)
SW	T3,69A4 (AT)
SW	T4,69A8 (AT)
SW	T4,69AC (AT)
LUI	T5,8006
LW	T7,0030 (SP)
LUI	AT,8002
ADDIU	T5,T5,59A0
ADDIU	T6,T5,1000
LUI	A2,7001
LUI	A3,8002
SW	V0,002C (SP)
SW	R0,69B0 (AT)
SW	R0,69B4 (AT)
SW	R0,69B8 (AT)
ADDIU	A3,A3,69A0	;A3= 800269A0
ADDIU	A2,A2,DA78	;A2= 7000DA78
SW	T6,0010 (SP)	;SP+10= 800669A0: thread SP, 0x1000 bytes
OR	A0,T3,R0	;A0=T3: 800657F0
OR	A1,R0,R0
JAL	7000D430	;initialize thread entry at A0 with values
SW	T7,0014 (SP)
JAL	70018A50
NOP
LUI	A0,8006
JAL	7000D580	;insert thread and execute if no thread currently running
ADDIU	A0,A0,57F0
JAL	70018610	;A0->COP0 status
LW	A0,002C (SP)
LW	T8,0028 (SP)
ADDIU	AT,R0,FFFF
BEQ	T8,AT,7000DA68
NOP
OR	A0,R0,R0	;A0=NULL
JAL	7000D800	;change priority to A1 for thread A0 or current thread if NULL
OR	A1,T8,R0	;A1=T8: priority
LW	RA,001C (SP)
ADDIU	SP,SP,0030
JR	RA
NOP

7000DA78	E678
ADDIU	SP,SP,FFC8
SW	RA,001C (SP)
SW	A0,0038 (SP)
SW	S0,0018 (SP)
SW	R0,002C (SP)
JAL	70018B60
SW	R0,0028 (SP)
SW	V0,0034 (SP)
LW	T6,0034 (SP)
LUI	AT,8006
LHU	T7,0002 (T6)
BNE	T7,R0,7000DAB8
SH	T7,6A00 (AT)
ADDIU	T8,R0,0001
LUI	AT,8006
SH	T8,6A00 (AT)
//7000DAB8:
LW	T9,0038 (SP)
SW	T9,0030 (SP)
//7000DAC0:
LW	T0,0030 (SP)
ADDIU	A1,SP,002C	;A1=SP+2C: p->buffer
ADDIU	A2,R0,0001
JAL	7000DDD0
LW	A0,000C (T0)
LW	T1,002C (SP)
ADDIU	AT,R0,000D
LHU	S0,0000 (T1)
BEQ	S0,AT,7000DAF8
ADDIU	AT,R0,000E
BEQ	S0,AT,7000DC08
NOP
BEQ	R0,R0,7000DAC0
NOP
//7000DAF8:
JAL	70018B70
NOP
LUI	T2,8006
LHU	T2,6A00 (T2)
LUI	AT,8006
ADDIU	T3,T2,FFFF
ANDI	T4,T3,FFFF
BNE	T4,R0,7000DB58
SH	T3,6A00 (AT)
JAL	70018B60
NOP
SW	V0,0034 (SP)
LW	T5,0034 (SP)
LW	T6,0010 (T5)
BEQ	T6,R0,7000DB48
NOP
OR	A0,T6,R0
LW	A1,0014 (T5)
JAL	7000DF10
OR	A2,R0,R0
//7000DB48:
LW	T7,0034 (SP)
LUI	AT,8006
LHU	T8,0002 (T7)
SH	T8,6A00 (AT)
//7000DB58:
LUI	T9,8007
LW	T9,8E1C (T9)
LW	T1,0028 (SP)
LUI	AT,8007
ADDIU	T0,T9,0001
BEQ	T1,R0,7000DBA0
SW	T0,8E1C (AT)
JAL	7000D8E0	;V0=Count
NOP
SW	V0,0024 (SP)
LW	T2,0024 (SP)
ADDIU	T4,R0,0000
LUI	AT,8007
SW	T4,8E10 (AT)
LUI	AT,8007
OR	T5,T2,R0
SW	T5,8E14 (AT)
SW	R0,0028 (SP)
//7000DBA0:
LUI	T3,8007
LW	T3,8E18 (T3)
JAL	7000D8E0	;V0=Count
SW	T3,0024 (SP)
LUI	AT,8007
SW	V0,8E18 (AT)
LUI	T6,8007
LW	T6,8E18 (T6)
LW	T7,0024 (SP)
LUI	T3,8007
LW	T3,8E14 (T3)
SUBU	T8,T6,T7
OR	T1,T8,R0
LUI	T2,8007
ADDU	T5,T1,T3
LW	T2,8E10 (T2)
ADDIU	T0,R0,0000
SLTU	AT,T5,T3
ADDU	T4,AT,T0
LUI	AT,8007
ADDU	T4,T4,T2
SW	T4,8E10 (AT)
LUI	AT,8007
SW	T8,0024 (SP)
BEQ	R0,R0,7000DAC0
SW	T5,8E14 (AT)
//7000DC08:
JAL	700186BC
NOP
BEQ	R0,R0,7000DAC0
NOP
//7000DC18:	filler
NOP
NOP
NOP
NOP
NOP
NOP
//7000DC30:	return (unused)
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0038
JR	RA
NOP

7000DC50	E850	set interrupt table entry #A0 with p->data A1 and value A2
	accepts: A0=entry#, A1=p->data, A2=value
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)
SW	A1,002C (SP)
SW	A2,0030 (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LW	T6,0028 (SP)	;T6= A0 f/caller: 
LUI	T8,8006
LW	T0,002C (SP)	;T0= A1 f/caller: interrupt handler
ADDIU	T8,T8,6A10
SLL	T7,T6,0x3	;T7= A0*8: offset
ADDU	T9,T7,T8	;T9=80066A10+offset: p->entry for interrupt A0
SW	T9,0020 (SP)
SW	T0,0000 (T9)
LW	T2,0020 (SP)
LW	T1,0030 (SP)	;T1= A2 f/caller: 
OR	S0,V0,R0
OR	A0,S0,R0
JAL	70018610	;A0->COP0 status
SW	T1,0004 (T2)
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

7000DCC0
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)
SW	A1,002C (SP)
SW	A2,0030 (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LUI	T7,8003
LW	T7,8044 (T7)
LW	T6,0028 (SP)
LUI	T9,8003
LUI	T1,8003
SW	T6,0010 (T7)
LW	T9,8044 (T9)
LW	T8,002C (SP)
OR	S0,V0,R0
OR	A0,S0,R0
SW	T8,0014 (T9)
LW	T1,8044 (T1)
LW	T0,0030 (SP)
JAL	70018610	;A0->COP0 status
SH	T0,0002 (T1)
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

7000DD30	E930	update Status and MI Interrupt Mask Register with A0
	accepts: A0=Status mask
MFC0	T4,Status/DPC-Clock
ANDI	V0,T4,FF01	;V0=interrupts and interrupt flag
LUI	T0,8002
ADDIU	T0,T0,698C
LW	T3,0000 (T0)	;T3=8002698C: prev.Status
ADDIU	AT,R0,FFFF
XOR	T0,T3,AT
ANDI	T0,T0,FF00	;T0=mask for any interrupts not set
OR	V0,V0,T0	;V0|= mask
LUI	T2,A430
LW	T2,000C (T2)	;T2=A430000C: MI Interrupt Mask Register
BEQ	T2,R0,7000DD74	;skip if not set
SRL	T1,T3,0x10	;T1=previous diagnostic status
//7000DD64:
ADDIU	AT,R0,FFFF
XOR	T1,T1,AT
ANDI	T1,T1,003F	;T1=mask for all but bootstrap exception vectors
OR	T2,T2,T1	;tack onto existing MI intr.mask reg.
//7000DD74:
SLL	T2,T2,0x10
OR	V0,V0,T2	;V0|= new diagnostic status
LUI	AT,003F
AND	T0,A0,AT	;T0=3F0000
AND	T0,T0,T3	;T0&=prev.Status: diagnostic status flags
SRL	T0,T0,0xF	;flags->offset
LUI	T2,8003
ADDU	T2,T2,T0
LHU	T2,93A0 (T2)	;T2=800293A0+offset: new MI Interrupt Mask Register setting
LUI	AT,A430
SW	T2,000C (AT)	;update MI Interrupt Mask Register
ANDI	T0,A0,FF01	;T0=interrupts and interrupt flag from A0
ANDI	T1,T3,FF00	;T3=interrupts and interrupt flag from prev.Status
AND	T0,T0,T1	;T0=set values
LUI	AT,FFFF
ORI	AT,AT,00FF
AND	T4,T4,AT	;Status w/o interrupts
OR	T4,T4,T0	;set interrupts
MTC0	T4,Status/DPC-Clock	;update Status
NOP
NOP
JR	RA
NOP

7000DDD0
	accepts: A0=p->thread list, A1=p->buffer or NULL, A2=permit errors True/False
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)
SW	A1,002C (SP)
SW	A2,0030 (SP)
SW	S1,0018 (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0014 (SP)
LW	T6,0028 (SP)	;T6=A0 f/caller: p->thread.lst
OR	S0,V0,R0
LW	T7,0008 (T6)
BNE	T7,R0,7000DE48	;branch if p->parent set
NOP
//7000DE04:	mode 0
LW	T8,0030 (SP)
BNE	T8,R0,7000DE20	;branch if A2 f/caller is set
NOP
JAL	70018610	;A0->COP0 status
OR	A0,S0,R0	;restore interrupts
BEQ	R0,R0,7000DEF4	;return -1: error
ADDIU	V0,R0,FFFF
//7000DE20:	mode 1
LUI	T0,8002
LW	T0,7730 (T0)	;T0=80027730: cur.thread
ADDIU	T9,R0,0008
SH	T9,0010 (T0)	;8->cur.thread.index
JAL	700107AC	;update current thread's data with current registers, then insert and execute
LW	A0,0028 (SP)	;A0=p->thread.lst
LW	T1,0028 (SP)
LW	T2,0008 (T1)
BEQ	T2,R0,7000DE04
NOP
//7000DE48:
LW	T3,002C (SP)	;T3=A1 f/caller
BEQ	T3,R0,7000DE70	;branch if A1 f/caller NULL
NOP
//7000DE54:
LW	T4,0028 (SP)	;T4=p->thread.lst
LW	T6,000C (T4)
LW	T5,0014 (T4)
SLL	T7,T6,0x2
ADDU	T8,T5,T7
LW	T9,0000 (T8)
SW	T9,0000 (T3)	;T9->buffer
//7000DE70:
LW	T0,0028 (SP)	;T0=p->thread.lst
LW	T1,000C (T0)
LW	T4,0010 (T0)
ADDIU	T2,T1,0001
DIV	T2,T4
MFHI	T6
SW	T6,000C (T0)
LW	T5,0028 (SP)
BNE	T4,R0,7000DE9C
NOP
BREAK	00001C00	;Break: division by zero
//7000DE9C:
ADDIU	AT,R0,FFFF
BNE	T4,AT,7000DEB4
LUI	AT,8000
BNE	T2,AT,7000DEB4
NOP
BREAK	00001800
//7000DEB4:
LW	T7,0008 (T5)
ADDIU	T8,T7,FFFF
SW	T8,0008 (T5)
LW	T9,0028 (SP)
LW	T3,0004 (T9)
LW	T1,0000 (T3)
BEQ	T1,R0,7000DEE8
NOP
//7000DED4:	pop and reinstert next thread in sequence
JAL	700108F4	;V0= popped thread A0
ADDIU	A0,T9,0004
OR	S1,V0,R0
JAL	7000D580	;insert thread and execute if no thread currently running
OR	A0,S1,R0
//7000DEE8:	restore interrupts and return 0: okay
JAL	70018610	;A0->COP0 status
OR	A0,S0,R0	;restore interrupts
OR	V0,R0,R0
//7000DEF4:	return
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0028

7000DF10
	accepts: A0=, A1=, A2=mode
ADDIU	SP,SP,FFC8
SW	RA,0024 (SP)
SW	A0,0038 (SP)
SW	A1,003C (SP)
SW	A2,0040 (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LW	T6,0038 (SP)
OR	S0,V0,R0
LW	T7,0008 (T6)
LW	T8,0010 (T6)
SLT	AT,T7,T8
BNE	AT,R0,7000DFAC
NOP
LW	T9,0040 (SP)
ADDIU	AT,R0,0001
BNE	T9,AT,7000DF84	;branch if mode 0
NOP
//7000DF60:	swap threads if mode 1
LUI	T1,8002
LW	T1,7730 (T1)
ADDIU	T0,R0,0008
SH	T0,0010 (T1)	;8->cur.thread.index
LW	A0,0038 (SP)
JAL	700107AC	;update current thread's data with current registers, then insert and execute
ADDIU	A0,A0,0004
BEQ	R0,R0,7000DF94
NOP
//7000DF84:
JAL	70018610	;A0->COP0 status
OR	A0,S0,R0
BEQ	R0,R0,7000E044
ADDIU	V0,R0,FFFF
//7000DF94:
LW	T2,0038 (SP)
LW	T3,0008 (T2)
LW	T4,0010 (T2)
SLT	AT,T3,T4
BEQ	AT,R0,7000DF50
NOP
//7000DFAC:
LW	T5,0038 (SP)
LW	T0,003C (SP)
LW	T6,000C (T5)
LW	T7,0008 (T5)
LW	T9,0010 (T5)
LW	T1,0014 (T5)
ADDU	T8,T6,T7
DIV	T8,T9
MFHI	S1
SLL	T2,S1,0x2
ADDU	T3,T1,T2
SW	T0,0000 (T3)
LW	T4,0038 (SP)
BNE	T9,R0,7000DFEC
NOP
BREAK	00001C00	;Break: division by zero
//7000DFEC:
ADDIU	AT,R0,FFFF
BNE	T9,AT,7000E004
LUI	AT,8000
BNE	T8,AT,7000E004
NOP
BREAK	00001800
//7000E004:
LW	T6,0008 (T4)
ADDIU	T7,T6,0001
SW	T7,0008 (T4)
LW	T8,0038 (SP)
LW	T9,0000 (T8)
LW	T5,0000 (T9)
BEQ	T5,R0,7000E038	;POP and swap thread if TRUE
NOP
JAL	700108F4	;V0= popped thread A0
OR	A0,T8,R0
OR	S2,V0,R0
JAL	7000D580	;insert thread and execute if no thread currently running
OR	A0,S2,R0
//7000E038:
JAL	70018610	;A0->COP0 status
OR	A0,S0,R0
OR	V0,R0,R0
LW	RA,0024 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
JR	RA
ADDIU	SP,SP,0038

7000E060
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LUI	T7,8003
LW	T7,8044 (T7)
LW	T6,0028 (SP)
LUI	T9,8003
ADDIU	T8,R0,0001
SW	T6,0008 (T7)
LW	T9,8044 (T9)
LUI	T0,8003
OR	S0,V0,R0
SH	T8,0000 (T9)
LW	T0,8044 (T0)
OR	A0,S0,R0
LW	T1,0008 (T0)
LW	T2,0004 (T1)
JAL	70018610	;A0->COP0 status
SW	T2,000C (T0)
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

7000E0D0
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SWC1	F12,0028 (SP)
SW	S1,0018 (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0014 (SP)
LUI	T6,8003
LW	T6,8044 (T6)
LWC1	F4,0028 (SP)
LUI	T7,8003
LUI	T0,8003
SWC1	F4,0018 (T6)
LW	T7,8044 (T7)
OR	S1,V0,R0
LHU	T8,0000 (T7)
ORI	T9,T8,0002
SH	T9,0000 (T7)
LW	T0,8044 (T0)
LW	T1,0008 (T0)
LWC1	F6,0018 (T0)
LW	S0,0020 (T1)
ANDI	T2,S0,0FFF
OR	S0,T2,R0
MTC1	S0,F8
BGEZ	S0,7000E148
CVT.S.W	F10,F8
LUI	AT,4F80
MTC1	AT,F16
NOP
ADD.S	F10,F10,F16
MUL.S	F18,F6,F10
ADDIU	T4,R0,0001
CFC1	T3,F31
CTC1	T4,F31
NOP
CVT.W.S	F4,F18
CFC1	T4,F31
NOP
ANDI	AT,T4,0004
ANDI	T4,T4,0078
BEQ	T4,R0,7000E1C0
LUI	AT,4F00
MTC1	AT,F4
ADDIU	T4,R0,0001
SUB.S	F4,F18,F4
CTC1	T4,F31
NOP
CVT.W.S	F4,F4
CFC1	T4,F31
NOP
ANDI	AT,T4,0004
ANDI	T4,T4,0078
BNE	T4,R0,7000E1B8
NOP
MFC1	T4,F4
LUI	AT,8000
BEQ	R0,R0,7000E1D0
OR	T4,T4,AT
BEQ	R0,R0,7000E1D0
ADDIU	T4,R0,FFFF
MFC1	T4,F4
NOP
BLTZ	T4,7000E1B8
NOP
CTC1	T3,F31
ANDI	T5,T4,0FFF
SW	T5,0020 (T0)
JAL	70018610	;A0->COP0 status
OR	A0,S1,R0
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0028

7000E200
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SWC1	F12,0028 (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LUI	T6,8003
LW	T6,8044 (T6)
LWC1	F4,0028 (SP)
LUI	T7,8003
OR	S0,V0,R0
SWC1	F4,0024 (T6)
LW	T7,8044 (T7)
OR	A0,S0,R0
LHU	T8,0000 (T7)
ORI	T9,T8,0004
JAL	70018610	;A0->COP0 status
SH	T9,0000 (T7)
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

7000E260
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LBU	T6,002B (SP)
OR	S0,V0,R0
BEQ	T6,R0,7000E29C
NOP
LUI	T7,8003
LW	T7,8044 (T7)
LHU	T8,0000 (T7)
ORI	T9,T8,0040
BEQ	R0,R0,7000E2B4
SH	T9,0000 (T7)
LUI	T0,8003
LW	T0,8044 (T0)
ADDIU	AT,R0,FFBF
LHU	T1,0000 (T0)
AND	T2,T1,AT
SH	T2,0000 (T0)
JAL	70018610	;A0->COP0 status
OR	A0,S0,R0
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

7000E2D0
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LBU	T6,002B (SP)
OR	S0,V0,R0
BEQ	T6,R0,7000E30C
NOP
LUI	T7,8003
LW	T7,8044 (T7)
LHU	T8,0000 (T7)
ORI	T9,T8,0020
BEQ	R0,R0,7000E324
SH	T9,0000 (T7)
LUI	T0,8003
LW	T0,8044 (T0)
ADDIU	AT,R0,FFDF
LHU	T1,0000 (T0)
AND	T2,T1,AT
SH	T2,0000 (T0)
JAL	70018610	;A0->COP0 status
OR	A0,S0,R0
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

7000E340
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
JAL	70018ED0	;V0= RSP Status
SW	A0,0020 (SP)
SW	V0,001C (SP)
LW	T6,001C (SP)
ANDI	T7,T6,0100
BEQ	T7,R0,7000E370
NOP
ADDIU	T8,R0,0001
BEQ	R0,R0,7000E374
SW	T8,0018 (SP)
SW	R0,0018 (SP)
LW	T9,001C (SP)
ANDI	T0,T9,0080
BEQ	T0,R0,7000E3AC
NOP
LW	T1,0020 (SP)
LW	T3,0018 (SP)
ADDIU	AT,R0,FFFD
LW	T2,0004 (T1)
OR	T4,T2,T3
SW	T4,0004 (T1)
LW	T5,0020 (SP)
LW	T6,0004 (T5)
AND	T7,T6,AT
SW	T7,0004 (T5)
LW	RA,0014 (SP)
LW	V0,0018 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7000E3C0	EFC0	set DP Cmd clock, buffer counter, pipe counter, and tmem counter to A0
	accepts: A0=p->target
LUI	T6,A410
LW	T7,0010 (T6)	;T7=A4100010: DP Cmd Clock
LUI	T8,A410
LUI	T0,A410
SW	T7,0000 (A0)	;A0+0= DP Cmd Clock
LW	T9,0014 (T8)	;T9=A4100014: DP Cmd Buffer Busy Counter
ADDIU	A0,A0,0004
LUI	T2,A410
SW	T9,0000 (A0)	;A0+4= DP Cmd Buffer Busy Counter
LW	T1,0018 (T0)	;T1=A4100018: DP Cmd Pipe Busy Counter
ADDIU	A0,A0,0004
ADDIU	A0,A0,0004
SW	T1,FFFC (A0)	;A0+8= DP Cmd Pipe Busy Counter
LW	T3,001C (T2)	;T3=A410001C: DP Cmd Tmem Load Counter
ADDIU	A0,A0,0004
JR	RA
SW	T3,FFFC (A0)	;A0+C= DP Cmd Tmem Load Counter

7000E410
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LUI	T6,8003
LW	T6,8040 (T6)	;T6=80028040: 
OR	S0,V0,R0
OR	A0,S0,R0
LW	T7,0004 (T6)
JAL	70018610	;A0->COP0 status
SW	T7,0020 (SP)
LW	RA,001C (SP)
LW	V0,0020 (SP)
LW	S0,0018 (SP)
JR	RA
ADDIU	SP,SP,0028

7000E450
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LUI	T6,8003
LW	T6,8044 (T6)	;T6=80028044: 
OR	S0,V0,R0
OR	A0,S0,R0
LW	T7,0004 (T6)	;T7=
JAL	70018610	;A0->COP0 status
SW	T7,0020 (SP)
LW	RA,001C (SP)
LW	V0,0020 (SP)
LW	S0,0018 (SP)
JR	RA
ADDIU	SP,SP,0028

7000E490
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	A0,0020 (SP)
LUI	T7,8003
LW	T7,8044 (T7)
LW	T6,0020 (SP)
SW	V0,001C (SP)
LUI	T8,8003
SW	T6,0004 (T7)
LW	T8,8044 (T8)
LHU	T9,0000 (T8)
ORI	T0,T9,0010
SH	T0,0000 (T8)
JAL	70018610	;A0->COP0 status
LW	A0,001C (SP)
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7000E4E0	F0E0	A0-> DP Cmd Status
LUI	T6,A410
JR	RA
SW	A0,000C (T6)	;A0->A410000C: set DPC Status

7000E4F0
ADDIU	SP,SP,FFE0
LUI	T6,8006
SW	RA,0014 (SP)
SW	A0,0020 (SP)
ADDIU	T6,T6,6A90
SW	T6,001C (SP)
OR	A1,T6,R0	;A1=80066A90: p->buffer
LW	A0,0020 (SP)
JAL	7000F970	;V0=p->A2 bytes copied from A0 to A1
ADDIU	A2,R0,0040	;A2=40 bytes
LW	T7,001C (SP)
LW	T8,0010 (T7)
BEQ	T8,R0,7000E538
NOP
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
OR	A0,T8,R0
LW	T9,001C (SP)
SW	V0,0010 (T9)
LW	T0,001C (SP)
LW	T1,0018 (T0)
BEQ	T1,R0,7000E558
NOP
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
OR	A0,T1,R0
LW	T2,001C (SP)
SW	V0,0018 (T2)
LW	T3,001C (SP)
LW	T4,0020 (T3)
BEQ	T4,R0,7000E578
NOP
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
OR	A0,T4,R0
LW	T5,001C (SP)
SW	V0,0020 (T5)
LW	T6,001C (SP)
LW	T7,0028 (T6)
BEQ	T7,R0,7000E598
NOP
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
OR	A0,T7,R0
LW	T8,001C (SP)
SW	V0,0028 (T8)
LW	T9,001C (SP)
LW	T0,002C (T9)
BEQ	T0,R0,7000E5B8
NOP
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
OR	A0,T0,R0
LW	T1,001C (SP)
SW	V0,002C (T1)
LW	T2,001C (SP)
LW	T3,0030 (T2)
BEQ	T3,R0,7000E5D8
NOP
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
OR	A0,T3,R0
LW	T4,001C (SP)
SW	V0,0030 (T4)
LW	T5,001C (SP)
LW	T6,0038 (T5)
BEQ	T6,R0,7000E5F8
NOP
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
OR	A0,T6,R0
LW	T7,001C (SP)
SW	V0,0038 (T7)
LW	RA,0014 (SP)
LW	V0,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7000E60C
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
SW	A0,0020 (SP)
JAL	7000E4F0
LW	A0,0020 (SP)
SW	V0,001C (SP)
LW	T6,001C (SP)
LW	T7,0004 (T6)
ANDI	T8,T7,0001
BEQ	T8,R0,7000E660
NOP
LW	T9,0038 (T6)
ADDIU	AT,R0,FFFE
SW	T9,0018 (T6)
LW	T0,001C (SP)
LW	T1,003C (T0)
SW	T1,001C (T0)
LW	T2,0020 (SP)
LW	T3,0004 (T2)
AND	T4,T3,AT
SW	T4,0004 (T2)
LW	A0,001C (SP)
JAL	70010BD0	;cache A1 bytes at A0 prior to hardware write request
ADDIU	A1,R0,0040
JAL	70018EE0	;A0-> RSP Status
ADDIU	A0,R0,2B00
LUI	A0,0400
JAL	70018EF0
ORI	A0,A0,1000
ADDIU	AT,R0,FFFF
BNE	V0,AT,7000E6A4
NOP
LUI	A0,0400
JAL	70018EF0
ORI	A0,A0,1000
ADDIU	AT,R0,FFFF
BEQ	V0,AT,7000E68C
NOP
LUI	A1,0400
ORI	A1,A1,0FC0
ADDIU	A0,R0,0001
LW	A2,001C (SP)
JAL	70018F30
ADDIU	A3,R0,0040
ADDIU	AT,R0,FFFF
BNE	V0,AT,7000E6EC
NOP
LUI	A1,0400
ORI	A1,A1,0FC0
ADDIU	A0,R0,0001
LW	A2,001C (SP)
JAL	70018F30
ADDIU	A3,R0,0040
ADDIU	AT,R0,FFFF
BEQ	V0,AT,7000E6C8
NOP
JAL	70018FC0
NOP
BEQ	V0,R0,7000E70C
NOP
JAL	70018FC0
NOP
BNE	V0,R0,7000E6FC
NOP
LW	T5,001C (SP)
LUI	A1,0400
ORI	A1,A1,1000
ADDIU	A0,R0,0001
LW	A2,0008 (T5)
JAL	70018F30
LW	A3,000C (T5)
ADDIU	AT,R0,FFFF
BNE	V0,AT,7000E75C
NOP
LW	T7,001C (SP)
LUI	A1,0400
ORI	A1,A1,1000
ADDIU	A0,R0,0001
LW	A2,0008 (T7)
JAL	70018F30
LW	A3,000C (T7)
ADDIU	AT,R0,FFFF
BEQ	V0,AT,7000E734
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7000E76C
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	70018FC0
SW	A0,0018 (SP)
BEQ	V0,R0,7000E794
NOP
JAL	70018FC0
NOP
BNE	V0,R0,7000E784
NOP
JAL	70018EE0	;A0-> RSP Status
ADDIU	A0,R0,0125
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000E7B0	F3B0	sets A3 bytes of commands at A0 to DP Cmd
	accepts: A0=p->commands, A1=(unused), A2=(no practical application), A3=size
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)
SW	A2,0030 (SP)
SW	A3,0034 (SP)
JAL	70018FF0	;V0=TRUE if DP Cmd Status DMA busy flag set
SW	S0,0018 (SP)
BEQ	V0,R0,7000E7DC
NOP
BEQ	R0,R0,7000E844	;return -1
ADDIU	V0,R0,FFFF
//7000E7DC:	clear the current transfer
ADDIU	T6,R0,0001
LUI	T7,A410
SW	T6,000C (T7)	;1->A410000C: clear DP Cmd xbus dmem dma
//7000E7E8:	loop until ready
LUI	T8,A410
LW	S0,000C (T8)	;S0=A410000C: DP Cmd Status
ANDI	T9,S0,0001
BNE	T9,R0,7000E7E8	;loop until transfer finished
NOP
//7000E7FC:	set command start & end
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
LW	A0,0028 (SP)	;A0 f/ caller
LUI	T0,A410
SW	V0,0000 (T0)	;V0->A4100000: set DP Cmd Start
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
LW	A0,0028 (SP)	;A0 f/caller
LW	T5,0034 (SP)	;T5= A3 f/caller: size
OR	T3,V0,R0
LW	T4,0030 (SP)	;T4= A2 f/caller
ADDU	T7,T3,T5	;T7= p->cmds + size
ADDIU	T2,R0,0000
SLTU	AT,T7,T5	;TRUE if end < start (negative size)
ADDU	T6,AT,T2
OR	T1,T7,R0
LUI	T8,A410
SW	T1,0004 (T8)	;p->cmd+size -> A4100004: DP Cmd End
OR	V0,R0,R0	;V0=0: return OKAY!
ADDU	T6,T6,T4	;T6=A2 + test: unused error code?
//7000E844:	return
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

7000E860	F460	set signal 0 in RSP Status
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
JAL	70018EE0	;A0-> RSP Status
ADDIU	A0,R0,0400	;A0= set signal 0
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000E880	F480	V0= virtual address for TLB index A0
	accepts: A0=TLB Index
MTC0	A0,Index
NOP
TLBR
NOP
NOP
NOP
MFC0	V0,EntryHi
JR	RA
NOP

7000E8B0	F4B0	V0=rdram offset derived from pointer A0
	accepts: A0=p->physical or virtual address
ADDIU	SP,SP,FFE8
SW	A0,0018 (SP)	;SP+18=A0: pointer
LW	T6,0018 (SP)	;T6=pointer
LUI	AT,8000
SW	RA,0014 (SP)
SLTU	AT,T6,AT	;AT=TRUE if isn't rdram address (offset)
BNEZ	AT,7000E8E8	;branch if 80000000 or above
LUI	AT,A000
SLTU	AT,T6,AT	;AT=TRUE if between rdram and mirror (normal address)
BEQ	AT,R0,7000E8E8	;branch if isn't a ram address
LUI	AT,1FFF
ORI	AT,AT,FFFF	;AT=1FFFFFFF
BEQ	R0,R0,7000E91C
AND	V0,T6,AT	;V0=pointer & mask
//7000E8E8:	check if in uncached memory
LW	T7,0018 (SP)	;T7=p->palette
LUI	AT,A000
SLTU	AT,T7,AT	;TRUE if rdram or ROM address
BNEZ	AT,7000E914	;branch if someplace there
LUI	AT,C000
SLTU	AT,T7,AT	;TRUE if in uncached rdram mirror (A0-C0)
BEQ	AT,R0,7000E914	;branch if isn't in uncached
LUI	AT,1FFF
ORI	AT,AT,FFFF	;AT=1FFFFFFF
BEQ	R0,R0,7000E91C
AND	V0,T7,AT	;V0=pointer & mask
//7000E914:	see if it's a TLB address
JAL	70019020	;V0=physical address for virtual address A0
LW	A0,0018 (SP)	;A0=pointer
//7000E91C:
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000E930
LUI	T6,8003
LW	T6,804C (T6)
MTC1	A0,F8
ADDIU	SP,SP,FFF0
MTC1	T6,F4
CVT.S.W	F10,F8
BGEZ	A0,7000E960
CVT.S.W	F6,F4
LUI	AT,4F80
MTC1	AT,F16
NOP
ADD.S	F10,F10,F16
DIV.S	F18,F6,F10
LUI	AT,3F00
MTC1	AT,F4
ADDIU	A1,R0,0001
ADD.S	F12,F18,F4
CFC1	T7,F31
CTC1	A1,F31
NOP
CVT.W.S	F8,F12
CFC1	A1,F31
NOP
ANDI	AT,A1,0004
ANDI	A1,A1,0078
BEQ	A1,R0,7000E9E4
LUI	AT,4F00
MTC1	AT,F8
ADDIU	A1,R0,0001
SUB.S	F8,F12,F8
CTC1	A1,F31
NOP
CVT.W.S	F8,F8
CFC1	A1,F31
NOP
ANDI	AT,A1,0004
ANDI	A1,A1,0078
BNE	A1,R0,7000E9DC
NOP
MFC1	A1,F8
LUI	AT,8000
BEQ	R0,R0,7000E9F4
OR	A1,A1,AT
BEQ	R0,R0,7000E9F4
ADDIU	A1,R0,FFFF
MFC1	A1,F8
NOP
BLTZ	A1,7000E9DC
NOP
CTC1	T7,F31
SLTIU	AT,A1,0084
BEQ	AT,R0,7000EA0C
NOP
BEQ	R0,R0,7000EA88
ADDIU	V0,R0,FFFF
ADDIU	AT,R0,0042
DIVU	A1,AT
MFLO	A2
ANDI	T8,A2,00FF
OR	A2,T8,R0
SLTI	AT,A2,0011
BNE	AT,R0,7000EA30
NOP
ADDIU	A2,R0,0010
ADDIU	T9,A1,FFFF
LUI	T0,A450
SW	T9,0010 (T0)	;T9->A4500010: AI DACrate
ADDIU	T1,A2,FFFF
LUI	T2,A450
SW	T1,0014 (T2)	;T1->A4500014: AI Bitrate
ADDIU	T3,R0,0001
LUI	T4,A450
SW	T3,0008 (T4)	;1->A4500008: AI Control: DMA on
LUI	T5,8003
LW	T5,804C (T5)
DIV	T5,A1
MFLO	V0
BNE	A1,R0,7000EA70	;test for division by zero
NOP
BREAK	00001C00	;Break: division by zero
//7000EA70:
ADDIU	AT,R0,FFFF
BNE	A1,AT,7000EA88
LUI	AT,8000
BNE	T5,AT,7000EA88
NOP
BREAK	00001800	;Break: 
//7000EA88:	return
JR	RA
ADDIU	SP,SP,0010

7000EA90
LW	V0,0000 (A0)
BEQL	V0,R0,7000EAA8
LW	V0,0004 (A0)
LW	T6,0004 (A0)
SW	T6,0004 (V0)
LW	V0,0004 (A0)
BEQ	V0,R0,7000EAB8
NOP
LW	T7,0000 (A0)
SW	T7,0000 (V0)
JR	RA
NOP

7000EAC0
LW	T6,0000 (A1)
SW	A1,0004 (A0)	;A0+4 = A1
SW	T6,0000 (A0)	;A0+0 = A1+0
LW	V0,0000 (A1)	;V0=A1+0: p->??? or NULL
BEQ	V0,R0,7000EADC	;skip if NULL
NOP
SW	A0,0004 (V0)	;V0+4= A0
JR	RA
SW	A0,0000 (A1)	;A1+0 = A0

7000EAE4
LUI	T6,8002
LW	T6,76E0 (T6)
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
BEQL	T6,R0,7000EB10
LW	RA,0014 (SP)
JAL	700190E0
NOP
LUI	AT,8002
SW	R0,76E0 (AT)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000EB1C
LUI	V0,8002
ADDIU	V0,V0,76E0
LW	T6,0000 (V0)
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
BNEL	T6,R0,7000EB44
LW	RA,0014 (SP)
JAL	7000F3A0
SW	A0,0000 (V0)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000EB50	F750	V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
	accepts: A0=(unused), A1=(unused), A2=p->sound buffer entry, A3=#blocks, SP+10=block size
LW	T6,0010 (SP)	;T6=SP+10: 
SW	A0,0000 (SP)	;SP+0= A0: unused?
SW	A1,0004 (SP)	;SP+4= A1: unused?
MULTU	A3,T6
LW	T9,0008 (A2)	;T9=snd.buf.size
LW	T8,0000 (A2)	;T8=snd.buf.start
LW	A0,0004 (A2)	;A0=snd.buf.cur
ADDIU	AT,R0,FFF0
ADDU	T0,T8,T9	;T0=start+size: snd.buf.end
OR	V1,R0,R0	;V1=NULL
MFLO	V0
ADDIU	V0,V0,000F
AND	T7,V0,AT	;T7= V0 quadword aligned
ADDU	T1,A0,T7	;T1= snd.buf.cur + size
SLTU	AT,T0,T1
BNE	AT,R0,7000EB9C	;skip if exceeded end of buffer
ADDU	T2,A0,T7	;T2=snd.buf.cur + size
//7000EB94:
OR	V1,A0,R0	;V1=A0: snd.buf.cur
SW	T2,0004 (A2)	;update snd.buf.cur
//7000EB9C:	return V0=snd.buf.cur if set or NULL
JR	RA
OR	V0,V1,R0

7000EBB0
ADDIU	SP,SP,FFC8
SW	RA,001C (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
JAL	7000D8E0	;V0=Count
OR	S0,V0,R0
SW	V0,0034 (SP)
LUI	T7,8007
LW	T7,8E18 (T7)
LW	T6,0034 (SP)
LUI	T0,8007
LUI	T1,8007
LW	T1,8E14 (T1)
LW	T0,8E10 (T0)
SUBU	T8,T6,T7
SW	T8,0030 (SP)
OR	A0,S0,R0
SW	T1,002C (SP)
JAL	70018610	;A0->COP0 status
SW	T0,0028 (SP)
LW	T9,0030 (SP)
LW	T5,002C (SP)
LW	RA,001C (SP)
OR	T3,T9,R0
ADDU	V1,T3,T5
LW	T4,0028 (SP)
ADDIU	T2,R0,0000
SLTU	AT,V1,T5
ADDU	V0,AT,T2
LW	S0,0018 (SP)
ADDIU	SP,SP,0038
JR	RA
ADDU	V0,V0,T4

7000EC40	F840	(V0,V1) = (A0,A1) >> (A2,A3) [logical], treating each pair as a doubleword
	accepts: A0=DW1 upper, A1=DW1 lower, A2=DW2 upper, A3=DW2 lower
SW	A0,0000 (SP)
SW	A1,0004 (SP)
SW	A2,0008 (SP)
SW	A3,000C (SP)
LD	T7,0008 (SP)
LD	T6,0000 (SP)
DSRLV	V0,T6,T7	;V0= DW1 >> DW2
DSLL32	V1,V0,0x0
DSRA32	V1,V1,0x0
JR	RA
DSRA32	V0,V0,0x0

7000EC6C	F86C	(V0,V1) = (A0,A1) % (A2,A3), treating each pair as a doubleword
	accepts: A0=DW1 upper, A1=DW1 lower, A2=DW2 upper, A3=DW2 lower
SW	A0,0000 (SP)
SW	A1,0004 (SP)
SW	A2,0008 (SP)
SW	A3,000C (SP)
LD	T7,0008 (SP)
LD	T6,0000 (SP)
DDIVU	T6,T7
BNE	T7,R0,7000EC94
NOP
BREAK	00001C00	;Break: division by zero
MFHI	V0		;V0= DW1 % DW2
DSLL32	V1,V0,0x0
DSRA32	V1,V1,0x0
JR	RA
DSRA32	V0,V0,0x0

7000ECA8	F8A8	(V0,V1) = (A0,A1) / (A2,A3), treating each pair as a doubleword
	accepts: A0=DW1 upper, A1=DW1 lower, A2=DW2 upper, A3=DW2 lower
SW	A0,0000 (SP)
SW	A1,0004 (SP)
SW	A2,0008 (SP)
SW	A3,000C (SP)
LD	T7,0008 (SP)
LD	T6,0000 (SP)
DDIVU	T6,T7
BNE	T7,R0,7000ECD0
NOP
BREAK	00001C00	;Break: division by zero
MFLO	V0		;V0= DW1 // DW2
DSLL32	V1,V0,0x0
DSRA32	V1,V1,0x0
JR	RA
DSRA32	V0,V0,0x0

7000ECE4	F8E4	(V0,V1) = (A0,A1) << (A2,A3), treating each pair as a doubleword
	accepts: A0=DW1 upper, A1=DW1 lower, A2=DW2 upper, A3=DW2 lower
SW	A0,0000 (SP)
SW	A1,0004 (SP)
SW	A2,0008 (SP)
SW	A3,000C (SP)
LD	T7,0008 (SP)
LD	T6,0000 (SP)
DSLLV	V0,T6,T7	;V0= DW1 << DW2
DSLL32	V1,V0,0x0
DSRA32	V1,V1,0x0
JR	RA
DSRA32	V0,V0,0x0

7000ED10	F910	(V0,V1) = (A0,A1) % (A2,A3), treating each pair as a doubleword
	accepts: A0=DW1 upper, A1=DW1 lower, A2=DW2 upper, A3=DW2 lower
SW	A0,0000 (SP)
SW	A1,0004 (SP)
SW	A2,0008 (SP)
SW	A3,000C (SP)
LD	T7,0008 (SP)
LD	T6,0000 (SP)
DDIVU	T6,T7
BNE	T7,R0,7000ED38
NOP
BREAK	00001C00	;Break: division by zero
MFHI	V0
DSLL32	V1,V0,0x0
DSRA32	V1,V1,0x0
JR	RA
DSRA32	V0,V0,0x0

7000ED4C	F94C	(V0,V1) = (A0,A1) / (A2,A3) [signed division], treating each pair as a doubleword
	accepts: A0=DW1 upper, A1=DW1 lower, A2=DW2 upper, A3=DW2 lower
SW	A0,0000 (SP)
SW	A1,0004 (SP)
SW	A2,0008 (SP)
SW	A3,000C (SP)
LD	T7,0008 (SP)
LD	T6,0000 (SP)
DDIV	T6,T7		;signed division: DW1 and DW2
NOP
BNE	T7,R0,7000ED78
NOP
BREAK	00001C00	;Break: division by zero
DADDIU	AT,R0,FFFF
BNE	T7,AT,7000ED94
DADDIU	AT,R0,0001
DSLL32	AT,AT,0x1F	;AT=1<<3F, or DW:-0
BNE	T6,AT,7000ED94
NOP
BREAK	00001800
MFLO	V0		;V0= DW1 // DW2
DSLL32	V1,V0,0x0
DSRA32	V1,V1,0x0
JR	RA
DSRA32	V0,V0,0x0

7000EDA8	F9A8	(V0,V1) = (A0,A1) * (A2,A3), treating each pair as a doubleword
	accepts: A0=DW1.upper, A1=DW1.lower, A2=DW2.upper, A3=DW2.lower
SW	A0,0000 (SP)
SW	A1,0004 (SP)
SW	A2,0008 (SP)
SW	A3,000C (SP)
LD	T7,0008 (SP)	;T7= (A0<<32) | A1
LD	T6,0000 (SP)	;T6= (A2<<32) | A3
DMULTU	T6,T7
MFLO	V0
DSLL32	V1,V0,0x0
DSRA32	V1,V1,0x0	;V1= lower word
JR	RA
DSRA32	V0,V0,0x0	;V0= upper word

7000EDD8	F9D8	divide DW (A2,A3) by short at SP+12, placing quotient in A0 and modulo in A1
	accepts: A0=p->quotient, A1=p->modulo, A2=DW upper, A3=DW lower, SP+12=[short] divisor
LH	T7,0012 (SP)	;T7=SP+12: halfword
SW	A2,0008 (SP)	;SP+8= DW
SW	A3,000C (SP)
LD	T6,0008 (SP)
OR	T8,T7,R0
OR	T9,T8,R0	;T9=T8=T7: halfword
DDIVU	T6,T9
BNE	T9,R0,7000EE00
NOP
BREAK	00001C00	;Break: division by zero
MFLO	T0		;DW // halfword
SD	T0,0000 (A0)	;quotient->A0
LH	T2,0012 (SP)
LD	T1,0008 (SP)
OR	T3,T2,R0
OR	T4,T3,R0
DDIVU	T1,T4
BNE	T4,R0,7000EE28
NOP
BREAK	00001C00	;Break: division by zero
MFHI	T5
SD	T5,0000 (A1)	;modulo->A1
JR	RA
NOP

7000EE38	FA38	(V0,V1) = (A0,A1) % (A2,A3) [signed modulo], treating each pair as a doubleword
	accepts: A0=DW1 upper, A1=DW1 lower, A2=DW2 upper, A3=DW2 lower
ADDIU	SP,SP,FFF8
SW	A0,0008 (SP)	;SP+8= DW1
SW	A1,000C (SP)
SW	A2,0010 (SP)	;SP+10= DW2
SW	A3,0014 (SP)
LD	T7,0010 (SP)
LD	T6,0008 (SP)
DDIV	T6,T7
NOP
BNE	T7,R0,7000EE68
NOP
BREAK	00001C00	;Break: division by zero
DADDIU	AT,R0,FFFF
BNE	T7,AT,7000EE84
DADDIU	AT,R0,0001
DSLL32	AT,AT,0x1F
BNE	T6,AT,7000EE84
NOP
BREAK	00001800
MFHI	T8		;T8 = DW1 % DW2
SD	T8,0000 (SP)	;SP+0 = modulo
BGEZ	T8,7000EE9C	;if not negative no need to test errors
NOP
BGTZ	T7,7000EEB4	;skip if divisor > 0
NOP
//7000EE9C:
LD	T9,0000 (SP)	;T9= modulo
BLEZ	T9,7000EEC4
NOP
LD	T0,0010 (SP)	;T7= divisor
BGEZ	T0,7000EEC4	;return if not negative
NOP
//7000EEB4:	account for modulo requiring the sign of the divisor
LD	T1,0000 (SP)
LD	T2,0010 (SP)
DADDU	T3,T1,T2	;T3= modulo + divisor
SD	T3,0000 (SP)	;update modulo
//7000EEC4:
LW	V0,0000 (SP)
LW	V1,0004 (SP)
JR	RA
ADDIU	SP,SP,0008

7000EED4	FAD4	(V0,V1) = (A0,A1) >> (A2,A3) [arithmetic], treating each pair as a doubleword
	accepts: A0=DW1 upper, A1=DW1 lower, A2=DW2 upper, A3=DW2 lower
SW	A0,0000 (SP)
SW	A1,0004 (SP)
SW	A2,0008 (SP)
SW	A3,000C (SP)
LD	T7,0008 (SP)
LD	T6,0000 (SP)
DSRAV	V0,T6,T7
DSLL32	V1,V0,0x0
DSRA32	V1,V1,0x0
JR	RA
DSRA32	V0,V0,0x0

7000EF00	FB00	set p->audio A0 of length A1 in AI Register; V0=0 okay or -1 on error
	accepts: A0=p->audio, A1=length
ADDIU	SP,SP,FFE0
LUI	T7,8002
LBU	T7,76F0 (T7)	;T7=800276F0: 
SW	A0,0020 (SP)	;A0->SP+20: p->audio
LW	T6,0020 (SP)
SW	RA,0014 (SP)
SW	A1,0024 (SP)	;SP+24= A1
BEQ	T7,R0,7000EF2C	;if set, subtract 0x2000
SW	T6,001C (SP)	;SP+1C= p->audio
ADDIU	T8,T6,E000
SW	T8,001C (SP)	;p->audio -= 2000
//7000EF2C:
LW	T9,0020 (SP)	;T9= p->audio
LW	T0,0024 (SP)	;T0= length
ADDIU	AT,R0,2000
ADDU	T1,T9,T0
ANDI	T2,T1,3FFF	;T2= p->audio.end & ~0x4000
BNE	T2,AT,7000EF58	;branch if not exactly 2000
NOP
ADDIU	T3,R0,0001
LUI	AT,8002
BEQ	R0,R0,7000EF60
SB	T3,76F0 (AT)	;1->800276F0
//7000EF58:
LUI	AT,8002
SB	R0,76F0 (AT)	;0->800276F0
//7000EF60:
JAL	700190F0
NOP
BEQ	V0,R0,7000EF78
NOP
BEQ	R0,R0,7000EF98	;return V0=-1: error
ADDIU	V0,R0,FFFF
//7000EF78:	load audio into the AI
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
LW	A0,001C (SP)	;A0=SP+1C: p->audio.corrected
LUI	T4,A450
SW	V0,0000 (T4)	;V0->A4500000: set AI Address
LW	T5,0024 (SP)	;T5= A1 f/caller
LUI	T7,A450
OR	V0,R0,R0
SW	T5,0004 (T7)	;T5->A4500004: set AI Length
//7000EF98:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7000EFB0	FBB0	V0=AI Length
LUI	T6,A450
JR	RA
LW	V0,0004 (T6)	;V0=A4500004: AI Length

7000EFC0	FBC0	unconditional return
JR	RA
NOP

7000EFC8
LW	T6,0044 (A0)
MTC1	A1,F4
LUI	AT,8003
MTC1	T6,F8
CVT.S.W	F6,F4
LDC1	F4,9420 (AT)
LUI	AT,3FE0
MTC1	AT,F7
ADDIU	AT,R0,FFF0
CVT.S.W	F10,F8
MUL.S	F16,F6,F10
MTC1	R0,F6
CVT.D.S	F18,F16
DIV.D	F8,F18,F4
ADD.D	F10,F8,F6
CVT.S.D	F0,F10
TRUNC.W.S	F16,F0
MFC1	V0,F16
NOP
AND	T8,V0,AT
JR	RA
OR	V0,T8,R0

7000F020
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SW	A1,001C (SP)
JAL	7000EA90
OR	A0,A1,R0
LW	A1,0018 (SP)
LW	A0,001C (SP)
JAL	7000EAC0
ADDIU	A1,A1,0014
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7000F058
ADDIU	SP,SP,FFD8
SW	RA,0024 (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
LW	S0,0014 (A0)
OR	S1,A0,R0
ADDIU	S2,A0,0004
BEQL	S0,R0,7000F0A4
LW	RA,0024 (SP)
JAL	7000EA90
OR	A0,S0,R0
OR	A0,S0,R0
JAL	7000EAC0
OR	A1,S2,R0
LW	S0,0014 (S1)
BNE	S0,R0,7000F080
NOP
LW	RA,0024 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
JR	RA
ADDIU	SP,SP,0028

7000F0B8
	accepts: A0=p->???
LUI	V0,8002
LW	V0,76E0 (V0)	;V0=800276E0: 
LW	T6,002C (V0)
SW	T6,0000 (A0)
JR	RA
SW	A0,002C (V0)

7000F0D0
LUI	V0,8002
LW	V0,76E0 (V0)	;V0=800276E0: 
OR	V1,R0,R0
LW	A0,002C (V0)
BEQ	A0,R0,7000F0F8	;return if NULL
NOP
//7000F0E8:
LW	T6,0000 (A0)
OR	V1,A0,R0
SW	T6,002C (V0)
SW	R0,0000 (A0)
//7000F0F8:	return
JR	RA
OR	V0,V1,R0

7000F100	FD00	unconditional return
JR	RA
NOP

7000F108
ADDIU	SP,SP,FF48
SW	S1,0030 (SP)
LUI	S1,8002
LW	S1,76E0 (S1)
SW	RA,004C (SP)
SW	S7,0048 (SP)
SW	S6,0044 (SP)
SW	S5,0040 (SP)
SW	S4,003C (SP)
SW	S3,0038 (SP)
SW	S2,0034 (SP)
SW	S0,002C (SP)
SDC1	F22,0020 (SP)
SDC1	F20,0018 (SP)
SW	A0,00B8 (SP)
SW	A1,00BC (SP)
SH	R0,00AA (SP)
LW	T7,0000 (S1)
OR	S3,A3,R0
OR	S4,A0,R0
BNE	T7,R0,7000F16C
OR	S5,A2,R0
SW	R0,0000 (A1)
BEQ	R0,R0,7000F36C
OR	V0,A0,R0
SW	R0,00B4 (SP)
LW	V0,0000 (S1)
LUI	V1,7FFF
ORI	V1,V1,FFFF
BEQ	V0,R0,7000F1B8
ADDIU	S2,R0,FFF0
LW	A0,0020 (S1)
LW	T9,0010 (V0)
SUBU	T0,T9,A0
SLT	AT,T0,V1
BEQL	AT,R0,7000F1B0
LW	V0,0000 (V0)
SW	V0,00B4 (SP)
LW	T1,0010 (V0)
LW	A0,0020 (S1)
SUBU	V1,T1,A0
LW	V0,0000 (V0)
BNEL	V0,R0,7000F18C
LW	T9,0010 (V0)
LW	T2,00B4 (SP)
LW	A0,0020 (S1)
LW	V0,0010 (T2)
SUBU	T3,V0,A0
SLT	AT,T3,S3
BEQ	AT,R0,7000F2B0
SW	V0,001C (S1)
LUI	AT,3FE0
MTC1	AT,F23
LUI	AT,8003
MTC1	R0,F22
LDC1	F20,9428 (AT)
LW	T4,001C (S1)
LUI	S0,7FFF
ORI	S0,S0,FFFF
AND	T5,T4,S2
SW	T5,001C (S1)
LW	A0,00B4 (SP)
LW	T9,0008 (A0)
JALR	RA,T9
NOP
LW	T8,0044 (S1)
MTC1	V0,F4
LW	T0,00B4 (SP)
MTC1	T8,F8
CVT.S.W	F6,F4
LW	T1,0010 (T0)
CVT.S.W	F10,F8
MUL.S	F16,F6,F10
CVT.D.S	F18,F16
DIV.D	F4,F18,F20
ADD.D	F8,F4,F22
CVT.S.D	F0,F8
TRUNC.W.S	F6,F0
MFC1	V0,F6
NOP
ADDU	T2,T1,V0
SW	T2,0010 (T0)
SW	R0,00B4 (SP)
LW	V1,0000 (S1)
BEQL	V1,R0,7000F298
LW	T7,00B4 (SP)
LW	A0,0020 (S1)
LW	T3,0010 (V1)
SUBU	T4,T3,A0
SLT	AT,T4,S0
BEQL	AT,R0,7000F28C
LW	V1,0000 (V1)
SW	V1,00B4 (SP)
LW	T5,0010 (V1)
LW	A0,0020 (S1)
SUBU	S0,T5,A0
LW	V1,0000 (V1)
BNEL	V1,R0,7000F268
LW	T3,0010 (V1)
LW	T7,00B4 (SP)
LW	A0,0020 (S1)
LW	V0,0010 (T7)
SUBU	T9,V0,A0
SLT	AT,T9,S3
BNE	AT,R0,7000F1E8
SW	V0,001C (S1)
LW	T8,001C (S1)
ADDIU	S2,R0,FFF0
ADDIU	S7,SP,00AA
AND	T6,T8,S2
BLEZ	S3,7000F34C
SW	T6,001C (S1)
LUI	S6,0700
LW	V0,0048 (S1)
OR	S0,S3,R0
SLT	AT,V0,S3
BEQ	AT,R0,7000F2E8
NOP
BEQ	R0,R0,7000F2E8
OR	S0,V0,R0
SW	S6,0000 (S4)
SW	R0,0004 (S4)
LW	S2,0038 (S1)
ADDIU	A1,R0,0006
OR	A2,S5,R0
LW	T9,0008 (S2)
OR	A0,S2,R0
JALR	RA,T9
NOP
LW	A3,0020 (S1)
ADDIU	T1,S4,0008
SW	T1,0010 (SP)
LW	T9,0004 (S2)
OR	A0,S2,R0
OR	A1,S7,R0
JALR	RA,T9
OR	A2,S0,R0
LW	T3,0020 (S1)
SUBU	S3,S3,S0
SLL	T0,S0,0x2
ADDU	T4,T3,S0
OR	S4,V0,R0
ADDU	S5,S5,T0
BGTZ	S3,7000F2CC
SW	T4,0020 (S1)
LW	T5,00B8 (SP)
LW	T6,00BC (SP)
OR	A0,S1,R0
SUBU	T7,S4,T5
SRA	T8,T7,0x3
JAL	7000F058
SW	T8,0000 (T6)
OR	V0,S4,R0
LW	RA,004C (SP)
LDC1	F20,0018 (SP)
LDC1	F22,0020 (SP)
LW	S0,002C (SP)
LW	S1,0030 (SP)
LW	S2,0034 (SP)
LW	S3,0038 (SP)
LW	S4,003C (SP)
LW	S5,0040 (SP)
LW	S6,0044 (SP)
LW	S7,0048 (SP)
JR	RA
ADDIU	SP,SP,00B8

7000F3A0
ADDIU	SP,SP,FF88
SW	RA,0044 (SP)
SW	S8,0040 (SP)
SW	S7,003C (SP)
SW	S6,0038 (SP)
SW	S5,0034 (SP)
SW	S4,0030 (SP)
SW	S3,002C (SP)
SW	S2,0028 (SP)
SW	S1,0024 (SP)
SW	S0,0020 (SP)
LW	S7,0014 (A1)
SW	R0,0000 (A0)
LW	T6,0004 (A1)
SW	R0,0020 (A0)
SW	R0,001C (A0)
SW	T6,003C (A0)
LW	T7,0018 (A1)
ADDIU	T8,R0,00A0
SW	T8,0048 (A0)
SW	T7,0044 (A0)
LW	T9,0010 (A1)
OR	S6,A0,R0
OR	S8,A1,R0
ADDIU	T0,R0,001C
SW	T9,0024 (A0)
SW	T0,0010 (SP)	;SP+10= 1C bytes
OR	A0,R0,R0
OR	A1,R0,R0
ADDIU	A3,R0,0001	;A3= 1 block
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
OR	A2,S7,R0
SW	V0,005C (SP)
JAL	70019120
OR	A0,V0,R0
LW	T1,005C (SP)
ADDIU	T2,R0,004C
OR	A0,R0,R0
SW	T1,0038 (S6)
SW	T2,0010 (SP)	;SP+10= 4C bytes
OR	A1,R0,R0
OR	A2,S7,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
ADDIU	T3,R0,0001
SW	V0,0034 (S6)
SW	T3,0040 (S6)
LW	A3,0004 (S8)
ADDIU	T4,R0,0004
SW	T4,0010 (SP)	;SP+10= 4 bytes
OR	A0,R0,R0
OR	A1,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
OR	A2,S7,R0
LW	A0,0034 (S6)
OR	A1,V0,R0
JAL	700191B8
LW	A2,0004 (S8)
ADDIU	T5,R0,0020
SW	T5,0010 (SP)	;SP+10= 20 bytes
OR	A0,R0,R0
OR	A1,R0,R0
OR	A2,S7,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
SW	V0,0030 (S6)
LW	A3,0004 (S8)
ADDIU	T6,R0,0004
SW	T6,0010 (SP)	;SP+10= 4 bytes
OR	A0,R0,R0
OR	A1,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
OR	A2,S7,R0
LW	A0,0030 (S6)
OR	A1,V0,R0
JAL	70019164
LW	A2,0004 (S8)
LBU	T7,001C (S8)
OR	A0,S6,R0
OR	A2,S8,R0
BEQ	T7,R0,7000F4FC
ADDIU	A1,R0,0002
OR	A1,R0,R0
JAL	700198C0
OR	A3,S7,R0
BEQ	R0,R0,7000F50C
SW	R0,0004 (S6)
LW	A0,0030 (S6)
JAL	70019960
LW	A2,0034 (S6)
SW	R0,0004 (S6)
SW	R0,0008 (S6)
SW	R0,0014 (S6)
SW	R0,0018 (S6)
SW	R0,000C (S6)
SW	R0,0010 (S6)
LW	A3,0004 (S8)
ADDIU	T8,R0,00DC
SW	T8,0010 (SP)	;SP+10= DC bytes
OR	A0,R0,R0
OR	A1,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
OR	A2,S7,R0
LW	T9,0004 (S8)
OR	S4,R0,R0
OR	S0,V0,R0
BLEZ	T9,7000F608
ADDIU	A1,S6,0004
ADDIU	S1,V0,008C
ADDIU	S2,V0,0058
ADDIU	S3,V0,0010
SW	A1,0048 (SP)
LW	A1,0048 (SP)
OR	S5,S0,R0
JAL	7000EAC0
OR	A0,S0,R0
SW	R0,0008 (S0)
LW	A1,0024 (S6)
OR	A0,S3,R0
JAL	70019294
OR	A2,S7,R0
OR	A0,S3,R0
ADDIU	A1,R0,0001
JAL	70019AB0
OR	A2,R0,R0
OR	A0,S2,R0
JAL	7001920C
OR	A1,S7,R0
OR	A0,S2,R0
ADDIU	A1,R0,0001
JAL	7001A600
OR	A2,S3,R0
OR	A0,S1,R0
JAL	7001933C
OR	A1,S7,R0
OR	A0,S1,R0
ADDIU	A1,R0,0001
JAL	7001AA14
OR	A2,S2,R0
LW	A0,0034 (S6)
ADDIU	A1,R0,0002
JAL	7001B4E0
OR	A2,S1,R0
ADDIU	T0,S5,008C
SW	T0,000C (S5)
LW	T1,0004 (S8)
ADDIU	S4,S4,0001
ADDIU	S0,S0,00DC
SLT	AT,S4,T1
ADDIU	S1,S1,00DC
ADDIU	S2,S2,00DC
BNE	AT,R0,7000F560
ADDIU	S3,S3,00DC
OR	S4,R0,R0
LW	A0,005C (SP)
ADDIU	A1,R0,0001
JAL	7001B5F0
LW	A2,0030 (S6)
LW	A3,0008 (S8)
ADDIU	T2,R0,001C
SW	T2,0010 (SP)	;SP+10= 1C bytes
OR	A0,R0,R0
OR	A1,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
OR	A2,S7,R0
SW	R0,002C (S6)
LW	T3,0008 (S8)
OR	V1,V0,R0
BLEZL	T3,7000F670
SW	S7,0028 (S6)
LW	T4,002C (S6)
ADDIU	S4,S4,0001
SW	T4,0000 (V1)
SW	V1,002C (S6)
LW	T5,0008 (S8)
ADDIU	V1,V1,001C
SLT	AT,S4,T5
BNEL	AT,R0,7000F64C
LW	T4,002C (S6)
SW	S7,0028 (S6)
LW	RA,0044 (SP)
LW	S8,0040 (SP)
LW	S7,003C (SP)
LW	S6,0038 (SP)
LW	S5,0034 (SP)
LW	S4,0030 (SP)
LW	S3,002C (SP)
LW	S2,0028 (SP)
LW	S1,0024 (SP)
LW	S0,0020 (SP)
JR	RA
ADDIU	SP,SP,0078

7000F6A0	102A0	send PI transfer request; read or write (A2) SP+14 bytes between hardware A3 and rdram SP+10
	accepts: A0=p->???, A1=, A2=mode (0-read:1-write), A3=hardware address, SP+10=rdram address, SP+14=size, SP+18=
ADDIU	SP,SP,FFD8
LUI	T6,8002
LW	T6,7790 (T6)
SW	RA,001C (SP)
SW	A0,0028 (SP)
SW	A1,002C (SP)
SW	A2,0030 (SP)
SW	A3,0034 (SP)
SW	S1,0018 (SP)
BNE	T6,R0,7000F6D4	;okay so long as 80027790 set
SW	S0,0014 (SP)
BEQ	R0,R0,7000F798	;return -1: failure!
ADDIU	V0,R0,FFFF
//7000F6D4:	set value based on mode
LW	T7,0030 (SP)	;T7=mode
BNE	T7,R0,7000F6F0
NOP
LW	T9,0028 (SP)	;T9= A0 f/caller
ADDIU	T8,R0,000B
BEQ	R0,R0,7000F6FC
SH	T8,0000 (T9)	;B->A0+0: read
//7000F6F0:
LW	T1,0028 (SP)	;T1= A0 f/caller
ADDIU	T0,R0,000C
SH	T0,0000 (T1)	;C->A0+0: write
//7000F6FC:	copy values into A0 f/caller
LW	T2,002C (SP)
LW	T3,0028 (SP)	;T3=A0 f/caller
ADDIU	AT,R0,0001
SB	T2,0002 (T3)	;A0+2= A1 f/caller
LW	T5,0028 (SP)
LW	T4,0040 (SP)
SW	T4,0004 (T5)	;A0+4 = SP+18 f/caller: 
LW	T7,0028 (SP)
LW	T6,0038 (SP)
SW	T6,0008 (T7)	;A0+8 = SP+10 f/caller: rdram address
LW	T9,0028 (SP)
LW	T8,0034 (SP)
SW	T8,000C (T9)	;A0+C = A3 f/caller: hardware address
LW	T1,0028 (SP)
LW	T0,003C (SP)
SW	T0,0010 (T1)	;A0+10= SP+14 f/caller: size
LW	T2,0028 (SP)
SW	R0,0014 (T2)	;A0+14= 0
LW	T3,002C (SP)
BNE	T3,AT,7000F774	;branch if A1 not 1
NOP
//7000F750:
JAL	7001B800
NOP
OR	S1,V0,R0
OR	A0,S1,R0
LW	A1,0028 (SP)	;A1=A0 f/caller
JAL	7001B6B0
OR	A2,R0,R0	;A2=0
BEQ	R0,R0,7000F794
OR	S0,V0,R0
//7000F774:
JAL	7001B800
NOP
OR	S1,V0,R0
OR	A0,S1,R0
LW	A1,0028 (SP)	;A1=A1 f/caller
JAL	7000DF10
OR	A2,R0,R0	;A2=0
//7000F790:
OR	S0,V0,R0
OR	V0,S0,R0
//7000F798:	return
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0028

7000F7B0
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LW	T6,0028 (SP)
OR	S0,V0,R0
ANDI	T7,T6,0001
BEQ	T7,R0,7000F7EC
NOP
LUI	T8,8003
LW	T8,8044 (T8)
LW	T9,000C (T8)
ORI	T0,T9,0008
SW	T0,000C (T8)
LW	T1,0028 (SP)
ANDI	T2,T1,0002
BEQ	T2,R0,7000F814
NOP
LUI	T3,8003
LW	T3,8044 (T3)
ADDIU	AT,R0,FFF7
LW	T4,000C (T3)
AND	T5,T4,AT
SW	T5,000C (T3)
LW	T6,0028 (SP)
ANDI	T7,T6,0004
BEQ	T7,R0,7000F838
NOP
LUI	T9,8003
LW	T9,8044 (T9)
LW	T0,000C (T9)
ORI	T8,T0,0004
SW	T8,000C (T9)
LW	T1,0028 (SP)
ANDI	T2,T1,0008
BEQ	T2,R0,7000F860
NOP
LUI	T4,8003
LW	T4,8044 (T4)
ADDIU	AT,R0,FFFB
LW	T5,000C (T4)
AND	T3,T5,AT
SW	T3,000C (T4)
LW	T6,0028 (SP)
ANDI	T7,T6,0010
BEQ	T7,R0,7000F884
NOP
LUI	T0,8003
LW	T0,8044 (T0)
LW	T8,000C (T0)
ORI	T9,T8,0010
SW	T9,000C (T0)
LW	T1,0028 (SP)
ANDI	T2,T1,0020
BEQ	T2,R0,7000F8AC
NOP
LUI	T5,8003
LW	T5,8044 (T5)
ADDIU	AT,R0,FFEF
LW	T3,000C (T5)
AND	T4,T3,AT
SW	T4,000C (T5)
LW	T6,0028 (SP)
ANDI	T7,T6,0040
BEQ	T7,R0,7000F8EC
NOP
LUI	T8,8003
LW	T8,8044 (T8)
LUI	AT,0001
LUI	T1,8003
LW	T9,000C (T8)
OR	T0,T9,AT
SW	T0,000C (T8)
LW	T1,8044 (T1)
ADDIU	AT,R0,FCFF
LW	T2,000C (T1)
AND	T3,T2,AT
SW	T3,000C (T1)
LW	T4,0028 (SP)
ANDI	T5,T4,0080
BEQ	T5,R0,7000F938
NOP
LUI	T6,8003
LW	T6,8044 (T6)
LUI	AT,FFFE
ORI	AT,AT,FFFF
LW	T7,000C (T6)
LUI	T0,8003
AND	T9,T7,AT
SW	T9,000C (T6)
LW	T0,8044 (T0)
LW	T2,0008 (T0)
LW	T8,000C (T0)
LW	T3,0004 (T2)
ANDI	T1,T3,0300
OR	T4,T8,T1
SW	T4,000C (T0)
LUI	T5,8003
LW	T5,8044 (T5)
OR	A0,S0,R0
LHU	T7,0000 (T5)
ORI	T9,T7,0008
JAL	70018610	;A0->COP0 status
SH	T9,0000 (T5)
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

7000F970	10570	V0=p->A2 bytes copied from A0 to A1
	accepts: A0=p->source, A1=p->target, A2=size
BEQ	A2,R0,7000F9DC
OR	A3,A1,R0	;A3=A1: p->target
BEQ	A0,A1,7000F9DC
SLT	AT,A1,A0
BNEL	AT,R0,7000F9A4
SLTI	AT,A2,0010
ADD	V0,A0,A2
SLT	AT,A1,V0
BEQL	AT,R0,7000F9A4
SLTI	AT,A2,0010
BEQ	R0,R0,7000FB08
SLTI	AT,A2,0010
//7000F9A0:
SLTI	AT,A2,0010
BNE	AT,R0,7000F9BC
NOP
ANDI	V0,A0,0003
ANDI	V1,A1,0003
BEQ	V0,V1,7000F9E4
NOP
//7000F9BC:	continue to copy for A2
BEQ	A2,R0,7000F9DC
NOP
ADDU	V1,A0,A2
//7000F9C8:	copy A2 bytes from A0 to A1
LB	V0,0000 (A0)
ADDIU	A0,A0,0001
ADDIU	A1,A1,0001
BNE	A0,V1,7000F9C8
SB	V0,FFFF (A1)
//7000F9DC:	return V0=p->target
JR	RA
OR	V0,A3,R0
//7000F9E4:
BEQ	V0,R0,7000FA48
ADDIU	AT,R0,0001
BEQ	V0,AT,7000FA2C
ADDIU	AT,R0,0002
BEQL	V0,AT,7000FA18
LH	V0,0000 (A0)
LB	V0,0000 (A0)
ADDIU	A0,A0,0001
ADDIU	A1,A1,0001
ADDIU	A2,A2,FFFF
BEQ	R0,R0,7000FA48
SB	V0,FFFF (A1)
//7000FA14:
LH	V0,0000 (A0)
ADDIU	A0,A0,0002
ADDIU	A1,A1,0002
ADDIU	A2,A2,FFFE
BEQ	R0,R0,7000FA48
SH	V0,FFFE (A1)
//7000FA2C:
LB	V0,0000 (A0)
LH	V1,0001 (A0)
ADDIU	A0,A0,0003
ADDIU	A1,A1,0003
ADDIU	A2,A2,FFFD
SB	V0,FFFD (A1)
SH	V1,FFFE (A1)
//7000FA48:	copy A2 bytes from A0 to A1 (sets of 0x20)
SLTI	AT,A2,0020
BNEL	AT,R0,7000FAA8
SLTI	AT,A2,0010
LW	V0,0000 (A0)
LW	V1,0004 (A0)
LW	T0,0008 (A0)
LW	T1,000C (A0)
LW	T2,0010 (A0)
LW	T3,0014 (A0)
LW	T4,0018 (A0)
LW	T5,001C (A0)
ADDIU	A0,A0,0020
ADDIU	A1,A1,0020
ADDIU	A2,A2,FFE0
SW	V0,FFE0 (A1)
SW	V1,FFE4 (A1)
SW	T0,FFE8 (A1)
SW	T1,FFEC (A1)
SW	T2,FFF0 (A1)
SW	T3,FFF4 (A1)
SW	T4,FFF8 (A1)
BEQ	R0,R0,7000FA48
SW	T5,FFFC (A1)
//7000FAA4:	copy A2 bytes from A0 to A1 (sets of 0x10)
SLTI	AT,A2,0010
BNEL	AT,R0,7000FAE4
SLTI	AT,A2,0004
LW	V0,0000 (A0)
LW	V1,0004 (A0)
LW	T0,0008 (A0)
LW	T1,000C (A0)
ADDIU	A0,A0,0010
ADDIU	A1,A1,0010
ADDIU	A2,A2,FFF0
SW	V0,FFF0 (A1)
SW	V1,FFF4 (A1)
SW	T0,FFF8 (A1)
BEQ	R0,R0,7000FAA4
SW	T1,FFFC (A1)
//7000FAE0:	copy A2 bytes from A0 to A1 (sets of 0x4)
SLTI	AT,A2,0004
BNE	AT,R0,7000F9BC
NOP
LW	V0,0000 (A0)
ADDIU	A0,A0,0004
ADDIU	A1,A1,0004
ADDIU	A2,A2,FFFC
BEQ	R0,R0,7000FAE0
SW	V0,FFFC (A1)
//7000FB04:
SLTI	AT,A2,0010
ADD	A0,A0,A2
BNE	AT,R0,7000FB24
ADD	A1,A1,A2
ANDI	V0,A0,0003
ANDI	V1,A1,0003
BEQ	V0,V1,7000FB54
NOP
//7000FB24:
BEQ	A2,R0,7000F9DC
NOP
ADDIU	A0,A0,FFFF
ADDIU	A1,A1,FFFF
SUBU	V1,A0,A2
//7000FB38:
LB	V0,0000 (A0)
ADDIU	A0,A0,FFFF
ADDIU	A1,A1,FFFF
BNE	A0,V1,7000FB38
SB	V0,0001 (A1)
JR	RA
OR	V0,A3,R0
//7000FB54:
BEQ	V0,R0,7000FBB8
ADDIU	AT,R0,0003
BEQ	V0,AT,7000FB9C
ADDIU	AT,R0,0002
BEQL	V0,AT,7000FB88
LH	V0,FFFE (A0)
LB	V0,FFFF (A0)
ADDIU	A0,A0,FFFF
ADDIU	A1,A1,FFFF
ADDIU	A2,A2,FFFF
BEQ	R0,R0,7000FBB8
SB	V0,0000 (A1)
//7000FB84:
LH	V0,FFFE (A0)
ADDIU	A0,A0,FFFE
ADDIU	A1,A1,FFFE
ADDIU	A2,A2,FFFE
BEQ	R0,R0,7000FBB8
SH	V0,0000 (A1)
//7000FB9C:
LB	V0,FFFF (A0)
LH	V1,FFFD (A0)
ADDIU	A0,A0,FFFD
ADDIU	A1,A1,FFFD
ADDIU	A2,A2,FFFD
SB	V0,0002 (A1)
SH	V1,0000 (A1)
//7000FBB8:
SLTI	AT,A2,0020
BNEL	AT,R0,7000FC18
SLTI	AT,A2,0010
LW	V0,FFFC (A0)
LW	V1,FFF8 (A0)
LW	T0,FFF4 (A0)
LW	T1,FFF0 (A0)
LW	T2,FFEC (A0)
LW	T3,FFE8 (A0)
LW	T4,FFE4 (A0)
LW	T5,FFE0 (A0)
ADDIU	A0,A0,FFE0
ADDIU	A1,A1,FFE0
ADDIU	A2,A2,FFE0
SW	V0,001C (A1)
SW	V1,0018 (A1)
SW	T0,0014 (A1)
SW	T1,0010 (A1)
SW	T2,000C (A1)
SW	T3,0008 (A1)
SW	T4,0004 (A1)
BEQ	R0,R0,7000FBB8
SW	T5,0000 (A1)
//7000FC14:
SLTI	AT,A2,0010
BNEL	AT,R0,7000FC54
SLTI	AT,A2,0004
LW	V0,FFFC (A0)
LW	V1,FFF8 (A0)
LW	T0,FFF4 (A0)
LW	T1,FFF0 (A0)
ADDIU	A0,A0,FFF0
ADDIU	A1,A1,FFF0
ADDIU	A2,A2,FFF0
SW	V0,000C (A1)
SW	V1,0008 (A1)
SW	T0,0004 (A1)
BEQ	R0,R0,7000FC14
SW	T1,0000 (A1)
//7000FC50:
SLTI	AT,A2,0004
BNE	AT,R0,7000FB24
NOP
LW	V0,FFFC (A0)
ADDIU	A0,A0,FFFC
ADDIU	A1,A1,FFFC
ADDIU	A2,A2,FFFC
BEQ	R0,R0,7000FC50
SW	V0,0000 (A1)

7000FC80
	accepts: A0=p->buffer, A1=, A2=(float), A3=(float), SP+10=(float), SP+14=(float), SP+18=(float)
ADDIU	SP,SP,FFD0
MTC1	A2,F14
SW	RA,0014 (SP)
SW	A3,003C (SP)
SW	A0,0030 (SP)
SW	A1,0034 (SP)
JAL	70010010
SWC1	F14,0038 (SP)
LWC1	F14,0038 (SP)
LUI	AT,8003
LDC1	F6,9430 (AT)
CVT.D.S	F4,F14
LUI	AT,4000
MUL.D	F8,F4,F6
MTC1	AT,F10
CVT.S.D	F14,F8
DIV.S	F12,F14,F10
JAL	7F057EA0
SWC1	F12,001C (SP)
LWC1	F12,001C (SP)
JAL	7F057EAC
SWC1	F0,0020 (SP)
LWC1	F4,0020 (SP)
LWC1	F6,003C (SP)
LWC1	F14,0040 (SP)
DIV.S	F2,F4,F0
LWC1	F16,0044 (SP)
LUI	AT,BF80
MTC1	AT,F4
ADD.S	F18,F14,F16
LW	V0,0030 (SP)
LUI	AT,4000
SUB.S	F12,F14,F16
LW	A1,0034 (SP)
SWC1	F4,002C (V0)
OR	V1,R0,R0
ADDIU	A0,R0,0004
DIV.S	F10,F18,F12
SWC1	F2,0014 (V0)
DIV.S	F8,F2,F6
MTC1	AT,F6
SWC1	F10,0028 (V0)
SWC1	F8,0000 (V0)
MUL.S	F8,F6,F14
MTC1	R0,F6
NOP
SWC1	F6,003C (V0)
MUL.S	F10,F8,F16
DIV.S	F4,F10,F12
SWC1	F4,0038 (V0)
LWC1	F0,0048 (SP)
LWC1	F6,0000 (V0)
ADDIU	V1,V1,0001
LWC1	F16,0004 (V0)
MUL.S	F10,F6,F0
LWC1	F12,0008 (V0)
BEQ	V1,A0,7000FDA4
LWC1	F14,000C (V0)
MUL.S	F8,F16,F0
LWC1	F6,0010 (V0)
LWC1	F16,0014 (V0)
MUL.S	F4,F12,F0
LWC1	F12,0018 (V0)
ADDIU	V1,V1,0001
MUL.S	F2,F14,F0
LWC1	F14,001C (V0)
SWC1	F10,0000 (V0)
MUL.S	F10,F6,F0
SWC1	F8,0004 (V0)
SWC1	F4,0008 (V0)
ADDIU	V0,V0,0010
BNE	V1,A0,7000FD68
SWC1	F2,FFFC (V0)
MUL.S	F8,F16,F0
ADDIU	V0,V0,0010
SWC1	F10,FFF0 (V0)
MUL.S	F4,F12,F0
NOP
MUL.S	F2,F14,F0
SWC1	F8,FFF4 (V0)
SWC1	F4,FFF8 (V0)
SWC1	F2,FFFC (V0)
BEQ	A1,R0,7000FEA0
LUI	AT,4000
MTC1	AT,F9
MTC1	R0,F8
CVT.D.S	F0,F18
ORI	T6,R0,FFFF
C.LE.D	F0,F8
LUI	AT,4100
BC1FL	7000FDFC
MTC1	AT,F11
BEQ	R0,R0,7000FEA0
SH	T6,0000 (A1)
MTC1	AT,F11
MTC1	R0,F10
ADDIU	T8,R0,0001
LUI	AT,41E0
DIV.D	F4,F10,F0
ADDIU	T0,R0,0001
CFC1	T7,F31
CTC1	T8,F31
NOP
CVT.W.D	F6,F4
CFC1	T8,F31
NOP
ANDI	T8,T8,0078
BEQL	T8,R0,7000FE80
MFC1	T8,F6
MTC1	AT,F7
MTC1	R0,F6
ADDIU	T8,R0,0001
SUB.D	F6,F4,F6
CTC1	T8,F31
NOP
CVT.W.D	F6,F6
CFC1	T8,F31
NOP
ANDI	T8,T8,0078
BNE	T8,R0,7000FE74
NOP
MFC1	T8,F6
LUI	AT,8000
BEQ	R0,R0,7000FE8C
OR	T8,T8,AT
BEQ	R0,R0,7000FE8C
ADDIU	T8,R0,FFFF
MFC1	T8,F6
NOP
BLTZ	T8,7000FE74
NOP
CTC1	T7,F31
ANDI	T9,T8,FFFF
BGTZ	T9,7000FEA0
SH	T8,0000 (A1)
SH	T0,0000 (A1)
LW	RA,0014 (SP)
ADDIU	SP,SP,0030
JR	RA
NOP

7000FEB0
	accepts: A0=p->entry in 80069558 table
ADDIU	SP,SP,FF98
MTC1	A2,F12
MTC1	A3,F14
LWC1	F4,0078 (SP)	;F4=SP+10: 
LWC1	F6,007C (SP)	;F6=SP+14: 
LWC1	F8,0080 (SP)	;F8=SP+18: 
SW	RA,0024 (SP)
SW	A0,0068 (SP)
MFC1	A2,F12
MFC1	A3,F14
ADDIU	A0,SP,0028	;A0=SP+28: p->buffer
SWC1	F4,0010 (SP)
SWC1	F6,0014 (SP)
JAL	7000FC80
SWC1	F8,0018 (SP)
//7000FEEC:
ADDIU	A0,SP,0028	;A0=p->buffer
JAL	7000FF10
LW	A1,0068 (SP)	;A1=p->entry
//7000FEF8:	return
LW	RA,0024 (SP)
ADDIU	SP,SP,0068
JR	RA
NOP

7000FF10
LUI	AT,4780
MTC1	AT,F0
OR	V0,A1,R0
ADDIU	V1,A1,0020
OR	A2,R0,R0
OR	A3,A0,R0
ADDIU	T4,R0,0004
ADDIU	T3,R0,0002
LUI	T2,FFFF
OR	A0,R0,R0
OR	T0,A3,R0
LWC1	F14,0004 (T0)
ADDIU	A0,A0,0001
LWC1	F18,0000 (T0)
MUL.S	F16,F14,F0
BEQ	A0,T3,7000FFB4
NOP
MUL.S	F14,F18,F0
ADDIU	A0,A0,0001
ADDIU	V0,V0,0004
ADDIU	V1,V1,0004
ADDIU	T0,T0,0008
TRUNC.W.S	F12,F16
TRUNC.W.S	F14,F14
MFC1	T1,F12
MFC1	A1,F14
SRA	T9,T1,0x10
ANDI	T5,T9,FFFF
AND	T8,A1,T2
OR	T6,T8,T5
SLL	T7,A1,0x10
AND	T9,T7,T2
SW	T6,FFFC (V0)
ANDI	T8,T1,FFFF
OR	T5,T9,T8
SW	T5,FFFC (V1)
LWC1	F14,0004 (T0)
LWC1	F18,0000 (T0)
MUL.S	F16,F14,F0
BNE	A0,T3,7000FF54
NOP
MUL.S	F14,F18,F0
ADDIU	T0,T0,0008
ADDIU	V0,V0,0004
ADDIU	V1,V1,0004
TRUNC.W.S	F12,F16
TRUNC.W.S	F14,F14
MFC1	T1,F12
MFC1	A1,F14
SRA	T9,T1,0x10
ANDI	T5,T9,FFFF
AND	T8,A1,T2
OR	T6,T8,T5
SLL	T7,A1,0x10
AND	T9,T7,T2
ANDI	T8,T1,FFFF
SW	T6,FFFC (V0)
OR	T5,T9,T8
SW	T5,FFFC (V1)
ADDIU	A2,A2,0001
BNE	A2,T4,7000FF34
ADDIU	A3,A3,0010
JR	RA
NOP

70010010
LUI	AT,3F80
OR	V1,A0,R0
MTC1	AT,F0
MTC1	R0,F2
ADDIU	A0,R0,0001
OR	V0,R0,R0
ADDIU	A3,R0,0004
ADDIU	A2,R0,0003
ADDIU	A1,R0,0002
BNEL	V0,R0,70010048
SWC1	F2,0000 (V1)
BEQ	R0,R0,70010048
SWC1	F0,0000 (V1)
SWC1	F2,0000 (V1)
BNEL	V0,A0,7001005C
SWC1	F2,0004 (V1)
BEQ	R0,R0,7001005C
SWC1	F0,0004 (V1)
SWC1	F2,0004 (V1)
BNEL	V0,A1,70010070
SWC1	F2,0008 (V1)
BEQ	R0,R0,70010070
SWC1	F0,0008 (V1)
SWC1	F2,0008 (V1)
BNEL	V0,A2,70010084
SWC1	F2,000C (V1)
BEQ	R0,R0,70010084
SWC1	F0,000C (V1)
SWC1	F2,000C (V1)
ADDIU	V0,V0,0001
BNE	V0,A3,70010034
ADDIU	V1,V1,0010
JR	RA
NOP

70010098
ADDIU	SP,SP,FFA8
SW	RA,0014 (SP)
SW	A0,0058 (SP)
JAL	70010010
ADDIU	A0,SP,0018
ADDIU	A0,SP,0018
JAL	7000FF10
LW	A1,0058 (SP)
LW	RA,0014 (SP)
ADDIU	SP,SP,0058
JR	RA
NOP

700100C8
LUI	AT,4780
MTC1	AT,F0
ADDIU	SP,SP,FFF0
OR	V0,A1,R0
ADDIU	V1,A1,0020
OR	A2,R0,R0
OR	T0,A0,R0
ADDIU	T4,R0,0004
ADDIU	T3,R0,0002
LUI	T2,FFFF
OR	A0,R0,R0
OR	T1,T0,R0
LW	T6,0000 (V1)
LW	T9,0000 (V0)
ADDIU	A0,A0,0001
SRL	T7,T6,0x10
ANDI	T8,T7,FFFF
AND	T5,T9,T2
OR	T6,T8,T5
SW	T6,0004 (SP)
LW	T7,0000 (V1)
LW	T8,0000 (V0)
LW	A1,0004 (SP)
ANDI	T9,T7,FFFF
SLL	T5,T8,0x10
MTC1	A1,F18
AND	T6,T5,T2
OR	A3,T9,T6
CVT.S.W	F18,F18
MTC1	A3,F16
SW	A3,0000 (SP)
ADDIU	V0,V0,0004
ADDIU	V1,V1,0004
CVT.S.W	F16,F16
ADDIU	T1,T1,0008
DIV.S	F18,F18,F0
DIV.S	F16,F16,F0
SWC1	F18,FFF8 (T1)
BNE	A0,T3,700100F8
SWC1	F16,FFFC (T1)
ADDIU	A2,A2,0001
BNE	A2,T4,700100F0
ADDIU	T0,T0,0010
JR	RA
ADDIU	SP,SP,0010

70010180
LUI	V0,8002
JR	RA
LW	V0,7734 (V0)	;V0=80027734: 

70010190	10D90	jump for interrupt handler, copied serially
LUI	K0,7001
ADDIU	K0,K0,01A0	;K0=700101A0
JR	K0
NOP

700101A0	10DA0	interrupt handler
LUI	K0,8007
ADDIU	K0,K0,8E30
SD	AT,0020 (K0)
MFC0	K1,Status/DPC-Clock
SW	K1,0118 (K0)
ADDIU	AT,R0,FFFC
AND	K1,K1,AT
MTC0	K1,Status/DPC-Clock
SD	T0,0058 (K0)
SD	T1,0060 (K0)
SD	T2,0068 (K0)
SW	R0,0018 (K0)
MFC0	T0,Cause/DPC-Buf.Busy
OR	T0,K0,R0
LUI	K0,8002
LW	K0,7730 (K0)
LD	T1,0020 (T0)
SD	T1,0020 (K0)
LD	T1,0118 (T0)
SD	T1,0118 (K0)
LD	T1,0058 (T0)
SD	T1,0058 (K0)
LD	T1,0060 (T0)
SD	T1,0060 (K0)
LD	T1,0068 (T0)
SD	T1,0068 (K0)
LW	K1,0118 (K0)
MFLO	T0
SD	T0,0108 (K0)
MFHI	T0
ANDI	T1,K1,FF00
SD	V0,0028 (K0)
SD	V1,0030 (K0)
SD	A0,0038 (K0)
SD	A1,0040 (K0)
SD	A2,0048 (K0)
SD	A3,0050 (K0)
SD	T3,0070 (K0)
SD	T4,0078 (K0)
SD	T5,0080 (K0)
SD	T6,0088 (K0)
SD	T7,0090 (K0)
SD	S0,0098 (K0)
SD	S1,00A0 (K0)
SD	S2,00A8 (K0)
SD	S3,00B0 (K0)
SD	S4,00B8 (K0)
SD	S5,00C0 (K0)
SD	S6,00C8 (K0)
SD	S7,00D0 (K0)
SD	T8,00D8 (K0)
SD	T9,00E0 (K0)
SD	GP,00E8 (K0)
SD	SP,00F0 (K0)
SD	S8,00F8 (K0)
SD	RA,0100 (K0)
BEQ	T1,R0,700102B8
SD	T0,0110 (K0)
//70010288:
LUI	T0,8002
ADDIU	T0,T0,698C
LW	T0,0000 (T0)
ADDIU	AT,R0,FFFF
XOR	T0,T0,AT
LUI	AT,FFFF
ANDI	T0,T0,FF00
ORI	AT,AT,00FF
OR	T1,T1,T0
AND	K1,K1,AT
OR	K1,K1,T1
SW	K1,0118 (K0)
//700102B8:
LUI	T1,A430
LW	T1,000C (T1)
BEQ	T1,R0,700102F0
NOP
//700102C8:
LUI	T0,8002
ADDIU	T0,T0,698C
LW	T0,0000 (T0)
LW	T4,0128 (K0)
ADDIU	AT,R0,FFFF
SRL	T0,T0,0x10
XOR	T0,T0,AT
ANDI	T0,T0,003F
AND	T0,T0,T4
OR	T1,T1,T0
//700102F0:
SW	T1,0128 (K0)
MFC0	T0,ExpectPC/DPC-Pipe Busy
SW	T0,011C (K0)
LW	T0,0018 (K0)
BEQ	T0,R0,70010354
NOP
//70010308:
CFC1	T0,F31
NOP
SW	T0,012C (K0)
SDC1	F0,0130 (K0)
SDC1	F2,0138 (K0)
SDC1	F4,0140 (K0)
SDC1	F6,0148 (K0)
SDC1	F8,0150 (K0)
SDC1	F10,0158 (K0)
SDC1	F12,0160 (K0)
SDC1	F14,0168 (K0)
SDC1	F16,0170 (K0)
SDC1	F18,0178 (K0)
SDC1	F20,0180 (K0)
SDC1	F22,0188 (K0)
SDC1	F24,0190 (K0)
SDC1	F26,0198 (K0)
SDC1	F28,01A0 (K0)
SDC1	F30,01A8 (K0)
//70010354:
MFC0	T0,Cause/DPC-Buf.Busy
SW	T0,0120 (K0)
ADDIU	T1,R0,0002
SH	T1,0010 (K0)
ANDI	T1,T0,007C
ADDIU	T2,R0,0024
BEQ	T1,T2,70010630
NOP
//70010374:
ADDIU	T2,R0,002C
BEQ	T1,T2,70010778
NOP
//70010380:
ADDIU	T2,R0,0000
BNE	T1,T2,70010694
NOP
AND	S0,K1,T0
//70010390:
ANDI	T1,S0,FF00
SRL	T2,T1,0xC
BNE	T2,R0,700103A8
NOP
//700103A0:
SRL	T2,T1,0x8
ADDI	T2,T2,0010
//700103A8:
LUI	AT,8003
ADDU	AT,AT,T2
LBU	T2,9440 (AT)	;T2=80029440+offset: offset for selecting TLB handler for interrupt
LUI	AT,8003
ADDU	AT,AT,T2
LW	T2,9460 (AT)	;T2=80029460+offset: p->handler for interrupt
JR	T2
NOP
//700103C8:
ADDIU	AT,R0,DFFF
BEQ	R0,R0,70010390
AND	S0,S0,AT
//700103D4:
ADDIU	AT,R0,BFFF
BEQ	R0,R0,70010390
AND	S0,S0,AT
//700103E0:
MFC0	T1,Compare/DPC-Status
MTC0	T1,Compare/DPC-Status
JAL	700106C4
ADDIU	A0,R0,0018	;A0= entry 3
LUI	AT,FFFF
ORI	AT,AT,7FFF
BEQ	R0,R0,70010390
AND	S0,S0,AT
//70010400:
ADDIU	AT,R0,F7FF
AND	S0,S0,AT
ADDIU	T2,R0,0004
LUI	AT,8002
ADDU	AT,AT,T2
LW	T2,7700 (AT)
LUI	SP,8006
ADDIU	SP,SP,7DF0
ADDIU	A0,R0,0010	;A0= entry 2
BEQ	T2,R0,70010444
ADDIU	SP,SP,0FF0
JALR	RA,T2
NOP
//70010434:
BEQ	V0,R0,70010444
NOP
BEQ	R0,R0,70010648
NOP
//70010444:
JAL	700106C4
NOP
BEQ	R0,R0,70010390
NOP
//70010454:
LUI	T0,8002
ADDIU	T0,T0,698C
LW	T0,0000 (T0)
LUI	S1,A430
LW	S1,0008 (S1)	;S1= A4300008: MI Interrupt
SRL	T0,T0,0x10
AND	S1,S1,T0
ANDI	T1,S1,0001
BEQ	T1,R0,700104C4
NOP
//7001047C:
LUI	T4,A404
LW	T4,0010 (T4)	;T4= A4040010: SP Status
ADDIU	T1,R0,0008
LUI	AT,A404
ANDI	T4,T4,0300
ANDI	S1,S1,003E
BEQ	T4,R0,700104B4	;skip if signals 1 or 2 not set
SW	T1,0010 (AT)	;clear interrupt
//7001049C:
JAL	700106C4
ADDIU	A0,R0,0020	;A0= entry 4
BEQ	S1,R0,70010588
NOP
BEQ	R0,R0,700104C4
NOP
//700104B4:
JAL	700106C4
ADDIU	A0,R0,0058	;A0= entry B
BEQ	S1,R0,70010588
NOP
//700104C4:
ANDI	T1,S1,0008
BEQ	T1,R0,700104E8
LUI	AT,A440
ANDI	S1,S1,0037
SW	R0,0010 (AT)	;0-> A4400010: reset VI Current Line Reg
JAL	700106C4
ADDIU	A0,R0,0038	;A0= entry 7: VI
BEQ	S1,R0,70010588
NOP
//700104E8:
ANDI	T1,S1,0004
BEQ	T1,R0,70010514
NOP
ADDIU	T1,R0,0001
LUI	AT,A450
ANDI	S1,S1,003B
SW	T1,000C (AT)	;1-> AI Status
JAL	700106C4
ADDIU	A0,R0,0030	;A0= entry 6: AI
BEQ	S1,R0,70010588
NOP
//70010514:
ANDI	T1,S1,0002
BEQ	T1,R0,70010538
LUI	AT,A480
ANDI	S1,S1,003D
SW	R0,0018 (AT)	;reset SI Status
JAL	700106C4
ADDIU	A0,R0,0028	;A0= entry 5: SI
BEQ	S1,R0,70010588
NOP
//70010538:
ANDI	T1,S1,0010
BEQ	T1,R0,70010564
NOP
ADDIU	T1,R0,0002
LUI	AT,A460
ANDI	S1,S1,002F
SW	T1,0010 (AT)	;2->A4600010: PI Status DMA flag
JAL	700106C4
ADDIU	A0,R0,0040	;A0= entry 8: PI
BEQ	S1,R0,70010588
NOP
//70010564:
ANDI	T1,S1,0020
BEQ	T1,R0,70010588
NOP
ADDIU	T1,R0,0800
LUI	AT,A430
ANDI	S1,S1,001F
SW	T1,0000 (AT)	;clear MIPS DP interrupt
JAL	700106C4
ADDIU	A0,R0,0048	;A0= entry 9: MI
//70010588:
ADDIU	AT,R0,FBFF
BEQ	R0,R0,70010390
AND	S0,S0,AT
//70010594:
LW	K1,0118 (K0)
ADDIU	AT,R0,EFFF
LUI	T1,8002
AND	K1,K1,AT
SW	K1,0118 (K0)
ADDIU	T1,T1,6988
LW	T2,0000 (T1)
BEQ	T2,R0,700105C0
ADDIU	AT,R0,EFFF
BEQ	R0,R0,70010648
AND	S0,S0,AT
//700105C0:
ADDIU	T2,R0,0001
SW	T2,0000 (T1)
JAL	700106C4
ADDIU	A0,R0,0070	;A0= entry E
LUI	T2,8002
LW	T2,7728 (T2)
ADDIU	AT,R0,EFFF
AND	S0,S0,AT
LW	K1,0118 (T2)
AND	K1,K1,AT
BEQ	R0,R0,70010648
SW	K1,0118 (T2)
//700105F0:
ADDIU	AT,R0,FDFF
AND	T0,T0,AT
MTC0	T0,Cause/DPC-Buf.Busy
JAL	700106C4
ADDIU	A0,R0,0008	;A0= entry 1
ADDIU	AT,R0,FDFF
BEQ	R0,R0,70010390
AND	S0,S0,AT
//70010610:
ADDIU	AT,R0,FEFF
AND	T0,T0,AT
MTC0	T0,Cause/DPC-Buf.Busy
JAL	700106C4
ADDIU	A0,R0,0000	;A0= entry 0
ADDIU	AT,R0,FEFF
BEQ	R0,R0,70010390
AND	S0,S0,AT
//70010630:
ADDIU	T1,R0,0001
SH	T1,0012 (K0)
JAL	700106C4
ADDIU	A0,R0,0050	;A0= entry A
BEQ	R0,R0,70010648
NOP
//70010648:
LUI	T2,8002
LW	T2,7728 (T2)
LW	T1,0004 (K0)
LW	T3,0004 (T2)
SLT	AT,T1,T3
BEQ	AT,R0,7001067C
NOP
//70010664:
LUI	A0,8002
OR	A1,K0,R0
JAL	700108AC	;insert thread A1 into thread list A0
ADDIU	A0,A0,7728
J	70010904	;execute thread
NOP
//7001067C:
LUI	T1,8002
ADDIU	T1,T1,7728
LW	T2,0000 (T1)
SW	T2,0000 (K0)
J	70010904	;execute thread
SW	K0,0000 (T1)
//70010694:
LUI	AT,8002
SW	K0,7734 (AT)
ADDIU	T1,R0,0001
SH	T1,0010 (K0)
ADDIU	T1,R0,0002
SH	T1,0012 (K0)
MFC0	T2,BadVAddr/DPC-Start
SW	T2,0124 (K0)
JAL	700106C4
ADDIU	A0,R0,0060	;A0= entry C
J	70010904	;execute thread
NOP

700106C4	112C4	; subsection of interrupt handler 700101A0
	accepts: A0=offset to interrupt entry
LUI	T2,8006
ADDIU	T2,T2,6A10
ADDU	T2,T2,A0
LW	T1,0000 (T2)	;T1=80066A10+offset: p->data
OR	S2,RA,R0
BEQ	T1,R0,70010770	;return if NULL
NOP
//700106E0:
LW	T3,0008 (T1)
LW	T4,0010 (T1)
SLT	AT,T3,T4
BEQ	AT,R0,70010770
NOP
//700106F4:
LW	T5,000C (T1)
ADDU	T5,T5,T3
DIV	T5,T4
BNE	T4,R0,7001070C
NOP
BREAK	00001C00	;Break: division by zero
//7001070C:
ADDIU	AT,R0,FFFF
BNE	T4,AT,70010724
LUI	AT,8000
BNE	T5,AT,70010724
NOP
BREAK	00001800
//70010724:
LW	T4,0014 (T1)
MFHI	T5
SLL	T5,T5,0x2
ADDU	T4,T4,T5
LW	T5,0004 (T2)	;T5= entry+4: p->value
ADDIU	T2,T3,0001
SW	T5,0000 (T4)
SW	T2,0008 (T1)
LW	T2,0000 (T1)
LW	T3,0000 (T2)
BEQ	T3,R0,70010770
NOP
//70010754:	pop and push thread T1
JAL	700108F4	;V0= popped thread A0
OR	A0,T1,R0
OR	T2,V0,R0
LUI	A0,8002
OR	A1,T2,R0
JAL	700108AC	;insert thread A1 into thread list A0
ADDIU	A0,A0,7728	;A0= 80027728: p->thread list
//70010770:	return
JR	S2
NOP
//70010778:
LUI	AT,3000
AND	T1,T0,AT
SRL	T1,T1,0x1C
ADDIU	T2,R0,0001
BNE	T1,T2,70010694
NOP
//70010790:
LW	K1,0118 (K0)
LUI	AT,2000
ADDIU	T1,R0,0001
OR	K1,K1,AT
SW	T1,0018 (K0)
BEQ	R0,R0,7001067C
SW	K1,0118 (K0)

700107AC	113AC	update current thread's data with current registers, then insert and execute
	accepts: A0=p->thread queue or NULL
LUI	A1,8002
LW	A1,7730 (A1)	;A1=80027730: p->cur.thread
MFC0	T0,Status
LW	K1,0018 (A1)	;K1= cur.thread+18: True if copying FPU regs
ORI	T0,T0,0002	;T0: COP0 Status | exception flag
SW	T0,0118 (A1)	;update cur.thread.Status
SD	S0,0098 (A1)
SD	S1,00A0 (A1)
SD	S2,00A8 (A1)
SD	S3,00B0 (A1)
SD	S4,00B8 (A1)
SD	S5,00C0 (A1)
SD	S6,00C8 (A1)
SD	S7,00D0 (A1)
SD	GP,00E8 (A1)
SD	SP,00F0 (A1)
SD	S8,00F8 (A1)
SD	RA,0100 (A1)
BEQ	K1,R0,7001081C	;skip if not copying FPU regs
SW	RA,011C (A1)
//700107FC:	fill thread with current (important) floats
CFC1	K1,F31
SDC1	F20,0180 (A1)
SDC1	F22,0188 (A1)
SDC1	F24,0190 (A1)
SDC1	F26,0198 (A1)
SDC1	F28,01A0 (A1)
SDC1	F30,01A8 (A1)
SW	K1,012C (A1)
//7001081C:
LW	K1,0118 (A1)	;K1=thread.Status
ANDI	T1,K1,FF00
BEQ	T1,R0,7001085C	;branch if no interrupts masked
NOP
//7001082C:	remask against old interrupts
LUI	T0,8002
ADDIU	T0,T0,698C
LW	T0,0000 (T0)	;T0=8002698C: prev.Status
ADDIU	AT,R0,FFFF
XOR	T0,T0,AT	;~T0
LUI	AT,FFFF
ANDI	T0,T0,FF00
ORI	AT,AT,00FF
OR	T1,T1,T0	;T1= previous interrupts
AND	K1,K1,AT	;K1&=FFFF00FF
OR	K1,K1,T1	;K1|=interupts: new flags, old interrupts
SW	K1,0118 (A1)	;update thread.Status
//7001085C:
LUI	K1,A430
LW	K1,000C (K1)	;K1=A430000C: MI Interrupt Mask
BEQ	K1,R0,70010894	;branch if none set
NOP
//7001086C:	mask against old interrupts
LUI	K0,8002
ADDIU	K0,K0,698C
LW	K0,0000 (K0)	;K0=8002698C: prev.Status
LW	T0,0128 (A1)	;T0=cur.thread.MImask
ADDIU	AT,R0,FFFF
SRL	K0,K0,0x10	;K0>>=10: Diagnostic Status bits
XOR	K0,K0,AT
ANDI	K0,K0,003F	;K0&=3F: mask ~DS against 3F
AND	K0,K0,T0	;K0&=cur.thread.MImask
OR	K1,K1,K0	;K1|=K0: old | new
//70010894:	insert thread in queue
BEQ	A0,R0,700108A4
SW	K1,0128 (A1)	;update MI Interrupt Mask
JAL	700108AC	;insert thread A1 into thread list A0
NOP
//700108A4:	execute thread
J	70010904	;switch and execute thread
NOP

700108AC	114AC	insert thread A1 into thread list A0
	accepts: A0=p->thread list, A1=thread entry
LW	T8,0000 (A0)	;T8=A0+0: p->tbl1
LW	T7,0004 (A1)	;T7=A1+4: value2
OR	T9,A0,R0	;T9=A0: p->root
LW	T6,0004 (T8)	;T6=tbl1+4: value1
SLT	AT,T6,T7
BNE	AT,R0,700108E0	;return if value1 < value2
NOP
//700108C8:	find first entry
OR	T9,T8,R0	;T9=p->tbl1
LW	T8,0000 (T8)	;T8=next tbl entry
LW	T6,0004 (T8)	;T6=new tbl1 value
SLT	AT,T6,T7
BEQ	AT,R0,700108C8	;loop until value1 < value2
NOP
//700108E0:	return
LW	T8,0000 (T9)	;T8=p->next entry in tbl1
SW	T8,0000 (A1)	;T8-> A1+0
SW	A1,0000 (T9)	;A1->tbl1: next entry
JR	RA
SW	A0,0008 (A1)	;A0->A1+8: previous entry

700108F4	114F4	V0= pop thread A0
	accepts: A0=p->tbl
LW	V0,0000 (A0)	;V0=p->tbl.data
LW	T9,0000 (V0)
JR	RA
SW	T9,0000 (A0)

70010904	11504	switch and execute threads
//grab the status mask from table to catch stuff and set it back to COP0 Status
LUI	A0,8002
JAL	700108F4	;V0= popped thread A0
ADDIU	A0,A0,7728	;A0= 80027728: p->root of table
LUI	AT,8002
SW	V0,7730 (AT)	;V0->80027730: set as cur.thread
ADDIU	T0,R0,0004
SH	T0,0010 (V0)	;4->tbl+10: index
OR	K0,V0,R0	;K0=V0: tbl
LUI	T0,8002
LW	K1,0118 (K0)	;K1=tbl+118
ADDIU	T0,T0,698C
LW	T0,0000 (T0)	;T0=8002698C: prev.Status
LUI	AT,FFFF
ANDI	T1,K1,FF00	;T1= (tbl+118) & FF00
ORI	AT,AT,00FF	;AT=FFFF00FF
ANDI	T0,T0,FF00	;T0&=FF00
AND	T1,T1,T0	;T1&=T0: keep only the flags in common
AND	K1,K1,AT	;K1&=AT: (tbl+118) & FFFF00FF
OR	K1,K1,T1	;K1|=T1: tbl+118 with conditionally masked flags FF00
MTC0	K1,Status/DPC-Clock	;set to COP0 Status
//70010954:	load new register values from copies saved in thread
LD	K1,0108 (K0)	;K1= tbl+108
LD	AT,0020 (K0)	;AT= tbl+20: 
LD	V0,0028 (K0)	;V0= tbl+28: 
MTLO	K1		;move tbl+108 to lo for some reason...
LD	K1,0110 (K0)	;K1= tbl+110
LD	V1,0030 (K0)	;V1= tbl+30
LD	A0,0038 (K0)	;A0= tbl+38
LD	A1,0040 (K0)	;A1= tbl+40
LD	A2,0048 (K0)	;A2= tbl+48
LD	A3,0050 (K0)	;A3= tbl+50
LD	T0,0058 (K0)	;T0= tbl+58
LD	T1,0060 (K0)	;T1= tbl+60
LD	T2,0068 (K0)	;T2= tbl+68
LD	T3,0070 (K0)	;T3= tbl+70
LD	T4,0078 (K0)	;T4= tbl+78
LD	T5,0080 (K0)	;T5= tbl+80
LD	T6,0088 (K0)	;T6= tbl+88
LD	T7,0090 (K0)	;T7= tbl+90
LD	S0,0098 (K0)	;S0= tbl+98
LD	S1,00A0 (K0)	;S1= tbl+A0
LD	S2,00A8 (K0)	;S2= tbl+A8
LD	S3,00B0 (K0)	;S3= tbl+B0
LD	S4,00B8 (K0)	;S4= tbl+B8
LD	S5,00C0 (K0)	;S5= tbl+C0
LD	S6,00C8 (K0)	;S6= tbl+C8
LD	S7,00D0 (K0)	;S7= tbl+D0
LD	T8,00D8 (K0)	;T8= tbl+D8
LD	T9,00E0 (K0)	;T9= tbl+E0
LD	GP,00E8 (K0)	;GP= tbl+E8
MTHI	K1		;move tbl+110 to lo for some reason...
LD	SP,00F0 (K0)	;SP= tbl+F0
LD	S8,00F8 (K0)	;S8= tbl+F8
LD	RA,0100 (K0)	;RA= tbl+100
//700109D8:	set exception return
LW	K1,011C (K0)	;K1= tbl+11C: 'exception handler', really root function for thread
MTC0	K1,ExpectPC/DPC-Pipe Busy	;set as return from forced exception
LW	K1,0018 (K0)	;K1= tbl+18
BEQ	K1,R0,70010A34	;if not set don't play with the FPU
NOP
//700109EC:	set COP1 registers
LW	K1,012C (K0)	;K1= tbl+12C: COP1 Status
CTC1	K1,F31
LDC1	F0,0130 (K0)
LDC1	F2,0138 (K0)
LDC1	F4,0140 (K0)
LDC1	F6,0148 (K0)
LDC1	F8,0150 (K0)
LDC1	F10,0158 (K0)
LDC1	F12,0160 (K0)
LDC1	F14,0168 (K0)
LDC1	F16,0170 (K0)
LDC1	F18,0178 (K0)
LDC1	F20,0180 (K0)
LDC1	F22,0188 (K0)
LDC1	F24,0190 (K0)
LDC1	F26,0198 (K0)
LDC1	F28,01A0 (K0)
LDC1	F30,01A8 (K0)
//70010A34:	set MI interrupts
LW	K1,0128 (K0)	;K1= tbl+128: mask for upper halfword of register
LUI	K0,8002
ADDIU	K0,K0,698C
LW	K0,0000 (K0)	;K0=8002698C: prev.Status
SRL	K0,K0,0x10	;K0/=0x10000
AND	K1,K1,K0	;K1&=K0: Status & mask
SLL	K1,K1,0x1	;K1*=2
LUI	K0,8003
ADDIU	K0,K0,93A0
ADDU	K1,K1,K0
LHU	K1,0000 (K1)	;K1=800293A0 + offset: value from mask table
LUI	K0,A430
ADDIU	K0,K0,000C
SW	K1,0000 (K0)	;K1->A430000C: set MI interrupt mask
NOP
NOP
NOP
NOP
ERET	;jump to function set earlier

70010A80	11680	default return address for all threads; call 7001BB60: A0=0
JAL	7001BB60	;reinit/remove thread A0
OR	A0,R0,R0	;A0= NULL

70010A90	11690	remove thread pointer A1 from thread A0
	accepts: A0=p->thread list, A1=p->thread entry
OR	A2,A0,R0	;A2=A0
LW	A3,0000 (A2)	;A3=A2+0: next entry
ADDIU	SP,SP,FFF8
BEQ	A3,R0,70010AC8	;return if NULL
NOP
//70010AA4:	loop until A1 found
BNE	A3,A1,70010AB8	;branch if not entry
NOP
LW	T6,0000 (A1)	;T6=A1+0
BEQ	R0,R0,70010AC8
SW	T6,0000 (A2)	;T6->A2+0
//70010AB8:	loop until end of list
OR	A2,A3,R0	;A2=A3: p->next entry
LW	A3,0000 (A2)	;A3=A2+0
BNE	A3,R0,70010AA4
NOP
//70010AC8:	return
JR	RA
ADDIU	SP,SP,0008

70010AD0	116D0	set priority of current thread to 2, then update, insert, and execute
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LUI	T7,8002
LW	T7,7730 (T7)	;T7=80027730: cur.thread
ADDIU	T6,R0,0002
LUI	A0,8002
OR	S0,V0,R0
ADDIU	A0,A0,7728	;A0=80027728: p->thread queue
JAL	700107AC	;update current thread's data with current registers, then insert and execute
SH	T6,0010 (T7)	;cur.thread.index = 2
JAL	70018610	;A0->COP0 status
OR	A0,S0,R0
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

70010B20
BLEZ	A1,70010BA0
NOP
ADDIU	T3,R0,2000
SLTU	AT,A1,T3
BEQ	AT,R0,70010BA8
NOP
OR	T0,A0,R0
ADDU	T1,A0,A1
SLTU	AT,T0,T1
BEQ	AT,R0,70010BA0
NOP
ANDI	T2,T0,000F
BEQ	T2,R0,70010B70
ADDIU	T1,T1,FFF0
SUBU	T0,T0,T2
CACHE	0000 (T0), D, Hit Writeback Invalidate
SLTU	AT,T0,T1
BEQ	AT,R0,70010BA0
NOP
ADDIU	T0,T0,0010
ANDI	T2,T1,000F
BEQ	T2,R0,70010B90
NOP
SUBU	T1,T1,T2
CACHE	0010 (T1), D, Hit Writeback Invalidate
SLTU	AT,T1,T0
BNE	AT,R0,70010BA0
NOP
CACHE	0000 (T0), D, Hit Invalidate
SLTU	AT,T0,T1
BNE	AT,R0,70010B90
ADDIU	T0,T0,0010
JR	RA
NOP
LUI	T0,8000
ADDU	T1,T0,T3
ADDIU	T1,T1,FFF0
CACHE	0000 (T0), D, Index Writeback Invalidate
SLTU	AT,T0,T1
BNE	AT,R0,70010BB4
ADDIU	T0,T0,0010
JR	RA
NOP

70010BD0
BLEZ	A1,70010C18
NOP
ADDIU	T3,R0,2000
SLTU	AT,A1,T3
BEQ	AT,R0,70010C20
NOP
OR	T0,A0,R0
ADDU	T1,A0,A1
SLTU	AT,T0,T1
BEQ	AT,R0,70010C18
NOP
ANDI	T2,T0,000F
ADDIU	T1,T1,FFF0
SUBU	T0,T0,T2
CACHE	0000 (T0), D, Hit Writeback
SLTU	AT,T0,T1
BNE	AT,R0,70010C08
ADDIU	T0,T0,0010
JR	RA
NOP
LUI	T0,8000
ADDU	T1,T0,T3
ADDIU	T1,T1,FFF0
CACHE	0000 (T0), D, Index Writeback Invalidate
SLTU	AT,T0,T1
BNE	AT,R0,70010C2C
ADDIU	T0,T0,0010
JR	RA
NOP

70010C50
ADDIU	SP,SP,FFE0
SW	A0,0020 (SP)
LW	T6,0020 (SP)
SW	RA,0014 (SP)
SW	A2,0028 (SP)
SW	A3,002C (SP)
SW	R0,0000 (T6)
LW	T7,0020 (SP)
SW	R0,0004 (T7)
LW	T0,0020 (SP)
LW	T9,0034 (SP)
LW	T8,0030 (SP)
SW	T9,000C (T0)
SW	T8,0008 (T0)
LW	T2,0028 (SP)
LW	T3,002C (SP)
BNE	T2,R0,70010CA0
NOP
BEQ	T3,R0,70010CB0
NOP
LW	T1,0020 (SP)
SW	T2,0010 (T1)
BEQ	R0,R0,70010CC4
SW	T3,0014 (T1)
LW	T6,0020 (SP)
LW	T4,0030 (SP)
LW	T5,0034 (SP)
SW	T4,0010 (T6)
SW	T5,0014 (T6)
LW	T7,0038 (SP)
LW	T8,0020 (SP)
SW	T7,0018 (T8)
LW	T0,0020 (SP)
LW	T9,003C (SP)
SW	T9,001C (T0)
JAL	700188A8
LW	A0,0020 (SP)
LUI	T2,8002
LW	T2,7FD0 (T2)
SW	V0,0018 (SP)
SW	V1,001C (SP)
LW	T1,0020 (SP)
LW	T3,0000 (T2)
BNE	T3,T1,70010D10
NOP
LW	A0,0018 (SP)
JAL	70018834	;increment COP0 Count by A1
LW	A1,001C (SP)
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
OR	V0,R0,R0
JR	RA
NOP

70010D30	11930	initialize sound buffer entry A0 with buffer A1 and size A2
	accepts: A0=p->entry, A1=p->buffer, A2=buffer size
ADDIU	V1,R0,0010
ANDI	T6,A1,000F
SUBU	V0,V1,T6
BEQ	V1,V0,70010D4C	;branch if buffer quadword aligned
ADDU	T7,A1,V0
BEQ	R0,R0,70010D50
SW	T7,0000 (A0)	;A0+0= A1 quadword-aligned
//70010D4C:
SW	A1,0000 (A0)	;A0+0= A1: p->buffer.start
//70010D50:
LW	T8,0000 (A0)
SW	A2,0008 (A0)	;A0+8= A2: buffer size
SW	R0,000C (A0)	;A0+C= 0
JR	RA
SW	T8,0004 (A0)	;A0+4= A1: p->buffer.cur

70010D70	11970	unconditional return
JR	RA
NOP

70010D78	11978	unconditional return
JR	RA
NOP

70010D80	11980	
	accepts: A0=, A1=p->soundbank table, A2=(unused), A3=hardware address
LBU	T6,0003 (A0)
BNE	T6,R0,70010E64	;return if already processed
NOP
//70010D8C:
LH	T7,000E (A0)
ADDIU	T1,R0,0001
SB	T1,0003 (A0)	;A0+3= 1: processed
BLEZ	T7,70010E64
OR	V0,R0,R0
OR	V1,A0,R0
ADDIU	T2,R0,0001
//70010DA8:
LW	T8,0010 (V1)
ADDU	T9,T8,A1
SW	T9,0010 (V1)
LBU	T6,000E (T9)
OR	A2,T9,R0
BNEL	T6,R0,70010E50
LH	T8,000E (A0)
LW	T7,0000 (T9)
SB	T1,000E (T9)
ADDU	T8,T7,A1
SW	T8,0000 (T9)
LW	T9,0004 (T9)
LW	T7,0008 (A2)
ADDU	T6,T9,A1
ADDU	T8,T7,A1
SW	T6,0004 (A2)
SW	T8,0008 (A2)
LBU	T9,0009 (T8)
OR	T0,T8,R0
BNEL	T9,R0,70010E50
LH	T8,000E (A0)
LW	T6,0000 (T8)
LBU	A2,0008 (T8)
SB	T1,0009 (T8)
ADDU	T7,T6,A3	;T7= hardware + offset: 
BNE	A2,R0,70010E34
SW	T7,0000 (T8)
LW	T8,0010 (T8)
LW	A2,000C (T0)
ADDU	T9,T8,A1
BEQ	A2,R0,70010E4C
SW	T9,0010 (T0)
ADDU	T6,A2,A1
BEQ	R0,R0,70010E4C
SW	T6,000C (T0)
//70010E34:
BNEL	T2,A2,70010E50
LH	T8,000E (A0)
LW	A2,000C (T0)
BEQ	A2,R0,70010E4C
ADDU	T7,A2,A1
SW	T7,000C (T0)
//70010E4C:
LH	T8,000E (A0)
ADDIU	V0,V0,0001
ADDIU	V1,V1,0004
SLT	AT,V0,T8
BNEL	AT,R0,70010DAC
LW	T8,0010 (V1)
//70010E64:	return
JR	RA
NOP

70010E6C	11A6C	unconditional return
JR	RA
NOP

70010E74	11A74	expand all offsets in soundtable A0, wavebank A1
	accepts: A0=p->"B1" soundtable, A1=hardware address
ADDIU	SP,SP,FFD0
SW	RA,002C (SP)
SW	S4,0028 (SP)
SW	S3,0024 (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
LH	T6,0000 (A0)	;T6=snd.B1.tbl[0:2]: header ID in soundtable
ADDIU	AT,R0,4231
OR	S0,A0,R0	;S0=A0: p->snd.B1.tbl
BNE	T6,AT,70010F58	;return if not "B1" soundbank table
OR	S1,A1,R0	;S1=A1: hardware address
//70010EA4:
LH	T7,0002 (A0)	;T7=snd.B1.tbl[2:4]: #banks or samples or something
OR	S3,R0,R0	;S3=0	init. count
OR	S2,A0,R0	;S2=A0: p->snd.B1.tbl
BLEZ	T7,70010F58	;return if invalid #whatevers
ADDIU	S4,R0,0001
LW	T8,0004 (S2)	;T8=snd.B1.tbl[4:8]: size
ADDU	T9,T8,S0	;T9=snd.B1.tbl + offset: p->
BEQ	T9,R0,70010F40	;skip if NULL
SW	T9,0004 (S2)	;offset -> pointer
LBU	T6,0002 (T9)
OR	T5,T9,R0
BNEL	T6,R0,70010F44	;skip if set
LH	T8,0002 (S0)
LW	V0,0008 (T9)
SB	S4,0002 (T9)	;1->
OR	T4,R0,R0
BEQ	V0,R0,70010EFC	;skip if NULL
ADDU	A0,V0,S0
SW	A0,0008 (T9)	;offset -> pointer
OR	A1,S0,R0	;A1=S0: p->snd.B1.tbl
JAL	70010D80
OR	A3,S1,R0	;A3= hardware address
//70010EFC:
LH	T8,0000 (T5)
OR	T3,T5,R0
BLEZL	T8,70010F44
LH	T8,0002 (S0)
//70010F0C:
LW	T9,000C (T3)
OR	A1,S0,R0	;A1=S0: p->snd.B1.tbl
ADDU	A0,T9,S0
BEQ	A0,R0,70010F28
SW	A0,000C (T3)	;offset -> pointer
JAL	70010D80
OR	A3,S1,R0	;A3= hardware address
//70010F28:
LH	T7,0000 (T5)
ADDIU	T4,T4,0001
ADDIU	T3,T3,0004
SLT	AT,T4,T7
BNEL	AT,R0,70010F10
LW	T9,000C (T3)
//70010F40:	expand all offsets into pointers
LH	T8,0002 (S0)
ADDIU	S3,S3,0001
ADDIU	S2,S2,0004	;S2+=4	next entry
SLT	AT,S3,T8
BNEL	AT,R0,70010EBC
LW	T8,0004 (S2)
//70010F58:	return
LW	RA,002C (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
JR	RA
ADDIU	SP,SP,0030

70010F78	11B78	
	accepts: A0=p->soundtable subentry of some kind, A1=base pointer
LH	T6,0002 (A0)	;T6=A0+2: #entries
OR	V0,R0,R0	;V0=0	init. count
OR	V1,A0,R0
BLEZ	T6,70010FB0	;return if no entries
NOP
//70010F8C:	expand each entry
LW	T7,0004 (V1)
ADDIU	V0,V0,0001
ADDIU	V1,V1,0008
ADDU	T8,T7,A1
SW	T8,FFFC (V1)
LH	T9,0002 (A0)
SLT	AT,V0,T9
BNEL	AT,R0,70010F90	;loop for each entry
LW	T7,0004 (V1)
//70010FB0:	return
JR	RA
NOP

70010FC0
ADDIU	SP,SP,FFD0
SW	RA,0014 (SP)
LW	T6,002C (A0)
ADDIU	AT,R0,0001
OR	A3,A0,R0
BNEL	T6,AT,70011024
LW	RA,0014 (SP)
LW	A0,0018 (A0)
ADDIU	A1,SP,001C
BEQL	A0,R0,70011024
LW	RA,0014 (SP)
JAL	70012B8C
SW	A3,0030 (SP)
BEQ	V0,R0,70011020
LW	A3,0030 (SP)
SH	R0,0020 (SP)
LW	T7,0024 (A3)
LW	T8,001C (SP)
ADDIU	A0,A3,0048
ADDIU	A1,SP,0020
MULTU	T7,T8
MFLO	A2
JAL	70012EFC
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0030
JR	RA
NOP

70011030
LW	V0,0018 (A0)
ADDIU	T8,R0,01E8
BEQL	V0,R0,7001105C
SW	T8,0024 (A0)
LWC1	F4,0008 (V0)
MUL.S	F6,F12,F4
TRUNC.W.S	F8,F6
MFC1	T7,F8
JR	RA
SW	T7,0024 (A0)
//70011058:
SW	T8,0024 (A0)
JR	RA
NOP

70011064	11C64	unconditional return
JR	RA
NOP

7001106C
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LBU	T6,0008 (A1)
ADDIU	AT,R0,00FF
OR	S0,R0,R0
BNE	T6,AT,7001122C
OR	S3,R0,R0
LBU	T7,0009 (A1)
ADDIU	AT,R0,0051
ADDIU	V0,A1,0004
BNEL	T7,AT,70011230
LW	RA,0014 (SP)
LBU	T6,0008 (V0)
LBU	T8,0007 (V0)
LW	S8,0024 (S7)
SLL	T7,T6,0x8
LBU	T6,0009 (V0)
SLL	T9,T8,0x10
OR	T8,T9,T7
OR	V1,T8,T6
MTC1	V1,F4
OR	A0,S7,R0
JAL	70011030
CVT.S.W	F12,F4
LW	S1,0050 (S7)
BEQ	S1,R0,70011148
NOP
ADDIU	S4,R0,0015
LH	T7,000C (S1)
LW	T9,0008 (S1)
LW	S2,0000 (S1)
BNE	S4,T7,70011140
ADDU	S0,S0,T9
JAL	7000EA90
OR	A0,S1,R0
BEQL	S3,R0,70011118
SW	R0,0000 (S1)
OR	A0,S1,R0
JAL	7000EAC0
OR	A1,S3,R0
BEQ	R0,R0,70011120
NOP
SW	R0,0000 (S1)
SW	R0,0004 (S1)
OR	S3,S1,R0
BEQ	S2,R0,7001113C
OR	V1,S0,R0
LW	V0,0008 (S1)
LW	T8,0008 (S2)
SUBU	S0,S0,V0
ADDU	T6,T8,V0
SW	T6,0008 (S2)
SW	V1,0008 (S1)
BNE	S2,R0,700110DC
OR	S1,S2,R0
BEQ	S3,R0,7001122C
OR	S1,S3,R0
ADDIU	S4,S7,0048
ADDIU	S5,S4,0008
ADDIU	S6,R0,FFF8
LW	T9,0008 (S1)
LW	T7,0024 (S7)
LW	S2,0000 (S1)
DIV	T9,S8
MFLO	V0
ADDIU	A0,R0,0001
BNE	S8,R0,70011180
NOP
BREAK	00001C00	;Break: division by zero
ADDIU	AT,R0,FFFF
BNE	S8,AT,70011198
LUI	AT,8000
BNE	T9,AT,70011198
NOP
BREAK	00001800
MULTU	T7,V0
OR	S0,S5,R0
MFLO	T8
SW	T8,0008 (S1)
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
NOP
BEQ	S4,S6,7001121C
OR	S3,V0,R0
LW	A0,0000 (S0)
BNEL	A0,R0,700111DC
LW	V0,0008 (S1)
OR	A0,S1,R0
JAL	7000EAC0
OR	A1,S0,R0
BEQ	R0,R0,7001121C
NOP
LW	V0,0008 (S1)
LW	V1,0008 (A0)
OR	A2,A0,R0
SLT	AT,V0,V1
BEQ	AT,R0,7001120C
SUBU	T9,V0,V1
SUBU	T6,V1,V0
SW	T6,0008 (A0)
OR	A0,S1,R0
JAL	7000EAC0
OR	A1,S0,R0
BEQ	R0,R0,7001121C
NOP
SW	T9,0008 (S1)
LW	S0,0000 (S0)
BNEL	S0,R0,700111BC
LW	A0,0000 (S0)
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
OR	A0,S3,R0
BNE	S2,R0,7001115C
OR	S1,S2,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7001123C
ADDIU	SP,SP,FF48
SW	RA,0024 (SP)
LBU	S6,0008 (T0)
LBU	S4,0009 (T0)
LBU	S1,000A (T0)
ANDI	V1,S6,00F0
ADDIU	T7,V1,FF80
SLTIU	AT,T7,0061
ANDI	T6,S6,000F
BEQ	AT,R0,70011A54
OR	S6,T6,R0
SLL	T7,T7,0x2
LUI	AT,8003
ADDU	AT,AT,T7
LW	T7,9490 (AT)	;T7=80029490+offset: p->handler
JR	T7
NOP
//70011280:
BEQL	S1,R0,70011624
OR	A0,S2,R0
LW	T8,002C (S2)
ADDIU	AT,R0,0001
OR	A0,S2,R0
BNE	T8,AT,70011A54
ANDI	A1,S4,00FF
ANDI	A2,S1,00FF
ANDI	A3,S6,00FF
JAL	7001C360
SW	T0,00BC (SP)
BEQ	V0,R0,70011A54
OR	S7,V0,R0
LW	T9,0060 (S2)
SLL	S8,S6,0x4
OR	A0,S2,R0
ADDU	T6,T9,S8
LBU	T7,0008 (T6)
SH	R0,0076 (SP)
SB	R0,0078 (SP)
ANDI	A1,S4,00FF
ANDI	A2,S1,00FF
ANDI	A3,S6,00FF
JAL	7001C2F0
SH	T7,0074 (SP)
BEQ	V0,R0,70011A54
OR	S0,V0,R0
LW	A0,0014 (S2)
ADDIU	A1,V0,0004
SW	A1,0038 (SP)
JAL	70013258
ADDIU	A2,SP,0074
SW	S7,0020 (S0)
SB	R0,0034 (S0)
LW	T8,0060 (S2)
ADDIU	S5,R0,0002
ADDU	T9,T8,S8
LBU	T6,000B (T9)
SLTI	AT,T6,0040
BNEL	AT,R0,70011330
SB	R0,0035 (S0)
BEQ	R0,R0,70011330
SB	S5,0035 (S0)
SB	R0,0035 (S0)
LW	V0,0004 (S7)
LBU	T7,0004 (V0)
LB	T6,0005 (V0)
SUBU	T8,S4,T7
SLL	T9,T8,0x2
SUBU	T9,T9,T8
SLL	T9,T9,0x3
ADDU	T9,T9,T8
SLL	T9,T9,0x2
ADDU	A0,T9,T6
SLL	T7,A0,0x10
JAL	700137C0
SRA	A0,T7,0x10
SWC1	F0,0028 (S0)
LW	T9,0000 (S7)
LUI	AT,42FE
MTC1	AT,F4
LBU	T6,000C (T9)
SB	T6,0030 (S0)
LW	T8,0000 (S7)
LW	T7,001C (S2)
LW	T9,0000 (T8)
SB	R0,0037 (S0)
ADDU	T6,T7,T9
SW	T6,0024 (S0)
LW	T8,0060 (S2)
ADDU	T7,T8,S8
LW	S1,0000 (T7)
SWC1	F4,0064 (SP)
LBU	A2,0004 (S1)
BEQL	A2,R0,70011414
CFC1	T8,F31
LW	V0,0070 (S2)
BEQL	V0,R0,70011414
CFC1	T8,F31
LBU	T9,0006 (S1)
LBU	A3,0005 (S1)
ADDIU	A0,SP,005C
SW	T9,0010 (SP)
LBU	T6,0007 (S1)
ADDIU	A1,SP,0064
JALR	RA,V0
SW	T6,0014 (SP)
BEQ	V0,R0,70011410
ADDIU	T8,R0,0016
LW	T7,005C (SP)
SH	T8,008C (SP)
SW	S0,0090 (SP)
ADDIU	A0,S2,0048
ADDIU	A1,SP,008C
OR	A2,V0,R0
JAL	70012EFC
SW	T7,0094 (SP)
LBU	T9,0037 (S0)
ORI	T6,T9,0001
SB	T6,0037 (S0)
CFC1	T8,F31
ADDIU	T7,R0,0001
CTC1	T7,F31
LWC1	F6,0064 (SP)
LUI	AT,4F00
CVT.W.S	F8,F6
CFC1	T7,F31
NOP
ANDI	T7,T7,0078
BEQL	T7,R0,70011484
MFC1	T7,F8
MTC1	AT,F8
ADDIU	T7,R0,0001
SUB.S	F8,F6,F8
CTC1	T7,F31
NOP
CVT.W.S	F8,F8
CFC1	T7,F31
NOP
ANDI	T7,T7,0078
BNE	T7,R0,70011478
NOP
MFC1	T7,F8
LUI	AT,8000
BEQ	R0,R0,70011490
OR	T7,T7,AT
BEQ	R0,R0,70011490
ADDIU	T7,R0,FFFF
MFC1	T7,F8
NOP
BLTZ	T7,70011478
NOP
LUI	AT,3F80
MTC1	AT,F10
SB	T7,0036 (S0)
CTC1	T8,F31
SWC1	F10,0064 (SP)
LBU	A2,0008 (S1)
ADDIU	S5,S2,0048
BEQL	A2,R0,7001151C
LWC1	F4,0064 (SP)
LW	V0,0070 (S2)
BEQL	V0,R0,7001151C
LWC1	F4,0064 (SP)
LBU	T9,000A (S1)
LBU	A3,0009 (S1)
ADDIU	A0,SP,005C
SW	T9,0010 (SP)
LBU	T6,000B (S1)
ADDIU	A1,SP,0064
JALR	RA,V0
SW	T6,0014 (SP)
BEQ	V0,R0,70011518
ADDIU	T8,R0,0017
LW	T7,005C (SP)
SH	T8,008C (SP)
SW	S0,0090 (SP)
SB	S6,0098 (SP)
OR	A0,S5,R0
ADDIU	A1,SP,008C
OR	A2,V0,R0
JAL	70012EFC
SW	T7,0094 (SP)
LBU	T9,0037 (S0)
ORI	T6,T9,0002
SB	T6,0037 (S0)
LWC1	F4,0064 (SP)
LWC1	F8,0028 (S0)
OR	A0,S0,R0
SWC1	F4,002C (S0)
LW	T8,0060 (S2)
LWC1	F4,002C (S0)
OR	A1,S2,R0
ADDU	V0,T8,S8
LWC1	F6,000C (V0)
LBU	S1,000A (V0)
MUL.S	F10,F6,F8
NOP
MUL.S	F20,F10,F4
JAL	7001C234
NOP
ANDI	S8,V0,00FF
OR	A0,S0,R0
JAL	7001BE14
OR	A1,S2,R0
LW	T7,0000 (S7)
LW	A0,0014 (S2)
LW	A2,0008 (S7)
LW	S3,0000 (T7)
MFC1	A3,F20
SW	S1,0018 (SP)
SW	S8,0014 (SP)
SW	V0,0010 (SP)
LW	A1,0038 (SP)
JAL	7001D5A0
SW	S3,001C (SP)
LW	T6,0038 (SP)
ADDIU	T9,R0,0006
SH	T9,008C (SP)
SW	T6,0090 (SP)
LW	T8,0000 (S7)
OR	A0,S5,R0
ADDIU	A1,SP,008C
LBU	T7,000D (T8)
OR	A2,S3,R0
SB	T7,0098 (SP)
LW	T9,0000 (S7)
LW	T6,0004 (T9)
JAL	70012EFC
SW	T6,0094 (SP)
LW	V0,00BC (SP)
ADDIU	T7,R0,0015
ORI	T9,S6,0080
LW	T8,000C (V0)
ADDIU	V0,V0,0004
BEQL	T8,R0,70011A58
LW	RA,0024 (SP)
SH	T7,008C (SP)
SB	T9,0094 (SP)
SB	S4,0095 (SP)
SB	R0,0096 (SP)
LW	T8,0008 (V0)
LW	T6,0024 (S2)
OR	A0,S5,R0
ADDIU	A1,SP,008C
MULTU	T6,T8
MFLO	S3
OR	A2,S3,R0
JAL	70012EFC
NOP
BEQ	R0,R0,70011A58
LW	RA,0024 (SP)
OR	A0,S2,R0
ANDI	A1,S4,00FF
JAL	7001C27C
ANDI	A2,S6,00FF
BEQ	V0,R0,70011A54
OR	S0,V0,R0
LBU	T7,0035 (V0)
ADDIU	S6,R0,0002
ADDIU	T9,R0,0004
BNE	S6,T7,70011654
OR	A0,S2,R0
BEQ	R0,R0,70011A54
SB	T9,0035 (V0)
LW	T6,0020 (S0)
ADDIU	S8,R0,0003
SB	S8,0035 (S0)
LW	T8,0000 (T6)
ADDIU	A1,S0,0004
JAL	7001BE9C
LW	A2,0008 (T8)
BEQ	R0,R0,70011A58
LW	RA,0024 (SP)
OR	A0,S2,R0
ANDI	A1,S4,00FF
JAL	7001C27C
ANDI	A2,S6,00FF
BEQ	V0,R0,70011A54
OR	S0,V0,R0
SB	S1,0033 (V0)
OR	A0,V0,R0
JAL	7001BE14
OR	A1,S2,R0
SLL	S1,V0,0x10
SRA	T7,S1,0x10
OR	S1,T7,R0
OR	A0,S0,R0
JAL	7001BDF0
LW	A1,001C (S2)
SLL	A2,S1,0x10
SRA	T9,A2,0x10
OR	A2,T9,R0
LW	A0,0014 (S2)
ADDIU	A1,S0,0004
JAL	700133A0
OR	A3,V0,R0
BEQ	R0,R0,70011A58
LW	RA,0024 (SP)
LW	S0,0064 (S2)
BEQL	S0,R0,70011A58
LW	RA,0024 (SP)
OR	S3,S6,R0
LBU	T6,0031 (S0)
OR	A0,S0,R0
OR	A1,S2,R0
BNEL	S3,T6,70011740
LW	S0,0000 (S0)
JAL	7001BE14
SB	S4,0033 (S0)
SLL	S1,V0,0x10
SRA	T8,S1,0x10
OR	S1,T8,R0
OR	A0,S0,R0
JAL	7001BDF0
LW	A1,001C (S2)
SLL	A2,S1,0x10
SRA	T7,A2,0x10
OR	A2,T7,R0
LW	A0,0014 (S2)
ADDIU	A1,S0,0004
JAL	700133A0
OR	A3,V0,R0
LW	S0,0000 (S0)
BNEL	S0,R0,700116F0
LBU	T6,0031 (S0)
BEQ	R0,R0,70011A58
LW	RA,0024 (SP)
ADDIU	AT,R0,0007
BEQ	S4,AT,700117E4
OR	V0,S4,R0
ADDIU	AT,R0,000A
BEQ	V0,AT,70011788
ADDIU	AT,R0,0010
BEQ	V0,AT,70011874
ADDIU	AT,R0,0040
BEQ	V0,AT,70011888
ADDIU	AT,R0,005B
BEQL	V0,AT,7001193C
LW	T9,0060 (S2)
BEQ	R0,R0,70011A58
LW	RA,0024 (SP)
LW	T9,0060 (S2)
SLL	T6,S6,0x4
ADDU	T8,T9,T6
SB	S1,0007 (T8)
LW	S0,0064 (S2)
BEQL	S0,R0,70011A58
LW	RA,0024 (SP)
OR	S3,S6,R0
LBU	T7,0031 (S0)
OR	A0,S0,R0
BNEL	S3,T7,700117D4
LW	S0,0000 (S0)
JAL	7001C234
OR	A1,S2,R0
LW	A0,0014 (S2)
ADDIU	A1,S0,0004
JAL	700134D0
ANDI	A2,V0,00FF
LW	S0,0000 (S0)
BNEL	S0,R0,700117AC
LBU	T7,0031 (S0)
BEQ	R0,R0,70011A58
LW	RA,0024 (SP)
LW	T9,0060 (S2)
SLL	T6,S6,0x4
ADDU	T8,T9,T6
SB	S1,0009 (T8)
LW	S0,0064 (S2)
BEQL	S0,R0,70011A58
LW	RA,0024 (SP)
OR	S3,S6,R0
ADDIU	S4,R0,0003
LBU	T7,0031 (S0)
BNEL	S3,T7,70011864
LW	S0,0000 (S0)
LBU	T9,0034 (S0)
OR	A0,S0,R0
BEQL	S4,T9,70011864
LW	S0,0000 (S0)
JAL	7001BE14
OR	A1,S2,R0
SLL	S1,V0,0x10
SRA	T6,S1,0x10
OR	S1,T6,R0
OR	A0,S0,R0
JAL	7001BDF0
LW	A1,001C (S2)
SLL	A2,S1,0x10
SRA	T8,A2,0x10
OR	A2,T8,R0
LW	A0,0014 (S2)
ADDIU	A1,S0,0004
JAL	700133A0
OR	A3,V0,R0
LW	S0,0000 (S0)
BNEL	S0,R0,7001180C
LBU	T7,0031 (S0)
BEQ	R0,R0,70011A58
LW	RA,0024 (SP)
LW	T7,0060 (S2)
SLL	T9,S6,0x4
ADDU	T6,T7,T9
BEQ	R0,R0,70011A54
SB	S1,0008 (T6)
LW	T8,0060 (S2)
SLL	T7,S6,0x4
ADDU	T9,T8,T7
SB	S1,000B (T9)
LW	S0,0064 (S2)
BEQL	S0,R0,70011A58
LW	RA,0024 (SP)
OR	S3,S6,R0
ADDIU	S6,R0,0002
ADDIU	S8,R0,0003
ADDIU	S7,R0,0004
ADDIU	S5,R0,0002
ADDIU	S4,R0,0003
LBU	T6,0031 (S0)
BNEL	S3,T6,70011928
LW	S0,0000 (S0)
LBU	V0,0035 (S0)
SLTI	AT,S1,0040
BEQL	S4,V0,70011928
LW	S0,0000 (S0)
BNE	AT,R0,700118F0
NOP
BNEL	V0,R0,70011928
LW	S0,0000 (S0)
BEQ	R0,R0,70011924
SB	S5,0035 (S0)
BNE	S6,V0,70011900
NOP
BEQ	R0,R0,70011924
SB	R0,0035 (S0)
BNEL	S7,V0,70011928
LW	S0,0000 (S0)
LW	T8,0020 (S0)
SB	S8,0035 (S0)
OR	A0,S2,R0
LW	T7,0000 (T8)
ADDIU	A1,S0,0004
JAL	7001BE9C
LW	A2,0008 (T7)
LW	S0,0000 (S0)
BNEL	S0,R0,700118C0
LBU	T6,0031 (S0)
BEQ	R0,R0,70011A58
LW	RA,0024 (SP)
LW	T9,0060 (S2)
SLL	T6,S6,0x4
ADDU	T8,T9,T6
SB	S1,000A (T8)
LW	S0,0064 (S2)
BEQL	S0,R0,70011A58
LW	RA,0024 (SP)
OR	S3,S6,R0
LBU	T7,0031 (S0)
ADDIU	A1,S0,0004
ANDI	A2,S1,00FF
BNEL	S3,T7,70011978
LW	S0,0000 (S0)
JAL	700135F0
LW	A0,0014 (S2)
LW	S0,0000 (S0)
BNEL	S0,R0,7001195C
LBU	T7,0031 (S0)
BEQ	R0,R0,70011A58
LW	RA,0024 (SP)
LW	V0,0020 (S2)
SLL	T6,S4,0x2
OR	A0,S2,R0
LH	T9,0000 (V0)
OR	A2,S6,R0
ADDU	T8,V0,T6
SLT	AT,S4,T9
BEQL	AT,R0,70011A58
LW	RA,0024 (SP)
JAL	7001BC60
LW	A1,000C (T8)
BEQ	R0,R0,70011A58
LW	RA,0024 (SP)
LW	T7,0060 (S2)
SLL	S8,S6,0x4
SLL	T8,S1,0x7
ADDU	T9,T7,S8
LH	T6,0004 (T9)
ADDU	T7,T8,S4
ADDIU	T9,T7,E000
MULTU	T6,T9
MFLO	A0
BGEZ	A0,700119F0
SRA	T8,A0,0xD
ADDIU	AT,A0,1FFF
SRA	T8,AT,0xD
JAL	700137C0
OR	A0,T8,R0
LW	T7,0060 (S2)
MOV.S	F20,F0
ADDU	T6,T7,S8
SWC1	F0,000C (T6)
LW	S0,0064 (S2)
BEQL	S0,R0,70011A58
LW	RA,0024 (SP)
OR	S3,S6,R0
//70011A18:
LBU	T9,0031 (S0)
BNEL	S3,T9,70011A4C
LW	S0,0000 (S0)
LWC1	F6,0028 (S0)
LWC1	F10,002C (S0)
LW	A0,0014 (S2)
MUL.S	F8,F6,F20
ADDIU	A1,S0,0004
MUL.S	F4,F8,F10
MFC1	A2,F4
JAL	70013560
NOP
//70011A48:
LW	S0,0000 (S0)
BNEL	S0,R0,70011A1C
LBU	T9,0031 (S0)
//70011A54:	return
LW	RA,0024 (SP)
ADDIU	SP,SP,00B8
JR	RA
NOP

70011A64	12664	unconditional return
JR	RA
NOP

70011A6C
ADDIU	SP,SP,FF60
SW	S5,0034 (SP)
SW	S2,0028 (SP)
ADDIU	T6,A0,0038
OR	S2,A0,R0
SW	RA,0044 (SP)
SW	S8,0040 (SP)
SW	S7,003C (SP)
SW	S6,0038 (SP)
SW	S4,0030 (SP)
SW	S3,002C (SP)
SW	S1,0024 (SP)
SW	S0,0020 (SP)
SDC1	F20,0018 (SP)
SW	T6,0050 (SP)
ADDIU	S5,A0,0048
LHU	T7,0038 (S2)
SLTIU	AT,T7,0018
BEQ	AT,R0,7001202C
SLL	T7,T7,0x2
LUI	AT,8003
ADDU	AT,AT,T7
LW	T7,9614 (AT)	;T7=80029614+offset: p->handler
JR	T7
NOP
LW	A0,0018 (S2)
BEQL	A0,R0,70012030
OR	A0,S5,R0
JAL	700124A4
ADDIU	A1,SP,0058
LH	T8,0058 (SP)
ADDIU	T9,T8,FFFF
SLTIU	AT,T9,0014
BEQ	AT,R0,7001202C
SLL	T9,T9,0x2
LUI	AT,8003
ADDU	AT,AT,T9
LW	T9,9674 (AT)	;T9=80029674+offset: 
JR	T9
NOP
ADDIU	T0,SP,0058
SW	S2,00A0 (SP)
JAL	7001123C
SW	S5,004C (SP)
LW	S2,00A0 (SP)
LW	S5,004C (SP)
JAL	70010FC0
OR	A0,S2,R0
BEQ	R0,R0,70012030
OR	A0,S5,R0
OR	S7,S2,R0
ADDIU	A1,SP,0058
SW	S2,00A0 (SP)
JAL	7001106C
SW	S5,004C (SP)
LW	S2,00A0 (SP)
LW	S5,004C (SP)
JAL	70010FC0
OR	A0,S2,R0
BEQ	R0,R0,70012030
OR	A0,S5,R0
ADDIU	T6,R0,0002
SW	T6,002C (S2)
ADDIU	T7,R0,0010
LUI	A2,7FFF
SH	T7,0058 (SP)
ORI	A2,A2,FFFF
OR	A0,S5,R0
JAL	70012EFC
ADDIU	A1,SP,0058
BEQ	R0,R0,70012030
OR	A0,S5,R0
JAL	70010FC0
OR	A0,S2,R0
BEQ	R0,R0,70012030
OR	A0,S5,R0
ADDIU	T8,R0,0009
SH	T8,008C (SP)
LW	A2,005C (S2)
OR	A0,S5,R0
JAL	70012EFC
ADDIU	A1,SP,008C
BEQ	R0,R0,70012030
OR	A0,S5,R0
LW	S0,003C (S2)
LW	A0,0014 (S2)
JAL	70013690
OR	A1,S0,R0
LW	A0,0014 (S2)
JAL	70013710
OR	A1,S0,R0
LW	S1,0010 (S0)
OR	A0,S2,R0
LBU	T9,0037 (S1)
BEQL	T9,R0,70011BF8
OR	A0,S2,R0
JAL	7001D2A0
OR	A1,S1,R0
OR	A0,S2,R0
JAL	7001C070
OR	A1,S0,R0
BEQ	R0,R0,70012030
OR	A0,S5,R0
LW	S0,003C (S2)
ADDIU	T7,R0,0001
LW	S1,0010 (S0)
LBU	T6,0034 (S1)
BNEL	T6,R0,70011C28
LW	S3,0040 (S2)
SB	T7,0034 (S1)
LW	S3,0040 (S2)
LW	T8,001C (S2)
OR	A0,S1,R0
OR	A1,S2,R0
ADDU	T9,T8,S3
SW	T9,0024 (S1)
LBU	T6,0044 (S2)
JAL	7001BE14
SB	T6,0030 (S1)
SLL	A2,V0,0x10
SRA	T7,A2,0x10
OR	A2,T7,R0
LW	A0,0014 (S2)
OR	A1,S0,R0
JAL	700133A0
OR	A3,S3,R0
BEQ	R0,R0,70012030
OR	A0,S5,R0
LW	T9,0074 (S2)
LW	S4,0040 (S2)
LW	S1,003C (S2)
ADDIU	A1,SP,0078
JALR	RA,T9
OR	A0,S4,R0
CFC1	T8,F31
ADDIU	T6,R0,0001
CTC1	T6,F31
LWC1	F4,0078 (SP)
OR	S3,V0,R0
LUI	AT,4F00
CVT.W.S	F6,F4
OR	A0,S1,R0
OR	A1,S2,R0
CFC1	T6,F31
NOP
ANDI	T6,T6,0078
BEQL	T6,R0,70011D04
MFC1	T6,F6
MTC1	AT,F6
ADDIU	T6,R0,0001
SUB.S	F6,F4,F6
CTC1	T6,F31
NOP
CVT.W.S	F6,F6
CFC1	T6,F31
NOP
ANDI	T6,T6,0078
BNE	T6,R0,70011CF8
NOP
MFC1	T6,F6
LUI	AT,8000
BEQ	R0,R0,70011D10
OR	T6,T6,AT
BEQ	R0,R0,70011D10
ADDIU	T6,R0,FFFF
MFC1	T6,F6
NOP
BLTZ	T6,70011CF8
NOP
CTC1	T8,F31
JAL	7001BE14
SB	T6,0036 (S1)
SLL	S0,V0,0x10
SRA	T7,S0,0x10
OR	S0,T7,R0
OR	A0,S1,R0
JAL	7001BDF0
LW	A1,001C (S2)
SLL	A2,S0,0x10
SRA	T9,A2,0x10
OR	A2,T9,R0
LW	A0,0014 (S2)
ADDIU	A1,S1,0004
JAL	700133A0
OR	A3,V0,R0
ADDIU	T8,R0,0016
SH	T8,008C (SP)
SW	S1,0090 (SP)
SW	S4,0094 (SP)
OR	A0,S5,R0
ADDIU	A1,SP,008C
JAL	70012EFC
OR	A2,S3,R0
BEQ	R0,R0,70012030
OR	A0,S5,R0
LW	T9,0074 (S2)
LW	S4,0040 (S2)
LW	S1,003C (S2)
LBU	S0,0044 (S2)
ADDIU	A1,SP,0078
JALR	RA,T9
OR	A0,S4,R0
LWC1	F8,0078 (SP)
LWC1	F4,0028 (S1)
SLL	T7,S0,0x4
SWC1	F8,002C (S1)
LWC1	F6,002C (S1)
LW	T6,0060 (S2)
OR	S3,V0,R0
MUL.S	F8,F4,F6
ADDU	T8,T6,T7
LWC1	F10,000C (T8)
LW	A0,0014 (S2)
ADDIU	A1,S1,0004
MUL.S	F4,F10,F8
MFC1	A2,F4
JAL	70013560
NOP
ADDIU	T9,R0,0017
SH	T9,008C (SP)
SW	S1,0090 (SP)
SW	S4,0094 (SP)
SB	S0,0098 (SP)
OR	A0,S5,R0
ADDIU	A1,SP,008C
JAL	70012EFC
OR	A2,S3,R0
BEQ	R0,R0,70012030
OR	A0,S5,R0
LW	T0,0050 (SP)
SW	S2,00A0 (SP)
JAL	7001123C
SW	S5,004C (SP)
LW	S2,00A0 (SP)
BEQ	R0,R0,7001202C
LW	S5,004C (SP)
OR	S7,S2,R0
LW	A1,0050 (SP)
SW	S2,00A0 (SP)
JAL	7001106C
SW	S5,004C (SP)
LW	S2,00A0 (SP)
BEQ	R0,R0,7001202C
LW	S5,004C (SP)
LW	S1,0064 (S2)
LH	T6,003C (S2)
BEQ	S1,R0,7001202C
SH	T6,0032 (S2)
OR	A0,S1,R0
JAL	7001BE14
OR	A1,S2,R0
SLL	S0,V0,0x10
SRA	T7,S0,0x10
OR	S0,T7,R0
OR	A0,S1,R0
JAL	7001BDF0
LW	A1,001C (S2)
SLL	A2,S0,0x10
SRA	T8,A2,0x10
OR	A2,T8,R0
LW	A0,0014 (S2)
ADDIU	A1,S1,0004
JAL	700133A0
OR	A3,V0,R0
LW	S1,0000 (S1)
BNEL	S1,R0,70011E50
OR	A0,S1,R0
BEQ	R0,R0,70012030
OR	A0,S5,R0
LW	T9,002C (S2)
ADDIU	AT,R0,0001
ADDIU	T6,R0,0001
BEQ	T9,AT,7001202C
OR	A0,S2,R0
JAL	70010FC0
SW	T6,002C (S2)
BEQ	R0,R0,70012030
OR	A0,S5,R0
LW	T7,002C (S2)
ADDIU	AT,R0,0002
BNEL	T7,AT,70012030
OR	A0,S5,R0
LW	S1,0064 (S2)
BEQ	S1,R0,70011F28
ADDIU	S0,S1,0004
OR	A1,S0,R0
JAL	70013690
LW	A0,0014 (S2)
LW	A0,0014 (S2)
JAL	70013710
OR	A1,S0,R0
LBU	T8,0037 (S1)
OR	A0,S2,R0
BEQL	T8,R0,70011F14
OR	A0,S2,R0
JAL	7001D2A0
OR	A1,S1,R0
OR	A0,S2,R0
JAL	7001C070
OR	A1,S0,R0
LW	S1,0064 (S2)
BNEL	S1,R0,70011EE0
ADDIU	S0,S1,0004
BEQ	R0,R0,7001202C
SW	R0,002C (S2)
LW	T9,002C (S2)
ADDIU	AT,R0,0001
OR	A0,S5,R0
BNEL	T9,AT,70012030
OR	A0,S5,R0
JAL	70012DE0
OR	A1,R0,R0
OR	A0,S5,R0
JAL	70012DE0
ADDIU	A1,R0,0015
OR	A0,S5,R0
JAL	70012DE0
ADDIU	A1,R0,0002
LW	S1,0064 (S2)
BEQ	S1,R0,70011FA0
ADDIU	S0,S1,0004
OR	A1,S0,R0
OR	A0,S2,R0
JAL	7001BFC8
ORI	A2,R0,C350
BEQ	V0,R0,70011F94
OR	A0,S2,R0
OR	A1,S0,R0
JAL	7001BE9C
ORI	A2,R0,C350
LW	S1,0000 (S1)
BNEL	S1,R0,70011F70
ADDIU	S0,S1,0004
ADDIU	T6,R0,0002
SW	T6,002C (S2)
ADDIU	T7,R0,0010
LUI	A2,7FFF
SH	T7,008C (SP)
ORI	A2,A2,FFFF
OR	A0,S5,R0
JAL	70012EFC
ADDIU	A1,SP,008C
BEQ	R0,R0,70012030
OR	A0,S5,R0
LBU	S0,003C (S2)
LW	T9,0060 (S2)
LBU	T8,003D (S2)
SLL	T6,S0,0x4
ADDU	T7,T9,T6
BEQ	R0,R0,7001202C
SB	T8,0008 (T7)
LW	T9,003C (S2)
LUI	AT,8003
OR	A0,S2,R0
SW	T9,0018 (S2)
JAL	70011030
LWC1	F12,96C4 (AT)
LW	A1,0020 (S2)
BEQL	A1,R0,70012030
OR	A0,S5,R0
JAL	7001BD34
OR	A0,S2,R0
BEQ	R0,R0,70012030
OR	A0,S5,R0
LW	A1,003C (S2)
OR	A0,S2,R0
JAL	7001BD34
SW	A1,0020 (S2)
//7001202C:
OR	A0,S5,R0
JAL	70013020
LW	A1,0050 (SP)
BEQ	V0,R0,70011AAC
SW	V0,0028 (S2)
//70012040:
LW	T6,001C (S2)
ADDU	T8,T6,V0
SW	T8,001C (S2)
//7001204C:	return
LW	RA,0044 (SP)
LW	S8,0040 (SP)
LW	S7,003C (SP)
LW	S6,0038 (SP)
LW	S5,0034 (SP)
LW	S4,0030 (SP)
LW	S3,002C (SP)
LW	S2,0028 (SP)
LW	S1,0024 (SP)
LW	S0,0020 (SP)
LDC1	F20,0018 (SP)
JR	RA
ADDIU	SP,SP,00A0

70012080
	accepts: A0=p->music.ctrl, A1=p->arguments
ADDIU	SP,SP,FFC0
SW	RA,0024 (SP)
SW	S1,0020 (SP)
SW	S0,001C (SP)
LW	A2,000C (A1)
SW	R0,0020 (A0)
SW	R0,0018 (A0)
LUI	T6,8002
LW	T6,76E0 (T6)
ADDIU	T7,R0,00FF
ADDIU	T8,R0,01E8
ADDIU	T9,R0,7FFF
ADDIU	T0,R0,3E80
SH	T7,0030 (A0)
SW	T8,0024 (A0)
SW	R0,0028 (A0)
SW	R0,002C (A0)
SH	T9,0032 (A0)
SW	T0,005C (A0)
SW	R0,001C (A0)
SW	T6,0014 (A0)
LW	T1,0010 (A1)
ADDIU	T4,R0,0009
OR	S1,A1,R0
SW	T1,0070 (A0)
LW	T2,0014 (A1)
OR	S0,A0,R0
ADDIU	T6,R0,0010
SW	T2,0074 (A0)
LW	T3,0018 (A1)
SH	T4,0038 (A0)
SW	T3,0078 (A0)
LBU	T5,0008 (A1)
OR	A1,R0,R0
SB	T5,0034 (A0)
LBU	A3,0008 (S1)
SW	T6,0010 (SP)	;SP+10= 10 bytes
OR	A0,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
SW	A2,002C (SP)
SW	V0,0060 (S0)
JAL	7001D3A4
OR	A0,S0,R0
LW	A3,0000 (S1)
ADDIU	T7,R0,0038
SW	T7,0010 (SP)	;SP+10= 38 bytes
OR	A0,R0,R0
OR	A1,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
LW	A2,002C (SP)
SW	R0,006C (S0)
LW	T8,0000 (S1)
OR	A0,R0,R0
OR	A1,R0,R0
BLEZ	T8,70012188
ADDIU	T1,R0,001C
OR	V1,V0,R0
LW	T9,006C (S0)
ADDIU	A0,A0,0001
SW	T9,0000 (V1)
SW	V1,006C (S0)
LW	T0,0000 (S1)
ADDIU	V1,V1,0038
SLT	AT,A0,T0
BNEL	AT,R0,70012168
LW	T9,006C (S0)
SW	R0,0064 (S0)
SW	R0,0068 (S0)
LW	A3,0004 (S1)
SW	T1,0010 (SP)	;SP+10= 1C bytes
LW	A2,002C (SP)
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
OR	A0,R0,R0
ADDIU	A0,S0,0048
OR	A1,V0,R0
JAL	700130AC
LW	A2,0004 (S1)
LUI	T2,7001
ADDIU	T2,T2,1A6C
SW	R0,0000 (S0)
SW	T2,0008 (S0)
SW	S0,0004 (S0)
LUI	A0,8002
LW	A0,76E0 (A0)
JAL	70013120
OR	A1,S0,R0
LW	RA,0024 (SP)
LW	S0,001C (SP)
LW	S1,0020 (SP)
JR	RA
ADDIU	SP,SP,0040

700121F0
	accepts: A0=p->music controller, A1=
ADDIU	SP,SP,FFD8
SW	RA,0014 (SP)
ADDIU	T6,R0,000E
SW	A1,001C (SP)	;buffer+4= A1 f/caller
SH	T6,0018 (SP)	;buffer+0= 0xE
ADDIU	A1,SP,0018	;A1=SP+18: p->argument buffer
ADDIU	A0,A0,0048
JAL	70012EFC
OR	A2,R0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

70012230	12E30	V0= TRUE if music playing
	accepts: A0=p->music controller
JR	RA
LW	V0,002C (A0)	;V0=music controller+2C

70012240
LW	T6,0004 (A0)
OR	A2,A0,R0
OR	T0,A0,R0
SW	T6,0000 (A1)
LW	T7,000C (A0)
OR	V0,R0,R0
OR	V1,A1,R0
SW	T7,0004 (A1)
LW	T8,0010 (A0)
ADDIU	A0,R0,0010
OR	A3,A1,R0
SW	T8,0008 (A1)
LW	T9,0018 (A2)
ADDIU	V0,V0,0002
ADDIU	V1,V1,0008
SW	T9,0004 (V1)
LW	T1,0058 (A2)
ADDIU	A2,A2,0008
ADDIU	A3,A3,0002
SW	T1,0044 (V1)
LBU	T2,0098 (T0)
ADDIU	T0,T0,0002
SB	T2,008A (A3)
LBU	T3,00A6 (T0)
SB	T3,009A (A3)
LW	T4,00B0 (A2)
SW	T4,00A4 (V1)
LW	T5,0014 (A2)
SW	T5,0008 (V1)
LW	T6,0054 (A2)
SW	T6,0048 (V1)
LBU	T7,0097 (T0)
SB	T7,008B (A3)
LBU	T8,00A7 (T0)
SB	T8,009B (A3)
LW	T9,00B4 (A2)
BNE	V0,A0,70012270
SW	T9,00A8 (V1)
JR	RA
NOP

700122E0
LW	T6,0000 (A1)
OR	V1,A0,R0
OR	A3,A0,R0
SW	T6,0004 (A0)
LW	T7,0004 (A1)
OR	V0,R0,R0
OR	A2,A1,R0
SW	T7,000C (A0)
LW	T8,0008 (A1)
OR	T0,A1,R0
SW	T8,0010 (A0)
ADDIU	A0,R0,0010
LW	T9,000C (A2)
ADDIU	V0,V0,0002
ADDIU	V1,V1,0008
SW	T9,0010 (V1)
LW	T1,004C (A2)
ADDIU	A2,A2,0008
ADDIU	A3,A3,0002
SW	T1,0050 (V1)
LBU	T2,008C (T0)
ADDIU	T0,T0,0002
SB	T2,0096 (A3)
LBU	T3,009A (T0)
SB	T3,00A6 (A3)
LW	T4,00A4 (A2)
SW	T4,00B0 (V1)
LW	T5,0008 (A2)
SW	T5,0014 (V1)
LW	T6,0048 (A2)
SW	T6,0054 (V1)
LBU	T7,008B (T0)
SB	T7,0097 (A3)
LBU	T8,009B (T0)
SB	T8,00A7 (A3)
LW	T9,00A8 (A2)
BNE	V0,A0,70012310
SW	T9,00B4 (V1)
JR	RA
NOP

70012380
ADDU	V0,A0,A1
LBU	T6,0098 (V0)
SLL	T7,A1,0x2
ADDU	A2,A0,T7
BEQL	T6,R0,700123C8
LW	A3,0018 (A2)
SLL	T7,A1,0x2
ADDU	A2,A0,T7
LW	A3,0058 (A2)
LBU	V1,0000 (A3)
ADDIU	T8,A3,0001
SW	T8,0058 (A2)
LBU	T9,0098 (V0)
ADDIU	T6,T9,FFFF
SB	T6,0098 (V0)
JR	RA
OR	V0,V1,R0
//700123C4:
LW	A3,0018 (A2)
ADDIU	T0,R0,00FE
LBU	V1,0000 (A3)
ADDIU	T8,A3,0001
SW	T8,0018 (A2)
BNE	T0,V1,7001243C
NOP
LBU	A0,0000 (T8)
ADDIU	T9,T8,0001
SW	T9,0018 (A2)
BEQ	T0,A0,7001243C
ADDIU	T6,T9,0001
LBU	V1,0000 (T9)
SW	T6,0018 (A2)
LBU	A1,0000 (T6)
ADDIU	T7,T6,0001
SLL	T9,A0,0x8
SW	T7,0018 (A2)
ADDU	T6,T9,V1
SUBU	T7,T7,T6
ADDIU	T9,T7,FFFC
SW	T9,0058 (A2)
SB	A1,0098 (V0)
LW	A3,0058 (A2)
LBU	V1,0000 (A3)
ADDIU	T8,A3,0001
SW	T8,0058 (A2)
LBU	T6,0098 (V0)
ADDIU	T7,T6,FFFF
SB	T7,0098 (V0)
JR	RA
OR	V0,V1,R0

70012444
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
OR	A0,T2,R0
JAL	70012380
OR	A1,T3,R0
ANDI	T6,V0,0080
BEQ	T6,R0,70012488
OR	T1,V0,R0
ANDI	T1,V0,007F
OR	A0,T2,R0
JAL	70012380
OR	A1,T3,R0
SLL	T7,T1,0x7
ANDI	T8,V0,007F
ANDI	T9,V0,0080
BNE	T9,R0,70012468
ADDU	T1,T7,T8
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
OR	V0,T1,R0
JR	RA
NOP

7001249C	1309C	unconditional return
JR	RA
NOP

700124A4
ADDIU	SP,SP,FFD0
SW	S0,0018 (SP)
OR	S0,A1,R0
SW	RA,001C (SP)
OR	T4,A0,R0
ADDIU	T1,R0,FFFF
LW	A2,0010 (A0)
ADDIU	A1,R0,0010
LW	T3,0024 (SP)
OR	V0,R0,R0
LW	T6,0004 (T4)
SRLV	T7,T6,V0
ANDI	T8,T7,0001
BEQL	T8,R0,7001251C
ADDIU	V0,V0,0001
LW	T6,0014 (T4)
SLL	T9,V0,0x2
ADDU	V1,T4,T9
BEQL	T6,R0,70012504
LW	A0,00B8 (V1)
LW	T7,00B8 (V1)
SUBU	T8,T7,A2
SW	T8,00B8 (V1)
LW	A0,00B8 (V1)
SLTU	AT,A0,T1
BEQL	AT,R0,7001251C
ADDIU	V0,V0,0001
OR	T1,A0,R0
OR	T3,V0,R0
ADDIU	V0,V0,0001
BNEL	V0,A1,700124D0
LW	T6,0004 (T4)
OR	A0,T4,R0
JAL	70012380
OR	A1,T3,R0
ADDIU	AT,R0,00FF
ANDI	T2,V0,00FF
BNE	V0,AT,700126A4
OR	V1,V0,R0
OR	A0,T4,R0
JAL	70012380
OR	A1,T3,R0
ADDIU	AT,R0,0051
ANDI	A2,V0,00FF
BNE	V0,AT,700125A8
OR	V1,V0,R0
ADDIU	T9,R0,0003
SH	T9,0000 (S0)
SB	T2,0008 (S0)
SB	A2,0009 (S0)
OR	A0,T4,R0
JAL	70012380
OR	A1,T3,R0
SB	V0,000B (S0)
OR	A0,T4,R0
JAL	70012380
OR	A1,T3,R0
SB	V0,000C (S0)
OR	A0,T4,R0
JAL	70012380
OR	A1,T3,R0
SB	V0,000D (S0)
ADDU	T6,T4,T3
BEQ	R0,R0,70012740
SB	R0,00A8 (T6)
ADDIU	AT,R0,002F
BNEL	V1,AT,700125E8
ADDIU	AT,R0,002E
LW	T7,0004 (T4)
ADDIU	T8,R0,0001
SLLV	T9,T8,T3
XOR	T6,T7,T9
BEQ	T6,R0,700125D8
SW	T6,0004 (T4)
ADDIU	T7,R0,0012
BEQ	R0,R0,70012740
SH	T7,0000 (S0)
ADDIU	T9,R0,0004
BEQ	R0,R0,70012740
SH	T9,0000 (S0)
ADDIU	AT,R0,002E
BNE	V1,AT,70012618
OR	A0,T4,R0
JAL	70012380
OR	A1,T3,R0
OR	A0,T4,R0
JAL	70012380
OR	A1,T3,R0
ADDU	T6,T4,T3
SB	R0,00A8 (T6)
ADDIU	T8,R0,0013
BEQ	R0,R0,70012740
SH	T8,0000 (S0)
ADDIU	AT,R0,002D
BNE	V1,AT,70012740
SLL	T7,T3,0x2
ADDU	T5,T4,T7
LW	V0,0018 (T5)
ADDIU	AT,R0,00FF
LBU	A0,0001 (V0)
ADDIU	V0,V0,0001
ADDIU	T9,V0,0005
BNE	A0,R0,70012650
LBU	A1,FFFF (V0)
SB	A1,0000 (V0)
BEQ	R0,R0,70012690
SW	T9,0018 (T5)
BEQ	A0,AT,7001265C
ADDIU	T6,A0,FFFF
SB	T6,0000 (V0)
LBU	T7,0002 (V0)
LBU	V1,0001 (V0)
LBU	T6,0003 (V0)
SLL	T9,T7,0x10
SLL	T8,V1,0x18
LBU	T7,0004 (V0)
ADDU	V1,T8,T9
SLL	T8,T6,0x8
ADDU	V1,V1,T8
ADDIU	V0,V0,0005
ADDU	V1,V1,T7
SUBU	T9,V0,V1
SW	T9,0018 (T5)
ADDU	T6,T4,T3
SB	R0,00A8 (T6)
ADDIU	T8,R0,0014
BEQ	R0,R0,70012740
SH	T8,0000 (S0)
ADDIU	T7,R0,0001
ANDI	T9,V1,0080
BEQ	T9,R0,700126D4
SH	T7,0000 (S0)
SB	T2,0008 (S0)
OR	A0,T4,R0
JAL	70012380
OR	A1,T3,R0
SB	V0,0009 (S0)
ADDU	T6,T4,T3
BEQ	R0,R0,700126E4
SB	T2,00A8 (T6)
ADDU	T8,T4,T3
LBU	T7,00A8 (T8)
SB	V0,0009 (S0)
SB	T7,0008 (S0)
LBU	V0,0008 (S0)
ADDIU	AT,R0,00C0
ANDI	T9,V0,00F0
BEQ	T9,AT,7001273C
ADDIU	AT,R0,00D0
BEQ	T9,AT,7001273C
OR	A0,T4,R0
JAL	70012380
OR	A1,T3,R0
LBU	T6,0008 (S0)
ADDIU	AT,R0,0090
SB	V0,000A (S0)
ANDI	T8,T6,00F0
BNE	T8,AT,70012740
OR	T2,T4,R0
SW	T1,0028 (SP)
JAL	70012444
SW	T3,0024 (SP)
LW	T1,0028 (SP)
LW	T3,0024 (SP)
BEQ	R0,R0,70012740
SW	V0,000C (S0)
SB	R0,000A (S0)
SW	T1,0004 (S0)
LW	T7,000C (T4)
SW	T1,0010 (T4)
ADDIU	AT,R0,0012
ADDU	T9,T7,T1
SW	T9,000C (T4)
LH	T6,0000 (S0)
OR	T2,T4,R0
SLL	T8,T3,0x2
BEQL	T6,AT,70012784
ADDIU	T6,R0,0001
JAL	70012444
ADDU	T5,T4,T8
LW	T7,00B8 (T5)
ADDU	T9,T7,V0
SW	T9,00B8 (T5)
ADDIU	T6,R0,0001
SW	T6,0014 (T4)
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0030
JR	RA
NOP

7001279C
ADDIU	SP,SP,FFD0
SW	S4,0028 (SP)
SW	S3,0024 (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
SW	RA,002C (SP)
ADDIU	T6,R0,0001
OR	S0,A0,R0
OR	S4,A1,R0
SW	A1,0000 (A0)
SW	R0,0004 (A0)
SW	R0,0010 (A0)
SW	R0,000C (A0)
SW	T6,0014 (A0)
OR	S1,A0,R0
OR	S2,R0,R0
ADDIU	S3,R0,0010
OR	T5,R0,R0
OR	T4,A0,R0
SB	R0,00A8 (S1)
SW	R0,0058 (T4)
SB	R0,0098 (S1)
LW	T7,0000 (S0)
ADDIU	T6,R0,0001
ADDU	T8,T7,S2
LW	V0,0000 (T8)
SLLV	T7,T6,T5
BEQ	V0,R0,70012838
ADDU	T6,S4,V0
LW	T9,0004 (S0)
OR	T2,S0,R0
OR	T3,T5,R0
OR	T8,T9,T7
SW	T8,0004 (S0)
JAL	70012444
SW	T6,0018 (T4)
BEQ	R0,R0,7001283C
SW	V0,00B8 (T4)
SW	R0,0018 (T4)
ADDIU	T5,T5,0001
ADDIU	S1,S1,0001
ADDIU	S2,S2,0004
BNE	T5,S3,700127EC
ADDIU	T4,T4,0004
LW	T9,0000 (S0)
LUI	AT,3FF0
MTC1	AT,F5
LW	T7,0040 (T9)
MTC1	R0,F4
LUI	AT,4F80
MTC1	T7,F6
BGEZ	T7,70012880
CVT.S.W	F8,F6
MTC1	AT,F10
NOP
ADD.S	F8,F8,F10
CVT.D.S	F6,F8
DIV.D	F10,F4,F6
CVT.S.D	F8,F10
SWC1	F8,0008 (S0)
LW	RA,002C (SP)
LW	S4,0028 (SP)
LW	S3,0024 (SP)
LW	S2,0020 (SP)
LW	S1,001C (SP)
LW	S0,0018 (SP)
JR	RA
ADDIU	SP,SP,0030

700128B0
ADDIU	SP,SP,FEB0
SW	S3,0020 (SP)
SW	S1,0018 (SP)
OR	S1,A1,R0
ADDIU	S3,SP,0048
SW	RA,002C (SP)
SW	S5,0028 (SP)
SW	S4,0024 (SP)
SW	S2,001C (SP)
SW	S0,0014 (SP)
OR	A3,A0,R0
OR	S2,A2,R0
LW	A1,0000 (A3)
JAL	7001279C
OR	A0,S3,R0
ADDIU	S5,R0,0004
ADDIU	S4,SP,0140
ADDIU	S0,SP,0058
LW	T6,004C (SP)
ADDIU	A0,SP,0048
OR	V1,A0,R0
SW	T6,0000 (S1)
LW	T7,0054 (SP)
OR	V0,S1,R0
OR	A1,S1,R0
SW	T7,0004 (S1)
LW	T8,0058 (SP)
SW	T8,0008 (S1)
LW	T0,0018 (V1)
ADDIU	A0,A0,0004
ADDIU	V0,V0,0010
SW	T0,FFFC (V0)
LW	T1,0058 (V1)
ADDIU	V1,V1,0010
ADDIU	A1,A1,0004
SW	T1,003C (V0)
LBU	T2,0094 (A0)
SB	T2,0088 (A1)
LBU	T3,00A4 (A0)
SB	T3,0098 (A1)
LW	T4,00A8 (V1)
SW	T4,009C (V0)
LW	T5,000C (V1)
SW	T5,0000 (V0)
LW	T6,004C (V1)
SW	T6,0040 (V0)
LBU	T7,0095 (A0)
SB	T7,0089 (A1)
LBU	T8,00A5 (A0)
SB	T8,0099 (A1)
LW	T9,00AC (V1)
SW	T9,00A0 (V0)
LW	T0,0010 (V1)
SW	T0,0004 (V0)
LW	T1,0050 (V1)
SW	T1,0044 (V0)
LBU	T2,0096 (A0)
SB	T2,008A (A1)
LBU	T3,00A6 (A0)
SB	T3,009A (A1)
LW	T4,00B0 (V1)
SW	T4,00A4 (V0)
LW	T5,0014 (V1)
SW	T5,0008 (V0)
LW	T6,0054 (V1)
SW	T6,0048 (V0)
LBU	T7,0097 (A0)
SB	T7,008B (A1)
LBU	T8,00A7 (A0)
SB	T8,009B (A1)
LW	T9,00B4 (V1)
BNE	A0,S0,70012920
SW	T9,00A8 (V0)
OR	A0,S3,R0
JAL	700124A4
OR	A1,S4,R0
LH	T0,0140 (SP)
LW	T1,0054 (SP)
BEQ	T0,S5,700129F8
SLTU	AT,T1,S2
BNEL	AT,R0,700128FC
LW	T6,004C (SP)
LW	RA,002C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
LW	S4,0024 (SP)
LW	S5,0028 (SP)
JR	RA
ADDIU	SP,SP,0150

70012A1C
JR	RA
LW	V0,000C (A0)

70012A24
LW	T6,0000 (A0)
MTC1	A1,F12
LUI	AT,8003
LW	T7,0040 (T6)
LDC1	F6,96D0 (AT)
CVT.D.S	F4,F12
MTC1	T7,F10
MUL.D	F8,F4,F6
LUI	AT,41F0
BGEZ	T7,70012A60
CVT.D.W	F16,F10
MTC1	AT,F19
MTC1	R0,F18
NOP
ADD.D	F16,F16,F18
MTC1	A2,F6
MUL.D	F4,F8,F16
LUI	AT,41F0
BGEZ	A2,70012A84
CVT.D.W	F10,F6
MTC1	AT,F19
MTC1	R0,F18
NOP
ADD.D	F10,F10,F18
DIV.D	F8,F4,F10
ADDIU	V0,R0,0001
LUI	AT,41E0
CFC1	T8,F31
CTC1	V0,F31
NOP
CVT.W.D	F16,F8
CFC1	V0,F31
NOP
ANDI	V0,V0,0078
BEQL	V0,R0,70012B08
MFC1	V0,F16
MTC1	AT,F17
MTC1	R0,F16
ADDIU	V0,R0,0001
LUI	AT,8000
SUB.D	F16,F8,F16
CTC1	V0,F31
NOP
CVT.W.D	F16,F16
CFC1	V0,F31
NOP
ANDI	V0,V0,0078
BNEL	V0,R0,70012AFC
CTC1	T8,F31
MFC1	V0,F16
CTC1	T8,F31
JR	RA
OR	V0,V0,AT
CTC1	T8,F31
JR	RA
ADDIU	V0,R0,FFFF
MFC1	V0,F16
NOP
BLTZL	V0,70012AFC
CTC1	T8,F31
CTC1	T8,F31
JR	RA
NOP

70012B20
MTC1	A1,F4
MTC1	A2,F8
LUI	AT,4F80
CVT.S.W	F6,F4
BGEZ	A2,70012B44
CVT.S.W	F10,F8
MTC1	AT,F16
NOP
ADD.S	F10,F10,F16
LW	T6,0000 (A0)
MUL.S	F18,F6,F10
LUI	AT,4F80
LW	T7,0040 (T6)
MTC1	T7,F8
CVT.D.S	F4,F18
BGEZ	T7,70012B70
CVT.S.W	F16,F8
MTC1	AT,F6
NOP
ADD.S	F16,F16,F6
LUI	AT,8003
LDC1	F18,96D8 (AT)
CVT.D.S	F10,F16
MUL.D	F8,F10,F18
DIV.D	F6,F4,F8
JR	RA
CVT.S.D	F0,F6

70012B8C
LW	T6,0004 (A0)
OR	T1,A1,R0
ADDIU	V1,R0,FFFF
BNE	T6,R0,70012BA8
LW	V0,0010 (A0)
JR	RA
OR	V0,R0,R0
//70012BA8:
OR	A2,R0,R0
ADDIU	T2,R0,0010
LW	A1,0004 (A0)
ADDIU	T6,A2,0001
SRLV	T7,A1,A2
ANDI	T8,T7,0001
BEQL	T8,R0,70012C04
SRLV	T7,A1,T6
LW	T3,0014 (A0)
SLL	T9,A2,0x2
ADDU	A3,A0,T9
BEQL	T3,R0,70012BF0
LW	T0,00B8 (A3)
LW	T4,00B8 (A3)
SUBU	T5,T4,V0
SW	T5,00B8 (A3)
LW	A1,0004 (A0)
LW	T0,00B8 (A3)
SLTU	AT,T0,V1
BEQL	AT,R0,70012C04
SRLV	T7,A1,T6
OR	V1,T0,R0
SRLV	T7,A1,T6
ANDI	T8,T7,0001
BEQ	T8,R0,70012C48
ADDIU	T6,A2,0002
LW	T3,0014 (A0)
SLL	T9,A2,0x2
ADDU	A3,A0,T9
BEQL	T3,R0,70012C38
LW	T0,00BC (A3)
LW	T4,00BC (A3)
SUBU	T5,T4,V0
SW	T5,00BC (A3)
LW	A1,0004 (A0)
LW	T0,00BC (A3)
SLTU	AT,T0,V1
BEQL	AT,R0,70012C4C
SRLV	T7,A1,T6
OR	V1,T0,R0
SRLV	T7,A1,T6
ANDI	T8,T7,0001
BEQ	T8,R0,70012C90
ADDIU	T6,A2,0003
LW	T3,0014 (A0)
SLL	T9,A2,0x2
ADDU	A3,A0,T9
BEQL	T3,R0,70012C80
LW	T0,00C0 (A3)
LW	T4,00C0 (A3)
SUBU	T5,T4,V0
SW	T5,00C0 (A3)
LW	A1,0004 (A0)
LW	T0,00C0 (A3)
SLTU	AT,T0,V1
BEQL	AT,R0,70012C94
SRLV	T7,A1,T6
OR	V1,T0,R0
SRLV	T7,A1,T6
ANDI	T8,T7,0001
BEQL	T8,R0,70012CD8
ADDIU	A2,A2,0004
LW	T3,0014 (A0)
SLL	T9,A2,0x2
ADDU	A3,A0,T9
BEQL	T3,R0,70012CC4
LW	A1,00C4 (A3)
LW	T4,00C4 (A3)
SUBU	T5,T4,V0
SW	T5,00C4 (A3)
LW	A1,00C4 (A3)
SLTU	AT,A1,V1
BEQL	AT,R0,70012CD8
ADDIU	A2,A2,0004
OR	V1,A1,R0
ADDIU	A2,A2,0004
BNEL	A2,T2,70012BB4
LW	A1,0004 (A0)
SW	R0,0014 (A0)
SW	V1,0000 (T1)
ADDIU	V0,R0,0001
JR	RA
NOP

70012D00
ADDIU	SP,SP,FFD8
SW	RA,0014 (SP)
ADDIU	T6,R0,000D
SW	A1,001C (SP)
SH	T6,0018 (SP)
ADDIU	A1,SP,0018
ADDIU	A0,A0,0048
JAL	70012EFC
OR	A2,R0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

70012D40
ADDIU	SP,SP,FFD8
SW	RA,0014 (SP)
ADDIU	T6,R0,000F
SH	T6,0018 (SP)
ADDIU	A1,SP,0018
ADDIU	A0,A0,0048
JAL	70012EFC
OR	A2,R0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

70012D70
ADDIU	SP,SP,FFD8
SW	RA,0014 (SP)
ADDIU	T6,R0,0011
SH	T6,0018 (SP)
ADDIU	A1,SP,0018
ADDIU	A0,A0,0048
JAL	70012EFC
OR	A2,R0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

70012DA0
	accepts: A0=, A1=
ADDIU	SP,SP,FFD8
SW	RA,0014 (SP)
SW	A1,002C (SP)
OR	T6,A1,R0
ADDIU	T7,R0,000A
SH	T7,0018 (SP)	;buf[0]=0xA
SH	T6,001C (SP)	;buf[1]=A1 f/caller
ADDIU	A1,SP,0018	;A1=SP+18: argument buffer
ADDIU	A0,A0,0048	;A0+=48
JAL	70012EFC
OR	A2,R0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

70012DE0
ADDIU	SP,SP,FFC0
SW	S3,0020 (SP)
SLL	S3,A1,0x10
SW	S2,001C (SP)
OR	S2,A0,R0
SRA	T6,S3,0x10
SW	RA,0024 (SP)
OR	S3,T6,R0
SW	S1,0018 (SP)
SW	S0,0014 (SP)
SW	A1,0044 (SP)
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
ADDIU	A0,R0,0001	;A0=1: do not catch interrupts
SW	V0,002C (SP)
LW	S0,0008 (S2)
BEQ	S0,R0,70012E68
NOP
LH	T7,000C (S0)
LW	S1,0000 (S0)
BNE	S3,T7,70012E60
NOP
BEQ	S1,R0,70012E4C
NOP
LW	T8,0008 (S1)
LW	T9,0008 (S0)
ADDU	T0,T8,T9
SW	T0,0008 (S1)
JAL	7000EA90
OR	A0,S0,R0
OR	A0,S0,R0
JAL	7000EAC0
OR	A1,S2,R0
BNE	S1,R0,70012E24
OR	S0,S1,R0
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
LW	A0,002C (SP)
LW	RA,0024 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
JR	RA
ADDIU	SP,SP,0040

70012E8C
ADDIU	SP,SP,FFC8
SW	S2,0020 (SP)
OR	S2,A0,R0
SW	RA,0024 (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
ADDIU	A0,R0,0001
SW	V0,002C (SP)
LW	S0,0008 (S2)
BEQ	S0,R0,70012EDC
NOP
LW	S1,0000 (S0)
JAL	7000EA90
OR	A0,S0,R0
OR	A0,S0,R0
JAL	7000EAC0
OR	A1,S2,R0
BNE	S1,R0,70012EBC
OR	S0,S1,R0
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
LW	A0,002C (SP)
LW	RA,0024 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
JR	RA
ADDIU	SP,SP,0038

70012EFC
	accepts: A0=p->, A1=p->arguments, A2=mode
ADDIU	SP,SP,FFD0
SW	RA,0014 (SP)
SW	A0,0030 (SP)
SW	A1,0034 (SP)
SW	R0,0020 (SP)
ADDIU	A0,R0,0001
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
SW	A2,0038 (SP)
LW	T6,0030 (SP)	;T6=A0 f/caller
LW	A3,0038 (SP)	;A3= mode
OR	A1,V0,R0
LW	T0,0000 (T6)
BNE	T0,R0,70012F44	;restore and return if NULL
OR	A0,T0,R0
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
OR	A0,V0,R0
BEQ	R0,R0,70013014
LW	RA,0014 (SP)
//70012F44:
SW	A1,001C (SP)
SW	A3,0038 (SP)
JAL	7000EA90
SW	T0,002C (SP)
LW	T0,002C (SP)
LW	A0,0034 (SP)
ADDIU	A2,R0,0010
JAL	7001D690
ADDIU	A1,T0,000C
LW	A3,0038 (SP)
LUI	AT,7FFF
ORI	AT,AT,FFFF
BNE	A3,AT,70012F84
LW	T0,002C (SP)
ADDIU	T7,R0,FFFF
SW	T7,0020 (SP)
//70012F84:
LW	V0,0030 (SP)
ADDIU	AT,R0,FFF8
LW	T8,0020 (SP)
BEQ	V0,AT,70013008
ADDIU	A1,V0,0008
//70012F98:
LW	V0,0000 (A1)
BNEL	V0,R0,70012FCC
LW	V1,0008 (V0)
BEQL	T8,R0,70012FB8
SW	A3,0008 (T0)
BEQ	R0,R0,70012FB8
SW	R0,0008 (T0)
//70012FB4:
SW	A3,0008 (T0)
//70012FB8:
JAL	7000EAC0
OR	A0,T0,R0
BEQ	R0,R0,70013008
NOP
//70012FC8:
LW	V1,0008 (V0)
OR	A2,V0,R0
SLT	AT,A3,V1
BEQL	AT,R0,70013000
OR	A1,V0,R0
SW	A3,0008 (T0)
LW	T9,0008 (A2)
OR	A0,T0,R0
SUBU	T1,T9,A3
JAL	7000EAC0
SW	T1,0008 (A2)
BEQ	R0,R0,70013008
NOP
//70012FFC:
OR	A1,V0,R0
BNE	V0,R0,70012F98
SUBU	A3,A3,V1
//70013008:	restore state
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
LW	A0,001C (SP)
//70013010:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0030
JR	RA
NOP

70013020
ADDIU	SP,SP,FFD0
SW	RA,001C (SP)
SW	A0,0030 (SP)
SW	S0,0018 (SP)
SW	A1,0034 (SP)
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
ADDIU	A0,R0,0001
LW	T6,0030 (SP)
SW	V0,0024 (SP)
LW	T8,0034 (SP)
LW	S0,0008 (T6)
OR	V1,R0,R0
BEQL	S0,R0,70013088
ADDIU	T7,R0,FFFF
JAL	7000EA90
OR	A0,S0,R0
ADDIU	A0,S0,000C
LW	A1,0034 (SP)
JAL	7001D690
ADDIU	A2,R0,0010
OR	A0,S0,R0
JAL	7000EAC0
LW	A1,0030 (SP)
BEQ	R0,R0,7001308C
LW	V1,0008 (S0)
ADDIU	T7,R0,FFFF
SH	T7,0000 (T8)
LW	A0,0024 (SP)
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
SW	V1,0028 (SP)
LW	RA,001C (SP)
LW	V0,0028 (SP)
LW	S0,0018 (SP)
JR	RA
ADDIU	SP,SP,0030

700130AC
ADDIU	SP,SP,FFD8
SW	S3,0020 (SP)
SW	S2,001C (SP)
SW	S0,0014 (SP)
SW	RA,0024 (SP)
SW	S1,0018 (SP)
OR	S2,A0,R0
OR	S3,A2,R0
SW	R0,0010 (A0)
SW	R0,0008 (A0)
SW	R0,000C (A0)
SW	R0,0000 (A0)
SW	R0,0004 (A0)
BLEZ	A2,70013104
OR	S0,R0,R0
OR	S1,A1,R0
OR	A0,S1,R0
JAL	7000EAC0
OR	A1,S2,R0
ADDIU	S0,S0,0001
BNE	S0,S3,700130EC
ADDIU	S1,S1,001C
LW	RA,0024 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
JR	RA
ADDIU	SP,SP,0028

70013120
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
OR	A2,A0,R0
SW	A2,0018 (SP)
ADDIU	A0,R0,0001
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
SW	A1,001C (SP)
LW	A2,0018 (SP)
LW	A1,001C (SP)
OR	A0,V0,R0
LW	T6,0020 (A2)
SW	T6,0010 (A1)
LW	T7,0000 (A2)
SW	T7,0000 (A1)
JAL	7000DD30	;update Status and MI Interrupt Mask Register with A0
SW	A1,0000 (A2)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70013170
ADDIU	SP,SP,FFD8
SW	RA,0014 (SP)
SW	A2,0030 (SP)
LW	A3,0014 (A0)
SLL	T6,A2,0x10
SRA	A2,T6,0x10
OR	T0,A0,R0
BEQ	A3,R0,700131C4
OR	V1,R0,R0
SW	A3,0000 (A1)
SW	T0,0028 (SP)
SW	A3,0024 (SP)
SW	R0,001C (SP)
JAL	7000EA90
OR	A0,A3,R0
LW	T0,0028 (SP)
LW	A0,0024 (SP)
JAL	7000EAC0
ADDIU	A1,T0,000C
BEQ	R0,R0,70013244
LW	V1,001C (SP)
LW	A3,0004 (T0)
BEQ	A3,R0,700131FC
OR	A0,A3,R0
SW	A3,0000 (A1)
SW	T0,0028 (SP)
SW	A3,0024 (SP)
JAL	7000EA90
SW	V1,001C (SP)
LW	T0,0028 (SP)
LW	A0,0024 (SP)
JAL	7000EAC0
ADDIU	A1,T0,000C
BEQ	R0,R0,70013244
LW	V1,001C (SP)
LW	A3,000C (T0)
BEQL	A3,R0,70013248
LW	RA,0014 (SP)
LW	T8,0008 (A3)
LH	T9,0016 (T8)
SLT	AT,A2,T9
BNEL	AT,R0,7001323C
LW	A3,0000 (A3)
LW	T1,00D8 (A3)
BNEL	T1,R0,7001323C
LW	A3,0000 (A3)
SW	A3,0000 (A1)
LW	T2,0008 (A3)
ADDIU	V1,R0,0001
LH	A2,0016 (T2)
LW	A3,0000 (A3)
BNEL	A3,R0,7001320C
LW	T8,0008 (A3)
LW	RA,0014 (SP)
ADDIU	SP,SP,0028
OR	V0,V1,R0
JR	RA
NOP

70013258
ADDIU	SP,SP,FFD0
SW	RA,001C (SP)
SW	S0,0018 (SP)
SW	A0,0030 (SP)
SW	R0,002C (SP)
LH	T6,0000 (A2)
OR	S0,A1,R0
SH	T6,0016 (A1)
LBU	T7,0004 (A2)
SW	R0,000C (A1)
SH	T7,001A (A1)
LH	T8,0002 (A2)
SH	R0,0014 (A1)
SW	R0,0008 (A1)
SH	T8,0018 (A1)
LH	A2,0000 (A2)
LW	A0,0030 (SP)
JAL	70013170
ADDIU	A1,SP,002C
LW	T9,002C (SP)
BEQL	T9,R0,70013380
LW	V0,002C (SP)
BEQ	V0,R0,70013364
LW	A0,000C (T9)
ADDIU	T0,R0,0200
SW	T0,00D8 (T9)
LW	T1,002C (SP)
LW	T2,0008 (T1)
SW	R0,0008 (T2)
JAL	7000F0D0
SW	A0,0028 (SP)
LW	T3,0030 (SP)
LW	A0,0028 (SP)
ADDIU	T5,R0,000B
LW	T4,001C (T3)
SH	T5,0008 (V0)
SW	R0,000C (V0)
SW	T4,0004 (V0)
LW	T6,002C (SP)
ADDIU	A1,R0,0003
OR	A2,V0,R0
LW	T7,00D8 (T6)
ADDIU	T8,T7,FFC0
SW	T8,0010 (V0)
LW	T9,0008 (A0)
JALR	RA,T9
NOP
JAL	7000F0D0
NOP
LW	A0,0028 (SP)
BEQ	V0,R0,7001336C
OR	A2,V0,R0
LW	T0,0030 (SP)
LW	T2,002C (SP)
ADDIU	T5,R0,000F
LW	T1,001C (T0)
LW	T3,00D8 (T2)
SH	T5,0008 (V0)
SW	R0,0000 (V0)
ADDU	T4,T1,T3
SW	T4,0004 (V0)
LW	T9,0008 (A0)
ADDIU	A1,R0,0003
JALR	RA,T9
NOP
BEQ	R0,R0,70013370
LW	T7,002C (SP)
LW	T6,002C (SP)
SW	R0,00D8 (T6)
LW	T7,002C (SP)
SW	S0,0008 (T7)
LW	T8,002C (SP)
SW	T8,0008 (S0)
LW	V0,002C (SP)
LW	RA,001C (SP)
LW	S0,0018 (SP)
SLTU	T0,R0,V0
OR	V0,T0,R0
JR	RA
ADDIU	SP,SP,0030

700133A0
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
SW	A1,0024 (SP)
SW	A2,0028 (SP)
SW	A3,002C (SP)
LW	T7,0008 (A1)
BEQL	T7,R0,70013430
LW	RA,0014 (SP)
JAL	7000F0D0
SW	A0,0020 (SP)
BEQ	V0,R0,7001342C
LW	A0,0020 (SP)
LW	T9,0024 (SP)
LW	T8,001C (A0)
ADDIU	T3,R0,000B
LW	T0,0008 (T9)
LW	T1,00D8 (T0)
SH	T3,0008 (V0)
ADDU	T2,T8,T1
SW	T2,0004 (V0)
LH	T4,002A (SP)
SW	T4,000C (V0)
SW	V0,001C (SP)
JAL	7000EFC8
LW	A1,002C (SP)
LW	A2,001C (SP)
ADDIU	A1,R0,0003
SW	V0,0010 (A2)
SW	R0,0000 (A2)
LW	T5,0024 (SP)
LW	T6,0008 (T5)
LW	A0,000C (T6)
LW	T9,0008 (A0)
JALR	RA,T9
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

70013440
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SW	A2,0020 (SP)
LW	T6,0008 (A1)
BEQL	T6,R0,700134C0
LW	RA,0014 (SP)
JAL	7000F0D0
SW	A1,001C (SP)
LW	A3,001C (SP)
BEQ	V0,R0,700134BC
OR	A2,V0,R0
LW	T7,0018 (SP)
LW	T9,0008 (A3)
ADDIU	T2,R0,000E
LW	T8,001C (T7)
LW	T0,00D8 (T9)
SH	T2,0008 (V0)
ADDIU	A1,R0,0003
ADDU	T1,T8,T0
SW	T1,0004 (V0)
LW	T3,0020 (SP)
SW	R0,0000 (V0)
SW	T3,000C (V0)
LH	T4,001A (A3)
SH	T4,000A (V0)
LW	T5,0008 (A3)
LW	A0,000C (T5)
LW	T9,0008 (A0)
JALR	RA,T9
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700134D0
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SW	A2,0020 (SP)
LW	T6,0008 (A1)
BEQL	T6,R0,70013548
LW	RA,0014 (SP)
JAL	7000F0D0
SW	A1,001C (SP)
LW	A3,001C (SP)
BEQ	V0,R0,70013544
OR	A2,V0,R0
LW	T7,0018 (SP)
LW	T9,0008 (A3)
ADDIU	T2,R0,000C
LW	T8,001C (T7)
LW	T0,00D8 (T9)
SH	T2,0008 (V0)
ADDIU	A1,R0,0003
ADDU	T1,T8,T0
SW	T1,0004 (V0)
LBU	T3,0023 (SP)
SW	R0,0000 (V0)
SW	T3,000C (V0)
LW	T4,0008 (A3)
LW	A0,000C (T4)
LW	T9,0008 (A0)
JALR	RA,T9
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70013560
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SW	A2,0020 (SP)
LW	T6,0008 (A1)
BEQL	T6,R0,700135D8
LW	RA,0014 (SP)
JAL	7000F0D0
SW	A1,001C (SP)
LW	A3,001C (SP)
BEQ	V0,R0,700135D4
OR	A2,V0,R0
LW	T7,0018 (SP)
LW	T9,0008 (A3)
ADDIU	T2,R0,0007
LW	T8,001C (T7)
LW	T0,00D8 (T9)
SH	T2,0008 (V0)
ADDIU	A1,R0,0003
ADDU	T1,T8,T0
SW	T1,0004 (V0)
LWC1	F4,0020 (SP)
SW	R0,0000 (V0)
SWC1	F4,000C (V0)
LW	T3,0008 (A3)
LW	A0,000C (T3)
LW	T9,0008 (A0)
JALR	RA,T9
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700135F0
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SW	A2,0020 (SP)
LW	T6,0008 (A1)
BEQL	T6,R0,70013678
LW	RA,0014 (SP)
JAL	7000F0D0
SW	A1,001C (SP)
LW	A3,001C (SP)
BEQ	V0,R0,70013674
OR	A2,V0,R0
LW	T7,0018 (SP)
LW	T9,0008 (A3)
ADDIU	T2,R0,0010
LW	T8,001C (T7)
LW	T0,00D8 (T9)
SH	T2,0008 (V0)
ADDU	T1,T8,T0
SW	T1,0004 (V0)
LBU	V1,0023 (SP)
BGEZ	V1,70013654
SUBU	T3,R0,V1
BEQ	R0,R0,70013658
SW	T3,000C (V0)
SW	V1,000C (V0)
SW	R0,0000 (A2)
LW	T4,0008 (A3)
ADDIU	A1,R0,0003
LW	A0,000C (T4)
LW	T9,0008 (A0)
JALR	RA,T9
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70013690
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
LW	T6,0008 (A1)
BEQL	T6,R0,700136FC
LW	RA,0014 (SP)
JAL	7000F0D0
SW	A1,001C (SP)
LW	A3,001C (SP)
BEQ	V0,R0,700136F8
OR	A2,V0,R0
LW	T7,0018 (SP)
LW	T9,0008 (A3)
ADDIU	T2,R0,000F
LW	T8,001C (T7)
LW	T0,00D8 (T9)
SH	T2,0008 (V0)
SW	R0,0000 (V0)
ADDU	T1,T8,T0
SW	T1,0004 (V0)
LW	T3,0008 (A3)
ADDIU	A1,R0,0003
LW	A0,000C (T3)
LW	T9,0008 (A0)
JALR	RA,T9
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70013710
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LW	A2,0008 (A1)
OR	T0,A0,R0
OR	A3,A1,R0
BEQL	A2,R0,700137B4
LW	RA,0014 (SP)
LW	T6,00D8 (A2)
BEQL	T6,R0,7001379C
OR	A0,T0,R0
SW	A1,001C (SP)
JAL	7000F0D0
SW	A0,0018 (SP)
LW	A3,001C (SP)
LW	T0,0018 (SP)
BEQ	V0,R0,700137B0
OR	A2,V0,R0
LW	T8,0008 (A3)
LW	T7,001C (T0)
ADDIU	A1,R0,0003
LW	T9,00D8 (T8)
SH	R0,0008 (V0)
ADDU	T1,T7,T9
SW	T1,0004 (V0)
LW	T2,0008 (A3)
SW	T2,000C (V0)
LW	T3,0008 (A3)
LW	A0,000C (T3)
SW	A3,001C (SP)
LW	T9,0008 (A0)
JALR	RA,T9
NOP
BEQ	R0,R0,700137AC
LW	A3,001C (SP)
OR	A0,T0,R0
OR	A1,A2,R0
JAL	7000F020
SW	A3,001C (SP)
LW	A3,001C (SP)
SW	R0,0008 (A3)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700137C0
LUI	AT,3F80
MTC1	AT,F2
BLTZ	A0,700137DC
LUI	AT,8003
LUI	AT,8003
BEQ	R0,R0,700137E4
LWC1	F0,96E0 (AT)
LWC1	F0,96E4 (AT)
SUBU	A0,R0,A0
BEQ	A0,R0,70013808
ANDI	T6,A0,0001
BEQ	T6,R0,700137FC
SRA	T7,A0,0x1
MUL.S	F2,F2,F0
NOP
MUL.S	F0,F0,F0
BNE	T7,R0,700137E8
OR	A0,T7,R0
JR	RA
MOV.S	F0,F2

70013810	14410	copy word from hardware A0 to rdram A1; returns V0=0 if okay
	accepts: A0=hardware address, A1=p->target
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)
SW	A1,002C (SP)
JAL	7001D760
SW	S0,0018 (SP)
LW	A0,0028 (SP)	;A0= A0 f/caller
JAL	70017BE0	;copies word at uncached hardware address A0 to A1
LW	A1,002C (SP)	;A1= A1 f/caller
JAL	7001D7A4
OR	S0,V0,R0	;S0=V0: error flag
LW	RA,001C (SP)
OR	V0,S0,R0	;V0=S0: error flag
LW	S0,0018 (SP)
JR	RA
ADDIU	SP,SP,0028

70013850	14450	V0= memcpy(A0,A1,A2)
	accepts: A0=p->target, A1=p->source, A2=length
OR	V0,A0,R0
BEQ	A2,R0,70013874
OR	V1,A1,R0
LBU	T6,0000 (V1)
ADDIU	A2,A2,FFFF
ADDIU	V0,V0,0001
ADDIU	V1,V1,0001
BNE	A2,R0,7001385C
SB	T6,FFFF (V0)
JR	RA
OR	V0,A0,R0

7001387C	1447C	V0= strlen(A0)
	accepts: A0=p->string
LBU	T6,0000 (A0)
OR	V1,A0,R0
BEQ	T6,R0,7001389C	;return if NULL terminator found
NOP
//7001388C:
LBU	T7,0001 (V1)
ADDIU	V1,V1,0001
BNEL	T7,R0,70013890	;loop until NULL terminator found
LBU	T7,0001 (V1)
//7001389C:
JR	RA
SUBU	V0,V1,A0	;V0= str.final - str.start

700138A4	144A4	V0= strchr(A0,A1)
	accepts: A0=p->string, A1=char
LBU	V1,0000 (A0)
ANDI	T6,A1,00FF
ANDI	V0,A1,00FF
BEQL	T6,V1,700138DC
OR	V0,A0,R0
BNEL	V1,R0,700138CC
LBU	V1,0001 (A0)
JR	RA
OR	V0,R0,R0
LBU	V1,0001 (A0)
ADDIU	A0,A0,0001
BNE	V0,V1,700138B8
NOP
OR	V0,A0,R0
JR	RA
NOP

700138F0
ADDIU	SP,SP,FFE8
SW	A1,0020 (SP)
SW	RA,0014 (SP)
ANDI	T6,A1,00FF
SLTI	AT,T6,0026
OR	A1,T6,R0
SW	R0,000C (S0)
SW	R0,0010 (S0)
SW	R0,0014 (S0)
SW	R0,0018 (S0)
SW	R0,001C (S0)
SW	R0,0020 (S0)
BNE	AT,R0,7001394C
OR	V1,T6,R0
ADDIU	T7,T6,FFBB
SLTIU	AT,T7,0034
BEQ	AT,R0,70013F38
SLL	T7,T7,0x2
LUI	AT,8003
ADDU	AT,AT,T7
LW	T7,9714 (AT)	;T7=80029714+offset: p->handler function
JR	T7
NOP
ADDIU	AT,R0,0025
BEQL	V1,AT,70013F1C
LW	T8,000C (S0)
BEQ	R0,R0,70013F3C
LW	T6,000C (S0)
LW	T8,0000 (A2)
ADDIU	AT,R0,FFFC
ADDIU	T9,T8,0003
AND	T6,T9,AT
ADDIU	T7,T6,0004
SW	T7,0000 (A2)
LW	T6,000C (S0)
LW	T9,FFFC (T7)
ADDU	T7,A3,T6
SB	T9,0000 (T7)
LW	T8,000C (S0)
ADDIU	T6,T8,0001
BEQ	R0,R0,70013F50
SW	T6,000C (S0)
LBU	V0,0034 (S0)
ADDIU	AT,R0,006C
BNEL	V0,AT,700139D8
ADDIU	AT,R0,004C
LW	T9,0000 (A2)
ADDIU	AT,R0,FFFC
ADDIU	T7,T9,0003
AND	T8,T7,AT
ADDIU	T6,T8,0004
SW	T6,0000 (A2)
LW	T7,FFFC (T6)
SRA	T8,T7,0x1F
SW	T8,0000 (S0)
BEQ	R0,R0,70013A34
SW	T7,0004 (S0)
ADDIU	AT,R0,004C
BNEL	V0,AT,70013A10
LW	T7,0000 (A2)
LW	T6,0000 (A2)
ADDIU	AT,R0,FFF8
ADDIU	T7,T6,0007
AND	T8,T7,AT
ADDIU	T9,T8,0008
SW	T9,0000 (A2)
LW	T8,FFF8 (T9)
LW	T9,FFFC (T9)
SW	T8,0000 (S0)
BEQ	R0,R0,70013A34
SW	T9,0004 (S0)
LW	T7,0000 (A2)
ADDIU	AT,R0,FFFC
ADDIU	T6,T7,0003
AND	T8,T6,AT
ADDIU	T9,T8,0004
SW	T9,0000 (A2)
LW	T6,FFFC (T9)
SRA	T8,T6,0x1F
SW	T8,0000 (S0)
SW	T6,0004 (S0)
LBU	T7,0034 (S0)
ADDIU	AT,R0,0068
BNEL	T7,AT,70013A60
LW	T6,0000 (S0)
LW	T7,0004 (S0)
SLL	T9,T7,0x10
SRA	T6,T9,0x10
SRA	T8,T6,0x1F
SW	T8,0000 (S0)
SW	T6,0004 (S0)
LW	T6,0000 (S0)
BGTZL	T6,70013A9C
LW	V0,0030 (S0)
BLTZL	T6,70013A7C
LW	T9,000C (S0)
BEQ	R0,R0,70013A9C
LW	V0,0030 (S0)
LW	T9,000C (S0)
ADDIU	T8,R0,002D
ADDU	T6,A3,T9
SB	T8,0000 (T6)
LW	T7,000C (S0)
ADDIU	T9,T7,0001
BEQ	R0,R0,70013AEC
SW	T9,000C (S0)
LW	V0,0030 (S0)
ANDI	T8,V0,0002
BEQ	T8,R0,70013AC8
ANDI	T6,V0,0001
LW	T7,000C (S0)
ADDIU	T6,R0,002B
ADDU	T9,A3,T7
SB	T6,0000 (T9)
LW	T8,000C (S0)
ADDIU	T7,T8,0001
BEQ	R0,R0,70013AEC
SW	T7,000C (S0)
BEQL	T6,R0,70013AF0
LW	T9,000C (S0)
LW	T8,000C (S0)
ADDIU	T9,R0,0020
ADDU	T7,A3,T8
SB	T9,0000 (T7)
LW	T6,000C (S0)
ADDIU	T8,T6,0001
SW	T8,000C (S0)
LW	T9,000C (S0)
OR	A0,S0,R0
ADDU	T7,T9,A3
JAL	7001D7D0
SW	T7,0008 (S0)
BEQ	R0,R0,70013F54
LW	RA,0014 (SP)
LBU	V0,0034 (S0)
ADDIU	AT,R0,006C
BNEL	V0,AT,70013B48
ADDIU	AT,R0,004C
LW	T6,0000 (A2)
ADDIU	AT,R0,FFFC
ADDIU	T8,T6,0003
AND	T9,T8,AT
ADDIU	T7,T9,0004
SW	T7,0000 (A2)
LW	T8,FFFC (T7)
SRA	T6,T8,0x1F
SW	T6,0000 (S0)
BEQ	R0,R0,70013BA4
SW	T8,0004 (S0)
ADDIU	AT,R0,004C
BNEL	V0,AT,70013B80
LW	T6,0000 (A2)
LW	T9,0000 (A2)
ADDIU	AT,R0,FFF8
ADDIU	T8,T9,0007
AND	T6,T8,AT
ADDIU	T7,T6,0008
SW	T7,0000 (A2)
LW	T9,FFFC (T7)
LW	T8,FFF8 (T7)
SW	T9,0004 (S0)
BEQ	R0,R0,70013BA4
SW	T8,0000 (S0)
LW	T6,0000 (A2)
ADDIU	AT,R0,FFFC
ADDIU	T7,T6,0003
AND	T8,T7,AT
ADDIU	T9,T8,0004
SW	T9,0000 (A2)
LW	T7,FFFC (T9)
SRA	T8,T7,0x1F
SW	T8,0000 (S0)
SW	T7,0004 (S0)
LBU	V0,0034 (S0)
ADDIU	AT,R0,0068
BNE	V0,AT,70013BCC
NOP
LW	T7,0004 (S0)
ADDIU	T6,R0,0000
SW	T6,0000 (S0)
ANDI	T9,T7,FFFF
BEQ	R0,R0,70013BE4
SW	T9,0004 (S0)
BNEL	V0,R0,70013BE8
LW	T7,0030 (S0)
LW	T9,0004 (S0)
ADDIU	T8,R0,0000
SW	T8,0000 (S0)
SW	T9,0004 (S0)
LW	T7,0030 (S0)
ANDI	T6,T7,0008
BEQL	T6,R0,70013C40
LW	T8,000C (S0)
LW	T9,000C (S0)
ADDIU	T8,R0,0030
ADDIU	AT,R0,0078
ADDU	T7,A3,T9
SB	T8,0000 (T7)
LW	T6,000C (S0)
ADDIU	T9,T6,0001
BEQ	V1,AT,70013C24
SW	T9,000C (S0)
ADDIU	AT,R0,0058
BNEL	V1,AT,70013C40
LW	T8,000C (S0)
LW	T8,000C (S0)
ADDU	T7,A3,T8
SB	A1,0000 (T7)
LW	T6,000C (S0)
ADDIU	T9,T6,0001
SW	T9,000C (S0)
LW	T8,000C (S0)
OR	A0,S0,R0
ADDU	T7,T8,A3
JAL	7001D7D0
SW	T7,0008 (S0)
BEQ	R0,R0,70013F54
LW	RA,0014 (SP)
LBU	T6,0034 (S0)
ADDIU	AT,R0,004C
BNEL	T6,AT,70013CC8
LW	V0,0000 (A2)
LW	V0,0000 (A2)
ANDI	T9,V0,0001
BEQ	T9,R0,70013C88
OR	V1,V0,R0
ADDIU	T8,V1,0007
SW	T8,0000 (A2)
BEQ	R0,R0,70013CB8
ADDIU	V0,T8,FFEA
ANDI	T7,V1,0002
BEQ	T7,R0,70013CA4
ADDIU	T9,V0,0007
ADDIU	T6,V1,000A
SW	T6,0000 (A2)
BEQ	R0,R0,70013CB4
ADDIU	A0,T6,FFD8
ADDIU	AT,R0,FFF8
AND	T8,T9,AT
ADDIU	A0,T8,0008
SW	A0,0000 (A2)
OR	V0,A0,R0
LDC1	F4,FFF8 (V0)
BEQ	R0,R0,70013D1C
SDC1	F4,0000 (S0)
LW	V0,0000 (A2)
ANDI	T6,V0,0001
BEQ	T6,R0,70013CE4
OR	V1,V0,R0
ADDIU	T9,V1,0007
SW	T9,0000 (A2)
BEQ	R0,R0,70013D14
ADDIU	V0,T9,FFEA
ANDI	T8,V1,0002
BEQ	T8,R0,70013D00
ADDIU	T6,V0,0007
ADDIU	T7,V1,000A
SW	T7,0000 (A2)
BEQ	R0,R0,70013D10
ADDIU	A0,T7,FFD8
ADDIU	AT,R0,FFF8
AND	T9,T6,AT
ADDIU	A0,T9,0008
SW	A0,0000 (A2)
OR	V0,A0,R0
LDC1	F6,FFF8 (V0)
SDC1	F6,0000 (S0)
LHU	T7,0000 (S0)
ANDI	T6,T7,8000
BEQL	T6,R0,70013D50
LW	V0,0030 (S0)
LW	T8,000C (S0)
ADDIU	T9,R0,002D
ADDU	T7,A3,T8
SB	T9,0000 (T7)
LW	T6,000C (S0)
ADDIU	T8,T6,0001
BEQ	R0,R0,70013DA0
SW	T8,000C (S0)
LW	V0,0030 (S0)
ANDI	T9,V0,0002
BEQ	T9,R0,70013D7C
ANDI	T7,V0,0001
LW	T6,000C (S0)
ADDIU	T7,R0,002B
ADDU	T8,A3,T6
SB	T7,0000 (T8)
LW	T9,000C (S0)
ADDIU	T6,T9,0001
BEQ	R0,R0,70013DA0
SW	T6,000C (S0)
BEQL	T7,R0,70013DA4
LW	T8,000C (S0)
LW	T9,000C (S0)
ADDIU	T8,R0,0020
ADDU	T6,A3,T9
SB	T8,0000 (T6)
LW	T7,000C (S0)
ADDIU	T9,T7,0001
SW	T9,000C (S0)
LW	T8,000C (S0)
OR	A0,S0,R0
ADDU	T6,T8,A3
JAL	7001DFE0
SW	T6,0008 (S0)
BEQ	R0,R0,70013F54
LW	RA,0014 (SP)
LBU	V0,0034 (S0)
ADDIU	AT,R0,0068
BNEL	V0,AT,70013DF8
ADDIU	AT,R0,006C
LW	T7,0000 (A2)
ADDIU	AT,R0,FFFC
ADDIU	T9,T7,0003
AND	T8,T9,AT
ADDIU	T6,T8,0004
SW	T6,0000 (A2)
LW	T9,FFFC (T6)
LW	T7,002C (S0)
BEQ	R0,R0,70013F50
SH	T7,0000 (T9)
ADDIU	AT,R0,006C
BNEL	V0,AT,70013E2C
ADDIU	AT,R0,004C
LW	T8,0000 (A2)
ADDIU	AT,R0,FFFC
ADDIU	T6,T8,0003
AND	T7,T6,AT
ADDIU	T9,T7,0004
SW	T9,0000 (A2)
LW	T6,FFFC (T9)
LW	T8,002C (S0)
BEQ	R0,R0,70013F50
SW	T8,0000 (T6)
ADDIU	AT,R0,004C
BNEL	V0,AT,70013E68
LW	T7,0000 (A2)
LW	T7,0000 (A2)
ADDIU	AT,R0,FFFC
ADDIU	T9,T7,0003
AND	T8,T9,AT
ADDIU	T6,T8,0004
SW	T6,0000 (A2)
LW	T6,FFFC (T6)
LW	T7,002C (S0)
ADDIU	T8,R0,0000
SW	T8,0000 (T6)
BEQ	R0,R0,70013F50
SW	T7,0004 (T6)
LW	T7,0000 (A2)
ADDIU	AT,R0,FFFC
ADDIU	T8,T7,0003
AND	T9,T8,AT
ADDIU	T6,T9,0004
SW	T6,0000 (A2)
LW	T8,FFFC (T6)
LW	T7,002C (S0)
BEQ	R0,R0,70013F50
SW	T7,0000 (T8)
LW	T9,0000 (A2)
ADDIU	AT,R0,FFFC
OR	A0,S0,R0
ADDIU	T6,T9,0003
AND	T7,T6,AT
ADDIU	T8,T7,0004
SW	T8,0000 (A2)
LW	T6,FFFC (T8)
LW	T7,000C (S0)
ADDIU	A1,R0,0078
SRA	T8,T6,0x1F
SW	T6,0004 (S0)
ADDU	T6,T7,A3
SW	T8,0000 (S0)
JAL	7001D7D0
SW	T6,0008 (S0)
BEQ	R0,R0,70013F54
LW	RA,0014 (SP)
LW	T8,0000 (A2)
ADDIU	AT,R0,FFFC
ADDIU	T9,T8,0003
AND	T7,T9,AT
ADDIU	T6,T7,0004
SW	T6,0000 (A2)
LW	A0,FFFC (T6)
JAL	7001387C	;V0= strlen(A0)
SW	A0,0008 (S0)
LW	V1,0024 (S0)
SW	V0,0014 (S0)
BLTZ	V1,70013F50
SLT	AT,V1,V0
BEQL	AT,R0,70013F54
LW	RA,0014 (SP)
BEQ	R0,R0,70013F50
SW	V1,0014 (S0)
LW	T8,000C (S0)
ADDIU	T6,R0,0025
ADDU	T9,A3,T8
SB	T6,0000 (T9)
LW	T7,000C (S0)
ADDIU	T8,T7,0001
BEQ	R0,R0,70013F50
SW	T8,000C (S0)
LW	T6,000C (S0)
ADDU	T9,A3,T6
SB	A1,0000 (T9)
LW	T7,000C (S0)
ADDIU	T8,T7,0001
SW	T8,000C (S0)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70013F60	14B60	c-style string parser
	accepts: A0=p->copy function, A1=p->resultant string, A2=p->string, A3=p->arguments
ADDIU	SP,SP,FF20
SW	S7,0034 (SP)
SW	S6,0030 (SP)
SW	S5,002C (SP)
SW	S8,0038 (SP)
SW	S4,0028 (SP)
SW	S3,0024 (SP)
SW	A3,00EC (SP)
LUI	S5,8002
LUI	S6,8003
LUI	S7,8002
OR	A3,A2,R0
OR	S3,A1,R0	;S3=A1: p->resultant string
OR	S4,A0,R0	;S4=A0: p->function
SW	RA,003C (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
SW	A2,00E8 (SP)
SW	R0,00D4 (SP)
ADDIU	S7,S7,7740
ADDIU	S6,S6,96F4
ADDIU	S5,S5,7764
ADDIU	S8,R0,000A
LBU	S0,0000 (A3)
ADDIU	S2,A3,0001
ADDIU	V1,R0,0025
BLEZ	S0,70013FF4
OR	A0,S3,R0
BNEL	V1,S0,70013FE8
LBU	S0,0000 (S2)
BEQ	R0,R0,70013FF4
ADDIU	S2,S2,FFFF
LBU	S0,0000 (S2)
ADDIU	S2,S2,0001
BGTZ	S0,70013FD4
NOP
SUBU	V0,S2,A3
BLEZ	V0,7001402C
OR	A1,A3,R0	;A1=A3: p->string
OR	S1,V0,R0
JALR	RA,S4		;execute function of format A0=p->target, A1=p->string, A2=length
OR	A2,V0,R0	;A2=V0: length
BEQ	V0,R0,70014024
OR	S3,V0,R0
LW	T6,00D4 (SP)
ADDU	T7,T6,S1
BEQ	R0,R0,7001402C
SW	T7,00D4 (SP)
BEQ	R0,R0,70014574
LW	V0,00D4 (SP)
BNE	S0,R0,7001403C
ADDIU	S2,S2,0001
BEQ	R0,R0,70014574
LW	V0,00D4 (SP)
SW	R0,00D8 (SP)
LBU	A1,0000 (S2)
JAL	700138A4	;V0= strchr(A0,A1)
OR	A0,S6,R0
BEQ	V0,R0,7001408C
OR	S0,V0,R0
SUBU	T9,S0,S6
SLL	T6,T9,0x2
LUI	T7,8003
ADDU	T7,T7,T6
LW	T7,96FC (T7)
LW	T8,00D8 (SP)
ADDIU	S2,S2,0001
OR	A0,S6,R0
OR	T9,T8,T7
SW	T9,00D8 (SP)
JAL	700138A4	;V0= strchr(A0,A1)
LBU	A1,0000 (S2)
BNE	V0,R0,70014054
OR	S0,V0,R0
LBU	T6,0000 (S2)
ADDIU	V0,R0,002A
LW	T8,00EC (SP)
BNE	V0,T6,700140E0
LUI	A0,8003
ADDIU	T7,T8,0003
ADDIU	AT,R0,FFFC
AND	T9,T7,AT
ADDIU	T6,T9,0004
SW	T6,00EC (SP)
LW	T8,0000 (T9)
ADDIU	S2,S2,0001
BGEZ	T8,700140D8
SW	T8,00D0 (SP)
LW	T6,00D8 (SP)
SUBU	T7,R0,T8
SW	T7,00D0 (SP)
ORI	T9,T6,0004
SW	T9,00D8 (SP)
BEQ	R0,R0,7001413C
LBU	A1,0000 (S2)
SW	R0,00D0 (SP)
LBU	A1,0000 (S2)
SLTI	AT,A1,0030
BNE	AT,R0,7001413C
SLTI	AT,A1,003A
BEQL	AT,R0,70014140
ADDIU	AT,R0,002E
LW	T8,00D0 (SP)
SLTI	AT,T8,03E7
BEQL	AT,R0,70014124
LBU	A1,0001 (S2)
MULTU	T8,S8
MFLO	T7
ADDU	T6,A1,T7
ADDIU	T9,T6,FFD0
SW	T9,00D0 (SP)
LBU	A1,0001 (S2)
ADDIU	S2,S2,0001
SLTI	AT,A1,0030
BNE	AT,R0,7001413C
SLTI	AT,A1,003A
BNEL	AT,R0,70014100
LW	T8,00D0 (SP)
ADDIU	AT,R0,002E
BEQ	A1,AT,70014154
ADDIU	T8,R0,FFFF
SW	T8,00CC (SP)
BEQ	R0,R0,700141E8
LBU	A1,0000 (S2)
LBU	T7,0001 (S2)
LW	T6,00EC (SP)
ADDIU	S2,S2,0001
BNE	V0,T7,7001418C
ADDIU	T9,T6,0003
ADDIU	AT,R0,FFFC
AND	T8,T9,AT
ADDIU	T7,T8,0004
SW	T7,00EC (SP)
LW	T6,0000 (T8)
ADDIU	S2,S2,0001
SW	T6,00CC (SP)
BEQ	R0,R0,700141E8
LBU	A1,0000 (S2)
SW	R0,00CC (SP)
LBU	A1,0000 (S2)
SLTI	AT,A1,0030
BNE	AT,R0,700141E8
SLTI	AT,A1,003A
BEQ	AT,R0,700141E8
NOP
LW	T9,00CC (SP)
SLTI	AT,T9,03E7
BEQL	AT,R0,700141D0
LBU	A1,0001 (S2)
MULTU	T9,S8
MFLO	T7
ADDU	T8,A1,T7
ADDIU	T6,T8,FFD0
SW	T6,00CC (SP)
LBU	A1,0001 (S2)
ADDIU	S2,S2,0001
SLTI	AT,A1,0030
BNE	AT,R0,700141E8
SLTI	AT,A1,003A
BNEL	AT,R0,700141AC
LW	T9,00CC (SP)
JAL	700138A4	;V0= strchr(A0,A1)
ADDIU	A0,A0,96F0
BEQ	V0,R0,70014208
ADDIU	S0,SP,00A8
LBU	T9,0000 (S2)
ADDIU	S2,S2,0001
BEQ	R0,R0,7001420C
SB	T9,00DC (SP)
SB	R0,00DC (SP)
LBU	T7,00DC (SP)
ADDIU	V0,R0,006C
ADDIU	A2,SP,00EC
BNE	V0,T7,70014238
ADDIU	A3,SP,007C
LBU	T8,0000 (S2)
ADDIU	T6,R0,004C
BNE	V0,T8,70014238
NOP
SB	T6,00DC (SP)
ADDIU	S2,S2,0001
JAL	700138F0
LBU	A1,0000 (S2)
LW	T9,00D0 (SP)
LW	T7,00B4 (SP)
LW	T6,00B8 (SP)
SUBU	T8,T9,T7
LW	T7,00BC (SP)
SUBU	T9,T8,T6
LW	T6,00C0 (SP)
SUBU	T8,T9,T7
LW	T7,00C4 (SP)
SUBU	T9,T8,T6
LW	T6,00C8 (SP)
SUBU	T8,T9,T7
LW	T7,00D8 (SP)
SUBU	T9,T8,T6
SW	T9,00D0 (SP)
ANDI	T8,T7,0004
BNE	T8,R0,700142EC
SLT	T6,R0,T9
BEQL	T6,R0,700142F0
LW	T9,00B4 (SP)
BEQ	T6,R0,700142EC
OR	S1,T9,R0
SLTIU	AT,S1,0021
BNE	AT,R0,700142AC
OR	S0,S1,R0
BEQ	R0,R0,700142AC
ADDIU	S0,R0,0020
BLEZ	S0,700142E0
OR	A0,S3,R0
OR	A1,S7,R0
JALR	RA,S4
OR	A2,S0,R0
BEQ	V0,R0,700142D8
OR	S3,V0,R0
LW	T7,00D4 (SP)
ADDU	T8,T7,S0
BEQ	R0,R0,700142E0
SW	T8,00D4 (SP)
BEQ	R0,R0,70014574
LW	V0,00D4 (SP)
SUBU	S1,S1,S0
BGTZL	S1,7001429C
SLTIU	AT,S1,0021
LW	T9,00B4 (SP)
OR	A0,S3,R0
ADDIU	A1,SP,007C
BLEZL	T9,70014330
LW	T9,00B8 (SP)
JALR	RA,S4
OR	A2,T9,R0
BEQ	V0,R0,70014324
OR	S3,V0,R0
LW	T6,00D4 (SP)
LW	T7,00B4 (SP)
ADDU	T8,T6,T7
BEQ	R0,R0,7001432C
SW	T8,00D4 (SP)
BEQ	R0,R0,70014574
LW	V0,00D4 (SP)
LW	T9,00B8 (SP)
SLT	T6,R0,T9
BEQL	T6,R0,7001439C
LW	T9,00BC (SP)
BEQ	T6,R0,70014398
OR	S1,T9,R0
SLTIU	AT,S1,0021
BNE	AT,R0,70014358
OR	S0,S1,R0
BEQ	R0,R0,70014358
ADDIU	S0,R0,0020
BLEZ	S0,7001438C
OR	A0,S3,R0
OR	A1,S5,R0
JALR	RA,S4
OR	A2,S0,R0
BEQ	V0,R0,70014384
OR	S3,V0,R0
LW	T7,00D4 (SP)
ADDU	T8,T7,S0
BEQ	R0,R0,7001438C
SW	T8,00D4 (SP)
BEQ	R0,R0,70014574
LW	V0,00D4 (SP)
SUBU	S1,S1,S0
BGTZL	S1,70014348
SLTIU	AT,S1,0021
LW	T9,00BC (SP)
OR	A0,S3,R0
LW	A1,00B0 (SP)
BLEZL	T9,700143DC
LW	T9,00C0 (SP)
JALR	RA,S4
OR	A2,T9,R0
BEQ	V0,R0,700143D0
OR	S3,V0,R0
LW	T6,00D4 (SP)
LW	T7,00BC (SP)
ADDU	T8,T6,T7
BEQ	R0,R0,700143D8
SW	T8,00D4 (SP)
BEQ	R0,R0,70014574
LW	V0,00D4 (SP)
LW	T9,00C0 (SP)
SLT	T6,R0,T9
BEQL	T6,R0,70014448
LW	T9,00C4 (SP)
BEQ	T6,R0,70014444
OR	S1,T9,R0
SLTIU	AT,S1,0021
BNE	AT,R0,70014404
OR	S0,S1,R0
BEQ	R0,R0,70014404
ADDIU	S0,R0,0020
BLEZ	S0,70014438
OR	A0,S3,R0
OR	A1,S5,R0
JALR	RA,S4
OR	A2,S0,R0
BEQ	V0,R0,70014430
OR	S3,V0,R0
LW	T7,00D4 (SP)
ADDU	T8,T7,S0
BEQ	R0,R0,70014438
SW	T8,00D4 (SP)
BEQ	R0,R0,70014574
LW	V0,00D4 (SP)
SUBU	S1,S1,S0
BGTZL	S1,700143F4
SLTIU	AT,S1,0021
LW	T9,00C4 (SP)
OR	A0,S3,R0
LW	T6,00B0 (SP)
BLEZ	T9,70014488
LW	T7,00BC (SP)
ADDU	A1,T6,T7
JALR	RA,S4
OR	A2,T9,R0
BEQ	V0,R0,70014480
OR	S3,V0,R0
LW	T8,00D4 (SP)
LW	T6,00C4 (SP)
ADDU	T7,T8,T6
BEQ	R0,R0,70014488
SW	T7,00D4 (SP)
BEQ	R0,R0,70014574
LW	V0,00D4 (SP)
LW	T9,00C8 (SP)
SLT	T8,R0,T9
BEQL	T8,R0,700144F8
LW	T9,00D8 (SP)
BEQ	T8,R0,700144F4
OR	S1,T9,R0
SLTIU	AT,S1,0021
BNE	AT,R0,700144B4
OR	S0,S1,R0
BEQ	R0,R0,700144B4
ADDIU	S0,R0,0020
BLEZ	S0,700144E8
OR	A0,S3,R0
OR	A1,S5,R0
JALR	RA,S4
OR	A2,S0,R0
BEQ	V0,R0,700144E0
OR	S3,V0,R0
LW	T6,00D4 (SP)
ADDU	T7,T6,S0
BEQ	R0,R0,700144E8
SW	T7,00D4 (SP)
BEQ	R0,R0,70014574
LW	V0,00D4 (SP)
SUBU	S1,S1,S0
BGTZL	S1,700144A4
SLTIU	AT,S1,0021
LW	T9,00D8 (SP)
LW	T6,00D0 (SP)
ANDI	T8,T9,0004
BEQ	T8,R0,7001456C
SLT	T7,R0,T6
BEQ	T7,R0,7001456C
NOP
BEQ	T7,R0,7001456C
OR	S1,T6,R0
SLTIU	AT,S1,0021
BNE	AT,R0,7001452C
OR	S0,S1,R0
BEQ	R0,R0,7001452C
ADDIU	S0,R0,0020
BLEZ	S0,70014560
OR	A0,S3,R0
OR	A1,S7,R0
JALR	RA,S4
OR	A2,S0,R0
BEQ	V0,R0,70014558
OR	S3,V0,R0
LW	T9,00D4 (SP)
ADDU	T8,T9,S0
BEQ	R0,R0,70014560
SW	T8,00D4 (SP)
BEQ	R0,R0,70014574
LW	V0,00D4 (SP)
SUBU	S1,S1,S0
BGTZL	S1,7001451C
SLTIU	AT,S1,0021
BEQ	R0,R0,70013FC0
ADDIU	A3,S2,0001
LW	RA,003C (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
LW	S5,002C (SP)
LW	S6,0030 (SP)
LW	S7,0034 (SP)
LW	S8,0038 (SP)
JR	RA
ADDIU	SP,SP,00E0

700145B0
ADDIU	SP,SP,FFD0
LUI	T6,8002
LW	T6,7790 (T6)
SW	RA,001C (SP)
SW	A0,0030 (SP)
SW	A1,0034 (SP)
SW	A2,0038 (SP)
BNE	T6,R0,70014728
SW	A3,003C (SP)
LW	A0,0034 (SP)
LW	A1,0038 (SP)
JAL	7000D6D0
LW	A2,003C (SP)
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,7C98	;A1=80067C98
ADDIU	A0,A0,7C80	;A0=80067C80
JAL	7000D6D0
ADDIU	A2,R0,0001	;A2=1
LUI	T7,8003
LW	T7,82E0 (T7)
BNE	T7,R0,70014614
NOP
JAL	7001D710
NOP
LUI	A1,8006
LUI	A2,2222
ORI	A2,A2,2222	;A2= 22222222
ADDIU	A1,A1,7C80	;A1= 80067C80
JAL	7000DC50	;set interrupt table entry #A0 with p->data A1 and value A2
ADDIU	A0,R0,0008	;A0= entry 8
ADDIU	T8,R0,FFFF
SW	T8,0028 (SP)
JAL	70018A30
OR	A0,R0,R0
SW	V0,0024 (SP)
LW	T9,0024 (SP)
LW	T0,0030 (SP)
SLT	AT,T9,T0
BEQ	AT,R0,70014664
NOP
SW	T9,0028 (SP)
OR	A0,R0,R0	;A0=NULL
JAL	7000D800	;change priority to A1 for thread A0 or current thread if NULL
OR	A1,T0,R0	;A1=T0: priority
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
NOP
LUI	AT,8002
LW	T3,0034 (SP)
LUI	T2,8006
LUI	T4,8006
ADDIU	T1,R0,0001
ADDIU	T2,T2,6AD0
ADDIU	T4,T4,7C80
SW	T1,7790 (AT)
SW	T2,7794 (AT)
SW	T4,779C (AT)
LUI	T8,8006
SW	T3,7798 (AT)
LW	T0,0030 (SP)
LUI	AT,8002
LUI	T5,8007
LUI	T6,7001
LUI	T7,7002
ADDIU	T8,T8,6C80
ADDIU	T5,T5,8FE8
ADDIU	T6,T6,CF90
ADDIU	T7,T7,E530
ADDIU	T9,T8,1000
LUI	A2,7002
LUI	A3,8002
SW	V0,002C (SP)
SW	T5,77A0 (AT)
SW	T6,77A4 (AT)
SW	T7,77A8 (AT)
ADDIU	A3,A3,7790	;A3= 80027790: passed as A0 to function
ADDIU	A2,A2,E610	;A2= 7001E610: function
SW	T9,0010 (SP)	;SP+10= 80067C80: thread SP, 0x1000 bytes
OR	A0,T2,R0	;A0=T2: 80066AD0: p->thread
OR	A1,R0,R0
JAL	7000D430	;initialize thread entry at A0 with values
SW	T0,0014 (SP)
LUI	A0,8006
JAL	7000D580	;insert thread and execute if no thread currently running
ADDIU	A0,A0,6AD0
JAL	70018610	;A0->COP0 status
LW	A0,002C (SP)
LW	T1,0028 (SP)
ADDIU	AT,R0,FFFF
BEQ	T1,AT,70014728	;return if priority -1
NOP
OR	A0,R0,R0	;A0=NULL
JAL	7000D800	;change priority to A1 for thread A0 or current thread if NULL
OR	A1,T1,R0	;A1=T1: priority
//70014728:	return
LW	RA,001C (SP)
ADDIU	SP,SP,0030
JR	RA
NOP

70014740	15340	V0= state of device on channel A2, updating controller packet A1
	accepts: A0=, A1=p->controller.packet, A2=slot#
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
SW	A0,0020 (SP)
SW	A1,0024 (SP)
SW	A2,0028 (SP)
JAL	70015E60
SW	R0,001C (SP)
LW	A0,0020 (SP)
JAL	700147F4	;V0=state of controller slot A1
LW	A1,0028 (SP)	;A1= A2 f/caller: slot#
JAL	70015EA4
SW	V0,001C (SP)
LW	T6,001C (SP)	;T6=state of slot A2
BEQ	T6,R0,70014784
NOP
BEQ	R0,R0,700147E4	;return if error
OR	V0,T6,R0
//70014784:
LW	T7,0020 (SP)
LW	T8,0024 (SP)	;T8= A1 f/caller: p->controller.packet
SW	T7,0004 (T8)	;A1+4 = A0 f/caller
LW	T0,0024 (SP)	;T0= A1 f/caller: p->controller.packet
LW	T9,0028 (SP)
SW	T9,0008 (T0)	;A1+8 = slot#
LW	T1,0024 (SP)	;T1= A1 f/caller: p->controller.packet
SW	R0,0000 (T1)	;A1+0 = 0
JAL	7001F034	;tests validity of mempak file
LW	A0,0024 (SP)	;A0= A1 f/caller: p->controller.packet
SW	V0,001C (SP)
LW	T2,001C (SP)
BEQ	T2,R0,700147C4
NOP
BEQ	R0,R0,700147E4	;return if mempak unreadable or not found
OR	V0,T2,R0
//700147C4:	should have returned V0= state of mempak
JAL	7000B728	;removed: V0=3 (output enabled | slot filled)
LW	A0,0024 (SP)	;A0= A1 f/caller: p->controller.packet
LW	T3,0024 (SP)
SW	V0,001C (SP)
LW	T4,0000 (T3)
ORI	T5,T4,0001
SW	T5,0000 (T3)	;A1+0 |= 1
LW	V0,001C (SP)	;V0= state of slot A2
//700147E4:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

700147F4	153F4	V0=state of controller slot A1
	accepts: A0=, A1=channel#
ADDIU	SP,SP,FFC8
SW	RA,0014 (SP)
SW	A0,0038 (SP)
SW	A1,003C (SP)
SW	R0,0034 (SP)
JAL	70015C40
OR	A0,R0,R0
LUI	A1,8006
ADDIU	A1,A1,7D70
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
ADDIU	A0,R0,0001
SW	V0,0034 (SP)
LW	A0,0038 (SP)
ADDIU	A1,SP,0030
JAL	7000DDD0
ADDIU	A2,R0,0001
LUI	A1,8006
ADDIU	A1,A1,7D70
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
OR	A0,R0,R0
SW	V0,0034 (SP)
LW	A0,0038 (SP)
ADDIU	A1,SP,0030
JAL	7000DDD0
ADDIU	A2,R0,0001
ADDIU	A0,SP,002F
JAL	70015D3C
ADDIU	A1,SP,001C
LW	T6,003C (SP)
SLL	T7,T6,0x2
ADDU	T8,SP,T7
LBU	T8,001E (T8)
ANDI	T9,T8,0001
BEQ	T9,R0,70014894
NOP
ANDI	T0,T8,0002
BEQ	T0,R0,70014894
NOP
BEQ	R0,R0,700148F0
ADDIU	V0,R0,0002
LW	T1,003C (SP)
ADDIU	T3,SP,001C
SLL	T2,T1,0x2
ADDU	T4,T2,T3
LBU	T5,0003 (T4)
BNE	T5,R0,700148C0
NOP
LBU	T6,0002 (T4)
ANDI	T7,T6,0001
BNE	T7,R0,700148C8
NOP
BEQ	R0,R0,700148F0
ADDIU	V0,R0,0001
LW	T9,003C (SP)
SLL	T8,T9,0x2
ADDU	T0,SP,T8
LBU	T0,001E (T0)
ANDI	T1,T0,0004
BEQ	T1,R0,700148EC
NOP
BEQ	R0,R0,700148F0
ADDIU	V0,R0,0004
LW	V0,0034 (SP)
LW	RA,0014 (SP)
ADDIU	SP,SP,0038
JR	RA
NOP

70014900	15500
	accepts: A0=p->thread list, A1=p->presence flags target, A2=p->status list target
ADDIU	SP,SP,FF80
LUI	T6,8002
LW	T6,77B0 (T6)
SW	RA,0024 (SP)
SW	A0,0080 (SP)
SW	A1,0084 (SP)
SW	A2,0088 (SP)
BEQ	T6,R0,7001492C
SW	R0,0078 (SP)
BEQ	R0,R0,70014AE8	;return V0=0: no errors
OR	V0,R0,R0
//7001492C:
ADDIU	T7,R0,0001
LUI	AT,8002
JAL	7000EBB0
SW	T7,77B0 (AT)
LUI	A1,0007
LUI	A2,8002
LUI	A3,8002
SW	V0,0070 (SP)
SW	V1,0074 (SP)
LW	A3,6984 (A3)
LW	A2,6980 (A2)
ORI	A1,A1,A120
JAL	7000EDA8	;(V0,V1) = (A0,A1) * (A2,A3)
ADDIU	A0,R0,0000	;(A0,A1) = 000000000007A120
//70014964:
SW	V0,0030 (SP)
SW	V1,0034 (SP)
LUI	A3,000F
ORI	A3,A3,4240
LW	A1,0034 (SP)
LW	A0,0030 (SP)
JAL	7000ECA8	;(V0,V1) = (A0,A1) / (A2,A3)
ADDIU	A2,R0,0000	;(A2,A3) = 00000000000F4240
//70014984:
LW	T8,0070 (SP)
LW	T9,0074 (SP)
SLTU	AT,V0,T8
BNE	AT,R0,70014A58
SLTU	AT,T8,V0
BNE	AT,R0,700149A8
SLTU	AT,T9,V1
BEQ	AT,R0,70014A58
NOP
//700149A8:
ADDIU	A0,SP,0038
ADDIU	A1,SP,007C
JAL	7000D6D0
ADDIU	A2,R0,0001
LUI	A1,0007
LUI	A2,8002
LUI	A3,8002
LW	A3,6984 (A3)
LW	A2,6980 (A2)
ORI	A1,A1,A120
JAL	7000EDA8	;(V0,V1) = (A0,A1) * (A2,A3)
ADDIU	A0,R0,0000	;(A0,A1) = 0000000000007A120
//700149D8:
SW	V0,0028 (SP)
SW	V1,002C (SP)
LUI	A3,000F
ORI	A3,A3,4240
LW	A1,002C (SP)
LW	A0,0028 (SP)
JAL	7000ECA8	;(V0,V1) = (A0,A1) / (A2,A3)
ADDIU	A2,R0,0000	;(A2,A3) = 00000000000F4240
SW	V0,0030 (SP)
SW	V1,0034 (SP)
//70014A00:
LW	T1,0034 (SP)
LW	T0,0030 (SP)
LW	T2,0070 (SP)
LW	T3,0074 (SP)
ADDIU	T4,R0,0000
ADDIU	T5,R0,0000
ADDIU	T6,SP,0038
ADDIU	T7,SP,007C
SUBU	A2,T0,T2
SLTU	AT,T1,T3
SUBU	A2,A2,AT
SW	T7,001C (SP)
SW	T6,0018 (SP)
SW	T5,0014 (SP)
SW	T4,0010 (SP)
ADDIU	A0,SP,0050
JAL	70010C50
SUBU	A3,T1,T3
ADDIU	A0,SP,0038
ADDIU	A1,SP,007C
JAL	7000DDD0
ADDIU	A2,R0,0001
//70014A58:	write status request to PIF
ADDIU	T8,R0,0004
LUI	AT,8006
SB	T8,7CE1 (AT)	;4->80067CE1: #channels
JAL	70014BC8	;generate PIFram command: request status for #channels at 80067CE1
OR	A0,R0,R0
LUI	A1,8006
ADDIU	A1,A1,7CA0	;A1=80067CA0: PIFram.cmd.buf
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
ADDIU	A0,R0,0001
SW	V0,0078 (SP)
LW	A0,0080 (SP)	;A0= A0 f/caller
ADDIU	A1,SP,007C
JAL	7000DDD0
ADDIU	A2,R0,0001
//70014A90:	read result from PIF
LUI	A1,8006
ADDIU	A1,A1,7CA0	;A1=80067CA0: PIFram.cmd.buf
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
OR	A0,R0,R0
SW	V0,0078 (SP)
LW	A0,0080 (SP)
ADDIU	A1,SP,007C
JAL	7000DDD0
ADDIU	A2,R0,0001
//70014AB4:	retrieve device status list and presence flags
LW	A0,0084 (SP)	;A0= A1 f/caller: p->device presense target
JAL	70014AF8	;return device presence flags in A0, status list in A1 for current PIF status in buffer
LW	A1,0088 (SP)	;A1= A2 f/caller: p->status list target
//70014AC0:	
LUI	AT,8006
JAL	70015E10
SB	R0,7CE0 (AT)	;0->80067CE0
LUI	A0,8006
LUI	A1,8006
ADDIU	A1,A1,7D20	;A1=80067D20
ADDIU	A0,A0,7D08	;A0=80067D08
JAL	7000D6D0
ADDIU	A2,R0,0001	;A2=1
LW	V0,0078 (SP)	;V0=SP+78: SI error codes
//70014AE8:	return
LW	RA,0024 (SP)
ADDIU	SP,SP,0080
JR	RA
NOP

70014AF8	156F8	return device presence flags in A0, status list in A1 for current PIF status in buffer at 80067CA0
	accepts: A0=p->presence flag target, A1=p->status list target
LUI	T7,8006
LBU	T7,7CE1 (T7)	;T7=80067CE1: #channels
ADDIU	SP,SP,FFE8
LUI	T6,8006
ADDIU	T6,T6,7CA0	;T6=80067CA0: PIFram.cmd.buf
SB	R0,0007 (SP)	;init. presence flags
SW	T6,0014 (SP)	;SP+14= PIFram.cmd.buf
BLEZ	T7,70014BB8	;return if no channels
SW	R0,0008 (SP)	;init. count
//70014B1C:
LW	T9,0014 (SP)	;T9= PIFram.cmd.buf
ADDIU	T8,SP,000C	;T8=SP+C: buffer
LWL	AT,0000 (T9)
LWR	AT,0003 (T9)
SW	AT,0000 (T8)
LWL	T1,0004 (T9)
LWR	T1,0007 (T9)
SW	T1,0004 (T8)	;buffer[0:8] = PIFram.cmd.buf[0:8]
LBU	T2,000E (SP)	;T2=buffer[2]
ANDI	T3,T2,00C0
SRA	T4,T3,0x4
SB	T4,0003 (A1)	;A1+3 = error codes: 1 if I/O error | 2 if not present
LBU	T5,0003 (A1)
BNE	T5,R0,70014B8C	;skip if error occurred
NOP
LBU	T6,0011 (SP)	;T6=buffer[5]: device type high
LBU	T0,0010 (SP)	;T0=buffer[4]: device type low
ADDIU	T3,R0,0001
SLL	T7,T6,0x8
OR	T8,T7,T0
SH	T8,0000 (A1)	;A1+0= device type byteswapped
LBU	T9,0012 (SP)	;T9=buffer[6]: slot state
SB	T9,0002 (A1)	;A1+2= slot state
LW	T2,0008 (SP)	;T2=count
LBU	T1,0007 (SP)
SLLV	T4,T3,T2	;T4= 1<<count
OR	T5,T1,T4
SB	T5,0007 (SP)	;set presence flag for channel
//70014B8C:	iterate
LW	T6,0008 (SP)	;count
LUI	T9,8006
LBU	T9,7CE1 (T9)	;T9=80067CE1: #channels
LW	T0,0014 (SP)	;T0= PIFram.cmd.buf
ADDIU	T7,T6,0001
SLT	AT,T7,T9
ADDIU	T8,T0,0008
SW	T8,0014 (SP)	;PIFram.cmd.buf+= 8: next cmd
SW	T7,0008 (SP)	;count+=1
BNE	AT,R0,70014B1C	;loop for each channel
ADDIU	A1,A1,0004	;A1+=4: next
//70014BB8:	return
LBU	T3,0007 (SP)
ADDIU	SP,SP,0018
JR	RA
SB	T3,0000 (A0)	;A0=presence flags

70014BC8	157C8	generate PIFram command: request status for #channels at 80067CE1
ADDIU	SP,SP,FFF0
ANDI	A0,A0,00FF
SW	R0,0000 (SP)
LW	T6,0000 (SP)
LW	T8,0000 (SP)
LUI	AT,8006
SLL	T7,T6,0x2
ADDU	AT,AT,T7
SW	R0,7CA0 (AT)
ADDIU	T9,T8,0001
SLTI	AT,T9,0010
BNE	AT,R0,70014BD4
SW	T9,0000 (SP)
LUI	T9,8006
LBU	T9,7CE1 (T9)
LUI	T1,8006
ADDIU	T0,R0,0001
LUI	AT,8006
ADDIU	T1,T1,7CA0
ADDIU	T2,R0,00FF
ADDIU	T3,R0,0001
ADDIU	T4,R0,0003
ADDIU	T5,R0,00FF
ADDIU	T6,R0,00FF
ADDIU	T7,R0,00FF
ADDIU	T8,R0,00FF
SW	T0,7CDC (AT)
SW	T1,000C (SP)
SB	T2,0004 (SP)
SB	T3,0005 (SP)
SB	T4,0006 (SP)
SB	A0,0007 (SP)
SB	T5,0008 (SP)
SB	T6,0009 (SP)
SB	T7,000A (SP)
SB	T8,000B (SP)
BLEZ	T9,70014CA8
SW	R0,0000 (SP)
ADDIU	T1,SP,0004
LW	AT,0000 (T1)
LW	T0,000C (SP)
LUI	T8,8006
SWL	AT,0000 (T0)
SWR	AT,0003 (T0)
LW	T3,0004 (T1)
SWL	T3,0004 (T0)
SWR	T3,0007 (T0)
LW	T6,0000 (SP)
LBU	T8,7CE1 (T8)
LW	T4,000C (SP)
ADDIU	T7,T6,0001
SLT	AT,T7,T8
ADDIU	T5,T4,0008
SW	T7,0000 (SP)
BNE	AT,R0,70014C60
SW	T5,000C (SP)
LW	T2,000C (SP)
ADDIU	T9,R0,00FE
ADDIU	SP,SP,0010
JR	RA
SB	T9,0000 (T2)

70014CC0	158C0	retrieve current controller status from PIF, storing at 80067CA0
	accepts: A0=p->thread list
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
SW	A0,0020 (SP)
JAL	70015E60
SW	R0,001C (SP)
LUI	T6,8006
LBU	T6,7CE0 (T6)
BEQ	T6,R0,70014D10
NOP
JAL	70014BC8	;generate PIFram command: request status for #channels at 80067CE1
OR	A0,R0,R0
LUI	A1,8006
ADDIU	A1,A1,7CA0	;A1=80067CA0: PIFram.cmd.buf
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
ADDIU	A0,R0,0001	;A1= write
SW	V0,001C (SP)
LW	A0,0020 (SP)	;A0=p->thread list
OR	A1,R0,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
LUI	A1,8006
ADDIU	A1,A1,7CA0	;A1=80067CA0: PIFram.cmd.buf
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
OR	A0,R0,R0	;A0= read
LUI	AT,8006
SW	V0,001C (SP)
JAL	70015EA4
SB	R0,7CE0 (AT)
LW	RA,0014 (SP)
LW	V0,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

70014D44	15944	return status list in A0 for current PIF status in buffer
	accepts: A0=p->status list target
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
SW	A0,0020 (SP)
LW	A1,0020 (SP)	;A1=A0: target for status list
JAL	70014AF8	;return device presence flags in A0, status list in A1 for current PIF status in buffer
ADDIU	A0,SP,001F	;A0=SP+1F: throwaway buffer
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

70014D70	15970	retrieve controller input from PIF, storing at 80067CA0
	accepts: A0=p->???
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
SW	A0,0020 (SP)
JAL	70015E60
SW	R0,001C (SP)
LUI	T6,8006
LBU	T6,7CE0 (T6)
ADDIU	AT,R0,0001
BEQ	T6,AT,70014DC4
NOP
JAL	70014EDC
NOP
LUI	A1,8006
ADDIU	A1,A1,7CA0
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
ADDIU	A0,R0,0001
SW	V0,001C (SP)
LW	A0,0020 (SP)
OR	A1,R0,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
SW	R0,0018 (SP)
LW	T8,0018 (SP)
LW	T0,0018 (SP)
LUI	AT,8006
SLL	T9,T8,0x2
ADDU	AT,AT,T9
ADDIU	T7,R0,00FF
SW	T7,7CA0 (AT)
ADDIU	T1,T0,0001
SLTI	AT,T1,0010
BNE	AT,R0,70014DC8
SW	T1,0018 (SP)
LUI	AT,8006
LUI	A1,8006
SW	R0,7CDC (AT)
ADDIU	A1,A1,7CA0
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
OR	A0,R0,R0
ADDIU	T2,R0,0001
LUI	AT,8006
SW	V0,001C (SP)
JAL	70015EA4
SB	T2,7CE0 (AT)
LW	RA,0014 (SP)
LW	V0,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

70014E34
LUI	T7,8006
LBU	T7,7CE1 (T7)
LUI	T6,8006
ADDIU	SP,SP,FFF0
ADDIU	T6,T6,7CA0
SW	T6,000C (SP)
BLEZ	T7,70014ED4
SW	R0,0000 (SP)
LW	T9,000C (SP)
ADDIU	T8,SP,0004
LWL	AT,0000 (T9)
LWR	AT,0003 (T9)
SW	AT,0000 (T8)
LWL	T1,0004 (T9)
LWR	T1,0007 (T9)
SW	T1,0004 (T8)
LBU	T2,0006 (SP)
ANDI	T3,T2,00C0
SRA	T4,T3,0x4
SB	T4,0004 (A0)
LBU	T5,0004 (A0)
BNE	T5,R0,70014EA8
NOP
LHU	T6,0008 (SP)
SH	T6,0000 (A0)
LB	T7,000A (SP)
SB	T7,0002 (A0)
LB	T0,000B (SP)
SB	T0,0003 (A0)
LW	T8,0000 (SP)
LUI	T3,8006
LBU	T3,7CE1 (T3)
LW	T1,000C (SP)
ADDIU	T9,T8,0001
SLT	AT,T9,T3
ADDIU	T2,T1,0008
SW	T2,000C (SP)
SW	T9,0000 (SP)
BNE	AT,R0,70014E54
ADDIU	A0,A0,0006
JR	RA
ADDIU	SP,SP,0010

70014EDC
ADDIU	SP,SP,FFF0
LUI	T6,8006
ADDIU	T6,T6,7CA0
SW	T6,000C (SP)
SW	R0,0000 (SP)
LW	T7,0000 (SP)
LW	T9,0000 (SP)
LUI	AT,8006
SLL	T8,T7,0x2
ADDU	AT,AT,T8
SW	R0,7CA0 (AT)
ADDIU	T0,T9,0001
SLTI	AT,T0,0010
BNE	AT,R0,70014EF0
SW	T0,0000 (SP)
LUI	T9,8006
LBU	T9,7CE1 (T9)
ADDIU	T1,R0,0001
LUI	AT,8006
ADDIU	T2,R0,00FF
ADDIU	T3,R0,0001
ADDIU	T4,R0,0004
ADDIU	T5,R0,0001
ORI	T6,R0,FFFF
ADDIU	T7,R0,FFFF
ADDIU	T8,R0,FFFF
SW	T1,7CDC (AT)
SB	T2,0004 (SP)
SB	T3,0005 (SP)
SB	T4,0006 (SP)
SB	T5,0007 (SP)
SH	T6,0008 (SP)
SB	T7,000A (SP)
SB	T8,000B (SP)
BLEZ	T9,70014FB4
SW	R0,0000 (SP)
ADDIU	T1,SP,0004
LW	AT,0000 (T1)
LW	T0,000C (SP)
LUI	T8,8006
SWL	AT,0000 (T0)
SWR	AT,0003 (T0)
LW	T3,0004 (T1)
SWL	T3,0004 (T0)
SWR	T3,0007 (T0)
LW	T6,0000 (SP)
LBU	T8,7CE1 (T8)
LW	T4,000C (SP)
ADDIU	T7,T6,0001
SLT	AT,T7,T8
ADDIU	T5,T4,0008
SW	T7,0000 (SP)
BNE	AT,R0,70014F6C
SW	T5,000C (SP)
LW	T2,000C (SP)
ADDIU	T9,R0,00FE
ADDIU	SP,SP,0010
JR	RA
SB	T9,0000 (T2)

70014FD0
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
SW	A0,0020 (SP)
JAL	70015E60
SW	R0,001C (SP)
LW	A0,0020 (SP)
JAL	700155FC
ADDIU	A1,SP,0018
SW	V0,001C (SP)
LW	T6,001C (SP)
BNE	T6,R0,7001501C
NOP
LHU	T7,0018 (SP)
ANDI	T8,T7,8000
BEQ	T8,R0,7001501C
NOP
ADDIU	T9,R0,0001
BEQ	R0,R0,70015020
SW	T9,001C (SP)
SW	R0,001C (SP)
JAL	70015EA4
NOP
LW	RA,0014 (SP)
LW	V0,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

70015040
ADDIU	SP,SP,FFC8
SW	A1,003C (SP)
LBU	T7,003F (SP)
LUI	T6,8006
ADDIU	T6,T6,7D30
SLTI	AT,T7,0041
SW	RA,0014 (SP)
SW	A0,0038 (SP)
SW	A2,0040 (SP)
SW	R0,0034 (SP)
SW	R0,0030 (SP)
BNE	AT,R0,7001507C
SW	T6,002C (SP)
BEQ	R0,R0,70015220
ADDIU	V0,R0,FFFF
JAL	70015E60
NOP
LW	A0,0038 (SP)
JAL	700155FC
ADDIU	A1,SP,0028
SW	V0,0034 (SP)
LW	T8,0034 (SP)
BNE	T8,R0,700150B0
NOP
LHU	T9,0028 (SP)
ORI	AT,R0,8000
BEQ	T9,AT,700150B8
NOP
BEQ	R0,R0,70015220
ADDIU	V0,R0,0008
LBU	T0,002A (SP)
ANDI	T1,T0,0080
BEQ	T1,R0,700150E4
NOP
LW	A0,0038 (SP)
JAL	700155FC
ADDIU	A1,SP,0028
LBU	T2,002A (SP)
ANDI	T3,T2,0080
BNE	T3,R0,700150C8
NOP
JAL	70015230
LBU	A0,003F (SP)
LUI	A1,8006
ADDIU	A1,A1,7D30
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
ADDIU	A0,R0,0001
SW	V0,0034 (SP)
LW	A0,0038 (SP)
OR	A1,R0,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
SW	R0,0030 (SP)
LW	T5,0030 (SP)
LW	T7,0030 (SP)
LUI	AT,8006
SLL	T6,T5,0x2
ADDU	AT,AT,T6
ADDIU	T4,R0,00FF
SW	T4,7D30 (AT)
ADDIU	T8,T7,0001
SLTI	AT,T8,0010
BNE	AT,R0,70015114
SW	T8,0030 (SP)
LUI	AT,8006
LUI	A1,8006
SW	R0,7D6C (AT)
ADDIU	A1,A1,7D30
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
OR	A0,R0,R0
ADDIU	T9,R0,0004
LUI	AT,8006
SW	V0,0034 (SP)
SB	T9,7CE0 (AT)
LW	A0,0038 (SP)
OR	A1,R0,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
SW	R0,0030 (SP)
LW	T2,0030 (SP)
LW	T0,002C (SP)
ADDIU	T3,T2,0001
SLTI	AT,T3,0004
ADDIU	T1,T0,0001
SW	T3,0030 (SP)
BNE	AT,R0,7001517C
SW	T1,002C (SP)
LW	T4,002C (SP)
ADDIU	T5,SP,001C
LWL	AT,0000 (T4)
LWR	AT,0003 (T4)
SW	AT,0000 (T5)
LWL	T7,0004 (T4)
LWR	T7,0007 (T4)
SW	T7,0004 (T5)
LWL	AT,0008 (T4)
LWR	AT,000B (T4)
SW	AT,0008 (T5)
LBU	T8,001D (SP)
ANDI	T9,T8,00C0
SRA	T0,T9,0x4
BNE	T0,R0,70015214
SW	T0,0034 (SP)
SW	R0,0030 (SP)
LW	T1,0030 (SP)
LW	T3,0040 (SP)
ADDU	T2,SP,T1
LBU	T2,0020 (T2)
SB	T2,0000 (T3)
LW	T4,0030 (SP)
LW	T6,0040 (SP)
ADDIU	T7,T4,0001
SLTI	AT,T7,0008
ADDIU	T5,T6,0001
SW	T7,0030 (SP)
BNE	AT,R0,700151E0
SW	T5,0040 (SP)
JAL	70015EA4
NOP
LW	V0,0034 (SP)
LW	RA,0014 (SP)
ADDIU	SP,SP,0038
JR	RA
NOP

70015230
ADDIU	SP,SP,FFE8
LUI	T6,8006
ADDIU	T6,T6,7D30
ANDI	A0,A0,00FF
SW	T6,0014 (SP)
SW	R0,0004 (SP)
LW	T8,0004 (SP)
LW	T0,0004 (SP)
LUI	AT,8006
SLL	T9,T8,0x2
ADDU	AT,AT,T9
ADDIU	T7,R0,00FF
SW	T7,7D30 (AT)
ADDIU	T1,T0,0001
SLTI	AT,T1,0010
BNE	AT,R0,70015248
SW	T1,0004 (SP)
ADDIU	T2,R0,0001
LUI	AT,8006
ADDIU	T3,R0,0002
ADDIU	T4,R0,0008
ADDIU	T5,R0,0004
SW	T2,7D6C (AT)
SB	T3,0008 (SP)
SB	T4,0009 (SP)
SB	T5,000A (SP)
SB	A0,000B (SP)
SW	R0,0004 (SP)
LW	T6,0004 (SP)
ADDU	T8,SP,T6
SB	R0,000C (T8)
LW	T7,0004 (SP)
ADDIU	T9,T7,0001
SLTI	AT,T9,0008
BNE	AT,R0,700152A0
SW	T9,0004 (SP)
SW	R0,0004 (SP)
LW	T0,0014 (SP)
SB	R0,0000 (T0)
LW	T3,0004 (SP)
LW	T1,0014 (SP)
ADDIU	T4,T3,0001
SLTI	AT,T4,0004
ADDIU	T2,T1,0001
SW	T4,0004 (SP)
BNE	AT,R0,700152C4
SW	T2,0014 (SP)
ADDIU	T6,SP,0008
LW	AT,0000 (T6)
LW	T5,0014 (SP)
ADDIU	T1,R0,00FE
SWL	AT,0000 (T5)
SWR	AT,0003 (T5)
LW	T7,0004 (T6)
SWL	T7,0004 (T5)
SWR	T7,0007 (T5)
LW	AT,0008 (T6)
SWL	AT,0008 (T5)
SWR	AT,000B (T5)
LW	T9,0014 (SP)
ADDIU	T0,T9,000C
SW	T0,0014 (SP)
SB	T1,0000 (T0)
JR	RA
ADDIU	SP,SP,0018

70015340
ADDIU	SP,SP,FFC8
SW	A1,003C (SP)
LBU	T7,003F (SP)
LUI	T6,8006
ADDIU	T6,T6,7D30
SLTI	AT,T7,0041
SW	RA,0014 (SP)
SW	A0,0038 (SP)
SW	A2,0040 (SP)
SW	R0,0034 (SP)
BNE	AT,R0,70015378
SW	T6,002C (SP)
BEQ	R0,R0,700154E0
ADDIU	V0,R0,FFFF
JAL	70015E60
NOP
LW	A0,0038 (SP)
JAL	700155FC
ADDIU	A1,SP,001C
SW	V0,0034 (SP)
LW	T8,0034 (SP)
BNE	T8,R0,700153AC
NOP
LHU	T9,001C (SP)
ORI	AT,R0,8000
BEQ	T9,AT,700153B4
NOP
BEQ	R0,R0,700154E0
ADDIU	V0,R0,0008
LBU	T0,001E (SP)
ANDI	T1,T0,0080
BEQ	T1,R0,700153E0
NOP
LW	A0,0038 (SP)
JAL	700155FC
ADDIU	A1,SP,001C
LBU	T2,001E (SP)
ANDI	T3,T2,0080
BNE	T3,R0,700153C4
NOP
LBU	A0,003F (SP)
JAL	700154F0
LW	A1,0040 (SP)
LUI	A1,8006
ADDIU	A1,A1,7D30
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
ADDIU	A0,R0,0001
SW	V0,0034 (SP)
LW	A0,0038 (SP)
OR	A1,R0,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
SW	R0,0030 (SP)
LW	T5,0030 (SP)
LW	T7,0030 (SP)
LUI	AT,8006
SLL	T6,T5,0x2
ADDU	AT,AT,T6
ADDIU	T4,R0,00FF
SW	T4,7D30 (AT)
ADDIU	T8,T7,0001
SLTI	AT,T8,0010
BNE	AT,R0,70015414
SW	T8,0030 (SP)
LUI	AT,8006
LUI	A1,8006
SW	R0,7D6C (AT)
ADDIU	A1,A1,7D30
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
OR	A0,R0,R0
ADDIU	T9,R0,0005
LUI	AT,8006
SW	V0,0034 (SP)
SB	T9,7CE0 (AT)
LW	A0,0038 (SP)
OR	A1,R0,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
SW	R0,0030 (SP)
LW	T2,0030 (SP)
LW	T0,002C (SP)
ADDIU	T3,T2,0001
SLTI	AT,T3,0004
ADDIU	T1,T0,0001
SW	T3,0030 (SP)
BNE	AT,R0,7001547C
SW	T1,002C (SP)
LW	T4,002C (SP)
ADDIU	T5,SP,0020
LWL	AT,0000 (T4)
LWR	AT,0003 (T4)
SW	AT,0000 (T5)
LWL	T7,0004 (T4)
LWR	T7,0007 (T4)
SW	T7,0004 (T5)
LWL	AT,0008 (T4)
LWR	AT,000B (T4)
SW	AT,0008 (T5)
LBU	T8,0021 (SP)
ANDI	T9,T8,00C0
SRA	T0,T9,0x4
JAL	70015EA4
SW	T0,0034 (SP)
LW	V0,0034 (SP)
LW	RA,0014 (SP)
ADDIU	SP,SP,0038
JR	RA
NOP

700154F0
ADDIU	SP,SP,FFE8
LUI	T6,8006
ADDIU	T6,T6,7D30
ANDI	A0,A0,00FF
SW	T6,0014 (SP)
SW	R0,0004 (SP)
LW	T8,0004 (SP)
LW	T0,0004 (SP)
LUI	AT,8006
SLL	T9,T8,0x2
ADDU	AT,AT,T9
ADDIU	T7,R0,00FF
SW	T7,7D30 (AT)
ADDIU	T1,T0,0001
SLTI	AT,T1,0010
BNE	AT,R0,70015508
SW	T1,0004 (SP)
ADDIU	T2,R0,0001
LUI	AT,8006
ADDIU	T3,R0,000A
ADDIU	T4,R0,0001
ADDIU	T5,R0,0005
SW	T2,7D6C (AT)
SB	T3,0008 (SP)
SB	T4,0009 (SP)
SB	T5,000A (SP)
SB	A0,000B (SP)
SW	R0,0004 (SP)
LW	T8,0004 (SP)
LBU	T6,0000 (A1)
ADDIU	A1,A1,0001
ADDU	T7,SP,T8
SB	T6,000C (T7)
LW	T9,0004 (SP)
ADDIU	T0,T9,0001
SLTI	AT,T0,0008
BNE	AT,R0,70015560
SW	T0,0004 (SP)
SW	R0,0004 (SP)
LW	T1,0014 (SP)
SB	R0,0000 (T1)
LW	T4,0004 (SP)
LW	T2,0014 (SP)
ADDIU	T5,T4,0001
SLTI	AT,T5,0004
ADDIU	T3,T2,0001
SW	T5,0004 (SP)
BNE	AT,R0,7001558C
SW	T3,0014 (SP)
ADDIU	T8,SP,0008
LW	AT,0000 (T8)
LW	T6,0014 (SP)
ADDIU	T2,R0,00FE
SWL	AT,0000 (T6)
SWR	AT,0003 (T6)
LW	T9,0004 (T8)
SWL	T9,0004 (T6)
SWR	T9,0007 (T6)
LW	AT,0008 (T8)
SWL	AT,0008 (T6)
SWR	AT,000B (T6)
LW	T0,0014 (SP)
ADDIU	T1,T0,000C
SW	T1,0014 (SP)
SB	T2,0000 (T1)
JR	RA
ADDIU	SP,SP,0018

700155FC
ADDIU	SP,SP,FFD0
LUI	T6,8006
ADDIU	T6,T6,7D30
SW	RA,0014 (SP)
SW	A0,0030 (SP)
SW	A1,0034 (SP)
SW	R0,002C (SP)
SW	T6,0024 (SP)
SW	R0,0028 (SP)
LW	T7,0028 (SP)
LW	T9,0028 (SP)
LUI	AT,8006
SLL	T8,T7,0x2
ADDU	AT,AT,T8
SW	R0,7D30 (AT)
ADDIU	T0,T9,0001
SLTI	AT,T0,0010
BNE	AT,R0,70015620
SW	T0,0028 (SP)
LUI	T2,8006
ADDIU	T1,R0,0001
LUI	AT,8006
ADDIU	T2,T2,7D30
SW	T1,7D6C (AT)
SW	T2,0024 (SP)
SW	R0,0028 (SP)
LW	T3,0024 (SP)
SB	R0,0000 (T3)
LW	T6,0028 (SP)
LW	T4,0024 (SP)
ADDIU	T7,T6,0001
SLTI	AT,T7,0004
ADDIU	T5,T4,0001
SW	T7,0028 (SP)
BNE	AT,R0,70015664
SW	T5,0024 (SP)
ADDIU	T8,R0,00FF
ADDIU	T9,R0,0001
ADDIU	T0,R0,0003
ADDIU	T1,R0,00FF
ADDIU	T2,R0,00FF
ADDIU	T3,R0,00FF
ADDIU	T4,R0,00FF
SB	T8,001C (SP)
SB	T9,001D (SP)
SB	T0,001E (SP)
SB	R0,001F (SP)
SB	T1,0020 (SP)
SB	T2,0021 (SP)
SB	T3,0022 (SP)
SB	T4,0023 (SP)
ADDIU	T6,SP,001C
LW	AT,0000 (T6)
LW	T5,0024 (SP)
ADDIU	T2,R0,00FE
LUI	A1,8006
SWL	AT,0000 (T5)
SWR	AT,0003 (T5)
LW	T9,0004 (T6)
ADDIU	A1,A1,7D30
ADDIU	A0,R0,0001
SWL	T9,0004 (T5)
SWR	T9,0007 (T5)
LW	T0,0024 (SP)
ADDIU	T1,T0,0008
SW	T1,0024 (SP)
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
SB	T2,0000 (T1)
SW	V0,002C (SP)
LW	A0,0030 (SP)
OR	A1,R0,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
ADDIU	T3,R0,0005
LUI	AT,8006
LUI	A1,8006
SB	T3,7CE0 (AT)
ADDIU	A1,A1,7D30
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
OR	A0,R0,R0
SW	V0,002C (SP)
LW	A0,0030 (SP)
OR	A1,R0,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
LW	T4,002C (SP)
BEQ	T4,R0,70015764
NOP
BEQ	R0,R0,70015810
OR	V0,T4,R0
LUI	T8,8006
ADDIU	T8,T8,7D30
SW	T8,0024 (SP)
SW	R0,0028 (SP)
LW	T7,0024 (SP)
SB	R0,0000 (T7)
LW	T9,0028 (SP)
LW	T5,0024 (SP)
ADDIU	T0,T9,0001
SLTI	AT,T0,0004
ADDIU	T6,T5,0001
SW	T0,0028 (SP)
BNE	AT,R0,70015774
SW	T6,0024 (SP)
LW	T1,0024 (SP)
ADDIU	T2,SP,001C
LWL	AT,0000 (T1)
LWR	AT,0003 (T1)
SW	AT,0000 (T2)
LWL	T4,0004 (T1)
LWR	T4,0007 (T1)
SW	T4,0004 (T2)
LBU	T8,001E (SP)
LW	T6,0034 (SP)
ANDI	T7,T8,00C0
SRA	T5,T7,0x4
SB	T5,0003 (T6)
LBU	T9,0021 (SP)
LBU	T3,0020 (SP)
LW	T1,0034 (SP)
SLL	T0,T9,0x8
OR	T2,T0,T3
SH	T2,0000 (T1)
LW	T8,0034 (SP)
LBU	T4,0022 (SP)
SB	T4,0002 (T8)
LW	T7,0034 (SP)
LBU	T5,0003 (T7)
BEQ	T5,R0,7001580C
NOP
BEQ	R0,R0,70015810
OR	V0,T5,R0
OR	V0,R0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0030
JR	RA
NOP

70015820
ADDIU	SP,SP,FFC0
SW	A1,0044 (SP)
LBU	T6,0047 (SP)
SW	RA,0024 (SP)
SW	A0,0040 (SP)
SLTI	AT,T6,0041
SW	A2,0048 (SP)
SW	A3,004C (SP)
BNE	AT,R0,70015850
SW	R0,003C (SP)
BEQ	R0,R0,7001594C
ADDIU	V0,R0,FFFF
LW	T7,004C (SP)
BLEZ	T7,70015948
NOP
LW	A0,0040 (SP)
LBU	A1,0047 (SP)
JAL	70015040
LW	A2,0048 (SP)
SW	V0,003C (SP)
LW	T8,003C (SP)
BEQ	T8,R0,70015884
NOP
BEQ	R0,R0,7001594C
OR	V0,T8,R0
LW	T9,004C (SP)
LBU	T1,0047 (SP)
LW	T3,0048 (SP)
LUI	A2,8002
LUI	A3,8002
ADDIU	T0,T9,FFF8
ADDIU	T2,T1,0001
ADDIU	T4,T3,0008
SW	T0,004C (SP)
SB	T2,0047 (SP)
SW	T4,0048 (SP)
LW	A3,6984 (A3)
LW	A2,6980 (A2)
ADDIU	A0,R0,0000
JAL	7000EDA8	;(V0,V1) = (A0,A1) * (A2,A3)
ADDIU	A1,R0,2EE0
SW	V0,0028 (SP)
SW	V1,002C (SP)
LUI	A3,000F
ORI	A3,A3,4240
LW	A1,002C (SP)
LW	A0,0028 (SP)
JAL	7000ECA8	;(V0,V1) = (A0,A1) / (A2,A3)
ADDIU	A2,R0,0000
LUI	T5,8006
LUI	T8,8006
ADDIU	T8,T8,7D20
ADDIU	T5,T5,7D08
SW	V0,0030 (SP)
SW	V1,0034 (SP)
LUI	A0,8006
ADDIU	T6,R0,0000
ADDIU	T7,R0,0000
SW	T7,0014 (SP)
SW	T6,0010 (SP)
ADDIU	A0,A0,7CE8
LW	A3,0034 (SP)
LW	A2,0030 (SP)
SW	T5,0018 (SP)
JAL	70010C50
SW	T8,001C (SP)
LUI	A0,8006
ADDIU	A0,A0,7D08
OR	A1,R0,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
LW	T9,004C (SP)
BGTZ	T9,7001585C
NOP
LW	V0,003C (SP)
LW	RA,0024 (SP)
ADDIU	SP,SP,0040
JR	RA
NOP

70015960
ADDIU	SP,SP,FFC0
SW	A1,0044 (SP)
LBU	T6,0047 (SP)
SW	RA,0024 (SP)
SW	A0,0040 (SP)
SLTI	AT,T6,0041
SW	A2,0048 (SP)
SW	A3,004C (SP)
BNE	AT,R0,70015990
SW	R0,003C (SP)
BEQ	R0,R0,70015A8C
ADDIU	V0,R0,FFFF
LW	T7,004C (SP)
BLEZ	T7,70015A88
NOP
LW	A0,0040 (SP)
LBU	A1,0047 (SP)
JAL	70015340
LW	A2,0048 (SP)
SW	V0,003C (SP)
LW	T8,003C (SP)
BEQ	T8,R0,700159C4
NOP
BEQ	R0,R0,70015A8C
OR	V0,T8,R0
LW	T9,004C (SP)
LBU	T1,0047 (SP)
LW	T3,0048 (SP)
LUI	A2,8002
LUI	A3,8002
ADDIU	T0,T9,FFF8
ADDIU	T2,T1,0001
ADDIU	T4,T3,0008
SW	T0,004C (SP)
SB	T2,0047 (SP)
SW	T4,0048 (SP)
LW	A3,6984 (A3)
LW	A2,6980 (A2)
ADDIU	A0,R0,0000
JAL	7000EDA8	;(V0,V1) = (A0,A1) * (A2,A3)
ADDIU	A1,R0,2EE0
SW	V0,0028 (SP)
SW	V1,002C (SP)
LUI	A3,000F
ORI	A3,A3,4240
LW	A1,002C (SP)
LW	A0,0028 (SP)
JAL	7000ECA8	;(V0,V1) = (A0,A1) / (A2,A3)
ADDIU	A2,R0,0000
LUI	T5,8006
LUI	T8,8006
ADDIU	T8,T8,7D20
ADDIU	T5,T5,7D08
SW	V0,0030 (SP)
SW	V1,0034 (SP)
LUI	A0,8006
ADDIU	T6,R0,0000
ADDIU	T7,R0,0000
SW	T7,0014 (SP)
SW	T6,0010 (SP)
ADDIU	A0,A0,7CE8
LW	A3,0034 (SP)
LW	A2,0030 (SP)
SW	T5,0018 (SP)
JAL	70010C50
SW	T8,001C (SP)
LUI	A0,8006
ADDIU	A0,A0,7D08
OR	A1,R0,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
LW	T9,004C (SP)
BGTZ	T9,7001599C
NOP
LW	V0,003C (SP)
LW	RA,0024 (SP)
ADDIU	SP,SP,0040
JR	RA
NOP

70015AA0	166A0	set flags for each present device in A1; V0=-1 if SI error occurred
	accepts: A0=p->thread list, A1=p->buffer for presence flags
	A1= flag set if device present; 03 indicates controllers 1&2 present
ADDIU	SP,SP,FFC0
SW	RA,0014 (SP)
ADDIU	T6,R0,0003
SW	A0,0040 (SP)
SW	A1,0044 (SP)
SW	R0,003C (SP)
SB	R0,001F (SP)	;init. presence flags
JAL	70015E60
SW	T6,0018 (SP)	;SP+18= 3: #tested channels
//70015AC4:	generate and write a status request to PIFram
JAL	70015C40	;generate PIFram command: request status for #channels at 80067CE1
OR	A0,R0,R0
LUI	A1,8006
ADDIU	A1,A1,7D70	;A1=80067D70: p->PIFram.cmd.buf
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
ADDIU	A0,R0,0001	;A0= write
SW	V0,003C (SP)	;SP+3C= error code
LW	A0,0040 (SP)
ADDIU	A1,SP,0038
JAL	7000DDD0
ADDIU	A2,R0,0001
//70015AF0:	read result back from PIFram
LUI	A1,8006
ADDIU	A1,A1,7D70	;A1=80067D70: p->PIFram.cmd.buf
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
OR	A0,R0,R0	;A0= read
SW	V0,003C (SP)	;SP+3C= error code
LW	A0,0040 (SP)
ADDIU	A1,SP,0038
JAL	7000DDD0
ADDIU	A2,R0,0001
//70015B14:	create status list from result
ADDIU	A0,SP,0037
JAL	70015D3C	;generates status list from ram PIFram output at A1
ADDIU	A1,SP,0024	;A1=SP+24: buffer
LUI	T7,8006
LBU	T7,7CE1 (T7)	;T7=80067CE1: #channels
SW	R0,0020 (SP)	;init. count
BLEZ	T7,70015B80
NOP
//70015B34:
LW	T8,0020 (SP)	;T8= count
SLL	T9,T8,0x2
ADDU	T0,SP,T9
LBU	T0,0026 (T0)	;T0= entry[count]+2: slot state
ANDI	T1,T0,0004
BNE	T1,R0,70015B60	;skip if address crc error occured
NOP
LW	T2,0018 (SP)
ADDIU	T3,T2,FFFF
BEQ	R0,R0,70015B80
SW	T3,0018 (SP)	;remaining-=1
//70015B60:	check next channel if address crc error occured
LW	T4,0020 (SP)
LUI	T6,8006
LBU	T6,7CE1 (T6)	;T6=80067CE1: #channels
ADDIU	T5,T4,0001
SW	T5,0020 (SP)	;count+=1
SLT	AT,T5,T6
BNE	AT,R0,70015B34	;loop for remaining channels
NOP
//70015B80:
LUI	T7,8006
LBU	T7,7CE1 (T7)	;T7=80067CE1: #channels
LW	T8,0020 (SP)
BNE	T7,T8,70015B98	;skip if not final channel
NOP
SW	R0,0018 (SP)	;remaining=0
//70015B98:
LW	T9,0018 (SP)
BGTZ	T9,70015AC4	;generate a new report for remaining
NOP
LUI	T0,8006
LBU	T0,7CE1 (T0)	;T0=80067CE1: #channels
SW	R0,0020 (SP)	;init. count
BLEZ	T0,70015C18
NOP
//70015BB8:	set flag for each present channel
LW	T1,0020 (SP)	;T1=count
ADDIU	T3,SP,0024
SLL	T2,T1,0x2
ADDU	T4,T2,T3
LBU	T5,0003 (T4)	;T5=entry[count]+3: error byte
BNE	T5,R0,70015BF8	;skip if not present or error occured
NOP
LBU	T6,0002 (T4)	;T6=entry[count]+2: slot state
ANDI	T7,T6,0001
BEQ	T7,R0,70015BF8	;skip if slot not filled
NOP
LBU	T8,001F (SP)
ADDIU	T9,R0,0001
SLLV	T0,T9,T1	;T0= 1<<count
OR	T2,T8,T0
SB	T2,001F (SP)	;presence |= channel's bit
//70015BF8:	loop for each entry
LW	T3,0020 (SP)
LUI	T4,8006
LBU	T4,7CE1 (T4)	;T4=80067CE1: #channels
ADDIU	T5,T3,0001
SW	T5,0020 (SP)	;count+=1
SLT	AT,T5,T4
BNE	AT,R0,70015BB8	;loop for each entry
NOP
//70015C18:
JAL	70015EA4
NOP
LBU	T6,001F (SP)	;T6= presence flags
LW	T7,0044 (SP)
SB	T6,0000 (T7)	;presence flags -> A1 f/caller
//70015C2C:	return
LW	RA,0014 (SP)
LW	V0,003C (SP)	;V0= error code from SI actions above
ADDIU	SP,SP,0040
JR	RA
NOP

70015C40	16840	generate PIFram command: request status for #channels at 80067CE1
	accepts: A0=???
ADDIU	SP,SP,FFF0
ANDI	A0,A0,00FF
LUI	AT,8006
SB	A0,7CE0 (AT)
SW	R0,0000 (SP)
LW	T6,0000 (SP)
LW	T8,0000 (SP)
LUI	AT,8006
SLL	T7,T6,0x2
ADDU	AT,AT,T7
SW	R0,7D70 (AT)
ADDIU	T9,T8,0001
SLTI	AT,T9,0010
BNE	AT,R0,70015C54
SW	T9,0000 (SP)
LUI	T9,8006
LBU	T9,7CE1 (T9)
LUI	T1,8006
ADDIU	T0,R0,0001
LUI	AT,8006
ADDIU	T1,T1,7D70
ADDIU	T2,R0,00FF
ADDIU	T3,R0,0001
ADDIU	T4,R0,0003
ADDIU	T5,R0,00FF
ADDIU	T6,R0,00FF
ADDIU	T7,R0,00FF
ADDIU	T8,R0,00FF
SW	T0,7DAC (AT)
SW	T1,000C (SP)
SB	T2,0004 (SP)
SB	T3,0005 (SP)
SB	T4,0006 (SP)
SB	A0,0007 (SP)
SB	T5,0008 (SP)
SB	T6,0009 (SP)
SB	T7,000A (SP)
SB	T8,000B (SP)
BLEZ	T9,70015D28
SW	R0,0000 (SP)
ADDIU	T1,SP,0004
LW	AT,0000 (T1)
LW	T0,000C (SP)
LUI	T8,8006
SWL	AT,0000 (T0)
SWR	AT,0003 (T0)
LW	T3,0004 (T1)
SWL	T3,0004 (T0)
SWR	T3,0007 (T0)
LW	T6,0000 (SP)
LBU	T8,7CE1 (T8)
LW	T4,000C (SP)
ADDIU	T7,T6,0001
SLT	AT,T7,T8
ADDIU	T5,T4,0008
SW	T7,0000 (SP)
BNE	AT,R0,70015CE0
SW	T5,000C (SP)
LW	T2,000C (SP)
ADDIU	T9,R0,00FE
ADDIU	SP,SP,0010
JR	RA
SB	T9,0000 (T2)

70015D3C	1693C	generates status list from ram PIFram output at A1
	accepts: A0=???, A1=p->target
	status list format:
		0x0	2	controller type (byteswapped from PIFram)
		0x2	1	controller slot state
		0x3	1	error byte: 8-not present, 4-I/O error
LUI	T7,8006
LBU	T7,7CE1 (T7)
ADDIU	SP,SP,FFE8
LUI	T6,8006
ADDIU	T6,T6,7D70
SB	R0,0007 (SP)
SW	T6,0014 (SP)
BLEZ	T7,70015DFC
SW	R0,0008 (SP)
LW	T9,0014 (SP)
ADDIU	T8,SP,000C
LWL	AT,0000 (T9)
LWR	AT,0003 (T9)
SW	AT,0000 (T8)
LWL	T1,0004 (T9)
LWR	T1,0007 (T9)
SW	T1,0004 (T8)
LBU	T2,000E (SP)
ANDI	T3,T2,00C0
SRA	T4,T3,0x4
SB	T4,0003 (A1)
LBU	T5,0003 (A1)
BNE	T5,R0,70015DD0
NOP
LBU	T6,0011 (SP)
LBU	T0,0010 (SP)
ADDIU	T3,R0,0001
SLL	T7,T6,0x8
OR	T8,T7,T0
SH	T8,0000 (A1)
LBU	T9,0012 (SP)
SB	T9,0002 (A1)
LW	T2,0008 (SP)
LBU	T1,0007 (SP)
SLLV	T4,T3,T2
OR	T5,T1,T4
SB	T5,0007 (SP)
LW	T6,0008 (SP)
LUI	T9,8006
LBU	T9,7CE1 (T9)
LW	T0,0014 (SP)
ADDIU	T7,T6,0001
SLT	AT,T7,T9
ADDIU	T8,T0,0008
SW	T8,0014 (SP)
SW	T7,0008 (SP)
BNE	AT,R0,70015D60
ADDIU	A1,A1,0004
LBU	T3,0007 (SP)
ADDIU	SP,SP,0018
JR	RA
SB	T3,0000 (A0)

70015E10
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
ADDIU	T6,R0,0001
LUI	AT,8002
LUI	A0,8006
LUI	A1,8006
SW	T6,77C0 (AT)	;1->800277C0: 
ADDIU	A1,A1,7DB0	;A1=80057DB0
ADDIU	A0,A0,7DB8	;A0=80057DB8
JAL	7000D6D0
ADDIU	A2,R0,0001	;A2=1
LUI	A0,8006
ADDIU	A0,A0,7DB8	;A0=80057DB8: 
OR	A1,R0,R0
JAL	7000DF10
OR	A2,R0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70015E60
LUI	T6,8002
LW	T6,77C0 (T6)	;T6=800277C0: 
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
BNE	T6,R0,70015E80
NOP
JAL	70015E10
NOP
//70015E80:
LUI	A0,8006
ADDIU	A0,A0,7DB8	;A0=80057DB8: 
ADDIU	A1,SP,001C	;A1=SP+1C: buffer
JAL	7000DDD0
ADDIU	A2,R0,0001
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

70015EA4
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,8006
ADDIU	A0,A0,7DB8	;A0=80057DB8: 
OR	A1,R0,R0
JAL	7000DF10
OR	A2,R0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70015ED0	16AD0	read or write (A0) between PIFram and rdram address A1; V0=-1 on error, 0 on success
	accepts: A0=mode (0-read; 1-write), A1=p->rdram address
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
JAL	7001F720	;V0= TRUE if SI not ready, FALSE otherwise
SW	A1,001C (SP)
BEQ	V0,R0,70015EF4
NOP
BEQ	R0,R0,70015F6C	;return -1 if SI not ready
ADDIU	V0,R0,FFFF
//70015EF4:
LW	T6,0018 (SP)	;T6= mode
ADDIU	AT,R0,0001
BNE	T6,AT,70015F10	;skip if reading
NOP
LW	A0,001C (SP)
JAL	70010BD0	;cache A1 bytes at A0 prior to hardware write request
ADDIU	A1,R0,0040
//70015F10:	set address for read or write
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
LW	A0,001C (SP)	;A0= rdram address
LUI	T7,A480
SW	V0,0000 (T7)	;V0->A4800000: SI rdram address
LW	T8,0018 (SP)	;T8= mode
BNE	T8,R0,70015F40	;branch if writing
NOP
//70015F2C:	read
LUI	T9,1FC0
ORI	T9,T9,07C0	;T9=1FC007C0: PIFram
LUI	T0,A480
BEQ	R0,R0,70015F50
SW	T9,0004 (T0)	;PIFram.addy->A4800004: SI PIF read address
//70015F40:	write
LUI	T1,1FC0
ORI	T1,T1,07C0	;T1=1FC007C0: PIFram
LUI	T2,A480
SW	T1,0010 (T2)	;PIFram.addy->A4800010: SI PIF write address
//70015F50:	set hit write invalidate
LW	T3,0018 (SP)
BNE	T3,R0,70015F68
NOP
LW	A0,001C (SP)
JAL	70010B20	;cache A1 bytes at A0 prior to hardware read request
ADDIU	A1,R0,0040
OR	V0,R0,R0	;V0=0: okay!
//70015F6C:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70015F80	16B80	V0= PIFram address.CRC for address A0
ADDIU	SP,SP,FFF0
ANDI	A0,A0,FFFF
SB	R0,000F (SP)
SW	R0,0008 (SP)
LBU	T6,000F (SP)
ANDI	T7,T6,0010
BEQ	T7,R0,70015FAC
NOP
ADDIU	T8,R0,0015
BEQ	R0,R0,70015FB0
SB	T8,000E (SP)
SB	R0,000E (SP)
LBU	T9,000F (SP)
ANDI	T1,A0,0400
SLL	T0,T9,0x1
BEQ	T1,R0,70015FCC
SB	T0,000F (SP)
BEQ	R0,R0,70015FD0
ADDIU	A1,R0,0001
OR	A1,R0,R0
LBU	T2,000F (SP)
LW	T0,0008 (SP)
LBU	T7,000E (SP)
ANDI	T3,A1,00FF
SLL	T5,A0,0x1
OR	T4,T2,T3
OR	A0,T5,R0
ANDI	T8,T4,00FF
ADDIU	T1,T0,0001
SLTI	AT,T1,0010
SB	T4,000F (SP)
ANDI	T6,A0,FFFF
XOR	T9,T8,T7
SW	T1,0008 (SP)
OR	A0,T6,R0
BNE	AT,R0,70015F90
SB	T9,000F (SP)
LBU	V0,000F (SP)
ADDIU	SP,SP,0010
ANDI	T2,V0,001F
OR	V0,T2,R0
ANDI	T3,V0,00FF
JR	RA
OR	V0,T3,R0

70016030	16C30	V0= PIFram data.CRC for data at A0
ADDIU	SP,SP,FFF0
SB	R0,000F (SP)
SW	R0,0008 (SP)
ADDIU	T6,R0,0007
SW	T6,0004 (SP)
LBU	T7,000F (SP)
ANDI	T8,T7,0080
BEQ	T8,R0,70016060
NOP
ADDIU	T9,R0,0085
BEQ	R0,R0,70016064
SB	T9,000E (SP)
SB	R0,000E (SP)
LBU	T0,000F (SP)
LW	T2,0008 (SP)
ADDIU	AT,R0,0020
SLL	T1,T0,0x1
BNE	T2,AT,70016088
SB	T1,000F (SP)
ANDI	T3,T1,00FF
BEQ	R0,R0,700160BC
SB	T3,000F (SP)
LW	T5,0004 (SP)
LBU	T4,0000 (A0)
ADDIU	T6,R0,0001
SLLV	T7,T6,T5
AND	T8,T4,T7
BEQ	T8,R0,700160AC
NOP
BEQ	R0,R0,700160B0
ADDIU	A1,R0,0001
OR	A1,R0,R0
LBU	T9,000F (SP)
OR	T0,T9,A1
SB	T0,000F (SP)
LW	T6,0004 (SP)
LBU	T2,000F (SP)
LBU	T1,000E (SP)
ADDIU	T5,T6,FFFF
SW	T5,0004 (SP)
XOR	T3,T2,T1
BGEZ	T5,70016044
SB	T3,000F (SP)
LW	T4,0008 (SP)
ADDIU	A0,A0,0001
ADDIU	T7,T4,0001
SLTI	AT,T7,0021
BNE	AT,R0,7001603C
SW	T7,0008 (SP)
LBU	V0,000F (SP)
JR	RA
ADDIU	SP,SP,0010

70016100	16D00	sends data A3 to controller slot A1 at address A2, returning status
ADDIU	SP,SP,FFA0
LW	T8,0070 (SP)
LUI	T6,8006
ADDIU	T6,T6,7D70
ADDIU	T7,R0,0002
ADDIU	AT,R0,0001
SW	RA,001C (SP)
SW	A0,0060 (SP)
SW	A1,0064 (SP)
SW	A2,0068 (SP)
SW	A3,006C (SP)
SW	S0,0018 (SP)
SW	R0,005C (SP)
SW	T6,0054 (SP)
BEQ	T8,AT,70016160
SW	T7,0028 (SP)
LHU	T9,006A (SP)
SLTI	AT,T9,0007
BEQ	AT,R0,70016160
NOP
BEQ	T9,R0,70016160
NOP
BEQ	R0,R0,7001631C
OR	V0,R0,R0
JAL	70015E60
NOP
ADDIU	T0,R0,0003
LUI	AT,8006
SB	T0,7CE0 (AT)
LW	A0,0064 (SP)
LHU	A1,006A (SP)
JAL	70016330	;generate PIFram command: request write data at A2 to block A1 of controller A0's slot
LW	A2,006C (SP)
LUI	A1,8006
ADDIU	A1,A1,7D70
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
ADDIU	A0,R0,0001
SW	V0,005C (SP)
LW	A0,0060 (SP)
OR	A1,R0,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
SW	R0,0058 (SP)
LW	T2,0058 (SP)
LW	T4,0058 (SP)
LUI	AT,8006
SLL	T3,T2,0x2
ADDU	AT,AT,T3
ADDIU	T1,R0,00FF
SW	T1,7D70 (AT)
ADDIU	T5,T4,0001
SLTI	AT,T5,0010
BNE	AT,R0,700161AC
SW	T5,0058 (SP)
LUI	AT,8006
LUI	A1,8006
SW	R0,7DAC (AT)
ADDIU	A1,A1,7D70
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
OR	A0,R0,R0
SW	V0,005C (SP)
LW	A0,0060 (SP)
OR	A1,R0,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
LW	T7,0064 (SP)
LUI	T6,8006
ADDIU	T6,T6,7D70
BEQ	T7,R0,70016244
SW	T6,0054 (SP)
BLEZ	T7,70016244
SW	R0,0058 (SP)
LW	T0,0058 (SP)
LW	T1,0064 (SP)
LW	T8,0054 (SP)
ADDIU	T2,T0,0001
SLT	AT,T2,T1
ADDIU	T9,T8,0001
SW	T2,0058 (SP)
BNE	AT,R0,70016220
SW	T9,0054 (SP)
LW	T4,0054 (SP)
ADDIU	T3,SP,002C
ADDIU	T6,T4,0024
LWL	AT,0000 (T4)
LWR	AT,0003 (T4)
ADDIU	T4,T4,000C
ADDIU	T3,T3,000C
SW	AT,FFF4 (T3)
LWL	AT,FFF8 (T4)
LWR	AT,FFFB (T4)
SW	AT,FFF8 (T3)
LWL	AT,FFFC (T4)
LWR	AT,FFFF (T4)
BNE	T4,T6,70016250
SW	AT,FFFC (T3)
LWL	AT,0000 (T4)
LWR	AT,0003 (T4)
SW	AT,0000 (T3)
LBU	T7,002E (SP)
ANDI	T8,T7,00C0
SRA	T9,T8,0x4
BNE	T9,R0,700162E8
SW	T9,005C (SP)
JAL	70016030	;V0= PIFram data.CRC for data at A0
LW	A0,006C (SP)
LBU	T0,0052 (SP)
BEQ	V0,T0,700162E8
NOP
LW	A0,0060 (SP)
JAL	700147F4
LW	A1,0064 (SP)
SW	V0,005C (SP)
LW	T2,005C (SP)
BEQ	T2,R0,700162E0
NOP
JAL	70015EA4
NOP
BEQ	R0,R0,7001631C
LW	V0,005C (SP)
ADDIU	T1,R0,0004
SW	T1,005C (SP)
LW	T5,005C (SP)
ADDIU	AT,R0,0004
BNE	T5,AT,70016310
NOP
LW	T6,0028 (SP)
SLTI	S0,T6,0000
XORI	S0,S0,0001
ADDIU	T4,T6,FFFF
BNE	S0,R0,700161A8
SW	T4,0028 (SP)
JAL	70015EA4
NOP
LW	V0,005C (SP)
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0060
JR	RA
NOP

70016330	16F30	generate PIFram command: request write data at A2 to block A1 of controller A0's slot
ADDIU	SP,SP,FFB8
LUI	T6,8006
ADDIU	T6,T6,7D70
SW	RA,0014 (SP)
SW	A0,0048 (SP)
SW	A1,004C (SP)
SW	A2,0050 (SP)
SW	T6,0044 (SP)
SW	R0,0018 (SP)
LW	T7,0018 (SP)
LW	T9,0018 (SP)
LUI	AT,8006
SLL	T8,T7,0x2
ADDU	AT,AT,T8
SW	R0,7D70 (AT)
ADDIU	T0,T9,0001
SLTI	AT,T0,0010
BNE	AT,R0,70016354
SW	T0,0018 (SP)
ADDIU	T1,R0,0001
LUI	AT,8006
ADDIU	T2,R0,00FF
ADDIU	T3,R0,0023
ADDIU	T4,R0,0001
ADDIU	T5,R0,0003
SW	T1,7DAC (AT)
SB	T2,001C (SP)
SB	T3,001D (SP)
SB	T4,001E (SP)
SB	T5,001F (SP)
JAL	70015F80	;V0= PIFram address.CRC for address A0
LHU	A0,004E (SP)
LHU	T6,004E (SP)
ADDIU	T9,R0,00FF
SB	T9,0042 (SP)
SLL	T7,T6,0x5
OR	T8,V0,T7
SH	T8,0020 (SP)
SW	R0,0018 (SP)
LW	T0,0050 (SP)
LW	T2,0018 (SP)
LBU	T1,0000 (T0)
ADDU	T3,SP,T2
SB	T1,0022 (T3)
LW	T6,0018 (SP)
LW	T4,0050 (SP)
ADDIU	T7,T6,0001
SLTI	AT,T7,0020
ADDIU	T5,T4,0001
SW	T7,0018 (SP)
BNE	AT,R0,700163CC
SW	T5,0050 (SP)
LW	T8,0048 (SP)
BEQ	T8,R0,70016440
NOP
BLEZ	T8,70016440
SW	R0,0018 (SP)
LW	T9,0044 (SP)
SB	R0,0000 (T9)
LW	T2,0018 (SP)
LW	T4,0048 (SP)
LW	T0,0044 (SP)
ADDIU	T3,T2,0001
SLT	AT,T3,T4
ADDIU	T1,T0,0001
SW	T3,0018 (SP)
BNE	AT,R0,70016414
SW	T1,0044 (SP)
ADDIU	T6,SP,001C
ADDIU	T8,T6,0024
LW	T5,0044 (SP)
LW	AT,0000 (T6)
ADDIU	T6,T6,000C
ADDIU	T5,T5,000C
SWL	AT,FFF4 (T5)
SWR	AT,FFF7 (T5)
LW	AT,FFF8 (T6)
SWL	AT,FFF8 (T5)
SWR	AT,FFFB (T5)
LW	AT,FFFC (T6)
SWL	AT,FFFC (T5)
BNE	T6,T8,7001644C
SWR	AT,FFFF (T5)
LW	AT,0000 (T6)
ADDIU	T1,R0,00FE
SWL	AT,0000 (T5)
SWR	AT,0003 (T5)
LW	T9,0044 (SP)
ADDIU	T0,T9,0028
SW	T0,0044 (SP)
SB	T1,0000 (T0)
LW	RA,0014 (SP)
ADDIU	SP,SP,0048
JR	RA
NOP

700164B0	170B0	reads block A2 from controller A1 to @A3
ADDIU	SP,SP,FFA0
LUI	T6,8006
SW	RA,001C (SP)
ADDIU	T6,T6,7D70
ADDIU	T7,R0,0002
SW	A0,0060 (SP)
SW	A1,0064 (SP)
SW	A2,0068 (SP)
SW	A3,006C (SP)
SW	S0,0018 (SP)
SW	R0,005C (SP)
SW	T6,0054 (SP)
JAL	70015E60
SW	T7,0028 (SP)
ADDIU	T8,R0,0002
LUI	AT,8006
SB	T8,7CE0 (AT)
LW	A0,0064 (SP)
JAL	700166F4	;generate PIFram command: request read of block A1 from controller A0's slot
LHU	A1,006A (SP)
LUI	A1,8006
ADDIU	A1,A1,7D70
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
ADDIU	A0,R0,0001
SW	V0,005C (SP)
LW	A0,0060 (SP)
OR	A1,R0,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
SW	R0,0058 (SP)
LW	T0,0058 (SP)
LW	T2,0058 (SP)
LUI	AT,8006
SLL	T1,T0,0x2
ADDU	AT,AT,T1
ADDIU	T9,R0,00FF
SW	T9,7D70 (AT)
ADDIU	T3,T2,0001
SLTI	AT,T3,0010
BNE	AT,R0,70016528
SW	T3,0058 (SP)
LUI	AT,8006
LUI	A1,8006
SW	R0,7DAC (AT)
ADDIU	A1,A1,7D70
JAL	70015ED0	;read or write (A0) between PIFram and rdram address A1
OR	A0,R0,R0
SW	V0,005C (SP)
LW	A0,0060 (SP)
OR	A1,R0,R0
JAL	7000DDD0
ADDIU	A2,R0,0001
LW	T5,0064 (SP)
LUI	T4,8006
ADDIU	T4,T4,7D70
BEQ	T5,R0,700165C0
SW	T4,0054 (SP)
BLEZ	T5,700165C0
SW	R0,0058 (SP)
LW	T8,0058 (SP)
LW	T9,0064 (SP)
LW	T6,0054 (SP)
ADDIU	T0,T8,0001
SLT	AT,T0,T9
ADDIU	T7,T6,0001
SW	T0,0058 (SP)
BNE	AT,R0,7001659C
SW	T7,0054 (SP)
LW	T2,0054 (SP)
ADDIU	T1,SP,002C
ADDIU	T4,T2,0024
LWL	AT,0000 (T2)
LWR	AT,0003 (T2)
ADDIU	T2,T2,000C
ADDIU	T1,T1,000C
SW	AT,FFF4 (T1)
LWL	AT,FFF8 (T2)
LWR	AT,FFFB (T2)
SW	AT,FFF8 (T1)
LWL	AT,FFFC (T2)
LWR	AT,FFFF (T2)
BNE	T2,T4,700165CC
SW	AT,FFFC (T1)
LWL	AT,0000 (T2)
LWR	AT,0003 (T2)
SW	AT,0000 (T1)
LBU	T5,002E (SP)
ANDI	T6,T5,00C0
SRA	T7,T6,0x4
BNE	T7,R0,700166AC
SW	T7,005C (SP)
ADDIU	A0,SP,002C
JAL	70016030	;V0= PIFram data.CRC for data at A0
ADDIU	A0,A0,0006
SB	V0,0027 (SP)
LBU	T8,0027 (SP)
LBU	T0,0052 (SP)
BEQ	T8,T0,70016674
NOP
LW	A0,0060 (SP)
JAL	700147F4
LW	A1,0064 (SP)
SW	V0,005C (SP)
LW	T9,005C (SP)
BEQ	T9,R0,70016668
NOP
JAL	70015EA4
NOP
BEQ	R0,R0,700166E0
LW	V0,005C (SP)
ADDIU	T3,R0,0004
BEQ	R0,R0,700166AC
SW	T3,005C (SP)
SW	R0,0058 (SP)
LW	T4,0058 (SP)
LW	T1,006C (SP)
ADDU	T2,SP,T4
LBU	T2,0032 (T2)
SB	T2,0000 (T1)
LW	T7,0058 (SP)
LW	T5,006C (SP)
ADDIU	T8,T7,0001
SLTI	AT,T8,0020
ADDIU	T6,T5,0001
SW	T8,0058 (SP)
BNE	AT,R0,70016678
SW	T6,006C (SP)
LW	T0,005C (SP)
ADDIU	AT,R0,0004
BNE	T0,AT,700166D4
NOP
LW	T9,0028 (SP)
SLTI	S0,T9,0000
XORI	S0,S0,0001
ADDIU	T3,T9,FFFF
BNE	S0,R0,70016524
SW	T3,0028 (SP)
JAL	70015EA4
NOP
LW	V0,005C (SP)
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0060
JR	RA
NOP

700166F4	172F4	generate PIFram command: request read of block A1 from controller A0's slot
ADDIU	SP,SP,FFB8
LUI	T6,8006
ADDIU	T6,T6,7D70
SW	RA,0014 (SP)
SW	A0,0048 (SP)
SW	A1,004C (SP)
SW	T6,0044 (SP)
SW	R0,0018 (SP)
LW	T7,0018 (SP)
LW	T9,0018 (SP)
LUI	AT,8006
SLL	T8,T7,0x2
ADDU	AT,AT,T8
SW	R0,7D70 (AT)
ADDIU	T0,T9,0001
SLTI	AT,T0,0010
BNE	AT,R0,70016714
SW	T0,0018 (SP)
ADDIU	T1,R0,0001
LUI	AT,8006
ADDIU	T2,R0,00FF
ADDIU	T3,R0,0003
ADDIU	T4,R0,0021
ADDIU	T5,R0,0002
SW	T1,7DAC (AT)
SB	T2,001C (SP)
SB	T3,001D (SP)
SB	T4,001E (SP)
SB	T5,001F (SP)
JAL	70015F80	;V0= PIFram address.CRC for address A0
LHU	A0,004E (SP)
LHU	T6,004E (SP)
ADDIU	T9,R0,00FF
SB	T9,0042 (SP)
SLL	T7,T6,0x5
OR	T8,V0,T7
SH	T8,0020 (SP)
SW	R0,0018 (SP)
LW	T1,0018 (SP)
ADDIU	T0,R0,00FF
ADDU	T2,SP,T1
SB	T0,0022 (T2)
LW	T3,0018 (SP)
ADDIU	T4,T3,0001
SLTI	AT,T4,0020
BNE	AT,R0,7001678C
SW	T4,0018 (SP)
LW	T5,0048 (SP)
BEQ	T5,R0,700167F0
NOP
BLEZ	T5,700167F0
SW	R0,0018 (SP)
LW	T6,0044 (SP)
SB	R0,0000 (T6)
LW	T9,0018 (SP)
LW	T1,0048 (SP)
LW	T7,0044 (SP)
ADDIU	T0,T9,0001
SLT	AT,T0,T1
ADDIU	T8,T7,0001
SW	T0,0018 (SP)
BNE	AT,R0,700167C4
SW	T8,0044 (SP)
ADDIU	T3,SP,001C
ADDIU	T5,T3,0024
LW	T2,0044 (SP)
LW	AT,0000 (T3)
ADDIU	T3,T3,000C
ADDIU	T2,T2,000C
SWL	AT,FFF4 (T2)
SWR	AT,FFF7 (T2)
LW	AT,FFF8 (T3)
SWL	AT,FFF8 (T2)
SWR	AT,FFFB (T2)
LW	AT,FFFC (T3)
SWL	AT,FFFC (T2)
BNE	T3,T5,700167FC
SWR	AT,FFFF (T2)
LW	AT,0000 (T3)
ADDIU	T8,R0,00FE
SWL	AT,0000 (T2)
SWR	AT,0003 (T2)
LW	T6,0044 (SP)
ADDIU	T7,T6,0028
SW	T7,0044 (SP)
SB	T8,0000 (T7)
LW	RA,0014 (SP)
ADDIU	SP,SP,0048
JR	RA
NOP

70016860
ADDIU	SP,SP,FFD0
LUI	AT,8003
LWC1	F4,97F0 (AT)
SW	S0,0018 (SP)
OR	S0,A0,R0
LUI	AT,8006
SW	RA,001C (SP)
SW	A1,0034 (SP)
SW	A2,0038 (SP)
SW	A3,003C (SP)
ADDIU	A2,SP,0040
ADDIU	A1,SP,003C
ADDIU	A0,SP,0038
JAL	7001F750
SWC1	F4,7DD0 (AT)
LUI	AT,8006
LWC1	F12,0034 (SP)
LWC1	F6,7DD0 (AT)
MUL.S	F12,F12,F6
JAL	7F057EAC
SWC1	F12,0034 (SP)
LWC1	F12,0034 (SP)
JAL	7F057EA0
SWC1	F0,002C (SP)
LWC1	F14,0038 (SP)
LWC1	F18,0040 (SP)
SWC1	F0,0028 (SP)
MUL.S	F8,F14,F14
NOP
MUL.S	F10,F18,F18
JAL	7001F7E0	;F0= square root of F12
ADD.S	F12,F8,F10
OR	A0,S0,R0
JAL	70010010
SWC1	F0,0024 (SP)
MTC1	R0,F12
LWC1	F14,0024 (SP)
LWC1	F2,0028 (SP)
LWC1	F16,002C (SP)
C.EQ.S	F14,F12
LUI	AT,3F80
LWC1	F6,003C (SP)
BC1TL	70016A10
LW	RA,001C (SP)
MTC1	AT,F4
MUL.S	F8,F16,F6
LWC1	F10,0038 (SP)
LWC1	F6,0040 (SP)
DIV.S	F0,F4,F14
MUL.S	F4,F8,F10
NEG.S	F8,F6
MUL.S	F10,F8,F2
SUB.S	F6,F10,F4
MUL.S	F8,F6,F0
SWC1	F8,0000 (S0)
LWC1	F10,003C (SP)
LWC1	F6,0038 (SP)
MUL.S	F4,F2,F10
LWC1	F10,0040 (SP)
MUL.S	F8,F4,F6
NOP
MUL.S	F4,F10,F16
SUB.S	F6,F4,F8
MUL.S	F10,F6,F0
SWC1	F10,0010 (S0)
MUL.S	F6,F16,F14
LWC1	F4,0038 (SP)
SWC1	F12,0030 (S0)
MUL.S	F10,F2,F14
NEG.S	F8,F4
SWC1	F8,0020 (S0)
SWC1	F6,0004 (S0)
SWC1	F10,0014 (S0)
LWC1	F4,003C (SP)
SWC1	F12,0034 (S0)
NEG.S	F8,F4
SWC1	F8,0024 (S0)
LWC1	F6,003C (SP)
LWC1	F4,0040 (SP)
MUL.S	F10,F16,F6
LWC1	F6,0038 (SP)
MUL.S	F8,F10,F4
NOP
MUL.S	F10,F2,F6
SUB.S	F4,F10,F8
NEG.S	F10,F16
MUL.S	F6,F4,F0
SWC1	F6,0008 (S0)
LWC1	F8,0038 (SP)
LWC1	F6,003C (SP)
MUL.S	F4,F10,F8
LWC1	F8,0040 (SP)
MUL.S	F10,F2,F6
NOP
MUL.S	F6,F10,F8
SUB.S	F10,F4,F6
MUL.S	F8,F10,F0
MTC1	AT,F10
SWC1	F8,0018 (S0)
LWC1	F4,0040 (SP)
SWC1	F12,0038 (S0)
SWC1	F12,000C (S0)
NEG.S	F6,F4
SWC1	F12,001C (S0)
SWC1	F6,0028 (S0)
SWC1	F12,002C (S0)
SWC1	F10,003C (S0)
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0030
JR	RA
NOP

70016A20
MTC1	A1,F12
MTC1	A2,F14
MTC1	A3,F16
ADDIU	SP,SP,FFA0
LWC1	F4,0070 (SP)
SW	RA,001C (SP)
SW	A0,0060 (SP)
MFC1	A1,F12
MFC1	A2,F14
MFC1	A3,F16
ADDIU	A0,SP,0020
JAL	70016860
SWC1	F4,0010 (SP)
ADDIU	A0,SP,0020
JAL	7000FF10
LW	A1,0060 (SP)
LW	RA,001C (SP)
ADDIU	SP,SP,0060
JR	RA
NOP

70016A70
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A1,001C (SP)
SW	A2,0020 (SP)
SW	A3,0024 (SP)
JAL	70010010
SW	A0,0018 (SP)
LWC1	F4,0020 (SP)
LWC1	F6,001C (SP)
LUI	AT,4000
MTC1	AT,F8
SUB.S	F0,F4,F6
LW	V0,0018 (SP)
LWC1	F14,0028 (SP)
LWC1	F16,0030 (SP)
DIV.S	F10,F8,F0
LWC1	F18,002C (SP)
MTC1	AT,F6
LUI	AT,C000
SUB.S	F12,F16,F18
OR	V1,R0,R0
ADDIU	A0,R0,0004
SWC1	F10,0000 (V0)
LWC1	F4,0024 (SP)
MTC1	AT,F10
LUI	AT,3F80
SUB.S	F2,F14,F4
DIV.S	F4,F10,F12
DIV.S	F8,F6,F2
SWC1	F4,0028 (V0)
SWC1	F8,0014 (V0)
LWC1	F8,001C (SP)
LWC1	F6,0020 (SP)
ADD.S	F10,F6,F8
NEG.S	F4,F10
DIV.S	F6,F4,F0
SWC1	F6,0030 (V0)
LWC1	F8,0024 (SP)
ADD.S	F10,F14,F8
ADD.S	F8,F16,F18
NEG.S	F4,F10
NEG.S	F10,F8
DIV.S	F6,F4,F2
DIV.S	F4,F10,F12
SWC1	F6,0034 (V0)
MTC1	AT,F6
NOP
SWC1	F6,003C (V0)
SWC1	F4,0038 (V0)
LWC1	F0,0034 (SP)
LWC1	F8,0000 (V0)
ADDIU	V1,V1,0001
LWC1	F18,0004 (V0)
MUL.S	F12,F8,F0
LWC1	F14,0008 (V0)
BEQ	V1,A0,70016B90
LWC1	F16,000C (V0)
MUL.S	F10,F18,F0
LWC1	F8,0010 (V0)
LWC1	F18,0014 (V0)
MUL.S	F6,F14,F0
LWC1	F14,0018 (V0)
ADDIU	V1,V1,0001
MUL.S	F4,F16,F0
LWC1	F16,001C (V0)
SWC1	F12,0000 (V0)
MUL.S	F12,F8,F0
SWC1	F10,0004 (V0)
SWC1	F6,0008 (V0)
ADDIU	V0,V0,0010
BNE	V1,A0,70016B54
SWC1	F4,FFFC (V0)
MUL.S	F10,F18,F0
ADDIU	V0,V0,0010
SWC1	F12,FFF0 (V0)
MUL.S	F6,F14,F0
NOP
MUL.S	F4,F16,F0
SWC1	F10,FFF4 (V0)
SWC1	F6,FFF8 (V0)
SWC1	F4,FFFC (V0)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70016BC4
ADDIU	SP,SP,FF98
MTC1	A1,F12
MTC1	A2,F14
MTC1	A3,F16
LWC1	F4,0078 (SP)
LWC1	F6,007C (SP)
LWC1	F8,0080 (SP)
LWC1	F10,0084 (SP)
SW	RA,0024 (SP)
SW	A0,0068 (SP)
MFC1	A1,F12
MFC1	A2,F14
MFC1	A3,F16
ADDIU	A0,SP,0028
SWC1	F4,0010 (SP)
SWC1	F6,0014 (SP)
SWC1	F8,0018 (SP)
JAL	70016A70
SWC1	F10,001C (SP)
ADDIU	A0,SP,0028
JAL	7000FF10
LW	A1,0068 (SP)
LW	RA,0024 (SP)
ADDIU	SP,SP,0068
JR	RA
NOP

70016C30
ADDIU	SP,SP,FFE8
SW	A0,0018 (SP)
OR	A1,A0,R0
ADDIU	A0,A1,4000
SW	RA,0014 (SP)
ANDI	T6,A0,FFFF
JAL	70016C60
OR	A0,T6,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70016C60
ANDI	T6,A0,FFFF
SRL	T7,T6,0x4
ANDI	T8,T7,FFFF
ANDI	T9,T8,0400
SW	A0,0000 (SP)
BEQ	T9,R0,70016C98
OR	V0,T8,R0
ANDI	T0,T8,03FF
SLL	T1,T0,0x1
SUBU	T2,R0,T1
LUI	V1,8002
ADDU	V1,V1,T2
BEQ	R0,R0,70016CAC
LH	V1,7FCE (V1)
ANDI	T3,V0,03FF
SLL	T4,T3,0x1
LUI	V1,8002
ADDU	V1,V1,T4
LH	V1,77D0 (V1)
ANDI	T5,V0,0800
BEQ	T5,R0,70016CC8
OR	V0,V1,R0
SUBU	V0,R0,V1
SLL	T6,V0,0x10
JR	RA
SRA	V0,T6,0x10
JR	RA
NOP

70016CD0
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A1,001C (SP)
SW	A2,0020 (SP)
SW	A3,0024 (SP)
JAL	70010010
SW	A0,0018 (SP)
LW	A0,0018 (SP)
LWC1	F4,001C (SP)
SWC1	F4,0030 (A0)
LWC1	F6,0020 (SP)
SWC1	F6,0034 (A0)
LWC1	F8,0024 (SP)
SWC1	F8,0038 (A0)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70016D18
ADDIU	SP,SP,FF98
SW	RA,0014 (SP)
SW	A0,0068 (SP)
SW	A1,006C (SP)
SW	A2,0070 (SP)
SW	A3,0074 (SP)
JAL	70010010
ADDIU	A0,SP,0028
LWC1	F4,006C (SP)
LWC1	F6,0070 (SP)
LWC1	F8,0074 (SP)
ADDIU	A0,SP,0028
LW	A1,0068 (SP)
SWC1	F4,0058 (SP)
SWC1	F6,005C (SP)
JAL	7000FF10
SWC1	F8,0060 (SP)
LW	RA,0014 (SP)
ADDIU	SP,SP,0068
JR	RA
NOP

70016D70
SLTI	AT,A2,0010
BNE	AT,R0,70016E54
XOR	V0,A0,A1
ANDI	V0,V0,0003
BNE	V0,R0,70016DE8
SUBU	T8,R0,A0
ANDI	T8,T8,0003
BEQ	T8,R0,70016DAC
SUBU	A2,A2,T8
OR	V0,V1,R0
LWL	V0,0000 (A0)
LWL	V1,0000 (A1)
ADDU	A0,A0,T8
ADDU	A1,A1,T8
BNE	V0,V1,70016E84
ADDIU	AT,R0,FFFC
AND	A3,A2,AT
BEQ	A3,R0,70016E54
SUBU	A2,A2,A3
ADDU	A3,A3,A0
LW	V0,0000 (A0)
LW	V1,0000 (A1)
ADDIU	A0,A0,0004
ADDIU	A1,A1,0004
BNE	V0,V1,70016E84
NOP
BNEL	A0,A3,70016DC4
LW	V0,0000 (A0)
BEQ	R0,R0,70016E54
NOP
SUBU	A3,R0,A1
ANDI	A3,A3,0003
BEQ	A3,R0,70016E1C
SUBU	A2,A2,A3
ADDU	A3,A3,A0
LBU	V0,0000 (A0)
LBU	V1,0000 (A1)
ADDIU	A0,A0,0001
ADDIU	A1,A1,0001
BNE	V0,V1,70016E84
NOP
BNEL	A0,A3,70016E00
LBU	V0,0000 (A0)
ADDIU	AT,R0,FFFC
AND	A3,A2,AT
BEQ	A3,R0,70016E54
SUBU	A2,A2,A3
ADDU	A3,A3,A0
LWL	V0,0000 (A0)
LW	V1,0000 (A1)
LWR	V0,0003 (A0)
ADDIU	A0,A0,0004
ADDIU	A1,A1,0004
BNE	V0,V1,70016E84
NOP
BNEL	A0,A3,70016E34
LWL	V0,0000 (A0)
BLEZ	A2,70016E7C
ADDU	A3,A2,A0
LBU	V0,0000 (A0)
LBU	V1,0000 (A1)
ADDIU	A0,A0,0001
ADDIU	A1,A1,0001
BNE	V0,V1,70016E84
NOP
BNEL	A0,A3,70016E60
LBU	V0,0000 (A0)
JR	RA
OR	V0,R0,R0
JR	RA
ADDIU	V0,R0,0001

70016E90
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A1,001C (SP)
SW	A2,0020 (SP)
SW	A3,0024 (SP)
JAL	70010010
SW	A0,0018 (SP)
LW	A0,0018 (SP)
LWC1	F4,001C (SP)
LUI	AT,3F80
MTC1	AT,F10
SWC1	F4,0000 (A0)
LWC1	F6,0020 (SP)
SWC1	F6,0014 (A0)
LWC1	F8,0024 (SP)
SWC1	F10,003C (A0)
SWC1	F8,0028 (A0)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70016EE4
MTC1	A1,F12
MTC1	A2,F14
MTC1	A3,F16
ADDIU	SP,SP,FFA8
SW	RA,0014 (SP)
SW	A0,0058 (SP)
MFC1	A1,F12
MFC1	A2,F14
MFC1	A3,F16
JAL	70016E90
ADDIU	A0,SP,0018
ADDIU	A0,SP,0018
JAL	7000FF10
LW	A1,0058 (SP)
LW	RA,0014 (SP)
ADDIU	SP,SP,0058
JR	RA
NOP

70016F30
ADDIU	SP,SP,FFB8
SW	RA,0044 (SP)
SDC1	F30,0038 (SP)
SDC1	F28,0030 (SP)
SDC1	F26,0028 (SP)
SDC1	F24,0020 (SP)
SDC1	F22,0018 (SP)
SDC1	F20,0010 (SP)
SW	A2,0050 (SP)
SW	A3,0054 (SP)
SW	A0,0048 (SP)
JAL	70010010
SW	A1,004C (SP)
LWC1	F4,005C (SP)
LWC1	F6,0050 (SP)
LWC1	F8,0060 (SP)
LWC1	F10,0054 (SP)
SUB.S	F0,F4,F6
LWC1	F6,0058 (SP)
LWC1	F4,0064 (SP)
SUB.S	F22,F8,F10
MUL.S	F8,F0,F0
MOV.S	F20,F0
SUB.S	F24,F4,F6
MUL.S	F10,F22,F22
ADD.S	F4,F8,F10
MUL.S	F6,F24,F24
JAL	7001F7E0	;F0= square root of F12
ADD.S	F12,F4,F6
LUI	AT,BFF0
MTC1	AT,F9
MTC1	R0,F8
CVT.D.S	F10,F0
LWC1	F6,006C (SP)
DIV.D	F4,F8,F10
LWC1	F10,0070 (SP)
CVT.S.D	F2,F4
MUL.S	F20,F20,F2
NOP
MUL.S	F22,F22,F2
NOP
MUL.S	F24,F24,F2
NOP
MUL.S	F8,F6,F24
NOP
MUL.S	F4,F10,F22
SUB.S	F26,F8,F4
MUL.S	F8,F10,F20
LWC1	F4,0068 (SP)
MUL.S	F10,F4,F24
SUB.S	F28,F8,F10
MUL.S	F8,F4,F22
NOP
MUL.S	F10,F6,F20
SUB.S	F30,F8,F10
MUL.S	F4,F26,F26
NOP
MUL.S	F6,F28,F28
ADD.S	F8,F4,F6
MUL.S	F10,F30,F30
JAL	7001F7E0	;F0= square root of F12
ADD.S	F12,F8,F10
LUI	AT,3FF0
MTC1	AT,F5
MTC1	R0,F4
CVT.D.S	F6,F0
DIV.D	F8,F4,F6
CVT.S.D	F14,F8
MUL.S	F26,F26,F14
NOP
MUL.S	F28,F28,F14
NOP
MUL.S	F30,F30,F14
NOP
MUL.S	F10,F22,F30
NOP
MUL.S	F4,F24,F28
NOP
MUL.S	F6,F24,F26
NOP
MUL.S	F8,F20,F30
SUB.S	F2,F10,F4
MUL.S	F10,F20,F28
NOP
MUL.S	F4,F22,F26
SWC1	F2,0068 (SP)
SUB.S	F16,F6,F8
MUL.S	F6,F2,F2
NOP
MUL.S	F8,F16,F16
SWC1	F16,006C (SP)
SUB.S	F18,F10,F4
MUL.S	F4,F18,F18
ADD.S	F10,F6,F8
SWC1	F18,0070 (SP)
JAL	7001F7E0	;F0= square root of F12
ADD.S	F12,F10,F4
LUI	AT,8003
LDC1	F2,9800 (AT)
LUI	AT,4060
MTC1	AT,F17
LUI	AT,3FF0
MTC1	AT,F7
MTC1	R0,F6
CVT.D.S	F8,F0
LWC1	F4,0068 (SP)
DIV.D	F10,F6,F8
LWC1	F8,006C (SP)
MTC1	R0,F16
LW	A0,0048 (SP)
LW	A1,004C (SP)
ADDIU	V0,R0,0080
CVT.S.D	F14,F10
MUL.S	F6,F4,F14
LWC1	F4,0070 (SP)
MUL.S	F10,F8,F14
CVT.D.S	F8,F26
SWC1	F6,0068 (SP)
MUL.S	F6,F4,F14
SWC1	F10,006C (SP)
MUL.D	F12,F8,F16
SWC1	F6,0070 (SP)
C.LT.D	F12,F2
NOP
BC1FL	70017134
MOV.D	F0,F2
BEQ	R0,R0,70017134
MOV.D	F0,F12
MOV.D	F0,F2
CVT.D.S	F4,F28
TRUNC.W.D	F10,F0
MUL.D	F12,F4,F16
MFC1	T8,F10
NOP
SB	T8,0008 (A1)
C.LT.D	F12,F2
NOP
BC1FL	70017168
MOV.D	F0,F2
BEQ	R0,R0,70017168
MOV.D	F0,F12
MOV.D	F0,F2
CVT.D.S	F8,F30
TRUNC.W.D	F6,F0
MUL.D	F12,F8,F16
MFC1	T1,F6
NOP
SB	T1,0009 (A1)
C.LT.D	F12,F2
NOP
BC1FL	7001719C
MOV.D	F0,F2
BEQ	R0,R0,7001719C
MOV.D	F0,F12
MOV.D	F0,F2
TRUNC.W.D	F10,F0
MFC1	T4,F10
NOP
SB	T4,000A (A1)
LWC1	F4,0068 (SP)
CVT.D.S	F6,F4
MUL.D	F12,F6,F16
C.LT.D	F12,F2
NOP
BC1FL	700171D4
MOV.D	F0,F2
BEQ	R0,R0,700171D4
MOV.D	F0,F12
MOV.D	F0,F2
TRUNC.W.D	F8,F0
MFC1	T7,F8
NOP
SB	T7,0018 (A1)
LWC1	F10,006C (SP)
CVT.D.S	F4,F10
MUL.D	F12,F4,F16
C.LT.D	F12,F2
NOP
BC1FL	7001720C
MOV.D	F0,F2
BEQ	R0,R0,7001720C
MOV.D	F0,F12
MOV.D	F0,F2
TRUNC.W.D	F6,F0
MFC1	T0,F6
NOP
SB	T0,0019 (A1)
LWC1	F8,0070 (SP)
CVT.D.S	F10,F8
MUL.D	F12,F10,F16
C.LT.D	F12,F2
NOP
BC1FL	70017244
MOV.D	F0,F2
BEQ	R0,R0,70017244
MOV.D	F0,F12
MOV.D	F0,F2
TRUNC.W.D	F4,F0
SB	R0,0000 (A1)
SB	R0,0001 (A1)
SB	R0,0002 (A1)
MFC1	T3,F4
SB	R0,0003 (A1)
SB	R0,0004 (A1)
SB	R0,0005 (A1)
SB	R0,0006 (A1)
SB	R0,0007 (A1)
SB	R0,0010 (A1)
SB	V0,0011 (A1)
SB	R0,0012 (A1)
SB	R0,0013 (A1)
SB	R0,0014 (A1)
SB	V0,0015 (A1)
SB	R0,0016 (A1)
SB	R0,0017 (A1)
SB	T3,001A (A1)
SWC1	F26,0000 (A0)
LWC1	F18,0050 (SP)
LWC1	F16,0054 (SP)
LWC1	F14,0058 (SP)
MUL.S	F6,F18,F26
LWC1	F0,0068 (SP)
LWC1	F12,006C (SP)
MUL.S	F8,F16,F28
LWC1	F2,0070 (SP)
SWC1	F28,0010 (A0)
MUL.S	F4,F14,F30
SWC1	F30,0020 (A0)
SWC1	F20,0008 (A0)
SWC1	F22,0018 (A0)
SWC1	F24,0028 (A0)
ADD.S	F10,F6,F8
SWC1	F0,0004 (A0)
SWC1	F12,0014 (A0)
SWC1	F2,0024 (A0)
ADD.S	F6,F10,F4
MUL.S	F10,F18,F0
MTC1	R0,F0
LUI	AT,3F80
MUL.S	F4,F16,F12
NEG.S	F8,F6
SWC1	F8,0030 (A0)
MUL.S	F8,F14,F2
ADD.S	F6,F10,F4
ADD.S	F10,F6,F8
NEG.S	F4,F10
SWC1	F4,0034 (A0)
LWC1	F6,0050 (SP)
LWC1	F10,0054 (SP)
MUL.S	F8,F6,F20
NOP
MUL.S	F4,F10,F22
LWC1	F10,0058 (SP)
SWC1	F0,000C (A0)
SWC1	F0,001C (A0)
SWC1	F0,002C (A0)
ADD.S	F6,F8,F4
MUL.S	F8,F10,F24
ADD.S	F4,F6,F8
MTC1	AT,F6
NEG.S	F10,F4
SWC1	F6,003C (A0)
SWC1	F10,0038 (A0)
LW	RA,0044 (SP)
LDC1	F30,0038 (SP)
LDC1	F28,0030 (SP)
LDC1	F26,0028 (SP)
LDC1	F24,0020 (SP)
LDC1	F22,0018 (SP)
LDC1	F20,0010 (SP)
JR	RA
ADDIU	SP,SP,0048

70017370
ADDIU	SP,SP,FF88
LWC1	F4,0088 (SP)
MTC1	A2,F12
MTC1	A3,F14
SWC1	F4,0010 (SP)
LWC1	F4,00A0 (SP)
LWC1	F6,008C (SP)
LWC1	F8,0090 (SP)
LWC1	F10,0094 (SP)
LWC1	F16,0098 (SP)
LWC1	F18,009C (SP)
SW	RA,0034 (SP)
SW	A0,0078 (SP)
MFC1	A2,F12
MFC1	A3,F14
ADDIU	A0,SP,0038
SWC1	F4,0028 (SP)
SWC1	F6,0014 (SP)
SWC1	F8,0018 (SP)
SWC1	F10,001C (SP)
SWC1	F16,0020 (SP)
JAL	70016F30
SWC1	F18,0024 (SP)
ADDIU	A0,SP,0038
JAL	7000FF10
LW	A1,0078 (SP)
LW	RA,0034 (SP)
ADDIU	SP,SP,0078
JR	RA
NOP

700173F0
ADDIU	SP,SP,FFB0
SW	RA,004C (SP)
SW	S0,0048 (SP)
OR	S0,A0,R0
SDC1	F30,0040 (SP)
SDC1	F28,0038 (SP)
SDC1	F26,0030 (SP)
SDC1	F24,0028 (SP)
SDC1	F22,0020 (SP)
SDC1	F20,0018 (SP)
SW	A1,0054 (SP)
SW	A2,0058 (SP)
JAL	70010010
SW	A3,005C (SP)
LWC1	F4,0060 (SP)
LWC1	F6,0054 (SP)
LWC1	F8,0064 (SP)
LWC1	F10,0058 (SP)
SUB.S	F0,F4,F6
LWC1	F6,005C (SP)
LWC1	F4,0068 (SP)
SUB.S	F22,F8,F10
MUL.S	F8,F0,F0
MOV.S	F20,F0
SUB.S	F24,F4,F6
MUL.S	F10,F22,F22
ADD.S	F4,F8,F10
MUL.S	F6,F24,F24
JAL	7001F7E0	;F0= square root of F12
ADD.S	F12,F4,F6
LUI	AT,BFF0
MTC1	AT,F9
MTC1	R0,F8
CVT.D.S	F10,F0
LWC1	F6,0070 (SP)
DIV.D	F4,F8,F10
LWC1	F10,0074 (SP)
CVT.S.D	F2,F4
MUL.S	F20,F20,F2
NOP
MUL.S	F22,F22,F2
NOP
MUL.S	F24,F24,F2
NOP
MUL.S	F8,F6,F24
NOP
MUL.S	F4,F10,F22
SUB.S	F26,F8,F4
MUL.S	F8,F10,F20
LWC1	F4,006C (SP)
MUL.S	F10,F4,F24
SUB.S	F28,F8,F10
MUL.S	F8,F4,F22
NOP
MUL.S	F10,F6,F20
SUB.S	F30,F8,F10
MUL.S	F4,F26,F26
NOP
MUL.S	F6,F28,F28
ADD.S	F8,F4,F6
MUL.S	F10,F30,F30
JAL	7001F7E0	;F0= square root of F12
ADD.S	F12,F8,F10
LUI	AT,3FF0
MTC1	AT,F5
MTC1	R0,F4
CVT.D.S	F6,F0
DIV.D	F8,F4,F6
CVT.S.D	F2,F8
MUL.S	F26,F26,F2
NOP
MUL.S	F28,F28,F2
NOP
MUL.S	F30,F30,F2
NOP
MUL.S	F10,F22,F30
NOP
MUL.S	F4,F24,F28
NOP
MUL.S	F6,F24,F26
NOP
MUL.S	F8,F20,F30
SUB.S	F14,F10,F4
MUL.S	F10,F20,F28
NOP
MUL.S	F4,F22,F26
SWC1	F14,006C (SP)
SUB.S	F16,F6,F8
MUL.S	F6,F14,F14
NOP
MUL.S	F8,F16,F16
SWC1	F16,0070 (SP)
SUB.S	F18,F10,F4
MUL.S	F4,F18,F18
ADD.S	F10,F6,F8
SWC1	F18,0074 (SP)
JAL	7001F7E0	;F0= square root of F12
ADD.S	F12,F10,F4
LUI	AT,3FF0
MTC1	AT,F7
MTC1	R0,F6
CVT.D.S	F8,F0
LWC1	F14,006C (SP)
DIV.D	F10,F6,F8
LWC1	F12,0070 (SP)
LWC1	F4,0074 (SP)
LUI	AT,3F80
CVT.S.D	F2,F10
MUL.S	F14,F14,F2
NOP
MUL.S	F12,F12,F2
NOP
MUL.S	F6,F4,F2
SWC1	F6,0074 (SP)
SWC1	F26,0000 (S0)
SWC1	F28,0010 (S0)
SWC1	F30,0020 (S0)
LWC1	F8,0054 (SP)
LWC1	F4,0058 (SP)
MUL.S	F10,F8,F26
NOP
MUL.S	F6,F4,F28
LWC1	F4,005C (SP)
SWC1	F14,0004 (S0)
SWC1	F12,0014 (S0)
ADD.S	F8,F10,F6
MUL.S	F10,F4,F30
ADD.S	F6,F8,F10
NEG.S	F4,F6
SWC1	F4,0030 (S0)
LWC1	F0,0074 (SP)
SWC1	F12,0070 (SP)
SWC1	F14,006C (SP)
LWC1	F14,0054 (SP)
LWC1	F12,0058 (SP)
LWC1	F2,005C (SP)
SWC1	F0,0024 (S0)
LWC1	F8,006C (SP)
LWC1	F6,0070 (SP)
SWC1	F20,0008 (S0)
MUL.S	F10,F14,F8
SWC1	F22,0018 (S0)
SWC1	F24,0028 (S0)
MUL.S	F4,F12,F6
ADD.S	F8,F10,F4
MUL.S	F6,F2,F0
MTC1	R0,F0
NOP
SWC1	F0,000C (S0)
SWC1	F0,001C (S0)
SWC1	F0,002C (S0)
ADD.S	F10,F8,F6
MUL.S	F8,F14,F20
NOP
MUL.S	F6,F12,F22
NEG.S	F4,F10
SWC1	F4,0034 (S0)
MUL.S	F4,F2,F24
ADD.S	F10,F8,F6
ADD.S	F8,F10,F4
MTC1	AT,F10
NEG.S	F6,F8
SWC1	F10,003C (S0)
SWC1	F6,0038 (S0)
LW	RA,004C (SP)
LW	S0,0048 (SP)
LDC1	F30,0040 (SP)
LDC1	F28,0038 (SP)
LDC1	F26,0030 (SP)
LDC1	F24,0028 (SP)
LDC1	F22,0020 (SP)
LDC1	F20,0018 (SP)
JR	RA
ADDIU	SP,SP,0050

700176A8
ADDIU	SP,SP,FF90
LWC1	F4,0080 (SP)
MTC1	A1,F12
MTC1	A2,F14
MTC1	A3,F16
SWC1	F4,0010 (SP)
LWC1	F4,0094 (SP)
LWC1	F6,0084 (SP)
LWC1	F8,0088 (SP)
LWC1	F10,008C (SP)
LWC1	F18,0090 (SP)
SW	RA,002C (SP)
SW	A0,0070 (SP)
MFC1	A1,F12
MFC1	A2,F14
MFC1	A3,F16
ADDIU	A0,SP,0030
SWC1	F4,0024 (SP)
SWC1	F6,0014 (SP)
SWC1	F8,0018 (SP)
SWC1	F10,001C (SP)
JAL	700173F0
SWC1	F18,0020 (SP)
ADDIU	A0,SP,0030
JAL	7000FF10
LW	A1,0070 (SP)
LW	RA,002C (SP)
ADDIU	SP,SP,0070
JR	RA
NOP

70017720
ADDIU	SP,SP,FFC8
LUI	AT,8003
LWC1	F4,9810 (AT)
SW	S0,0018 (SP)
OR	S0,A0,R0
LUI	AT,8006
SW	RA,001C (SP)
SW	A1,003C (SP)
SW	A2,0040 (SP)
SW	A3,0044 (SP)
ADDIU	A2,SP,0048
ADDIU	A1,SP,0044
ADDIU	A0,SP,0040
JAL	7001F750
SWC1	F4,7DE0 (AT)
LUI	AT,8006
LWC1	F12,003C (SP)
LWC1	F6,7DE0 (AT)
MUL.S	F12,F12,F6
JAL	7F057EAC
SWC1	F12,003C (SP)
LWC1	F12,003C (SP)
JAL	7F057EA0
SWC1	F0,0034 (SP)
LWC1	F10,0040 (SP)
LWC1	F4,0044 (SP)
LUI	AT,3F80
MTC1	AT,F8
MUL.S	F6,F10,F4
OR	A0,S0,R0
SUB.S	F2,F8,F0
LWC1	F8,0048 (SP)
SWC1	F0,0030 (SP)
MUL.S	F16,F6,F2
NOP
MUL.S	F6,F4,F8
SWC1	F16,002C (SP)
MUL.S	F18,F6,F2
NOP
MUL.S	F4,F8,F10
SWC1	F18,0028 (SP)
MUL.S	F6,F4,F2
JAL	70010010
SWC1	F6,0024 (SP)
LWC1	F8,0040 (SP)
LUI	AT,3F80
MTC1	AT,F10
MUL.S	F0,F8,F8
LWC1	F12,0030 (SP)
LWC1	F14,0034 (SP)
LWC1	F16,002C (SP)
LWC1	F18,0028 (SP)
SUB.S	F4,F10,F0
MUL.S	F6,F4,F12
ADD.S	F8,F6,F0
SWC1	F8,0000 (S0)
LWC1	F10,0040 (SP)
MUL.S	F4,F10,F14
SUB.S	F6,F18,F4
SWC1	F6,0024 (S0)
LWC1	F8,0040 (SP)
MUL.S	F10,F8,F14
MTC1	AT,F8
ADD.S	F4,F10,F18
SWC1	F4,0018 (S0)
LWC1	F6,0044 (SP)
MUL.S	F2,F6,F6
SUB.S	F10,F8,F2
MUL.S	F4,F10,F12
ADD.S	F6,F4,F2
SWC1	F6,0014 (S0)
LWC1	F8,0044 (SP)
LWC1	F4,0024 (SP)
MUL.S	F10,F8,F14
ADD.S	F6,F10,F4
SWC1	F6,0020 (S0)
LWC1	F10,0044 (SP)
LWC1	F8,0024 (SP)
MUL.S	F4,F10,F14
SUB.S	F6,F8,F4
MTC1	AT,F8
SWC1	F6,0008 (S0)
LWC1	F10,0048 (SP)
MUL.S	F0,F10,F10
SUB.S	F4,F8,F0
MUL.S	F6,F4,F12
ADD.S	F10,F6,F0
SWC1	F10,0028 (S0)
LWC1	F8,0048 (SP)
MUL.S	F4,F8,F14
SUB.S	F6,F16,F4
SWC1	F6,0010 (S0)
LWC1	F10,0048 (SP)
MUL.S	F8,F10,F14
ADD.S	F4,F8,F16
SWC1	F4,0004 (S0)
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0038
JR	RA
NOP

700178B4
MTC1	A1,F12
MTC1	A2,F14
MTC1	A3,F16
ADDIU	SP,SP,FFA0
LWC1	F4,0070 (SP)
SW	RA,001C (SP)
SW	A0,0060 (SP)
MFC1	A1,F12
MFC1	A2,F14
MFC1	A3,F16
ADDIU	A0,SP,0020
JAL	70017720
SWC1	F4,0010 (SP)
ADDIU	A0,SP,0020
JAL	7000FF10
LW	A1,0060 (SP)
LW	RA,001C (SP)
ADDIU	SP,SP,0060
JR	RA
NOP

70017910
TRUNC.L.D	F4,F12
DMFC1	V0,F4
NOP
DSLL32	V1,V0,0x0
DSRA32	V1,V1,0x0
JR	RA
DSRA32	V0,V0,0x0

7001792C
TRUNC.L.S	F4,F12
DMFC1	V0,F4
NOP
DSLL32	V1,V0,0x0
DSRA32	V1,V1,0x0
JR	RA
DSRA32	V0,V0,0x0

70017948
CFC1	T6,F31
ADDIU	V0,R0,0001
CTC1	V0,F31
NOP
CVT.L.D	F4,F12
CFC1	V0,F31
NOP
ANDI	AT,V0,0004
ANDI	V0,V0,0078
BEQ	V0,R0,700179C4
LUI	AT,43E0
MTC1	AT,F5
MTC1	R0,F4
ADDIU	V0,R0,0001
SUB.D	F4,F12,F4
CTC1	V0,F31
NOP
CVT.L.D	F4,F4
CFC1	V0,F31
NOP
ANDI	AT,V0,0004
ANDI	V0,V0,0078
BNE	V0,R0,700179BC
NOP
LUI	T7,8003
LD	T7,9820 (T7)
DMFC1	V0,F4
BEQ	R0,R0,700179D4
OR	V0,V0,T7
BEQ	R0,R0,700179D4
ADDIU	V0,R0,FFFF
DMFC1	V0,F4
NOP
BLTZ	V0,700179BC
NOP
CTC1	T6,F31
DSLL32	V1,V0,0x0
DSRA32	V1,V1,0x0
JR	RA
DSRA32	V0,V0,0x0

700179E8
CFC1	T6,F31
ADDIU	V0,R0,0001
CTC1	V0,F31
NOP
CVT.L.S	F4,F12
CFC1	V0,F31
NOP
ANDI	AT,V0,0004
ANDI	V0,V0,0078
BEQ	V0,R0,70017A60
LUI	AT,5F00
MTC1	AT,F4
ADDIU	V0,R0,0001
SUB.S	F4,F12,F4
CTC1	V0,F31
NOP
CVT.L.S	F4,F4
CFC1	V0,F31
NOP
ANDI	AT,V0,0004
ANDI	V0,V0,0078
BNE	V0,R0,70017A58
NOP
LUI	T7,8003
LD	T7,9828 (T7)
DMFC1	V0,F4
BEQ	R0,R0,70017A70
OR	V0,V0,T7
BEQ	R0,R0,70017A70
ADDIU	V0,R0,FFFF
DMFC1	V0,F4
NOP
BLTZ	V0,70017A58
NOP
CTC1	T6,F31
DSLL32	V1,V0,0x0
DSRA32	V1,V1,0x0
JR	RA
DSRA32	V0,V0,0x0

70017A84
SW	A0,0000 (SP)
SW	A1,0004 (SP)
LD	T6,0000 (SP)
DMTC1	T6,F4
JR	RA
CVT.D.L	F0,F4

70017A9C
SW	A0,0000 (SP)
SW	A1,0004 (SP)
LD	T6,0000 (SP)
DMTC1	T6,F4
JR	RA
CVT.S.L	F0,F4

70017AB4
SW	A0,0000 (SP)
SW	A1,0004 (SP)
LD	T6,0000 (SP)
DMTC1	T6,F4
BGEZ	T6,70017AE0
CVT.D.L	F0,F4
LUI	AT,41F0
MTC1	AT,F7
MTC1	R0,F6
NOP
ADD.D	F0,F0,F6
JR	RA
NOP

70017AE8
SW	A0,0000 (SP)
SW	A1,0004 (SP)
LD	T6,0000 (SP)
DMTC1	T6,F4
BGEZ	T6,70017B10
CVT.S.L	F0,F4
LUI	AT,4F80
MTC1	AT,F6
NOP
ADD.S	F0,F0,F6
JR	RA
NOP

70017B20	18720	A0->COP0 Status
MTC0	A0,Status
NOP
JR	RA
NOP

70017B30	18730	V0=COP0 Status
MFC0	V0,Status
JR	RA
NOP

70017B40	18740	SIrawread: copy value from uncached address A0 to A1; V0=0 if okay or -1 if SI error
	accepts: A0=SI/PIF hardware address, A1=p->target
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
JAL	7001F720	;V0= TRUE if SI not ready, FALSE otherwise
SW	A1,001C (SP)
BEQ	V0,R0,70017B64	;branch if ready
NOP
BEQ	R0,R0,70017B80	;return -1
ADDIU	V0,R0,FFFF
//70017B64:
LW	T6,0018 (SP)	;A0 f/ caller
LUI	AT,A000
LW	T9,001C (SP)	;A1 f/ caller
OR	T7,T6,AT	;T7=uncached address A0
LW	T8,0000 (T7)	;T8=A0
OR	V0,R0,R0	;V0=0
SW	T8,0000 (T9)	;T8->A1
//70017B80:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70017B90	18790	SIrawwrite: write value A1 to uncached address A0; V0=0 if okay or -1 if SI error
	accepts: A0=SI/PIF hardware address, A1=value
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
JAL	7001F720	;V0= TRUE if SI not ready, FALSE otherwise
SW	A1,001C (SP)
BEQ	V0,R0,70017BB4
NOP
BEQ	R0,R0,70017BCC	;return -1
ADDIU	V0,R0,FFFF
//70017BB4:
LW	T7,0018 (SP)	;T7=A0 f/ caller
LW	T6,001C (SP)	;T6=A1 f/ caller
LUI	AT,A000
OR	T8,T7,AT	;T8=A0 | A0000000
OR	V0,R0,R0	;V0=0
SW	T6,0000 (T8)	;A1->uncached address A0
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70017BE0	187E0	PIrawread: copies word at uncached hardware address A0 to A1; V0=0 if okay
	accepts: A0=hardware address, A1=p->target
LUI	T6,A460
LW	A2,0010 (T6)	;A2=PI Status
ADDIU	SP,SP,FFF8
ANDI	T7,A2,0003
BEQ	T7,R0,70017C0C	;branch if ready
NOP
//70017BF8:
LUI	T8,A460
LW	A2,0010 (T8)	;A2=PI Status
ANDI	T9,A2,0003
BNE	T9,R0,70017BF8	;loop until ready
NOP
//70017C0C:
LUI	T0,8000
LW	T0,0308 (T0)	;T0=80000308: base address of current PI BSD range 1
LUI	AT,A000
OR	V0,R0,R0	;V0=0: return okay
OR	T1,T0,A0	;T1= address | base
OR	T2,T1,AT	;T2= address | A0000000
LW	T3,0000 (T2)	;T3= value from uncached address A0
ADDIU	SP,SP,0008
JR	RA
SW	T3,0000 (A1)	;value->target

70017C40	18840	initialize A1 bytes at A0 to zero
	accepts: A0=p->target, A1=length
SLTI	AT,A1,000C
BNE	AT,R0,70017CBC	;branch if A1<C
SUBU	V1,R0,A0	;V1= 0-A0
ANDI	V1,V1,0003
BEQ	V1,R0,70017C60	;branch if an aligned address
SUBU	A1,A1,V1	;A1-=V1
SWL	R0,0000 (A0)	;fill unaligned segment with 0
ADDU	A0,A0,V1	;A0+=V1
//70017C60:	get# sets of 20
ADDIU	AT,R0,FFE0
AND	A3,A1,AT	;A3= length & ~1F
BEQ	A3,R0,70017C9C	;skip if no remaining sets of 20
SUBU	A1,A1,A3	;A1 &= 1F
ADDU	A3,A3,A0	;A3= target+offset
//70017C74:	initialize in 0x20 clumps
ADDIU	A0,A0,0020
SW	R0,FFE0 (A0)
SW	R0,FFE4 (A0)
SW	R0,FFE8 (A0)
SW	R0,FFEC (A0)
SW	R0,FFF0 (A0)
SW	R0,FFF4 (A0)
SW	R0,FFF8 (A0)
BNE	A0,A3,70017C74
SW	R0,FFFC (A0)
//70017C9C:	initialize remaining values
ADDIU	AT,R0,FFFC
AND	A3,A1,AT
BEQ	A3,R0,70017CBC
SUBU	A1,A1,A3
ADDU	A3,A3,A0
//70017CB0:	loop for words
ADDIU	A0,A0,0004
BNE	A0,A3,70017CB0
SW	R0,FFFC (A0)
//70017CBC:
BLEZ	A1,70017CD4
NOP
ADDU	A1,A1,A0
//70017CC8:	initialize remaining bytes
ADDIU	A0,A0,0001
BNE	A0,A1,70017CC8
SB	R0,FFFF (A0)
//70017CD4:	return
JR	RA
NOP

70017CE0	188E0	set entry A0 in 80027700 to A1; A1 is expected to be a function pointer
	accepts: A0=entry#, A1=p->function
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)
SW	A1,002C (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LW	T7,0028 (SP)	;T7=A0 f/ caller
LW	T6,002C (SP)	;T6=A1 f/ caller
LUI	AT,8002
SLL	T8,T7,0x2	;T8= T7->offset
OR	S0,V0,R0	;S0=V0: flag
ADDU	AT,AT,T8
OR	A0,S0,R0	;A0=S0: flag
JAL	70018610	;A0->COP0 status
SW	T6,7700 (AT)	;A1->80027700+offset
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

70017D30	18930	64DD handler!?
LUI	T6,8002
LW	T6,6990 (T6)	;T6=80026990: 64DD presence flag
ADDIU	SP,SP,FFC0
SW	RA,001C (SP)
BNE	T6,R0,70017D50	;branch if present
NOP
BEQ	R0,R0,70018404	;return 0
OR	V0,R0,R0
//70017D50:
LUI	T7,8007
LW	T7,9074 (T7)	;T7=80069074: 
LUI	T3,A460
ADDIU	T8,T7,0014	;T8=T7+14: 
SW	T8,0030 (SP)	;SP+30= T8
LHU	T9,001A (T7)	;T9=T7+1A: 
SLL	T0,T9,0x3
ADDU	T0,T0,T9
SLL	T0,T0,0x2	;T0=T9*24
ADDU	T1,T8,T0	;T1=T8+T0: base+offset
ADDIU	T2,T1,0018
SW	T2,002C (SP)	;SP+2C=T1+18
LW	T4,0010 (T3)	;T4=A4600010: PI Status
SW	T4,0038 (SP)
LW	T5,0038 (SP)	;T5=PI Status
ANDI	T6,T5,0001
BEQ	T6,R0,70017E64	;branch if PI ready
NOP
//70017D98:	if it wasn't ready...
ADDIU	T7,R0,0003
LUI	T9,A460
SW	T7,0010 (T9)	;3->PI Status error flags
LUI	T8,A460
LW	T0,0010 (T8)	;T0=PI Status
SW	T0,0038 (SP)	;SP+38= new PI Status
LW	T1,0038 (SP)
ANDI	T2,T1,0002
BEQ	T2,R0,70017DDC	;branch if DMA finished
NOP
//70017DC0:	loop until ready
LUI	T3,A460
LW	T4,0010 (T3)
SW	T4,0038 (SP)
LW	T5,0038 (SP)
ANDI	T6,T5,0002
BNE	T6,R0,70017DC0
NOP
//70017DDC:	test if interrupt occured
LUI	T7,A500
LW	T9,0508 (T7)	;T9= A5000508: 64DD Status
LUI	AT,0200
SW	T9,003C (SP)	;SP+3C= 64DD Status
LW	T8,003C (SP)
AND	T0,T8,AT
BEQ	T0,R0,70017E4C	;branch if 02000000 not set: interrupt didn't occur
NOP
//70017DFC:	If it did...
LUI	T1,A460
LW	T2,0010 (T1)	;T2= PI Status
SW	T2,0038 (SP)
LW	T3,0038 (SP)
ANDI	T4,T3,0002
BEQ	T4,R0,70017E34	;branch if DMA complete
NOP
//70017E18:	loop until ready
LUI	T5,A460
LW	T6,0010 (T5)
SW	T6,0038 (SP)
LW	T7,0038 (SP)
ANDI	T9,T7,0002
BNE	T9,R0,70017E18
NOP
//70017E34:	...clear the interrupt!
LW	T8,0030 (SP)	;T8= value f/ 80069074+14
LUI	AT,0100
LUI	T2,A500
LW	T0,0010 (T8)	;T0= T8+10: prev.interupt?
OR	T1,T0,AT	;T1= T0 | 01000000: clear cart interrupt
SW	T1,0510 (T2)	;update
//70017E4C:
LW	T4,002C (SP)	;T4=SP+2C: 
ADDIU	T3,R0,004B
JAL	70018414
SW	T3,0000 (T4)	;4B->offset
BEQ	R0,R0,70018404	;return True
ADDIU	V0,R0,0001
//70017E64:	if PI was ready...
LUI	T5,A460
LW	T6,0010 (T5)	;T6=A4600010: PI Status
SW	T6,0038 (SP)
LW	T7,0038 (SP)
ANDI	T9,T7,0002
BEQ	T9,R0,70017E9C	;branch if DMA complete
NOP
//70017E80:	loop until it is
LUI	T8,A460
LW	T0,0010 (T8)
SW	T0,0038 (SP)
LW	T1,0038 (SP)
ANDI	T2,T1,0002
BNE	T2,R0,70017E80
NOP
//70017E9C:	test if interrupt occured
LUI	T3,A500
LW	T4,0508 (T3)	;T4=A5000508: 64DD Status
LUI	AT,0200
SW	T4,003C (SP)	;SP+3C= 64DD Status
LW	T5,003C (SP)
AND	T6,T5,AT
BEQ	T6,R0,70017F1C	;branch if 02000000 not set: interrupt didn't occur
NOP
//70017EBC:	prep the PI again if interrupt occured
LUI	T7,A460
LW	T9,0010 (T7)	;T9=A4600010: PI Status
SW	T9,0038 (SP)
LW	T8,0038 (SP)
ANDI	T0,T8,0002
BEQ	T0,R0,70017EF4	;branch if DMA complete
NOP
//70017ED8:	loop until it is
LUI	T1,A460
LW	T2,0010 (T1)
SW	T2,0038 (SP)
LW	T3,0038 (SP)
ANDI	T4,T3,0002
BNE	T4,R0,70017ED8
NOP
//70017EF4:
LW	T5,0030 (SP)	;T5=SP+30: p->???
LUI	AT,0100
LUI	T9,A500
LW	T6,0010 (T5)	;T6=T5+10: 
OR	V0,R0,R0	;V0=0
OR	T7,T6,AT
SW	T7,0510 (T9)	;T7->A5000510: clear cart intterrupt and ???
LW	T8,002C (SP)	;T8= SP+2C
BEQ	R0,R0,70018404	;return 0
SW	R0,0000 (T8)	;0->T8
//70017F1C:	test for busy in 64DD Status...
LW	T0,003C (SP)	;T0= 64DD Status
LUI	AT,0800
AND	T1,T0,AT
BEQ	T1,R0,70017F70	;branch if 08000000 not set in 64DD Status
NOP
//70017F30:
LW	T3,002C (SP)
ADDIU	T2,R0,0003
JAL	700184FC
SW	T2,0000 (T3)
ADDIU	T4,R0,0002
LUI	T5,A460
SW	T4,0010 (T5)	;2->PI Status DMA flag
LUI	T6,8002
LW	T6,698C (T6)
LUI	AT,0010
ORI	AT,AT,0401	;AT= 00100401
OR	T7,T6,AT
LUI	AT,8002
SW	T7,698C (AT)
BEQ	R0,R0,70018404	;return 1
ADDIU	V0,R0,0001
//70017F70:
LW	T9,0030 (SP)
ADDIU	AT,R0,0001
LW	T8,0000 (T9)
BNE	T8,AT,7001806C
NOP
//70017F84:
LW	T0,003C (SP)	;T0= 64DD Status
LUI	AT,4000
AND	T1,T0,AT
BNE	T1,R0,70018018
NOP
//70017F98:
LHU	T4,0004 (T9)
LW	T2,0008 (T9)
SLL	T5,T4,0x2
ADDU	T5,T5,T4
SLL	T5,T5,0x2
ADDU	T5,T5,T4
SLL	T5,T5,0x2
ADDU	T5,T5,T4
ADDIU	T3,T2,0001
BEQ	T3,T5,70017FDC
NOP
//70017FC4:
LW	T7,002C (SP)
ADDIU	T6,R0,0006
JAL	70018414
SW	T6,0000 (T7)
BEQ	R0,R0,70018404
ADDIU	V0,R0,0001
//70017FDC:
ADDIU	T8,R0,0002
LUI	T0,A460
SW	T8,0010 (T0)	;2->PI Status DMA flag
LUI	T1,8002
LW	T1,698C (T1)
LUI	AT,0010
ORI	AT,AT,0401
OR	T2,T1,AT
LW	T9,002C (SP)
LUI	AT,8002
SW	T2,698C (AT)
JAL	700184FC
SW	R0,0000 (T9)
BEQ	R0,R0,70018404
ADDIU	V0,R0,0001
//70018018:	write to 64DD sector data
LW	T4,002C (SP)
LUI	A0,8007
LUI	A2,0500
LW	T3,0004 (T4)
LW	T5,000C (T4)
ORI	A2,A2,0400	;A2=050000400: 64DD sector data
ADDIU	A1,R0,0001	;A1=1: write to hardware
ADDU	T6,T3,T5
SW	T6,0004 (T4)
LW	T7,0030 (SP)
LW	T8,0008 (T7)
ADDIU	T0,T8,0001
SW	T0,0008 (T7)
LW	T1,002C (SP)
LW	A0,9074 (A0)	;A0=80069074: p->BSD hardware entry
LW	T2,000C (T1)	;T2=T1+C: length
LW	A3,0004 (T1)	;A3=T1+4: p->rdram
JAL	7001E530	;request I/O with hardware A0; read/write (A1) SP+10 bytes between hardware offset A2 and rdram A3
SW	T2,0010 (SP)	;SP+10= length
BEQ	R0,R0,70018404
ADDIU	V0,R0,0001
//7001806C:
LW	T9,0030 (SP)
LW	T3,0000 (T9)
BNE	T3,R0,700183F0
NOP
//7001807C:
LHU	T5,0004 (T9)
ADDIU	AT,R0,0003
BNE	T5,AT,700180E4
NOP
//7001808C:
LW	T4,002C (SP)
LW	T6,0008 (T9)
LW	T8,0010 (T4)
ADDIU	T0,T8,0011
SLT	AT,T0,T6
BEQ	AT,R0,700180B8
NOP
//700180A8:
JAL	70018414
SW	R0,0000 (T4)
BEQ	R0,R0,70018404
ADDIU	V0,R0,0001
//700180B8:
LW	T7,003C (SP)
LUI	AT,4000
AND	T1,T7,AT
BNE	T1,R0,700180F8
NOP
//700180CC:
LW	T3,002C (SP)
ADDIU	T2,R0,0011
JAL	70018414
SW	T2,0000 (T3)
BEQ	R0,R0,70018404
ADDIU	V0,R0,0001
//700180E4:
LW	T5,002C (SP)
LW	T9,0004 (T5)
LW	T8,000C (T5)
ADDU	T6,T9,T8
SW	T6,0004 (T5)
//700180F8:
LUI	T0,A500
LW	T4,0510 (T0)	;T4=A5000510: 64DD Interrupts
LUI	AT,0020
SW	T4,0034 (SP)
LW	T7,0034 (SP)
AND	T1,T7,AT
BEQ	T1,R0,70018124
LUI	AT,0040
AND	T2,T7,AT
BNE	T2,R0,70018138
NOP
//70018124:
LW	T3,0034 (SP)
LUI	AT,0200
AND	T9,T3,AT
BEQ	T9,R0,700181BC
NOP
//70018138:
LW	T8,002C (SP)
LW	T6,0010 (T8)
SLTIU	AT,T6,0004
BNE	AT,R0,70018188
NOP
//7001814C:
LW	T5,0030 (SP)
ADDIU	AT,R0,0003
LHU	T0,0004 (T5)
BNE	T0,AT,70018170
NOP
//70018160:
LW	T4,0008 (T5)
SLTI	AT,T4,0053
BNE	AT,R0,700181AC
NOP
//70018170:
LW	T7,002C (SP)
ADDIU	T1,R0,0011
JAL	70018414
SW	T1,0000 (T7)
BEQ	R0,R0,70018404
ADDIU	V0,R0,0001
//70018188:
LW	T2,002C (SP)
LW	T9,0030 (SP)
LW	T3,0010 (T2)
SW	T3,0028 (SP)
LW	T8,0008 (T9)
SLL	T0,T3,0x2
ADDU	T5,T2,T0
ADDIU	T6,T8,0001
SW	T6,0014 (T5)
//700181AC:
LW	T4,002C (SP)
LW	T1,0010 (T4)
ADDIU	T7,T1,0001
SW	T7,0010 (T4)
LW	T9,003C (SP)
LUI	AT,1000
AND	T8,T9,AT
BEQ	T8,R0,700182A0
NOP
//700181D0:
LW	T3,0030 (SP)
ADDIU	AT,R0,0057
LW	T2,0008 (T3)
BEQ	T2,AT,700181F4
NOP
//700181E4:
LW	T6,002C (SP)
ADDIU	T0,R0,0006
JAL	70018414
SW	T0,0000 (T6)
//700181F4:
LW	T5,0030 (SP)
ADDIU	AT,R0,0002
LHU	T1,0004 (T5)
BNE	T1,AT,70018240
NOP
//70018208:
LHU	T7,0006 (T5)
BNE	T7,R0,70018240
NOP
//70018214:
ADDIU	T4,R0,0001
SH	T4,0006 (T5)
LW	T8,0030 (SP)
ADDIU	T9,R0,FFFF
SW	T9,0008 (T8)
LW	T3,0030 (SP)
LW	T2,0040 (T3)
LW	T0,0048 (T3)
SUBU	T6,T2,T0
BEQ	R0,R0,70018268
SW	T6,0040 (T3)
//70018240:
ADDIU	T1,R0,0002
LUI	T7,A460
SW	T1,0010 (T7)	;2->PI Status DMA flag
LUI	T4,8002
LW	T4,698C (T4)
LUI	AT,0010
ORI	AT,AT,0401
OR	T5,T4,AT
LUI	AT,8002
SW	T5,698C (AT)
//70018268:	read #entries from 64DD C2 buffer to rdram
LW	T9,002C (SP)
LUI	A0,8007
LW	A0,9074 (A0)	;A0=80069074: 
LW	T8,000C (T9)	;T8=T9+C: #entries
LW	A3,0008 (T9)	;A3=T9+8: p->rdram
OR	A1,R0,R0	;A1=0: read
SLL	T2,T8,0x2
SW	T2,0010 (SP)	;SP+10=#entries*4: length
JAL	7001E530	;request I/O with hardware A0; read/write (A1) SP+10 bytes between hardware offset A2 and rdram A3
LUI	A2,0500		;A2=05000000: 64DD C2 buffer
LW	T0,002C (SP)
ADDIU	V0,R0,0001
BEQ	R0,R0,70018404	;return True
SW	R0,0000 (T0)
//700182A0:
LW	T6,0030 (SP)
ADDIU	AT,R0,FFFF
LW	T3,0008 (T6)
BNE	T3,AT,70018334
NOP
//700182B4:
LHU	T1,0004 (T6)
ADDIU	AT,R0,0002
BNE	T1,AT,70018334
NOP
//700182C4:
LHU	T7,0006 (T6)
ADDIU	AT,R0,0001
BNE	T7,AT,70018334
NOP
//700182D4:
ADDIU	T4,T6,0018
SW	T4,0024 (SP)
LW	T5,0028 (T6)
BNE	T5,R0,70018328
NOP
//700182E8:
LW	T9,0020 (T6)
LW	T8,0000 (T9)
LW	T2,0004 (T9)
LW	T3,0008 (T9)
LW	T7,000C (T9)
OR	T0,T8,T2
OR	T1,T0,T3
OR	T4,T7,T1
BEQ	T4,R0,70018328
NOP
//70018310:
LW	T6,002C (SP)
ADDIU	T5,R0,0006
JAL	70018414
SW	T5,0000 (T6)
BEQ	R0,R0,70018404
ADDIU	V0,R0,0001
//70018328:
LW	T8,002C (SP)
JAL	700184FC
SW	R0,0000 (T8)
LW	T2,0030 (SP)
LUI	AT,4000
LW	T0,0008 (T2)
ADDIU	T3,T0,0001
SW	T3,0008 (T2)
LW	T9,003C (SP)
AND	T7,T9,AT
BEQ	T7,R0,700183BC
NOP
//70018358:
LW	T1,0030 (SP)
LW	T4,0008 (T1)
SLTI	AT,T4,0055
BNE	AT,R0,70018384
NOP
//7001836C:
LW	T6,002C (SP)
ADDIU	T5,R0,0006
JAL	70018414
SW	T5,0000 (T6)
BEQ	R0,R0,70018404
ADDIU	V0,R0,0001
//70018384:	read from 64DD sector data to rdram
LW	T8,002C (SP)
LUI	A0,8007
LUI	A2,0500
LW	T0,000C (T8)	;T0=T8+C: length
LW	A3,0004 (T8)	;A3=T8+4: rdram address
ORI	A2,A2,0400	;A2=05000400
LW	A0,9074 (A0)	;A0=80069074: 
OR	A1,R0,R0	;A1=0: write to rdram
JAL	7001E530	;request I/O with hardware A0; read/write (A1) SP+10 bytes between hardware offset A2 and rdram A3
SW	T0,0010 (SP)	;SP+10=length
LW	T3,002C (SP)
ADDIU	V0,R0,0001
BEQ	R0,R0,70018404	;return True
SW	R0,0000 (T3)
//700183BC:
LW	T2,0030 (SP)
LW	T9,0008 (T2)
SLTI	AT,T9,0055
BEQ	AT,R0,700183E8
NOP
//700183D0:
LW	T1,002C (SP)
ADDIU	T7,R0,0006
JAL	70018414
SW	T7,0000 (T1)
BEQ	R0,R0,70018404
ADDIU	V0,R0,0001
//700183E8:
BEQ	R0,R0,70018404
ADDIU	V0,R0,0001
//700183F0:
LW	T5,002C (SP)
ADDIU	T4,R0,004B
JAL	70018414
SW	T4,0000 (T5)
ADDIU	V0,R0,0001
//70018404:	return
LW	RA,001C (SP)
ADDIU	SP,SP,0040
JR	RA
NOP

70018414
LUI	T6,8007
LW	T6,9074 (T6)	;T6=80069074: 
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
ADDIU	T7,T6,0014
SW	T7,001C (SP)
LUI	T8,A460
LW	T9,0010 (T8)	;T9=A4600010: PI Status
SW	T9,0018 (SP)
LW	T0,0018 (SP)	;T0=PI Status
ANDI	T1,T0,0002
BEQ	T1,R0,70018464	;branch if DMA finished
NOP
LUI	T2,A460
LW	T3,0010 (T2)	;T3=A4600010: PI Status
SW	T3,0018 (SP)
LW	T4,0018 (SP)	;T4=PI Status
ANDI	T5,T4,0002
BNE	T5,R0,70018448	;loop until clear
NOP
//70018464:
LW	T6,001C (SP)
LUI	AT,1000
LUI	T9,A500
LW	T7,0010 (T6)
LUI	T0,A460
OR	T8,T7,AT
SW	T8,0510 (T9)	;T8->A5000510: 64DD Interrupts | 10000000
LW	T1,0010 (T0)	;T1=A4600010: PI Status
SW	T1,0018 (SP)
LW	T2,0018 (SP)
ANDI	T3,T2,0002
BEQ	T3,R0,700184B4
NOP
LUI	T4,A460
LW	T5,0010 (T4)	;T5=A4600010: PI Status
SW	T5,0018 (SP)
LW	T6,0018 (SP)
ANDI	T7,T6,0002
BNE	T7,R0,70018498
NOP
LW	T8,001C (SP)
LUI	T0,A500
LW	T9,0010 (T8)
JAL	700184FC
SW	T9,0510 (T0)	;T9->A5000510: 64DD Interrupts set to prev.
ADDIU	T1,R0,0002
LUI	T2,A460
SW	T1,0010 (T2)	;2->A4600010: PI Status DMA flag
LUI	T3,8002
LW	T3,698C (T3)
LUI	AT,0010
LW	RA,0014 (SP)
ORI	AT,AT,0401
OR	T4,T3,AT
LUI	AT,8002
SW	T4,698C (AT)
JR	RA
ADDIU	SP,SP,0020

700184FC
ADDIU	SP,SP,FFD0
LUI	T6,8006
ADDIU	T6,T6,6A10	;T6=80066A10
ADDIU	T7,T6,0040
SW	RA,001C (SP)
SW	S0,0018 (SP)
SW	T7,002C (SP)
LW	T8,0040 (T6)
BEQ	T8,R0,700185D4
SW	T8,0028 (SP)
LW	T9,0008 (T8)
LW	T0,0010 (T8)
SLT	AT,T9,T0
BEQ	AT,R0,700185D4
NOP
LW	T1,0028 (SP)
LW	T6,002C (SP)
LW	T2,000C (T1)
LW	T3,0008 (T1)
LW	T5,0010 (T1)
ADDU	T4,T2,T3
DIV	T4,T5
MFHI	T7
SW	T7,0024 (SP)
LW	T0,0014 (T1)
LW	T8,0004 (T6)
SLL	T9,T7,0x2
ADDU	T2,T0,T9
SW	T8,0000 (T2)
LW	T3,0028 (SP)
BNE	T5,R0,70018580
NOP
BREAK	00001C00	;Break: division by zero
//70018580:
ADDIU	AT,R0,FFFF
BNE	T5,AT,70018598
LUI	AT,8000
BNE	T4,AT,70018598
NOP
BREAK	00001800
//70018598:
LW	T4,0008 (T3)
ADDIU	T5,T4,0001
SW	T5,0008 (T3)
LW	T6,0028 (SP)
LW	T7,0000 (T6)
LW	T1,0000 (T7)
BEQ	T1,R0,700185D4
NOP
//700185B8:
JAL	700108F4	;V0= popped thread A0
OR	A0,T6,R0
OR	S0,V0,R0
LUI	A0,8002
ADDIU	A0,A0,7728
JAL	700108AC	;insert thread A1 into thread list A0
OR	A1,S0,R0
//700185D4:	return
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0030
JR	RA
NOP

700185F0	191F0	V0= COP0 interrupt enabled flag; disables flag in register
MFC0	T0,Status/DPC-Clock
ADDIU	AT,R0,FFFE
AND	T1,T0,AT	;T1=Status & (~1)
MTC0	T1,Status/DPC-Clock
ANDI	V0,T0,0001	;V0= interrupt enabled flag
NOP
JR	RA
NOP

70018610	19210	set flags A0 in COP0 Status
	accepts: A0=flags
MFC0	T0,Status/DPC-Clock
OR	T0,T0,A0
MTC0	T0,Status/DPC-Clock
NOP
NOP
JR	RA
NOP

70018630
LUI	AT,8007
ADDIU	T6,R0,0000
ADDIU	T7,R0,0000
SW	T7,8E14 (AT)
SW	T6,8E10 (AT)
LUI	AT,8007
LUI	T8,8002
LW	T8,7FD0 (T8)
SW	R0,8E18 (AT)
LUI	AT,8007
SW	R0,8E1C (AT)
LUI	T9,8002
SW	T8,0004 (T8)
LW	T9,7FD0 (T9)
LUI	T1,8002
ADDIU	T2,R0,0000
LW	T0,0004 (T9)
ADDIU	T3,R0,0000
LUI	T4,8002
SW	T0,0000 (T9)
LW	T1,7FD0 (T1)
LUI	T5,8002
LUI	T8,8002
SW	T2,0010 (T1)
SW	T3,0014 (T1)
LW	T4,7FD0 (T4)
LW	T6,0010 (T4)
LW	T7,0014 (T4)
SW	T6,0008 (T4)
SW	T7,000C (T4)
LW	T5,7FD0 (T5)
SW	R0,0018 (T5)
LW	T8,7FD0 (T8)
JR	RA
SW	R0,001C (T8)

700186BC
LUI	T6,8002
LW	T6,7FD0 (T6)	;T6=80027FD0: 
ADDIU	SP,SP,FFD8
SW	RA,0014 (SP)
LW	T7,0000 (T6)	;T7=T6+0: 
BEQ	T7,T6,70018824	;return if same pointer
NOP
//700186D8:
LUI	T8,8002
LW	T8,7FD0 (T8)
LW	T9,0000 (T8)	;T9=p@80027FD0: 
BNE	T9,T8,70018700	;if same, rezero the Compare
SW	T9,0024 (SP)
JAL	7001F8E0	;A0->COP0 Compare
OR	A0,R0,R0	;A0=0
LUI	AT,8007
BEQ	R0,R0,70018824
SW	R0,8E20 (AT)	;0->80068E20: reset prev.Count
//70018700:
JAL	7000D8E0	;V0=Count
NOP
SW	V0,0020 (SP)	;SP+20=cur.Count
LUI	T1,8007
LW	T1,8E20 (T1)	;T1=80068E20: prev.Count
LW	T0,0020 (SP)
LW	T7,0024 (SP)	;T7=p@80027FD0: 
LUI	AT,8007
SUBU	T2,T0,T1	;T2= cur.Count - prev.Count
SW	T2,001C (SP)	;SP+1C= difference
SW	T0,8E20 (AT)	;T0->prev.Count
LW	T6,0010 (T7)
LW	T3,001C (SP)
ADDIU	T4,R0,0000
OR	T9,T7,R0
SLTU	AT,T6,T4
LW	T7,0014 (T7)
BNE	AT,R0,700187A0
OR	T5,T3,R0
SLTU	AT,T4,T6
BNE	AT,R0,70018760
SLTU	AT,T5,T7
BEQ	AT,R0,700187A0
NOP
//70018760:
ADDIU	T8,T9,0010
SW	T8,0018 (SP)
LW	T3,0014 (T9)
LW	T2,0010 (T9)
SLTU	AT,T3,T5
SUBU	T0,T2,T4
SUBU	T0,T0,AT
SUBU	T1,T3,T5
SW	T1,0014 (T9)
SW	T0,0010 (T9)
LW	T6,0024 (SP)
LW	A0,0010 (T6)
JAL	70018834	;increment COP0 Count by A1
LW	A1,0014 (T6)
BEQ	R0,R0,70018824
NOP
//700187A0:
LW	T7,0024 (SP)
LW	T8,0000 (T7)
LW	T2,0004 (T7)
SW	T8,0000 (T2)
LW	T3,0024 (SP)
LW	T4,0004 (T3)
LW	T5,0000 (T3)
SW	T4,0004 (T5)
LW	T0,0024 (SP)
SW	R0,0000 (T0)
LW	T1,0024 (SP)
SW	R0,0004 (T1)
LW	T9,0024 (SP)
LW	T6,0018 (T9)
BEQ	T6,R0,700187F0
NOP
//700187E0:
OR	A0,T6,R0
LW	A1,001C (T9)
JAL	7000DF10
OR	A2,R0,R0
//700187F0:
LW	T7,0024 (SP)
LW	T8,0008 (T7)
LW	T9,000C (T7)
BNE	T8,R0,7001880C
NOP
BEQ	T9,R0,700186D8
NOP
//7001880C:
SW	T8,0010 (T7)
SW	T9,0014 (T7)
JAL	700188A8
LW	A0,0024 (SP)
BEQ	R0,R0,700186D8
NOP
//70018824:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

70018834	19434	increment COP0 Count by A1
	accepts: A0=, A1=increment
ADDIU	SP,SP,FFD8
SW	RA,0014 (SP)
SW	A0,0028 (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	A1,002C (SP)
JAL	7000D8E0	;V0=Count
SW	V0,001C (SP)
LUI	AT,8007
SW	V0,8E20 (AT)	;V0->80068E20: Count
LUI	T6,8007
LW	T6,8E20 (T6)	;T6=Count
LW	T1,002C (SP)	;T1= A1 f/caller
LW	T0,0028 (SP)	;T0= A0 f/caller
OR	T9,T6,R0
ADDU	T3,T9,T1	;T3= Count + A1
ADDIU	T8,R0,0000
SLTU	AT,T3,T1
ADDU	T2,AT,T8	;T2= True if Count negative
ADDU	T2,T2,T0	;T2= A0+bit
SW	T2,0020 (SP)	;SP+20= value
SW	T3,0024 (SP)	;SP+24= Count+A1
JAL	7001F8E0	;A0->COP0 Compare
OR	A0,T3,R0	;A0= updated Count
JAL	70018610	;A0->COP0 status
LW	A0,001C (SP)	;enable interrupts
LW	RA,0014 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

700188A8
ADDIU	SP,SP,FFC8
SW	RA,0014 (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	A0,0038 (SP)
LUI	T6,8002
LW	T6,7FD0 (T6)
SW	V0,0024 (SP)
LW	T8,0038 (SP)
LW	T7,0000 (T6)
SW	T7,0034 (SP)
LW	T1,0014 (T8)
LW	T0,0010 (T8)
SW	T1,002C (SP)
BEQ	T7,T6,70018984
SW	T0,0028 (SP)
LW	T2,0010 (T7)
LW	T3,0014 (T7)
SLTU	AT,T0,T2
BNE	AT,R0,70018984
SLTU	AT,T2,T0
BNE	AT,R0,70018908
SLTU	AT,T3,T1
BEQ	AT,R0,70018984
NOP
ADDIU	T9,SP,0028
LW	T8,0034 (SP)
SW	T9,0020 (SP)
LW	T5,0004 (T9)
LW	T4,0000 (T9)
LW	T7,0014 (T8)
LW	T6,0010 (T8)
LUI	T8,8002
SLTU	AT,T5,T7
SUBU	T0,T4,T6
SUBU	T0,T0,AT
SUBU	T1,T5,T7
SW	T1,0004 (T9)
SW	T0,0000 (T9)
LW	T2,0034 (SP)
LW	T8,7FD0 (T8)
LW	T3,0000 (T2)
BEQ	T3,T8,70018984
SW	T3,0034 (SP)
LW	T4,0028 (SP)
LW	T6,0010 (T3)
LW	T5,002C (SP)
LW	T7,0014 (T3)
SLTU	AT,T6,T4
BNE	AT,R0,70018908
NOP
SLTU	AT,T4,T6
BNE	AT,R0,70018984
SLTU	AT,T7,T5
BNE	AT,R0,70018908
NOP
LW	T9,0038 (SP)
LW	T0,0028 (SP)
LW	T1,002C (SP)
LUI	T8,8002
SW	T0,0010 (T9)
SW	T1,0014 (T9)
LW	T8,7FD0 (T8)
LW	T2,0034 (SP)
BEQ	T2,T8,700189DC
NOP
ADDIU	T3,T2,0010
SW	T3,001C (SP)
LW	T5,0014 (T2)
LW	T4,0010 (T2)
LW	T6,0028 (SP)
LW	T7,002C (SP)
SUBU	T0,T4,T6
SLTU	AT,T5,T7
SUBU	T0,T0,AT
SUBU	T1,T5,T7
SW	T1,0014 (T2)
SW	T0,0010 (T2)
LW	T9,0034 (SP)
LW	T8,0038 (SP)
SW	T9,0000 (T8)
LW	T3,0034 (SP)
LW	T5,0038 (SP)
LW	T4,0004 (T3)
SW	T4,0004 (T5)
LW	T7,0034 (SP)
LW	T6,0038 (SP)
LW	T0,0004 (T7)
SW	T6,0000 (T0)
LW	T2,0034 (SP)
LW	T1,0038 (SP)
SW	T1,0004 (T2)
JAL	70018610	;A0->COP0 status
LW	A0,0024 (SP)
LW	RA,0014 (SP)
LW	V0,0028 (SP)
LW	V1,002C (SP)
JR	RA
ADDIU	SP,SP,0038

70018A30	19630	V0= priority of thread A0 or cur.thread if NULL
	accepts: A0=p->thread or NULL
BNE	A0,R0,70018A40	;if NULL use pointer at 80027730
NOP
LUI	A0,8002
LW	A0,7730 (A0)	;A0=80027730: p->cur.thread
//70018A40:
JR	RA
LW	V0,0004 (A0)	;V0=thread+4: priority

70018A50	19650	
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,8002
ADDIU	A0,A0,7FE0	;A0=80027FE0
JAL	70017C40	;initialize A1 bytes at A0 to zero
ADDIU	A1,R0,0060	;A1=60
LUI	T6,8002
ADDIU	T6,T6,7FE0
LUI	AT,8003
SW	T6,8040 (AT)	;buffer+0 -> 80028040: 
LUI	AT,8003
ADDIU	T7,T6,0030
SW	T7,8044 (AT)	;buffer+30-> 80028044: 
ADDIU	T8,R0,0001
SH	T8,0032 (T6)	;0001 -> buf2 + 2
LUI	T0,8003
LW	T0,8040 (T0)
ADDIU	T9,R0,0001
LUI	T1,8003
SH	T9,0002 (T0)	;0001 -> buf1 + 2
LW	T1,8048 (T1)	;T1=80028048: 
BEQ	T1,R0,70018AD4
NOP
//70018AAC:
LUI	T3,8003
LW	T3,8044 (T3)
LUI	T2,8003
ADDIU	T2,T2,8320
LUI	T4,02E6
ORI	T4,T4,D354
LUI	AT,8003
SW	T2,0008 (T3)	;80028320 -> buf2 + 8
BEQ	R0,R0,70018AF8
SW	T4,804C (AT)	;02E6D354 -> 8002804C: 
//70018AD4:
LUI	T7,8003
LW	T7,8044 (T7)
LUI	T5,8003
ADDIU	T5,T5,8370
LUI	T8,02F5
ORI	T8,T8,B2D2
LUI	AT,8003
SW	T5,0008 (T7)	;80028370 -> buf2 + 8
SW	T8,804C (AT)	;02F5B2D2 -> 8002804C: 
//70018AF8:
LUI	T9,8003
LW	T9,8044 (T9)
ADDIU	T6,R0,0020
LUI	T0,8003
SH	T6,0000 (T9)	;0020 -> buf2 + 0
LW	T0,8044 (T0)
LUI	T3,A440
LW	T1,0008 (T0)	;T1= buf2 + 8
LW	T2,0004 (T1)
SW	T2,000C (T0)
LW	T4,0010 (T3)	;T4= A4400010: VI Current Line Reg
SLTIU	AT,T4,000B
BNE	AT,R0,70018B44
NOP
//70018B30:	wait until on final 11 lines
LUI	T5,A440
LW	T7,0010 (T5)
SLTIU	AT,T7,000B
BEQ	AT,R0,70018B30
NOP
//70018B44:
LUI	T8,A440
JAL	70018B70
SW	R0,0000 (T8)	;0->A4400000: reset VI Status
//70018B50:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70018B60
LUI	V0,8003
JR	RA
LW	V0,8040 (V0)	;V0=80028040: 

70018B70
ADDIU	SP,SP,FFB8
SW	S1,001C (SP)
SW	RA,0024 (SP)
SW	S2,0020 (SP)
SW	S0,0018 (SP)
SW	R0,0030 (SP)
LUI	S1,8003
LUI	T6,A440
LW	S1,8044 (S1)
LW	T7,0010 (T6)	;T7= A4400010: VI Current Line Reg
LW	S0,0008 (S1)
ANDI	T8,T7,0001
SW	T8,0030 (SP)
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
LW	A0,0004 (S1)
LW	T9,0030 (SP)
OR	S2,V0,R0
SLL	T0,T9,0x2
ADDU	T0,T0,T9
SLL	T0,T0,0x2
ADDU	T1,S0,T0
LW	T2,0028 (T1)
ADDU	T3,T2,S2
SW	T3,003C (SP)
LHU	T4,0000 (S1)
ANDI	T5,T4,0002
BEQ	T5,R0,70018BFC
NOP
LW	T7,0020 (S0)
LW	T6,0020 (S1)
ADDIU	AT,R0,F000
AND	T8,T7,AT
OR	T9,T6,T8
BEQ	R0,R0,70018C04
SW	T9,0020 (S1)
LW	T0,0020 (S0)
SW	T0,0020 (S1)
LHU	T1,0000 (S1)
ANDI	T2,T1,0004
BEQ	T2,R0,70018D14
NOP
LW	T3,0030 (SP)
SLL	T4,T3,0x2
ADDU	T4,T4,T3
SLL	T4,T4,0x2
ADDU	T5,S0,T4
LW	T7,002C (T5)
ANDI	T6,T7,0FFF
MTC1	T6,F6
SW	T6,0034 (SP)
LWC1	F4,0024 (S1)
BGEZ	T6,70018C54
CVT.S.W	F8,F6
LUI	AT,4F80
MTC1	AT,F10
NOP
ADD.S	F8,F8,F10
MUL.S	F16,F4,F8
ADDIU	T9,R0,0001
CFC1	T8,F31
CTC1	T9,F31
NOP
CVT.W.S	F18,F16
CFC1	T9,F31
NOP
ANDI	AT,T9,0004
ANDI	T9,T9,0078
BEQ	T9,R0,70018CCC
LUI	AT,4F00
MTC1	AT,F18
ADDIU	T9,R0,0001
SUB.S	F18,F16,F18
CTC1	T9,F31
NOP
CVT.W.S	F18,F18
CFC1	T9,F31
NOP
ANDI	AT,T9,0004
ANDI	T9,T9,0078
BNE	T9,R0,70018CC4
NOP
MFC1	T9,F18
LUI	AT,8000
BEQ	R0,R0,70018CDC
OR	T9,T9,AT
BEQ	R0,R0,70018CDC
ADDIU	T9,R0,FFFF
MFC1	T9,F18
NOP
BLTZ	T9,70018CC4
NOP
SW	T9,002C (S1)
LW	T1,0030 (SP)
LW	T0,002C (S1)
ADDIU	AT,R0,F000
SLL	T2,T1,0x2
ADDU	T2,T2,T1
SLL	T2,T2,0x2
ADDU	T3,S0,T2
LW	T4,002C (T3)
CTC1	T8,F31
AND	T5,T4,AT
OR	T7,T0,T5
BEQ	R0,R0,70018D30
SW	T7,002C (S1)
LW	T6,0030 (SP)
SLL	T8,T6,0x2
ADDU	T8,T8,T6
SLL	T8,T8,0x2
ADDU	T9,S0,T8
LW	T1,002C (T9)
SW	T1,002C (S1)
LW	T2,001C (S0)
SW	T2,0038 (SP)
LHU	T3,0000 (S1)
ANDI	T4,T3,0020
BEQ	T4,R0,70018D4C
NOP
SW	R0,0038 (SP)
LHU	T0,0000 (S1)
ANDI	T5,T0,0040
BEQ	T5,R0,70018D6C
NOP
SW	R0,002C (S1)
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
LW	A0,0004 (S1)
SW	V0,003C (SP)
LHU	T7,0000 (S1)
ANDI	T6,T7,0080
BEQ	T6,R0,70018D9C
NOP
LHU	T8,0028 (S1)
LUI	AT,03FF
LW	A0,0004 (S1)
SLL	T9,T8,0x10
AND	T1,T9,AT
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
SW	T1,002C (S1)
SW	V0,003C (SP)
LW	T2,003C (SP)
LUI	T3,A440
LUI	T0,A440
SW	T2,0004 (T3)	;T2-> A4400004: VI Dram Address
LW	T4,0008 (S0)
LUI	T7,A440
LUI	T8,A440
SW	T4,0008 (T0)	;T4-> A4400008: VI Horizontal Width
LW	T5,000C (S0)
LUI	T1,A440
LUI	AT,8003
SW	T5,0014 (T7)	;T5-> A4400014: VI Timing
LW	T6,0010 (S0)
SW	T6,0018 (T8)	;T6-> A4400018: VI Vertical Sync
LW	T9,0014 (S0)
SW	T9,001C (T1)	;T9-> A440001C: VI Horizontal Sync
LW	T2,0018 (S0)
LUI	T9,A440
SW	T2,0020 (T3)
LW	T4,0038 (SP)
SW	T4,0024 (T0)
LW	T5,0030 (SP)
SLL	T7,T5,0x2
ADDU	T7,T7,T5
SLL	T7,T7,0x2
ADDU	T6,S0,T7
LW	T8,0030 (T6)
SW	T8,0028 (T9)	;T8-> A4400028: VI Vertical Video
LW	T1,0030 (SP)
SLL	T2,T1,0x2
ADDU	T2,T2,T1
SLL	T2,T2,0x2
ADDU	T3,S0,T2
LW	T4,0034 (T3)
LUI	T2,A440
SW	T4,002C (T0)	;T4-> A440002C: VI Vertical Burst
LW	T5,0030 (SP)
LUI	T4,A440
SLL	T7,T5,0x2
ADDU	T7,T7,T5
SLL	T7,T7,0x2
ADDU	T6,S0,T7
LW	T8,0038 (T6)
LUI	T5,A440
LUI	T7,8003
SW	T8,000C (T9)
LW	T1,0020 (S1)
LUI	T8,8003
LUI	T6,8003
SW	T1,0030 (T2)	;T1-> A4400030: VI X Scale
LW	T3,002C (S1)
SW	T3,0034 (T4)	;T3-> A4400034: VI Y Scale
LW	T0,000C (S1)
SW	T0,0000 (T5)	;T0-> A4400000: VI Status
LW	T7,8040 (T7)
SW	T7,8044 (AT)
LUI	AT,8003
SW	S1,8040 (AT)
LW	T8,8040 (T8)
LW	T6,8044 (T6)
//70018E90:
ADDIU	T2,T8,0030
LW	AT,0000 (T8)
ADDIU	T8,T8,000C
ADDIU	T6,T6,000C
SW	AT,FFF4 (T6)
LW	AT,FFF8 (T8)
SW	AT,FFF8 (T6)
LW	AT,FFFC (T8)
BNE	T8,T2,70018E90
SW	AT,FFFC (T6)
//70018EB8:	return
LW	RA,0024 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
JR	RA
ADDIU	SP,SP,0048

70018ED0	19AD0	V0= RSP Status
LUI	T6,A404
JR	RA
LW	V0,0010 (T6)	;V0=A4040010: RSP Status

70018EE0	19AE0	A0-> RSP Status
LUI	T6,A404
JR	RA
SW	A0,0010 (T6)	;A0-> A4040010: RSP Status

70018EF0
LUI	T6,A404
LW	A1,0010 (T6)	;A1=A4040010: RSP Status
ADDIU	SP,SP,FFF8
ANDI	T7,A1,0001
BNE	T7,R0,70018F10
NOP
BEQ	R0,R0,70018F1C
ADDIU	V0,R0,FFFF
LUI	T8,A408
SW	A0,0000 (T8)
OR	V0,R0,R0
JR	RA
ADDIU	SP,SP,0008

70018F30	19B30	read or write (A0) A3 bytes between RSP address A1 and rdram A2
	accepts: A0=mode (0-write; 1-read), A1=RSP address, A2=rdram address, A3=length
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)
SW	A1,001C (SP)
SW	A2,0020 (SP)
JAL	70018FC0
SW	A3,0024 (SP)
BEQ	V0,R0,70018F5C
NOP
BEQ	R0,R0,70018FAC	;return -1: error!
ADDIU	V0,R0,FFFF
//70018F5C:
LW	T6,001C (SP)
LUI	T7,A404
SW	T6,0000 (T7)	;A4040000+0 = RSP address
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
LW	A0,0020 (SP)
LUI	T8,A404
SW	V0,0004 (T8)	;A4040000+4 = V0: rdram address
LW	T9,0018 (SP)	;T9=mode
BNE	T9,R0,70018F98	;branch in read (1)
NOP
//70018F84:	mode 0: write to RSP
LW	T0,0024 (SP)
LUI	T2,A404
ADDIU	T1,T0,FFFF
BEQ	R0,R0,70018FA8
SW	T1,000C (T2)	;A4040000+C = length-1: write length
//70018F98:	mode 1: read from RSP
LW	T3,0024 (SP)
LUI	T5,A404
ADDIU	T4,T3,FFFF
SW	T4,0008 (T5)	;A4040000+8 = length-1: read length
//70018FA8:	return 0: okay!
OR	V0,R0,R0
//70018FAC:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70018FC0
LUI	T6,A404
LW	A0,0010 (T6)	;A0=A4040010: RSP Status
ADDIU	SP,SP,FFF8
ANDI	T7,A0,001C
BEQ	T7,R0,70018FE0	;return okay if flags not set
NOP
BEQ	R0,R0,70018FE4	;return 1: error!
ADDIU	V0,R0,0001
//70018FE0:	return 0: okay!
OR	V0,R0,R0
//70018FE4:	return
JR	RA
ADDIU	SP,SP,0008

70018FF0	19BF0	V0=TRUE if DP Cmd Status DMA busy flag set
LUI	T6,A410
LW	A0,000C (T6)	;A0=A410000C: DP Cmd Status
ADDIU	SP,SP,FFF8
ANDI	T7,A0,0100	;T7=Status & 0x100: DMA busy flag
BEQ	T7,R0,70019010
NOP
BEQ	R0,R0,70019014	;return TRUE
ADDIU	V0,R0,0001
//70019010:	return FALSE
OR	V0,R0,R0
//70019014:	return
JR	RA
ADDIU	SP,SP,0008

70019020	19C20	V0=physical address for virtual address A0
	accepts: A0=virtual address
MFC0	T0,EntryHi	;T0=COP0 EntryHi: cur.Vaddr
ANDI	T1,T0,00FF	;T1=T0&FF: ASID
ADDIU	AT,R0,E000
AND	T2,A0,AT	;T2= A0 & (~1FFF)
OR	T1,T1,T2	;T1|=T2: A0 masked, extended with ASID
MTC0	T1,EntryHi	;COP0 EntryHi = new address
NOP
NOP
NOP
TLBP
NOP
NOP
MFC0	T3,Index	;T3= index of hit
LUI	AT,8000
AND	T3,T3,AT
BNE	T3,R0,700190C8	;return on miss (flag set)
NOP
//70019064:	read entry if found
TLBR
NOP
NOP
NOP
MFC0	T3,PageMask	;T3=COP0 PageMask
ADDI	T3,T3,2000
SRL	T3,T3,0x1	;T3= PageMask/2 + 1000
AND	T4,T3,A0	;T4= T3 & A0: True if odd page
BNE	T4,R0,70019098	;branch if odd
ADDI	T3,T3,FFFF	;T3->mask
MFC0	V0,EntryLo0
BEQ	R0,R0,7001909C
NOP
//70019098:	use odd page instead
MFC0	V0,EntryLo1
//7001909C:
ANDI	T5,V0,0002	;T5=valid flag
BEQ	T5,R0,700190C8	;return invalid if not set
NOP
LUI	AT,3FFF
ORI	AT,AT,FFC0
AND	V0,V0,AT	;V0&=3FFFFFC0: PageFrame
SLL	V0,V0,0x6	;V0<<=6: offset in rdram to start of TLB segment
AND	T5,A0,T3	;T5=address & pagemask: offset from start of segment
ADD	V0,V0,T5	;V0+=(PageMask & Vaddr): physical address
BEQ	R0,R0,700190CC
NOP
//700190C8:	return invalid
ADDIU	V0,R0,FFFF
//700190CC:	return
MTC0	T0,EntryHi	;restore EntryHi
JR	RA
NOP

700190E0	19CE0	0->A0
JR	RA
SW	R0,0000 (A0)

700190F0
LUI	T6,A450
LW	A0,000C (T6)
LUI	AT,8000
ADDIU	SP,SP,FFF8
AND	T7,A0,AT
BEQ	T7,R0,70019114
NOP
BEQ	R0,R0,70019118
ADDIU	V0,R0,0001
OR	V0,R0,R0
JR	RA
ADDIU	SP,SP,0008

70019120
	accepts: A0=p->???
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A1,7002
LUI	A2,7002
ADDIU	A2,A2,B5F0	;A2= 7001B5F0
ADDIU	A1,A1,B624	;A1= 7001B624
SW	A0,0018 (SP)
JAL	7001F8F0
ADDIU	A3,R0,0003	;A3= 3
LW	A0,0018 (SP)
ADDIU	T6,R0,0001
SW	R0,0014 (A0)	;A0=14= 0
SW	T6,0018 (A0)	;A0+18= 1
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70019164
	accepts: A0=p->???, A1=, A2=
ADDIU	SP,SP,FFE8
SW	A1,001C (SP)
SW	A2,0020 (SP)
SW	RA,0014 (SP)
LUI	A2,7002
LUI	A1,7002
ADDIU	A1,A1,9990	;A1= 70019990
ADDIU	A2,A2,9960	;A2= 70019960
SW	A0,0018 (SP)
JAL	7001F8F0
ADDIU	A3,R0,0007	;A3= 7
LW	A0,0018 (SP)
SW	R0,0014 (A0)	;A0+14=0
LW	T6,0020 (SP)
SW	T6,0018 (A0)	;A0+18= A2 f/caller
LW	T7,001C (SP)
SW	T7,001C (A0)	;A0+1C= A1 f/caller
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700191B8
	accepts: A0=p->???, A1=, A2=
ADDIU	SP,SP,FFE8
SW	A1,001C (SP)
SW	A2,0020 (SP)
SW	RA,0014 (SP)
LUI	A2,7002
LUI	A1,7002
ADDIU	A1,A1,B510	;A1= 7001B510
ADDIU	A2,A2,B4E0	;A2= 7001B4E0
SW	A0,0018 (SP)
JAL	7001F8F0
ADDIU	A3,R0,0006	;A3= 6
LW	A0,0018 (SP)
SW	R0,0014 (A0)	;A0+14= 0
LW	T6,0020 (SP)
SW	T6,0018 (A0)	;A0+18= A2 f/caller
LW	T7,001C (SP)
SW	T7,001C (A0)	;A0+1C= A1 f/caller
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7001920C
	accepts: A0=p->???, A1=
ADDIU	SP,SP,FFE0
SW	A1,0024 (SP)
SW	RA,001C (SP)
LUI	A1,7002
LUI	A2,7002
ADDIU	A2,A2,A600	;A2= 7001A600
ADDIU	A1,A1,A6EC	;A1= 7001A6EC
SW	A0,0020 (SP)
JAL	7001F8F0
ADDIU	A3,R0,0001	;A3= 1
ADDIU	T6,R0,0020
SW	T6,0010 (SP)	;SP+10= 20 bytes
OR	A0,R0,R0
OR	A1,R0,R0
LW	A2,0024 (SP)
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
LW	T0,0020 (SP)
LUI	AT,3F80
MTC1	R0,F4
MTC1	AT,F6
ADDIU	T7,R0,0001
SW	V0,0014 (T0)
SW	T7,0024 (T0)
SW	R0,0030 (T0)
SW	R0,001C (T0)
SW	R0,0028 (T0)
SW	R0,002C (T0)
SWC1	F4,0020 (T0)
SWC1	F6,0018 (T0)
LW	RA,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

70019294
	accepts: A0=p->???, A1=p->function, A2=
ADDIU	SP,SP,FFD8
SW	A1,002C (SP)
SW	A2,0030 (SP)
SW	RA,0024 (SP)
SW	S0,0020 (SP)
LUI	A2,7002
LUI	A1,7002
OR	S0,A0,R0	;S0=A0
ADDIU	A1,A1,A15C	;A1= 7001A15C
ADDIU	A2,A2,9AB0	;A2= 70019AB0
JAL	7001F8F0
OR	A3,R0,R0	;A3= 0
ADDIU	T6,R0,0020
SW	T6,0010 (SP)	;SP+10= 20 bytes
OR	A0,R0,R0
OR	A1,R0,R0
LW	A2,0030 (SP)
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
SW	V0,0014 (S0)
ADDIU	T7,R0,0020
SW	T7,0010 (SP)	;SP+10= 20 bytes
LW	A2,0030 (SP)
OR	A0,R0,R0
OR	A1,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
SW	V0,0018 (S0)
LW	T9,002C (SP)
ADDIU	A0,S0,0034
JALR	RA,T9
NOP
ADDIU	T8,R0,0001
SW	V0,0030 (S0)
SW	R0,003C (S0)
SW	T8,0040 (S0)
SW	R0,0044 (S0)
LW	RA,0024 (SP)
LW	S0,0020 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

7001933C
	accepts: A0=p->???, A1=
ADDIU	SP,SP,FFE0
SW	A1,0024 (SP)
SW	RA,001C (SP)
LUI	A1,7002
LUI	A2,7002
ADDIU	A2,A2,AA14	;A2= 7001AA14
ADDIU	A1,A1,AE5C	;A1= 7001AE5C
SW	A0,0020 (SP)
JAL	7001F8F0
ADDIU	A3,R0,0004	;A3= 4
ADDIU	T6,R0,0050
SW	T6,0010 (SP)	;SP+10= 50 bytes
OR	A0,R0,R0
OR	A1,R0,R0
LW	A2,0024 (SP)
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ADDIU	A3,R0,0001	;A3= 1 block
LW	T0,0020 (SP)
ADDIU	V1,R0,0001
SW	V0,0014 (T0)
SW	V1,0038 (T0)
SW	R0,0048 (T0)
SH	V1,001A (T0)
SH	V1,0028 (T0)
SH	V1,002E (T0)
SH	V1,001C (T0)
SH	V1,001E (T0)
SH	R0,0020 (T0)
SH	R0,0022 (T0)
SH	V1,0026 (T0)
SH	R0,0024 (T0)
SW	R0,0030 (T0)
SW	R0,0034 (T0)
SH	R0,0018 (T0)
SW	R0,003C (T0)
SW	R0,0040 (T0)
SW	R0,0044 (T0)
LW	RA,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

700193E0
LH	V0,0000 (A0)
ADDIU	T9,R0,4000
ADDIU	T1,R0,0001
SLL	T6,V0,0xE
SRA	V1,T6,0xF
SLL	T7,V1,0x10
SRA	V1,T7,0x10
SUBU	T0,T9,V1
SH	T0,0002 (A0)
SW	T1,002C (A0)
OR	A1,R0,R0
OR	A2,A0,R0
ADDIU	A1,A1,0001
SLTI	AT,A1,0008
ADDIU	A2,A2,0002
BNE	AT,R0,70019410
SH	R0,0006 (A2)
MTC1	V1,F4
LUI	AT,40D0
MTC1	AT,F13
CVT.D.W	F6,F4
MTC1	R0,F12
ADDIU	A1,A1,0001
SLTI	AT,A1,0010
SH	V1,0008 (A2)
DIV.D	F2,F6,F12
ADDIU	A2,A2,0002
BEQ	AT,R0,70019478
MOV.D	F0,F2
MUL.D	F0,F0,F2
ADDIU	A1,A1,0001
SLTI	AT,A1,0010
ADDIU	A2,A2,0002
MUL.D	F8,F0,F12
TRUNC.W.D	F10,F8
MFC1	T3,F10
BNE	AT,R0,70019454
SH	T3,0006 (A2)
JR	RA
NOP

70019480
ADDIU	SP,SP,FF98
SW	S6,0058 (SP)
OR	S6,A2,R0
SW	RA,0064 (SP)
SW	S5,0054 (SP)
SW	A1,006C (SP)
LUI	A2,7002
OR	S5,A0,R0
SW	S8,0060 (SP)
SW	S7,005C (SP)
SW	S4,0050 (SP)
SW	S3,004C (SP)
SW	S2,0048 (SP)
SW	S1,0044 (SP)
SW	S0,0040 (SP)
SDC1	F26,0038 (SP)
SDC1	F24,0030 (SP)
SDC1	F22,0028 (SP)
SDC1	F20,0020 (SP)
ADDIU	A2,A2,01C0	;A2= 700201C0
OR	A1,R0,R0	;A1= NULL
JAL	7001F8F0
ADDIU	A3,R0,0005
LW	V0,006C (SP)
LUI	T6,7002
LUI	T7,7002
ADDIU	T6,T6,01D8
ADDIU	T7,T7,FFA8
SW	T6,0004 (S5)
SW	T7,0028 (S5)
LBU	T8,001C (V0)
LUI	S3,8003
ADDIU	S3,S3,81B8	;S3=800281B8
ADDIU	T9,T8,FFFF
SLTIU	AT,T9,0006
BEQ	AT,R0,7001956C
SLL	T9,T9,0x2
LUI	AT,8003
ADDU	AT,AT,T9
LW	T9,9830 (AT)	;T9=80029830+offset: p->handler
JR	T9
NOP
//70019528:
LUI	S3,8003
BEQ	R0,R0,7001956C	;S3=80028050
ADDIU	S3,S3,8050
//70019534:
LUI	S3,8003
BEQ	R0,R0,7001956C	;S3=800280B8
ADDIU	S3,S3,80B8
//70019540:
LUI	S3,8003
BEQ	R0,R0,7001956C	;S3=80028140
ADDIU	S3,S3,8140
//7001954C:
LUI	S3,8003
BEQ	R0,R0,7001956C	;S3=80028168
ADDIU	S3,S3,8168
//70019558:
LUI	S3,8003
BEQ	R0,R0,7001956C	;S3=80028190
ADDIU	S3,S3,8190
//70019564:
BEQ	R0,R0,7001956C
LW	S3,0020 (V0)
//7001956C:
LW	T0,0000 (S3)
ADDIU	T2,R0,0028
ADDIU	S1,R0,0002
SB	T0,0024 (S5)
LW	T1,0004 (S3)
OR	A0,R0,R0
OR	A1,R0,R0
SW	T1,001C (S5)
SW	T2,0010 (SP)	;SP+10= 28 bytes
OR	A2,S6,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
ANDI	A3,T0,00FF
SW	V0,0020 (S5)
LW	A3,001C (S5)
ADDIU	T3,R0,0002
SW	T3,0010 (SP)	;SP+10= 2 bytes
OR	A0,R0,R0
OR	A1,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
OR	A2,S6,R0
LW	T4,001C (S5)
SW	V0,0014 (S5)
SW	V0,0018 (S5)
BEQ	T4,R0,700195FC
OR	V1,R0,R0
LW	T5,0014 (S5)
SLL	T6,V1,0x1
ADDIU	V1,V1,0001
ADDU	T7,T5,T6
SH	R0,0000 (T7)
LW	T9,001C (S5)
ANDI	T8,V1,FFFF
OR	V1,T8,R0
SLTU	AT,T8,T9
BNEL	AT,R0,700195D4
LW	T5,0014 (S5)
LBU	T0,0024 (S5)
OR	S4,R0,R0
LUI	AT,3F80
BLEZ	T0,7001987C
ADDIU	S8,R0,0001	;S8= 1 block
MTC1	AT,F24
LUI	AT,447A
MTC1	AT,F22
LUI	AT,8003
MTC1	R0,F26
LDC1	F20,9848 (AT)
ADDIU	S7,R0,0028
MULTU	S4,S7
SLL	T3,S1,0x2
LW	T1,0020 (S5)
ADDU	T4,S3,T3
LW	T5,0000 (T4)
ADDIU	S1,S1,0001
ANDI	T6,S1,FFFF
SLL	T7,T6,0x2
ADDU	T8,S3,T7
ADDIU	S1,T6,0001
MFLO	T2
ADDU	S0,T1,T2
SW	T5,0000 (S0)
LW	T9,0000 (T8)
ANDI	T0,S1,FFFF
SLL	T1,T0,0x2
ADDU	T2,S3,T1
SW	T9,0004 (S0)
LW	T3,0000 (T2)
ADDIU	S1,T0,0001
ANDI	T4,S1,FFFF
SLL	T5,T4,0x2
ADDU	T6,S3,T5
SH	T3,000A (S0)
LW	T7,0000 (T6)
ADDIU	S1,T4,0001
ANDI	T8,S1,FFFF
SLL	T9,T8,0x2
ADDU	T0,S3,T9
SH	T7,0008 (S0)
LW	T1,0000 (T0)
ADDIU	S1,T8,0001
ANDI	T2,S1,FFFF
SLL	T3,T2,0x2
ADDU	T4,S3,T3
SH	T1,000C (S0)
LW	V0,0000 (T4)
OR	S1,T2,R0
OR	T0,S1,R0
BEQ	V0,R0,700197CC
ADDIU	S1,T0,0002
MTC1	V0,F4
LW	T5,006C (SP)
LW	T8,0004 (S0)
CVT.S.W	F6,F4
LW	T6,0018 (T5)
LW	T9,0000 (S0)
ADDIU	S1,T2,0001
MTC1	T6,F16
ANDI	T7,S1,FFFF
DIV.S	F8,F6,F22
SUBU	T0,T8,T9
OR	S1,T7,R0
SLL	T1,S1,0x2
CVT.D.W	F18,F16
ADDU	T2,S3,T1
LUI	AT,41F0
CVT.D.S	F0,F8
MTC1	T0,F8
ADD.D	F10,F0,F0
CVT.D.W	F16,F8
DIV.D	F4,F10,F18
CVT.S.D	F6,F4
BGEZ	T0,70019740
SWC1	F6,0010 (S0)
MTC1	AT,F11
MTC1	R0,F10
NOP
ADD.D	F16,F16,F10
LW	T3,0000 (T2)
ADDIU	S1,S1,0001
ANDI	T4,S1,FFFF
MTC1	T3,F18
SWC1	F24,0014 (S0)
SW	R0,0018 (S0)
CVT.S.W	F4,F18
ADDIU	T5,R0,0034
OR	S1,T4,R0
OR	A0,R0,R0
OR	A1,R0,R0
OR	A2,S6,R0
CVT.D.S	F6,F4
OR	A3,S8,R0	;A3=S8: 1 block
DIV.D	F8,F6,F20
MUL.D	F10,F8,F16
CVT.S.D	F18,F10
SWC1	F18,001C (S0)
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
SW	T5,0010 (SP)	;SP+10= 34 bytes
SW	V0,0024 (S0)
ADDIU	T6,R0,0020
SW	T6,0010 (SP)
OR	A0,R0,R0
OR	A1,R0,R0
OR	A2,S6,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
OR	A3,S8,R0	;A3=S8: 1 block
LW	T7,0024 (S0)
SW	V0,0014 (T7)
LW	T8,0024 (S0)
SWC1	F26,0020 (T8)
LW	T9,0024 (S0)
BEQ	R0,R0,700197D8
SW	S8,0024 (T9)
ANDI	T1,S1,FFFF
SW	R0,0024 (S0)
OR	S1,T1,R0
SLL	T2,S1,0x2
ADDU	S2,S3,T2
LW	T3,0000 (S2)
OR	A0,R0,R0
OR	A1,R0,R0
BEQ	T3,R0,70019854
OR	A2,S6,R0
ADDIU	T4,R0,0030
SW	T4,0010 (SP)	;SP+10= 30 bytes
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
OR	A3,S8,R0	;A3=S8: 1 block
SW	V0,0020 (S0)
ADDIU	T5,R0,0008
SW	T5,0010 (SP)	;SP+10= 8 bytes
OR	A0,R0,R0
OR	A1,R0,R0
OR	A2,S6,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
OR	A3,S8,R0	;A3=S8: 1 block
LW	T6,0020 (S0)
ADDIU	S1,S1,0001
ANDI	T9,S1,FFFF
SW	V0,0028 (T6)
LW	T8,0020 (S0)
LW	T7,0000 (S2)
OR	S1,T9,R0
SH	T7,0000 (T8)
JAL	700193E0
LW	A0,0020 (S0)
BEQ	R0,R0,70019868
LBU	T2,0024 (S5)
ADDIU	S1,S1,0001
ANDI	T0,S1,FFFF
SW	R0,0020 (S0)
OR	S1,T0,R0
LBU	T2,0024 (S5)
ADDIU	S4,S4,0001
ANDI	T1,S4,FFFF
SLT	AT,T1,T2
BNE	AT,R0,7001962C
OR	S4,T1,R0
LW	RA,0064 (SP)
LDC1	F20,0020 (SP)
LDC1	F22,0028 (SP)
LDC1	F24,0030 (SP)
LDC1	F26,0038 (SP)
LW	S0,0040 (SP)
LW	S1,0044 (SP)
LW	S2,0048 (SP)
LW	S3,004C (SP)
LW	S4,0050 (SP)
LW	S5,0054 (SP)
LW	S6,0058 (SP)
LW	S7,005C (SP)
LW	S8,0060 (SP)
JR	RA
ADDIU	SP,SP,0068

700198C0
ADDIU	SP,SP,FFE0
SLL	T0,A1,0x10
SRA	T6,T0,0x10
SW	S1,0018 (SP)
SLL	S1,T6,0x2
SW	RA,001C (SP)
SW	S0,0014 (SP)
SW	A1,0024 (SP)
ADDU	S1,S1,T6
LW	T7,0034 (A0)
SLL	S1,S1,0x2
SUBU	S1,S1,T6
OR	S0,A0,R0
SLL	S1,S1,0x2
OR	A1,A2,R0
ADDU	A0,T7,S1
ADDIU	A0,A0,0020
JAL	70019480
OR	A2,A3,R0
LW	T8,0034 (S0)
ADDIU	A1,R0,0001
ADDU	A2,T8,S1
JAL	700201C0
ADDIU	A0,A2,0020
LW	T9,0034 (S0)
LW	A0,0030 (S0)
ADDIU	A1,R0,0002
ADDU	A2,T9,S1
JAL	70019960
ADDIU	A2,A2,0020
LW	T2,0034 (S0)
LW	RA,001C (SP)
LW	S0,0014 (SP)
ADDU	V0,T2,S1
LW	S1,0018 (SP)
ADDIU	SP,SP,0020
JR	RA
ADDIU	V0,V0,0020

70019960
	accepts: A0=p->???, A1=, A2=
ADDIU	AT,R0,0002
BNE	A1,AT,70019988	;return if A1 isn't 2
LW	V0,001C (A0)
LW	T6,0014 (A0)
SLL	T7,T6,0x2	;T7=A0+14 -> offset
ADDU	T8,V0,T7
SW	A2,0000 (T8)	;A2->A0+1C + offset: 
LW	T9,0014 (A0)
ADDIU	T0,T9,0001
SW	T0,0014 (A0)	;increment A0+14
//70019988:	return 0: okay
JR	RA
OR	V0,R0,R0

70019990
	accepts: A0=, A1=, A2=, A3=, SP+10=
ADDIU	SP,SP,FFB8
LW	T0,0058 (SP)	;T0= SP+10 f/caller
SW	RA,0044 (SP)
SW	S8,0040 (SP)
SW	S7,003C (SP)
SW	S6,0038 (SP)
SW	S5,0034 (SP)
SW	S4,0030 (SP)
SW	S3,002C (SP)
SW	S2,0028 (SP)
SW	S1,0024 (SP)
SW	S0,0020 (SP)
LW	V1,001C (A0)
LUI	T6,0200
SLL	V0,A2,0x1
LUI	T7,0200
ORI	T6,T6,0440	;T6=02000440
ORI	T7,T7,0580	;T7=02000580
SW	T6,0000 (T0)
SW	V0,0004 (T0)
SW	T7,0008 (T0)
SW	V0,000C (T0)
LW	T8,0014 (A0)
OR	S5,A2,R0
OR	S7,A1,R0
OR	S8,A3,R0
OR	S4,A0,R0	;S4=A0
OR	S0,R0,R0
BLEZ	T8,70019A7C
ADDIU	S3,T0,0010
LUI	S2,0C00
ORI	S2,S2,7FFF	;S2=0C007FFF
OR	S1,V1,R0
ANDI	S6,V0,FFFF
//70019A18:
LW	A0,0000 (S1)
SW	S3,0010 (SP)
OR	A1,S7,R0
LW	T9,0004 (A0)
OR	A2,S5,R0
OR	A3,S8,R0
JALR	RA,T9
NOP
//70019A38:
LUI	T2,06C0
LUI	T3,0800
LUI	T1,0800
ORI	T2,T2,0440
ORI	T3,T3,0580
SW	T1,0000 (V0)	;V0+0 = 08000000
SW	S6,0004 (V0)
SW	T2,000C (V0)	;V0+C = 06C00440
SW	S2,0008 (V0)	;V0+8 = 0C007FFF
SW	T3,0014 (V0)	;V0+14= 08000580
SW	S2,0010 (V0)	;V0+10= 0C007FFF
LW	T4,0014 (S4)	;T4= A0+14: 
ADDIU	S0,S0,0001	;S0+=1
ADDIU	S1,S1,0004
SLT	AT,S0,T4
BNE	AT,R0,70019A18
ADDIU	S3,V0,0018
//70019A7C:
LW	RA,0044 (SP)
OR	V0,S3,R0
LW	S3,002C (SP)
LW	S0,0020 (SP)
LW	S1,0024 (SP)
LW	S2,0028 (SP)
LW	S4,0030 (SP)
LW	S5,0034 (SP)
LW	S6,0038 (SP)
LW	S7,003C (SP)
LW	S8,0040 (SP)
JR	RA
ADDIU	SP,SP,0048

70019AB0
ADDIU	SP,SP,FFE8
ADDIU	AT,R0,0004
SW	RA,0014 (SP)
BEQ	A1,AT,70019C14
OR	A3,A0,R0
ADDIU	AT,R0,0005
BNEL	A1,AT,70019C78
LW	RA,0014 (SP)
SW	A2,0028 (A0)
LW	T6,0000 (A2)
SW	R0,0038 (A0)
LUI	T7,7002
SW	T6,0044 (A0)
LBU	V0,0008 (A2)
BEQL	V0,R0,70019B08
LW	V0,0028 (A3)
ADDIU	A0,R0,0001
BEQ	V0,A0,70019BC8
LUI	T0,7002
BEQ	R0,R0,70019C78
LW	RA,0014 (SP)
LW	V0,0028 (A3)
ADDIU	T7,T7,A15C
SW	T7,0004 (A3)
LW	T8,0004 (V0)
ADDIU	A1,R0,0009
DIV	T8,A1
MFLO	T9
BNE	A1,R0,70019B2C
NOP
BREAK	00001C00	;Break: division by zero
ADDIU	AT,R0,FFFF
BNE	A1,AT,70019B44
LUI	AT,8000
BNE	T8,AT,70019B44
NOP
BREAK	00001800
MULTU	T9,A1
MFLO	T0
SW	T0,0004 (V0)
LW	V0,0028 (A3)
LW	A0,0010 (V0)
LW	T1,0000 (A0)
LW	T3,0004 (A0)
SLL	T2,T1,0x4
MULTU	T2,T3
MFLO	T4
SW	T4,002C (A3)
LW	V1,000C (V0)
BEQL	V1,R0,70019BBC
SW	R0,0024 (A3)
LW	T5,0000 (V1)
LW	A1,0018 (A3)
ADDIU	A2,R0,0020
SW	T5,001C (A3)
LW	T6,000C (V0)
LW	T7,0004 (T6)
SW	T7,0020 (A3)
LW	T8,000C (V0)
LW	T9,0008 (T8)
SW	T9,0024 (A3)
LW	A0,000C (V0)
JAL	7001D690
ADDIU	A0,A0,000C
BEQ	R0,R0,70019C78
LW	RA,0014 (SP)
SW	R0,0024 (A3)
SW	R0,0020 (A3)
BEQ	R0,R0,70019C74
SW	R0,001C (A3)
LW	V0,0028 (A3)
ADDIU	T0,T0,9C84
SW	T0,0004 (A3)
LW	V1,000C (V0)
BEQL	V1,R0,70019C08
SW	R0,0024 (A3)
LW	T1,0000 (V1)
SW	T1,001C (A3)
LW	T2,000C (V0)
LW	T3,0004 (T2)
SW	T3,0020 (A3)
LW	T4,000C (V0)
LW	T5,0008 (T4)
BEQ	R0,R0,70019C74
SW	T5,0024 (A3)
SW	R0,0024 (A3)
SW	R0,0020 (A3)
BEQ	R0,R0,70019C74
SW	R0,001C (A3)
LW	V0,0028 (A3)
ADDIU	A0,R0,0001
SW	R0,003C (A3)
SW	A0,0040 (A3)
BEQ	V0,R0,70019C74
SW	R0,0038 (A3)
LW	T6,0000 (V0)
SW	T6,0044 (A3)
LBU	V1,0008 (V0)
BNE	V1,R0,70019C58
NOP
LW	V1,000C (V0)
BEQL	V1,R0,70019C78
LW	RA,0014 (SP)
LW	T7,0008 (V1)
BEQ	R0,R0,70019C74
SW	T7,0024 (A3)
BNEL	A0,V1,70019C78
LW	RA,0014 (SP)
LW	V1,000C (V0)
BEQL	V1,R0,70019C78
LW	RA,0014 (SP)
LW	T8,0008 (V1)
SW	T8,0024 (A3)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70019C84
ADDIU	SP,SP,FFB0
LW	T0,0060 (SP)
SW	S3,0020 (SP)
SW	S0,0014 (SP)
OR	S0,A0,R0
OR	S3,A2,R0
SW	RA,0024 (SP)
SW	S2,001C (SP)
SW	S1,0018 (SP)
SW	A3,005C (SP)
OR	T2,A1,R0
BNE	A2,R0,70019CC0
OR	T1,T0,R0
BEQ	R0,R0,7001A014
OR	V0,T0,R0
LW	V0,0038 (S0)
LW	V1,0020 (S0)
ADDU	T6,V0,S3
SLTU	AT,V1,T6
BEQL	AT,R0,70019EE4
LW	V0,0028 (S0)
LW	T7,0024 (S0)
SUBU	S2,V1,V0
BEQL	T7,R0,70019EE4
LW	V0,0028 (S0)
BLEZ	S2,70019D64
SLL	S1,S2,0x1
LW	A0,0044 (S0)
LW	A2,0034 (S0)
SW	T2,0054 (SP)
LW	T9,0030 (S0)
OR	A1,S1,R0
JALR	RA,T9
NOP
LW	T2,0054 (SP)
ANDI	A2,V0,0007
LW	T0,0060 (SP)
LH	T8,0000 (T2)
ADDU	A3,S1,A2
ANDI	T5,A3,0007
SUBU	T6,A3,T5
LUI	AT,0800
ANDI	T3,T8,FFFF
OR	T4,T3,AT
ADDIU	T7,T6,0008
ADDIU	T1,T0,0008
ANDI	T9,T7,FFFF
OR	A0,T1,R0
SUBU	T3,V0,A2
LUI	T8,0400
SW	T9,0004 (T0)
SW	T4,0000 (T0)
SW	T3,0004 (A0)
SW	T8,0000 (A0)
BEQ	R0,R0,70019D68
ADDIU	T1,T1,0008
OR	A2,R0,R0
LH	T4,0000 (T2)
SLT	AT,S2,S3
ADDU	T5,T4,A2
SH	T5,0000 (T2)
LW	T6,0028 (S0)
LW	V0,001C (S0)
LW	T7,0000 (T6)
SLL	T9,V0,0x1
SW	V0,0038 (S0)
ADDU	T8,T7,T9
SW	T8,0044 (S0)
BEQ	AT,R0,70019EBC
LH	T0,0000 (T2)
LW	V0,0024 (S0)
ADDIU	AT,R0,FFFF
ADDU	T0,T0,S1
BEQ	V0,AT,70019DBC
SUBU	S3,S3,S2
BEQ	V0,R0,70019DBC
ADDIU	T3,V0,FFFF
SW	T3,0024 (S0)
LW	T4,0020 (S0)
LW	T5,001C (S0)
SUBU	V0,T4,T5
SLTU	AT,S3,V0
BEQ	AT,R0,70019DDC
OR	S2,V0,R0
BEQ	R0,R0,70019DDC
OR	S2,S3,R0
LW	A0,0044 (S0)
LW	A2,0034 (S0)
SW	T1,004C (SP)
SW	T0,002C (SP)
LW	T9,0030 (S0)
SLL	S1,S2,0x1
OR	A1,S1,R0
JALR	RA,T9
NOP
LW	T0,002C (SP)
ANDI	A1,V0,0007
LW	T1,004C (SP)
ANDI	V1,T0,0007
BEQ	V1,R0,70019E24
ADDU	A3,S1,A1
ADDIU	T6,R0,0008
BEQ	R0,R0,70019E28
SUBU	A2,T6,V1
OR	A2,R0,R0
ADDU	T7,T0,A2
ANDI	T4,A3,0007
SUBU	T5,A3,T4
ANDI	T8,T7,FFFF
OR	V1,T1,R0
LUI	AT,0800
OR	T3,T8,AT
ADDIU	T1,T1,0008
ADDIU	T9,T5,0008
ANDI	T6,T9,FFFF
OR	A0,T1,R0
SW	T6,0004 (V1)
SW	T3,0000 (V1)
SUBU	T8,V0,A1
LUI	T7,0400
SW	T7,0000 (A0)
SW	T8,0004 (A0)
BNE	A1,R0,70019E78
ADDIU	T1,T1,0008
BEQ	A2,R0,70019EB0
ADDU	T3,T0,A1
LUI	AT,00FF
ORI	AT,AT,FFFF
ADDU	T4,T3,A2
AND	T5,T4,AT
OR	V0,T1,R0
LUI	AT,0A00
SLL	T7,T0,0x10
ANDI	T8,S1,FFFF
OR	T3,T7,T8
OR	T9,T5,AT
SW	T9,0000 (V0)
SW	T3,0004 (V0)
ADDIU	T1,T1,0008
SLT	AT,S2,S3
BNEL	AT,R0,70019DA0
LW	V0,0024 (S0)
LW	T4,0038 (S0)
LW	T9,0044 (S0)
SLL	T6,S3,0x1
ADDU	T5,T4,S3
ADDU	T7,T9,T6
SW	T5,0038 (S0)
SW	T7,0044 (S0)
BEQ	R0,R0,7001A014
OR	V0,T1,R0
LW	V0,0028 (S0)
LW	A0,0044 (S0)
SLL	S1,S3,0x1
LW	T8,0000 (V0)
LW	T4,0004 (V0)
ADDU	V1,A0,S1
SUBU	T3,V1,T8
SUBU	S2,T3,T4
BGEZL	S2,70019F10
SLT	AT,S1,S2
OR	S2,R0,R0
SLT	AT,S1,S2
BEQL	AT,R0,70019F20
SLT	AT,S2,S1
OR	S2,S1,R0
SLT	AT,S2,S1
BEQL	AT,R0,70019FD4
SW	V1,0044 (S0)
BLEZ	S3,70019FA8
OR	A2,R0,R0
LW	A2,0034 (S0)
SUBU	A1,S1,S2
SW	A1,0048 (SP)
SW	T2,0054 (SP)
LW	T9,0030 (S0)
JALR	RA,T9
NOP
LW	T2,0054 (SP)
LW	A3,0048 (SP)
ANDI	A2,V0,0007
LH	T5,0000 (T2)
LW	T0,0060 (SP)
ADDU	A3,A3,A2
ANDI	T8,A3,0007
SUBU	T3,A3,T8
LUI	AT,0800
ANDI	T6,T5,FFFF
OR	T7,T6,AT
ADDIU	T4,T3,0008
ADDIU	T1,T0,0008
ANDI	T9,T4,FFFF
OR	A0,T1,R0
SUBU	T6,V0,A2
LUI	T5,0400
SW	T9,0004 (T0)
SW	T7,0000 (T0)
SW	T6,0004 (A0)
SW	T5,0000 (A0)
BEQ	R0,R0,70019FA8
ADDIU	T1,T1,0008
LH	T7,0000 (T2)
ADDU	T8,T7,A2
SH	T8,0000 (T2)
LW	T3,0038 (S0)
LW	T9,0044 (S0)
ADDU	T4,T3,S3
ADDU	T5,T9,S1
SW	T4,0038 (S0)
BEQ	R0,R0,70019FD4
SW	T5,0044 (S0)
SW	V1,0044 (S0)
BEQ	S2,R0,7001A010
SUBU	V1,S1,S2
BGEZ	V1,70019FE8
OR	V0,T1,R0
OR	V1,R0,R0
LH	T6,0000 (T2)
LUI	AT,00FF
ORI	AT,AT,FFFF
ADDU	T7,T6,V1
AND	T8,T7,AT
LUI	AT,0200
OR	T3,T8,AT
SW	T3,0000 (V0)
SW	S2,0004 (V0)
ADDIU	T1,T1,0008
OR	V0,T1,R0
LW	RA,0024 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
JR	RA
ADDIU	SP,SP,0050

7001A030
ADDIU	SP,SP,FFE8
SW	S3,002C (SP)
SW	S5,0028 (SP)
SLL	T6,S3,0x10
SLL	T8,S5,0x10
SRA	S5,T8,0x10
SRA	S3,T6,0x10
BLEZ	S1,7001A0B8
SW	RA,0014 (SP)
LW	T9,0030 (S2)
LW	A0,0044 (S2)
OR	A1,S1,R0
JALR	RA,T9
LW	A2,0034 (S2)
ANDI	A2,V0,0007
ADDU	S1,S1,A2
ANDI	T6,S3,FFFF
LUI	AT,0800
OR	T7,T6,AT
ANDI	T8,S1,0007
OR	A0,S0,R0
SUBU	T9,S1,T8
ADDIU	T6,T9,0008
SW	T7,0000 (A0)
ADDIU	S0,S0,0008
ANDI	T7,T6,FFFF
OR	A1,S0,R0
SW	T7,0004 (A0)
SUBU	T9,V0,A2
LUI	T8,0400
SW	T8,0000 (A1)
SW	T9,0004 (A1)
BEQ	R0,R0,7001A0BC
ADDIU	S0,S0,0008
OR	A2,R0,R0
ANDI	T6,S4,0002
BEQ	T6,R0,7001A0E8
OR	V0,S0,R0
LUI	T7,0F00
SW	T7,0000 (V0)
LW	T8,0018 (S2)
LUI	AT,1FFF
ORI	AT,AT,FFFF
AND	T9,T8,AT
SW	T9,0004 (V0)
ADDIU	S0,S0,0008
ADDU	T6,S3,A2
ANDI	T7,T6,FFFF
LUI	AT,0800
OR	T8,T7,AT
OR	V1,S0,R0
SW	T8,0000 (V1)
SLL	T7,S6,0x1
ANDI	T8,T7,FFFF
SLL	T6,S5,0x10
OR	T9,T6,T8
ANDI	T7,S4,00FF
ADDIU	S0,S0,0008
SLL	T6,T7,0x10
LUI	AT,0100
SW	T9,0004 (V1)
OR	T8,T6,AT
OR	A0,S0,R0
SW	T8,0000 (A0)
LW	T9,0014 (S2)
LUI	AT,1FFF
ORI	AT,AT,FFFF
AND	T7,T9,AT
SW	T7,0004 (A0)
SW	R0,0040 (S2)
LW	RA,0014 (SP)
ADDIU	S0,S0,0008
OR	V0,S0,R0
JR	RA
ADDIU	SP,SP,0018

7001A15C
ADDIU	SP,SP,FF50
SW	S7,0044 (SP)
SW	A3,00BC (SP)
OR	A3,A1,R0
OR	S7,A0,R0
SW	RA,004C (SP)
SW	S8,0048 (SP)
SW	S6,0040 (SP)
SW	S5,003C (SP)
SW	S4,0038 (SP)
SW	S3,0034 (SP)
SW	S2,0030 (SP)
SW	S1,002C (SP)
SW	S0,0028 (SP)
SW	A1,00B4 (SP)
OR	T0,A2,R0
BNE	A2,R0,7001A1AC
OR	T5,R0,R0
BEQ	R0,R0,7001A5CC
LW	V0,00C0 (SP)
LW	T6,002C (S7)
LUI	AT,00FF
ORI	AT,AT,FFFF
LW	A1,00C0 (SP)
AND	T7,T6,AT
LUI	AT,0B00
OR	T8,T7,AT
SW	T8,0000 (A1)
LW	T9,0028 (S7)
LUI	AT,1FFF
ORI	AT,AT,FFFF
LW	T6,0010 (T9)
ADDIU	T2,A1,0008
OR	A2,R0,R0
ADDIU	T7,T6,0008
AND	T8,T7,AT
SW	T8,0004 (A1)
LW	V1,0038 (S7)
LW	A0,0020 (S7)
OR	A1,T0,R0
ADDU	T9,V1,T0
SLTU	T1,A0,T9
BEQ	T1,R0,7001A218
ADDIU	T7,R0,0010
LW	T1,0024 (S7)
SLTU	T6,R0,T1
OR	T1,T6,R0
BEQ	T1,R0,7001A228
ADDIU	AT,R0,0009
BEQ	R0,R0,7001A228
SUBU	A1,A0,V1
LW	V1,003C (S7)
OR	S0,T2,R0
OR	S2,S7,R0
BEQ	V1,R0,7001A244
OR	S3,R0,R0
BEQ	R0,R0,7001A244
SUBU	A2,T7,V1
SUBU	A0,A1,A2
BGEZ	A0,7001A254
NOP
OR	A0,R0,R0
BEQ	T1,R0,7001A45C
ADDIU	S8,A0,000F
ADDIU	S8,A0,000F
SRA	T8,S8,0x4
LH	S5,0000 (A3)
LW	S4,0040 (S7)
SLL	T1,T8,0x3
ADDU	T1,T1,T8
OR	S1,T1,R0
SW	T1,005C (SP)
SW	T0,00B8 (SP)
SW	A3,00B4 (SP)
SW	A1,008C (SP)
OR	S8,T8,R0
JAL	7001A030
OR	S6,A0,R0
LW	V1,003C (S7)
LW	A1,008C (SP)
LW	A3,00B4 (SP)
LW	T0,00B8 (SP)
LW	T1,005C (SP)
BEQ	V1,R0,7001A2C4
OR	T2,V0,R0
LH	T9,0000 (A3)
SLL	T6,V1,0x1
ADDU	T7,T9,T6
BEQ	R0,R0,7001A2D0
SH	T7,0000 (A3)
LH	T8,0000 (A3)
ADDIU	T9,T8,0020
SH	T9,0000 (A3)
LW	V0,001C (S7)
LW	T7,0028 (S7)
SLT	AT,A1,T0
ANDI	T6,V0,000F
SW	T6,003C (S7)
LW	T8,0000 (T7)
SRL	T9,V0,0x4
SLL	T6,T9,0x3
ADDU	T6,T6,T9
ADDU	T7,T8,T6
ADDIU	T9,T7,0009
SW	T9,0044 (S7)
SW	V0,0038 (S7)
BEQ	AT,R0,7001A42C
LH	A2,0000 (A3)
SLL	V1,A1,0x1
ADDIU	T8,S8,0001
SLL	T6,T8,0x5
LW	V0,0024 (S7)
ADDU	A3,T6,A2
ADDIU	AT,R0,FFE0
AND	T7,A3,AT
ADDIU	AT,R0,FFFF
SUBU	T0,T0,A1
OR	A3,T7,R0
BEQ	V0,AT,7001A348
ADDU	A2,A2,V1
BEQ	V0,R0,7001A348
ADDIU	T9,V0,FFFF
SW	T9,0024 (S7)
LW	T8,0020 (S7)
LW	T6,001C (S7)
OR	S0,T2,R0
OR	S2,S7,R0
SUBU	V0,T8,T6
SLTU	AT,T0,V0
BEQ	AT,R0,7001A370
SLL	S5,A3,0x10
BEQ	R0,R0,7001A374
OR	A1,T0,R0
OR	A1,V0,R0
LW	T7,003C (S7)
SRA	T8,S5,0x10
OR	S5,T8,R0
ADDU	A0,A1,T7
ADDIU	A0,A0,FFF0
BGEZ	A0,7001A394
OR	S3,R0,R0
OR	A0,R0,R0
LW	S4,0040 (S7)
ADDIU	S8,A0,000F
SRA	T9,S8,0x4
SLL	T1,T9,0x3
ADDU	T1,T1,T9
ORI	T6,S4,0002
OR	S4,T6,R0
OR	S1,T1,R0
SW	T1,005C (SP)
OR	S8,T9,R0
SW	T0,00B8 (SP)
SW	A3,0088 (SP)
SW	A2,0080 (SP)
SW	A1,008C (SP)
JAL	7001A030
OR	S6,A0,R0
LW	T7,003C (S7)
LW	A3,0088 (SP)
LUI	AT,00FF
SLL	T9,T7,0x1
ORI	AT,AT,FFFF
ADDU	T8,T9,A3
AND	T6,T8,AT
LW	A1,008C (SP)
LUI	AT,0A00
LW	A2,0080 (SP)
OR	T7,T6,AT
LW	T0,00B8 (SP)
LW	T1,005C (SP)
SLL	V1,A1,0x1
ANDI	T6,V1,FFFF
SW	T7,0000 (V0)
SLL	T8,A2,0x10
OR	T7,T8,T6
SLT	AT,A1,T0
SW	T7,0004 (V0)
BNE	AT,R0,7001A310
ADDIU	T2,V0,0008
LW	T9,003C (S7)
LW	T7,0038 (S7)
OR	V0,T2,R0
ADDU	T8,T9,T0
ANDI	T6,T8,000F
LW	T8,0044 (S7)
SW	T6,003C (S7)
ADDU	T9,T7,T0
ADDU	T6,T8,T1
SW	T9,0038 (S7)
BEQ	R0,R0,7001A5CC
SW	T6,0044 (S7)
LW	V0,0028 (S7)
SRA	T7,S8,0x4
LW	T9,0044 (S7)
SLL	T1,T7,0x3
LW	T8,0000 (V0)
ADDU	T1,T1,T7
OR	S8,T7,R0
LW	T7,0004 (V0)
ADDU	T3,T9,T1
SUBU	T6,T3,T8
SUBU	V1,T6,T7
BGEZ	V1,7001A494
SLL	A1,S8,0x4
OR	V1,R0,R0
DIV	V1,AT
MFLO	V0
SLL	A0,V0,0x4
ADDU	T4,A1,A2
SLT	AT,T4,A0
BEQ	AT,R0,7001A4B4
OR	S0,T2,R0
OR	A0,T4,R0
ANDI	T8,A0,000F
SUBU	T6,A0,T8
SLT	AT,T6,T0
BEQ	AT,R0,7001A570
SUBU	A2,T1,V1
LH	S5,0000 (A3)
LW	S4,0040 (S7)
ADDIU	T5,R0,0001
SW	T5,007C (SP)
SW	T4,0050 (SP)
SW	T1,005C (SP)
SW	T0,00B8 (SP)
SW	A3,00B4 (SP)
SW	A0,0090 (SP)
OR	S2,S7,R0
SUBU	S6,A1,A0
OR	S1,A2,R0
JAL	7001A030
OR	S3,R0,R0
LW	V1,003C (S7)
LW	A0,0090 (SP)
LW	A3,00B4 (SP)
LW	T0,00B8 (SP)
LW	T1,005C (SP)
LW	T4,0050 (SP)
LW	T5,007C (SP)
BEQ	V1,R0,7001A538
OR	T2,V0,R0
LH	T7,0000 (A3)
SLL	T9,V1,0x1
ADDU	T8,T7,T9
BEQ	R0,R0,7001A544
SH	T8,0000 (A3)
LH	T6,0000 (A3)
ADDIU	T7,T6,0020
SH	T7,0000 (A3)
LW	T9,003C (S7)
LW	T7,0038 (S7)
ADDU	T8,T9,T0
ANDI	T6,T8,000F
LW	T8,0044 (S7)
SW	T6,003C (S7)
ADDU	T9,T7,T0
ADDU	T6,T8,T1
SW	T9,0038 (S7)
BEQ	R0,R0,7001A578
SW	T6,0044 (S7)
SW	R0,003C (S7)
SW	T3,0044 (S7)
BEQ	A0,R0,7001A5C8
OR	V0,T2,R0
BEQ	T5,R0,7001A598
SW	R0,003C (S7)
SUBU	V1,T4,A0
SLL	T7,V1,0x1
BEQ	R0,R0,7001A59C
OR	V1,T7,R0
OR	V1,R0,R0
LH	T9,0000 (A3)
LUI	AT,00FF
ORI	AT,AT,FFFF
ADDU	T8,T9,V1
AND	T6,T8,AT
LUI	AT,0200
OR	T7,T6,AT
SLL	T9,A0,0x1
SW	T9,0004 (V0)
SW	T7,0000 (V0)
ADDIU	T2,T2,0008
OR	V0,T2,R0
LW	RA,004C (SP)
LW	S0,0028 (SP)
LW	S1,002C (SP)
LW	S2,0030 (SP)
LW	S3,0034 (SP)
LW	S4,0038 (SP)
LW	S5,003C (SP)
LW	S6,0040 (SP)
LW	S7,0044 (SP)
LW	S8,0048 (SP)
JR	RA
ADDIU	SP,SP,00B0

7001A600
ADDIU	T6,A1,FFFF
ADDIU	SP,SP,FFD8
SLTIU	AT,T6,0009
SW	RA,0014 (SP)
BEQ	AT,R0,7001A6C0
OR	A3,A0,R0
SLL	T6,T6,0x2
LUI	AT,8003
ADDU	AT,AT,T6
LW	T6,9850 (AT)
JR	T6
NOP
BEQ	R0,R0,7001A6D8
SW	A2,0000 (A3)
LW	A0,0000 (A3)
MTC1	R0,F4
ADDIU	T7,R0,0001
SW	T7,0024 (A3)
SW	R0,0030 (A3)
SW	R0,001C (A3)
BEQ	A0,R0,7001A6D8
SWC1	F4,0020 (A3)
LW	T9,0008 (A0)
ADDIU	A1,R0,0004
OR	A2,R0,R0
JALR	RA,T9
NOP
BEQ	R0,R0,7001A6DC
LW	RA,0014 (SP)
LW	A0,0000 (A3)
ADDIU	T8,R0,0001
SW	T8,0030 (A3)
BEQL	A0,R0,7001A6DC
LW	RA,0014 (SP)
LW	T9,0008 (A0)
ADDIU	A1,R0,0009
OR	A2,R0,R0
JALR	RA,T9
NOP
BEQ	R0,R0,7001A6DC
LW	RA,0014 (SP)
SW	A2,001C (SP)
LWC1	F6,001C (SP)
BEQ	R0,R0,7001A6D8
SWC1	F6,0018 (A3)
ADDIU	T0,R0,0001
BEQ	R0,R0,7001A6D8
SW	T0,001C (A3)
LW	A0,0000 (A3)
BEQL	A0,R0,7001A6DC
LW	RA,0014 (SP)
LW	T9,0008 (A0)
JALR	RA,T9
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0028
OR	V0,R0,R0
JR	RA
NOP

7001A6EC
ADDIU	SP,SP,FFB0
SW	RA,001C (SP)
SW	A1,0054 (SP)
LW	T1,0000 (A0)
ADDIU	T6,R0,0140
OR	T0,A0,R0
OR	T2,A2,R0
BNE	A2,R0,7001A718
SH	T6,0046 (SP)
BEQ	R0,R0,7001A8E4
LW	V0,0060 (SP)
LW	T7,001C (T0)
LW	T8,0060 (SP)
BEQL	T7,R0,7001A78C
LWC1	F2,0018 (T0)
SW	T8,0010 (SP)
SW	T2,0058 (SP)
LW	T9,0004 (T1)
OR	A0,T1,R0
ADDIU	A1,SP,0046
JALR	RA,T9
OR	A2,T2,R0
LH	T3,0046 (SP)
LUI	AT,00FF
ORI	AT,AT,FFFF
AND	T4,T3,AT
LUI	AT,0A00
LW	T2,0058 (SP)
OR	T5,T4,AT
SW	T5,0000 (V0)
LW	T6,0054 (SP)
SLL	T3,T2,0x1
ANDI	T4,T3,FFFF
LH	T8,0000 (T6)
ADDIU	A1,V0,0008
SLL	T9,T8,0x10
OR	T5,T9,T4
BEQ	R0,R0,7001A8E0
SW	T5,0004 (V0)
LWC1	F2,0018 (T0)
LUI	AT,8003
LDC1	F4,9878 (AT)
CVT.D.S	F6,F2
LUI	AT,8003
C.LT.D	F4,F6
NOP
BC1FL	7001A7BC
LUI	AT,4700
LWC1	F8,9880 (AT)
SWC1	F8,0018 (T0)
LWC1	F2,0018 (T0)
LUI	AT,4700
MTC1	AT,F12
OR	A0,T1,R0
ADDIU	A1,SP,0046
MUL.S	F10,F2,F12
TRUNC.W.S	F16,F10
MFC1	T7,F16
MTC1	T2,F16
MTC1	T7,F18
NOP
CVT.S.W	F4,F18
CVT.S.W	F18,F16
SWC1	F4,0018 (T0)
LWC1	F6,0018 (T0)
DIV.S	F8,F6,F12
LWC1	F6,0020 (T0)
SWC1	F8,0018 (T0)
LWC1	F10,0018 (T0)
MUL.S	F4,F10,F18
ADD.S	F0,F6,F4
TRUNC.W.S	F8,F0
MFC1	A2,F8
NOP
MTC1	A2,F16
NOP
CVT.S.W	F10,F16
SUB.S	F18,F0,F10
SWC1	F18,0020 (T0)
LW	T3,0060 (SP)
SW	T2,0058 (SP)
SW	T0,0050 (SP)
SW	T3,0010 (SP)
LW	T9,0004 (T1)
JALR	RA,T9
NOP
LW	T0,0050 (SP)
LH	T5,0046 (SP)
LUI	AT,4700
MTC1	AT,F4
LWC1	F6,0018 (T0)
LUI	AT,0800
ANDI	T6,T5,FFFF
LW	T2,0058 (SP)
OR	T7,T6,AT
SW	T7,0000 (V0)
LW	T8,0054 (SP)
MUL.S	F8,F6,F4
SLL	T5,T2,0x1
LH	T9,0000 (T8)
ANDI	T6,T5,FFFF
ADDIU	T8,V0,0008
SLL	T4,T9,0x10
OR	T7,T4,T6
TRUNC.W.S	F16,F8
SW	T7,0004 (V0)
SW	T8,0028 (SP)
LW	T3,0024 (T0)
MFC1	V1,F16
LUI	AT,0500
ANDI	T9,T3,00FF
SLL	T5,T9,0x10
OR	T4,T5,AT
ANDI	T6,V1,FFFF
OR	T7,T4,T6
SW	T7,0008 (V0)
ADDIU	A1,V0,0010
LW	A0,0014 (T0)
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
SW	A1,0048 (SP)
LW	T8,0028 (SP)
LW	T0,0050 (SP)
LW	A1,0048 (SP)
SW	V0,0004 (T8)
SW	R0,0024 (T0)
OR	V0,A1,R0
LW	RA,001C (SP)
ADDIU	SP,SP,0050
JR	RA
NOP

7001A900
BEQ	A2,R0,7001A920
ADDIU	T6,R0,0001
SLLV	T7,T6,A2
MTC1	T7,F4
NOP
CVT.D.W	F6,F4
MUL.D	F12,F12,F6
NOP
JR	RA
MOV.D	F0,F12

7001A928
MTC1	R0,F3
MTC1	R0,F2
SW	R0,0000 (A2)
LUI	AT,3FF0
C.EQ.D	F12,F2
NOP
BC1FL	7001A954
C.LT.D	F2,F12
JR	RA
MOV.D	F0,F12
C.LT.D	F2,F12
MTC1	AT,F15
MTC1	R0,F14
LUI	AT,3FE0
BC1FL	7001A974
NEG.D	F0,F12
BEQ	R0,R0,7001A974
MOV.D	F0,F12
NEG.D	F0,F12
C.LE.D	F14,F0
NOP
BC1FL	7001A9B4
LUI	AT,3FE0
MTC1	AT,F17
MTC1	R0,F16
NOP
MUL.D	F0,F0,F16
LW	T6,0000 (A2)
ADDIU	T7,T6,0001
SW	T7,0000 (A2)
C.LE.D	F14,F0
NOP
BC1T	7001A990
NOP
LUI	AT,3FE0
MTC1	AT,F17
MTC1	R0,F16
NOP
C.LT.D	F0,F16
NOP
BC1FL	7001A9F0
C.LT.D	F2,F12
ADD.D	F0,F0,F0
LW	T8,0000 (A2)
C.LT.D	F0,F16
ADDIU	T9,T8,FFFF
SW	T9,0000 (A2)
BC1TL	7001A9D4
ADD.D	F0,F0,F0
C.LT.D	F2,F12
NOP
BC1FL	7001AA08
NEG.D	F2,F0
BEQ	R0,R0,7001AA08
MOV.D	F2,F0
NEG.D	F2,F0
MOV.D	F0,F2
JR	RA
NOP

7001AA14
ADDIU	SP,SP,FFE8
ADDIU	V0,R0,0001
SW	RA,0014 (SP)
BEQ	A1,V0,7001AAC0
OR	A3,A0,R0
ADDIU	AT,R0,0003
BEQ	A1,AT,7001AA4C
ADDIU	AT,R0,0004
BEQ	A1,AT,7001AA6C
ADDIU	AT,R0,0009
BEQL	A1,AT,7001AA9C
LW	A0,0000 (A3)
BEQ	R0,R0,7001AACC
LW	A0,0000 (A3)
LW	V0,0040 (A3)
BEQL	V0,R0,7001AA64
SW	A2,003C (A3)
BEQ	R0,R0,7001AA64
SW	A2,0000 (V0)
SW	A2,003C (A3)
BEQ	R0,R0,7001AAE0
SW	A2,0040 (A3)
LW	A0,0000 (A3)
SW	V0,0038 (A3)
SW	R0,0048 (A3)
BEQ	A0,R0,7001AAE0
SH	V0,001A (A3)
LW	T9,0008 (A0)
ADDIU	A1,R0,0004
JALR	RA,T9
NOP
BEQ	R0,R0,7001AAE4
LW	RA,0014 (SP)
LW	A0,0000 (A3)
SW	V0,0048 (A3)
BEQL	A0,R0,7001AAE4
LW	RA,0014 (SP)
LW	T9,0008 (A0)
ADDIU	A1,R0,0009
JALR	RA,T9
NOP
BEQ	R0,R0,7001AAE4
LW	RA,0014 (SP)
BEQ	R0,R0,7001AAE0
SW	A2,0000 (A3)
LW	A0,0000 (A3)
BEQL	A0,R0,7001AAE4
LW	RA,0014 (SP)
LW	T9,0008 (A0)
JALR	RA,T9
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
OR	V0,R0,R0
JR	RA
NOP

7001AAF4
BNEL	A0,R0,7001AB28
MTC1	A0,F6
C.LE.S	F14,F12
ORI	T6,R0,FFFF
ADDIU	V0,R0,8000
BC1F	7001AB1C
NOP
SH	T6,0000 (A1)
JR	RA
ADDIU	V0,R0,7FFF
JR	RA
SH	R0,0000 (A1)
MTC1	A0,F6
SUB.S	F4,F12,F14
LUI	AT,4020
MTC1	AT,F5
CVT.S.W	F8,F6
LUI	AT,3F80
DIV.S	F10,F4,F8
MTC1	R0,F4
CVT.D.S	F6,F10
MTC1	R0,F10
MUL.D	F8,F6,F4
CVT.S.D	F2,F8
C.LT.S	F2,F10
MOV.S	F0,F2
BC1FL	7001AB74
TRUNC.W.S	F4,F0
MTC1	AT,F6
NOP
SUB.S	F0,F2,F6
TRUNC.W.S	F4,F0
LUI	AT,8003
MFC1	V1,F4
LWC1	F4,9964 (AT)
SLL	T8,V1,0x10
SRA	V0,T8,0x10
MTC1	V0,F8
NOP
CVT.S.W	F10,F8
SUB.S	F6,F0,F10
MUL.S	F8,F6,F4
TRUNC.W.S	F10,F8
MFC1	T7,F10
NOP
SH	T7,0000 (A1)
JR	RA
NOP

7001ABB4	1B7B4	display debug and error messages when necessary
	accepts: S0=p->errors, S2=error code, S3=???, S4=???, S5=???
ADDIU	SP,SP,FFE0
SW	RA,001C (SP)
BNE	S2,R0,7001ABCC	;branch if error requires processing
LW	S1,0000 (S0)	;S1=S0+0: FALSE if assertion fault
BEQ	R0,R0,7001AE44	;return V0=S4
OR	V0,S4,R0
//7001ABCC:	handle errors
BNE	S1,R0,7001ABF0	;branch if assertion fault didn't occur
LUI	A0,8003
LUI	A1,8003
LUI	A2,8003
ADDIU	A2,A2,995C	;A2=8002995C: b"env.c"
ADDIU	A1,A1,9954	;A1=80029954: b"source"
ADDIU	A0,A0,9928	;A0=80029928: b"\n--- ASSERTION FAULT - %s - %s, line %d\n\n"
JAL	7000CF44	;c-style expansion of string A0 to stderr
ADDIU	A3,R0,0175	;A3=0x175: line 373
//7001ABF0:
SW	S4,0010 (SP)
LW	T9,0004 (S1)
OR	A0,S1,R0
OR	A1,S5,R0
OR	A2,S2,R0
JALR	RA,T9
OR	A3,S6,R0
//7001AC0C:
LH	T6,0000 (S5)
LUI	AT,0800
SLL	S4,S2,0x1
ANDI	T7,T6,FFFF
OR	T8,T7,AT
SW	T8,0000 (V0)
LH	T9,0000 (S3)
LUI	AT,0808
ADDIU	S1,V0,0010
ADDIU	T7,T9,0440
SLL	T8,T7,0x10
ANDI	T9,S4,FFFF
OR	T6,T8,T9
SW	T6,0004 (V0)
LH	T7,0000 (S3)
OR	S2,S1,R0
ADDIU	T8,T7,0580
ANDI	T9,T8,FFFF
OR	T6,T9,AT
SW	T6,0008 (V0)
LH	V1,0000 (S3)
ADDIU	T7,V1,0800
ANDI	T8,T7,FFFF
ADDIU	T6,V1,06C0
SLL	T7,T6,0x10
OR	T9,T8,T7
SW	T9,000C (V0)
LW	T6,0038 (S0)
LUI	T9,8003
BEQL	T6,R0,7001AE20
LUI	T6,0308
LH	T8,0018 (S0)
SW	R0,0038 (S0)
LH	T6,001A (S0)
SLL	T7,T8,0x1
ADDU	T9,T9,T7
LH	T9,81E0 (T9)
LW	A0,0034 (S0)
ADDIU	A1,S0,0024
MULTU	T9,T6
LH	T9,001C (S0)
MTC1	T9,F4
NOP
CVT.S.W	F14,F4
MFLO	T8
SRA	T7,T8,0xF
SH	T7,0028 (S0)
LH	T6,0028 (S0)
MTC1	T6,F6
JAL	7001AAF4
CVT.S.W	F12,F6
LH	T8,0018 (S0)
LUI	T6,8003
SH	V0,0026 (S0)
SLL	T7,T8,0x1
SUBU	T9,R0,T7
ADDU	T6,T6,T9
LH	T6,82DE (T6)
LH	T8,001A (S0)
LW	A0,0034 (S0)
ADDIU	A1,S0,002A
MULTU	T6,T8
LH	T6,001E (S0)
MTC1	T6,F8
NOP
CVT.S.W	F14,F8
MFLO	T7
SRA	T9,T7,0xF
SH	T9,002E (S0)
LH	T8,002E (S0)
MTC1	T8,F10
JAL	7001AAF4
CVT.S.W	F12,F10
LH	T7,001C (S0)
SH	V0,002C (S0)
OR	V1,S1,R0
LUI	AT,0906
ANDI	T9,T7,FFFF
OR	T6,T9,AT
SW	T6,0000 (V1)
SW	R0,0004 (V1)
LH	T8,001E (S0)
ADDIU	S1,S1,0008
OR	A0,S1,R0
LUI	AT,0904
ANDI	T7,T8,FFFF
OR	T9,T7,AT
SW	T9,0000 (A0)
SW	R0,0004 (A0)
LH	T6,0028 (S0)
ADDIU	S1,S1,0008
LUI	AT,0902
ANDI	T8,T6,FFFF
OR	T7,T8,AT
OR	A1,S1,R0
SW	T7,0000 (A1)
LH	T6,0026 (S0)
LHU	T9,0024 (S0)
ADDIU	S1,S1,0008
SLL	T8,T6,0x10
OR	T6,T8,T9
SW	T6,0004 (A1)
LH	T7,002E (S0)
LUI	AT,0900
OR	A2,S1,R0
ANDI	T8,T7,FFFF
OR	T9,T8,AT
SW	T9,0000 (A2)
LH	T7,002C (S0)
LHU	T6,002A (S0)
ADDIU	S1,S1,0008
SLL	T8,T7,0x10
OR	T7,T8,T6
SW	T7,0004 (A2)
LH	T9,0020 (S0)
LUI	AT,0908
OR	V0,S1,R0
ANDI	T8,T9,FFFF
OR	T6,T8,AT
SW	T6,0000 (V0)
LH	T7,0022 (S0)
ADDIU	S1,S1,0008
OR	S2,S1,R0
ANDI	T9,T7,FFFF
SW	T9,0004 (V0)
LUI	T8,0309
SW	T8,0000 (S2)
LW	A0,0014 (S0)
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
ADDIU	S1,S1,0008
BEQ	R0,R0,7001AE34
SW	V0,0004 (S2)
LUI	T6,0308
SW	T6,0000 (S2)
LW	A0,0014 (S0)
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
ADDIU	S1,S1,0008
SW	V0,0004 (S2)
LH	T7,0000 (S5)
OR	V0,S1,R0
ADDU	T9,T7,S4
SH	T9,0000 (S5)
LW	RA,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7001AE54	1BA54	unconditional return
JR	RA
NOP

7001AE5C
ADDIU	SP,SP,FF28
LW	T6,00E8 (SP)
SW	RA,0054 (SP)
SW	S8,0050 (SP)
SW	S7,004C (SP)
SW	S6,0048 (SP)
SW	S5,0044 (SP)
SW	S4,0040 (SP)
SW	S3,003C (SP)
SW	S2,0038 (SP)
SW	S1,0034 (SP)
SW	S0,0030 (SP)
SDC1	F22,0028 (SP)
SDC1	F20,0020 (SP)
SW	A1,00DC (SP)
SW	A2,00E0 (SP)
SW	A3,00E4 (SP)
SW	A0,00D0 (SP)
SW	A3,00C4 (SP)
SH	R0,00BE (SP)
SH	R0,00CE (SP)
SW	T6,00D4 (SP)
LW	T8,003C (A0)
OR	S7,A0,R0
LUI	AT,3FC0
BEQL	T8,R0,7001B44C
LW	T6,0048 (S7)
//7001AEC8:
MTC1	AT,F23
LUI	AT,40F0
MTC1	AT,F21
MTC1	R0,F22
MTC1	R0,F20
ADDIU	S1,R0,0001
LW	T9,003C (S7)
LW	V0,00C4 (SP)
LW	T8,00E0 (SP)
LW	T6,0004 (T9)
LUI	A0,8003
ADDIU	A0,A0,9890	;A0=80029890: b"\n--- ASSERTION FAULT - %s - %s, line %d\n\n"
SUBU	S8,T6,V0
SLT	AT,T8,S8
BNE	AT,R0,7001B448
SW	T6,00C4 (SP)
//7001AF08:
BGEZ	S8,7001AF24
LUI	A1,8003
LUI	A2,8003
ADDIU	A2,A2,98CC	;A2=800298CC: b"env.c"
ADDIU	A1,A1,98BC	;A1=800298BC: b"samples >= 0"
JAL	7000CF44	;c-style expansion of string A0 to stderr
ADDIU	A3,R0,0068	;A3=0x68: line 104
//7001AF24:
SLTI	AT,S8,00A1
BNE	AT,R0,7001AF4C
LUI	A0,8003
LUI	A1,8003
LUI	A2,8003
ADDIU	A2,A2,9920	;A2=80029920: b"env.c"
ADDIU	A1,A1,9900	;A1=80029900: b"samples <= AL_MAX_RSP_SAMPLES"
ADDIU	A0,A0,98D4	;A0=800298D4: b"\n--- ASSERTION FAULT - %s - %s, line %d\n\n"
JAL	7000CF44	;c-style expansion of string A0 to stderr
ADDIU	A3,R0,0069	;A3=0x69: line 105
//7001AF4C:
LW	V1,003C (S7)
LHU	T9,0008 (V1)
SLTIU	AT,T9,0011
BEQ	AT,R0,7001B3B8
SLL	T9,T9,0x2
LUI	AT,8003
ADDU	AT,AT,T9
LW	T9,9968 (AT)	;T9=80029968+offset: p->handler
JR	T9
NOP
//7001AF74:	D
LH	T6,000A (V1)
OR	S0,V1,R0
BEQL	T6,R0,7001AF9C
LW	T9,0008 (S7)
LW	T9,0008 (S7)
OR	A0,S7,R0
ADDIU	A1,R0,0008
JALR	RA,T9
OR	A2,R0,R0
LW	T9,0008 (S7)
OR	A0,S7,R0
ADDIU	A1,R0,0005
JALR	RA,T9
LW	A2,0018 (S0)
LW	T9,0008 (S7)
OR	A0,S7,R0
ADDIU	A1,R0,0009
JALR	RA,T9
OR	A2,R0,R0
SW	S1,0038 (S7)
SW	R0,0030 (S7)
LW	T7,0014 (S0)
SW	T7,0034 (S7)
LH	V1,0010 (S0)
MULTU	V1,V1
MFLO	A0
SRA	T8,A0,0xF
SH	T8,001A (S7)
LBU	T6,0012 (S0)
LUI	T8,8003
SH	T6,0018 (S7)
LBU	T9,0013 (S0)
SLL	T7,T9,0x1
ADDU	T8,T8,T7
LH	T8,81E0 (T8)
SH	T8,0020 (S7)
LBU	T6,0013 (S0)
LUI	T8,8003
SLL	T9,T6,0x1
SUBU	T7,R0,T9
ADDU	T8,T8,T7
LH	T8,82DE (T8)
SH	T8,0022 (S7)
LW	T6,0014 (S0)
BEQL	T6,R0,7001B03C
LH	V0,0018 (S7)
SH	S1,001C (S7)
BEQ	R0,R0,7001B080
SH	S1,001E (S7)
LH	V0,0018 (S7)
LUI	T7,8003
LH	V1,001A (S7)
SLL	T9,V0,0x1
ADDU	T7,T7,T9
LH	T7,81E0 (T7)
SUBU	T9,R0,T9
MULTU	T7,V1
LUI	T7,8003
ADDU	T7,T7,T9
MFLO	T8
SRA	T6,T8,0xF
SH	T6,001C (S7)
LH	T7,82DE (T7)
MULTU	T7,V1
MFLO	T8
SRA	T6,T8,0xF
SH	T6,001E (S7)
LW	T9,0000 (S7)
BEQL	T9,R0,7001B404
LH	T8,00BE (SP)
LWC1	F4,000C (S0)
ADDIU	A1,R0,0007
SWC1	F4,00A4 (SP)
LW	A0,0000 (S7)
LW	A2,00A4 (SP)
LW	T9,0008 (A0)
JALR	RA,T9
NOP
BEQ	R0,R0,7001B404
LH	T8,00BE (SP)
OR	S0,S7,R0
ADDIU	S5,SP,00CE
ADDIU	S3,SP,00BE
OR	S2,S8,R0
LW	S6,00E4 (SP)
JAL	7001ABB4
LW	S4,00D4 (SP)
SW	V0,00D4 (SP)
LW	T7,0030 (S7)
LW	A0,0034 (S7)
ADDIU	S1,R0,0001
ADDU	A1,T7,S8
SLT	AT,A1,A0
BNE	AT,R0,7001B150
SW	A1,0030 (S7)
LH	V0,0018 (S7)
LUI	T9,8003
LH	V1,001A (S7)
SLL	T6,V0,0x1
ADDU	T9,T9,T6
LH	T9,81E0 (T9)
SUBU	T6,R0,T6
MULTU	T9,V1
LUI	T9,8003
ADDU	T9,T9,T6
MFLO	T7
SRA	T8,T7,0xF
SH	T8,0028 (S7)
LH	T9,82DE (T9)
LH	T6,0028 (S7)
SW	A0,0030 (S7)
MULTU	T9,V1
SH	T6,001C (S7)
MFLO	T7
SRA	T8,T7,0xF
SH	T8,002E (S7)
LH	T9,002E (S7)
BEQ	R0,R0,7001B24C
SH	T9,001E (S7)
LH	T7,001C (S7)
LH	V1,0026 (S7)
LHU	A0,0024 (S7)
MTC1	T7,F6
SLL	T8,V1,0x10
MTC1	T8,F8
MTC1	A0,F4
CVT.S.W	F12,F6
OR	V0,A1,R0
LUI	AT,4F80
CVT.S.W	F10,F8
BGEZ	A0,7001B190
CVT.S.W	F6,F4
MTC1	AT,F8
NOP
ADD.S	F6,F6,F8
ADD.S	F4,F10,F6
LH	T7,001E (S7)
LH	V1,002C (S7)
LHU	A0,002A (S7)
CVT.D.S	F8,F4
MTC1	V0,F4
DIV.D	F10,F8,F20
SLL	T8,V1,0x10
OR	V0,A1,R0
LUI	AT,4F80
CVT.S.W	F8,F4
CVT.S.D	F6,F10
MUL.S	F10,F6,F8
CVT.D.S	F8,F12
CVT.D.S	F4,F10
MUL.D	F6,F4,F22
ADD.D	F10,F8,F6
MTC1	T7,F8
MTC1	T8,F6
CVT.S.D	F12,F10
CVT.S.W	F2,F8
TRUNC.W.S	F4,F12
CVT.S.W	F10,F6
MFC1	T9,F4
MTC1	A0,F4
SH	T9,001C (S7)
BGEZ	A0,7001B20C
CVT.S.W	F8,F4
MTC1	AT,F6
NOP
ADD.S	F8,F8,F6
ADD.S	F4,F10,F8
CVT.D.S	F6,F4
MTC1	V0,F4
DIV.D	F10,F6,F20
CVT.S.W	F6,F4
CVT.S.D	F8,F10
MUL.S	F10,F8,F6
CVT.D.S	F6,F2
CVT.D.S	F4,F10
MUL.D	F8,F4,F22
ADD.D	F10,F6,F8
CVT.S.D	F2,F10
TRUNC.W.S	F4,F2
MFC1	T9,F4
NOP
SH	T9,001E (S7)
LH	T7,001C (S7)
BNEL	T7,R0,7001B260
LH	T8,001E (S7)
SH	S1,001C (S7)
LH	T8,001E (S7)
BNEL	T8,R0,7001B270
LW	V1,003C (S7)
SH	S1,001E (S7)
LW	V1,003C (S7)
ADDIU	AT,R0,000C
LH	A0,0008 (V1)
BNEL	A0,AT,7001B290
ADDIU	AT,R0,000B
LW	T6,000C (V1)
SH	T6,0018 (S7)
LH	A0,0008 (V1)
ADDIU	AT,R0,000B
BNEL	A0,AT,7001B2C0
ADDIU	AT,R0,0010
SW	R0,0030 (S7)
LW	V0,000C (V1)
MULTU	V0,V0
MFLO	V0
SRA	T9,V0,0xF
SH	T9,001A (S7)
LW	T7,0010 (V1)
SW	T7,0034 (S7)
LH	A0,0008 (V1)
ADDIU	AT,R0,0010
BNE	A0,AT,7001B2FC
NOP
LW	T8,000C (V1)
LUI	T9,8003
SLL	T6,T8,0x1
ADDU	T9,T9,T6
LH	T9,81E0 (T9)
SH	T9,0020 (S7)
LW	T7,000C (V1)
LUI	T9,8003
SLL	T8,T7,0x1
SUBU	T6,R0,T8
ADDU	T9,T9,T6
LH	T9,82DE (T9)
SH	T9,0022 (S7)
BEQ	R0,R0,7001B400
SW	S1,0038 (S7)
LH	T7,000A (V1)
OR	S0,V1,R0
BEQL	T7,R0,7001B32C
LW	T9,0008 (S7)
LW	T9,0008 (S7)
OR	A0,S7,R0
ADDIU	A1,R0,0008
JALR	RA,T9
OR	A2,R0,R0
LW	T9,0008 (S7)
OR	A0,S7,R0
ADDIU	A1,R0,0005
JALR	RA,T9
LW	A2,000C (S0)
LW	T9,0008 (S7)
OR	A0,S7,R0
ADDIU	A1,R0,0009
JALR	RA,T9
OR	A2,R0,R0
BEQ	R0,R0,7001B404
LH	T8,00BE (SP)
OR	S0,S7,R0
ADDIU	S5,SP,00CE
ADDIU	S3,SP,00BE
OR	S2,S8,R0
LW	S6,00E4 (SP)
JAL	7001ABB4
LW	S4,00D4 (SP)
SW	V0,00D4 (SP)
LW	T9,0008 (S7)
ADDIU	S1,R0,0001
OR	A0,S7,R0
ADDIU	A1,R0,0004
JALR	RA,T9
OR	A2,R0,R0
BEQ	R0,R0,7001B404
LH	T8,00BE (SP)
LW	T8,000C (V1)
LUI	A0,8002
LW	A0,76E0 (A0)
SW	R0,00D8 (T8)
JAL	7000F020
LW	A1,000C (V1)
BEQ	R0,R0,7001B404
LH	T8,00BE (SP)
OR	S0,S7,R0
ADDIU	S5,SP,00CE
ADDIU	S3,SP,00BE
OR	S2,S8,R0
LW	S6,00E4 (SP)
JAL	7001ABB4
LW	S4,00D4 (SP)
SW	V0,00D4 (SP)
LW	T6,0030 (S7)
LW	T9,0008 (S7)
LW	V1,003C (S7)
ADDU	T7,T6,S8
SW	T7,0030 (S7)
ADDIU	S1,R0,0001
OR	A0,S7,R0
LW	A2,000C (V1)
JALR	RA,T9
LH	A1,0008 (V1)
LH	T8,00BE (SP)
LW	T9,00E0 (SP)
SLL	T6,S8,0x1
ADDU	T7,T8,T6
SUBU	T8,T9,S8
SH	T7,00BE (SP)
SW	T8,00E0 (SP)
LW	A0,003C (S7)
LW	T6,0000 (A0)
BNE	T6,R0,7001B430
SW	T6,003C (S7)
SW	R0,0040 (S7)
JAL	7000F0B8
NOP
LW	T9,00D0 (SP)
LW	T8,003C (T9)
BNEL	T8,R0,7001AEE4
LW	T9,003C (S7)
LW	T6,0048 (S7)
ADDIU	S1,R0,0001
OR	S0,S7,R0
BNE	S1,T6,7001B484
ADDIU	S5,SP,00CE
ADDIU	S3,SP,00BE
LW	S2,00E0 (SP)
LW	S6,00E4 (SP)
JAL	7001ABB4
LW	S4,00D4 (SP)
SW	V0,00D4 (SP)
LW	T7,0030 (S7)
LW	T9,00E0 (SP)
ADDU	T8,T7,T9
SW	T8,0030 (S7)
LW	A0,0034 (S7)
LW	T6,0030 (S7)
SLT	AT,A0,T6
BEQL	AT,R0,7001B4A0
LW	RA,0054 (SP)
SW	A0,0030 (S7)
LW	RA,0054 (SP)
LW	V0,00D4 (SP)
LDC1	F20,0020 (SP)
LDC1	F22,0028 (SP)
LW	S0,0030 (SP)
LW	S1,0034 (SP)
LW	S2,0038 (SP)
LW	S3,003C (SP)
LW	S4,0040 (SP)
LW	S5,0044 (SP)
LW	S6,0048 (SP)
LW	S7,004C (SP)
LW	S8,0050 (SP)
JR	RA
ADDIU	SP,SP,00D8

7001B4E0
ADDIU	AT,R0,0002
BNE	A1,AT,7001B508
LW	V0,001C (A0)
LW	T6,0014 (A0)
SLL	T7,T6,0x2
ADDU	T8,V0,T7
SW	A2,0000 (T8)
LW	T9,0014 (A0)
ADDIU	T0,T9,0001
SW	T0,0014 (A0)
JR	RA
OR	V0,R0,R0

7001B510
ADDIU	SP,SP,FFC0
LW	T0,0050 (SP)
SW	RA,003C (SP)
SW	S6,0038 (SP)
SW	S5,0034 (SP)
SW	S4,0030 (SP)
SW	S3,002C (SP)
SW	S2,0028 (SP)
SW	S1,0024 (SP)
SW	S0,0020 (SP)
LW	V1,001C (A0)
LUI	T6,0200
SLL	V0,A2,0x1
LUI	T7,0200
ORI	T6,T6,06C0
ORI	T7,T7,0800
SW	T6,0000 (T0)
SW	V0,0004 (T0)
SW	T7,0008 (T0)
SW	V0,000C (T0)
LW	T8,0014 (A0)
OR	S4,A2,R0
OR	S5,A1,R0
OR	S6,A3,R0
OR	S3,A0,R0
OR	S0,R0,R0
BLEZ	T8,7001B5BC
ADDIU	S2,T0,0010
OR	S1,V1,R0
LW	A0,0000 (S1)
SW	S2,0010 (SP)
OR	A1,S5,R0
LW	T9,0004 (A0)
OR	A2,S4,R0
OR	A3,S6,R0
JALR	RA,T9
NOP
LW	T1,0014 (S3)
ADDIU	S0,S0,0001
ADDIU	S1,S1,0004
SLT	AT,S0,T1
BNE	AT,R0,7001B584
OR	S2,V0,R0
LW	RA,003C (SP)
OR	V0,S2,R0
LW	S2,0028 (SP)
LW	S0,0020 (SP)
LW	S1,0024 (SP)
LW	S3,002C (SP)
LW	S4,0030 (SP)
LW	S5,0034 (SP)
LW	S6,0038 (SP)
JR	RA
ADDIU	SP,SP,0040

7001B5F0
ADDIU	AT,R0,0001
BEQ	A1,AT,7001B610
OR	V0,R0,R0
ADDIU	AT,R0,0006
BEQL	A1,AT,7001B61C
SW	A2,0014 (A0)
JR	RA
OR	V0,R0,R0
JR	RA
SW	A2,0000 (A0)
SW	A2,0014 (A0)
JR	RA
OR	V0,R0,R0

7001B624
ADDIU	SP,SP,FFE0
SW	RA,001C (SP)
SW	A0,0020 (SP)
LW	A0,0000 (A0)
LW	T7,0030 (SP)
SW	A2,0028 (SP)
SW	T7,0010 (SP)
LW	T9,0004 (A0)
JALR	RA,T9
NOP
LW	A2,0028 (SP)
LUI	V1,0800
LUI	T2,0440
SLL	T8,A2,0x1
SLL	T3,A2,0x2
ANDI	T0,T8,FFFF
ORI	T2,T2,0580
LUI	T1,0D00
ANDI	T4,T3,FFFF
LUI	T5,0600
SW	T0,0004 (V0)
SW	V1,0000 (V0)
SW	T1,0008 (V0)
SW	T2,000C (V0)
SW	T4,0014 (V0)
SW	V1,0010 (V0)
SW	T5,0018 (V0)
LW	T6,0020 (SP)
ADDIU	V0,V0,0020
LW	T7,0014 (T6)
SW	T7,FFFC (V0)
LW	RA,001C (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7001B6B0
	accepts: A0=p->thread, A1=, A2=
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)
SW	A1,002C (SP)
SW	A2,0030 (SP)
SW	S1,0018 (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0014 (SP)
LW	T6,0028 (SP)	;T6=A0 f/caller: p->thread
OR	S0,V0,R0
LW	T7,0008 (T6)
LW	T8,0010 (T6)
SLT	AT,T7,T8
BNE	AT,R0,7001B748
NOP
//7001B6EC:
LW	T9,0030 (SP)
ADDIU	AT,R0,0001
BNE	T9,AT,7001B720	;if A2 f/caller isn't 1, fail!
NOP
//7001B6FC:
LUI	T1,8002
LW	T1,7730 (T1)
ADDIU	T0,R0,0008
SH	T0,0010 (T1)	;cur.thread.index = 8
LW	A0,0028 (SP)
JAL	700107AC	;update current thread's data with current registers, then insert and execute
ADDIU	A0,A0,0004	;A0+=4: new pointer into thread queue
BEQ	R0,R0,7001B730
NOP
//7001B720:	restore interrupts and return -1 (error)
JAL	70018610	;A0->COP0 status
OR	A0,S0,R0
BEQ	R0,R0,7001B7EC
ADDIU	V0,R0,FFFF
//7001B730:
LW	T2,0028 (SP)
LW	T3,0008 (T2)
LW	T4,0010 (T2)
SLT	AT,T3,T4
BEQ	AT,R0,7001B6EC
NOP
//7001B748:
LW	T5,0028 (SP)
LW	T6,000C (T5)
LW	T7,0010 (T5)
ADDU	T8,T6,T7
ADDIU	T9,T8,FFFF
DIV	T9,T7
MFHI	T0
SW	T0,000C (T5)
LW	T2,0028 (SP)
LW	T1,002C (SP)
BNE	T7,R0,7001B77C
NOP
BREAK	00001C00	;Break: division by zero
//7001B77C:
ADDIU	AT,R0,FFFF
BNE	T7,AT,7001B794
LUI	AT,8000
BNE	T9,AT,7001B794
NOP
BREAK	00001800
//7001B794:
LW	T4,000C (T2)
LW	T3,0014 (T2)
SLL	T6,T4,0x2
ADDU	T8,T3,T6
SW	T1,0000 (T8)
LW	T9,0028 (SP)
LW	T7,0008 (T9)
ADDIU	T0,T7,0001
SW	T0,0008 (T9)
LW	T5,0028 (SP)	;T5=A0 f/caller: p->thread
LW	T2,0000 (T5)
LW	T4,0000 (T2)
BEQ	T4,R0,7001B7E0
NOP
//7001B7CC:	reload thread
JAL	700108F4	;V0= popped thread A0
OR	A0,T5,R0
OR	S1,V0,R0
JAL	7000D580	;insert thread and execute if no thread currently running
OR	A0,S1,R0
//7001B7E0:	restore interrupts and return 0
JAL	70018610	;A0->COP0 status
OR	A0,S0,R0	;restore interrupts
OR	V0,R0,R0
//7001B7EC:	return
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0028

7001B800
LUI	T6,8002
LW	T6,7790 (T6)
BNE	T6,R0,7001B818	;if 80027790 NULL, return 0
NOP
JR	RA
OR	V0,R0,R0
//7001B818:
LUI	V0,8002
LW	V0,7798 (V0)	;V0=80027798: 
JR	RA
NOP

7001B830
SWC1	F12,0000 (SP)
LW	V0,0000 (SP)
LWC1	F6,0000 (SP)
LWC1	F10,0000 (SP)
SRA	T6,V0,0x16
ANDI	T7,T6,01FF
SLTI	AT,T7,0136
BEQL	AT,R0,7001B974
C.EQ.S	F10,F10
MTC1	R0,F4
LUI	AT,3FE0
MTC1	AT,F19
C.LT.S	F4,F6
LWC1	F0,0000 (SP)
LUI	AT,8003
BC1FL	7001B880
NEG.S	F0,F0
BEQ	R0,R0,7001B880
MOV.S	F0,F6
NEG.S	F0,F0
LDC1	F8,99D8 (AT)
CVT.D.S	F12,F0
MTC1	R0,F18
MUL.D	F10,F12,F8
MTC1	R0,F5
MTC1	R0,F4
ADD.D	F14,F10,F18
C.LE.D	F4,F14
NOP
BC1FL	7001B8C4
SUB.D	F10,F14,F18
ADD.D	F6,F14,F18
TRUNC.W.D	F8,F6
MFC1	V0,F8
BEQ	R0,R0,7001B8D4
MTC1	V0,F6
SUB.D	F10,F14,F18
TRUNC.W.D	F4,F10
MFC1	V0,F4
NOP
MTC1	V0,F6
LUI	AT,8003
LDC1	F10,99E0 (AT)
CVT.D.W	F8,F6
LUI	AT,8003
LDC1	F6,99E8 (AT)
LUI	V1,8003
ADDIU	V1,V1,99B0
SUB.D	F0,F8,F18
ANDI	T0,V0,0001
MUL.D	F4,F0,F10
LDC1	F10,0020 (V1)
MUL.D	F8,F0,F6
LDC1	F6,0018 (V1)
SUB.D	F2,F12,F4
SUB.D	F2,F2,F8
MUL.D	F14,F2,F2
NOP
MUL.D	F4,F10,F14
ADD.D	F8,F4,F6
LDC1	F4,0010 (V1)
MUL.D	F10,F8,F14
ADD.D	F6,F10,F4
LDC1	F10,0008 (V1)
MUL.D	F8,F6,F14
BNE	T0,R0,7001B954
ADD.D	F16,F10,F8
MUL.D	F4,F2,F14
NOP
MUL.D	F6,F4,F16
ADD.D	F10,F6,F2
JR	RA
CVT.S.D	F0,F10
MUL.D	F8,F2,F14
NOP
MUL.D	F4,F8,F16
ADD.D	F6,F4,F2
CVT.S.D	F0,F6
JR	RA
NEG.S	F0,F0
C.EQ.S	F10,F10
LUI	AT,8003
BC1T	7001B98C
NOP
LUI	AT,8003
JR	RA
LWC1	F0,9D40 (AT)
LWC1	F0,99F0 (AT)
JR	RA
NOP

7001B9A0
SWC1	F12,0000 (SP)
LW	V0,0000 (SP)
LWC1	F4,0000 (SP)
SRA	V1,V0,0x16
ANDI	T6,V1,01FF
SLTI	AT,T6,00FF
BEQ	AT,R0,7001BA20
OR	V1,T6,R0
SLTI	AT,T6,00E6
BNE	AT,R0,7001BA18
CVT.D.S	F2,F4
MUL.D	F12,F2,F2
LUI	V1,8003
ADDIU	V1,V1,9A00
LDC1	F6,0020 (V1)
LDC1	F10,0018 (V1)
LDC1	F4,0010 (V1)
MUL.D	F8,F6,F12
ADD.D	F16,F8,F10
LDC1	F10,0008 (V1)
MUL.D	F18,F16,F12
ADD.D	F6,F18,F4
MUL.D	F8,F6,F12
ADD.D	F14,F10,F8
MUL.D	F16,F2,F12
NOP
MUL.D	F18,F16,F14
ADD.D	F4,F18,F2
JR	RA
CVT.S.D	F0,F4
JR	RA
LWC1	F0,0000 (SP)
SLTI	AT,V1,0136
BEQ	AT,R0,7001BB38
LWC1	F4,0000 (SP)
LWC1	F6,0000 (SP)
LUI	AT,8003
LDC1	F10,9A28 (AT)
CVT.D.S	F2,F6
MTC1	R0,F9
MUL.D	F0,F2,F10
MTC1	R0,F8
LUI	AT,3FE0
C.LE.D	F8,F0
NOP
BC1FL	7001BA84
MTC1	AT,F7
LUI	AT,3FE0
MTC1	AT,F17
MTC1	R0,F16
NOP
ADD.D	F18,F0,F16
TRUNC.W.D	F4,F18
MFC1	V0,F4
BEQ	R0,R0,7001BAA0
MTC1	V0,F16
MTC1	AT,F7
MTC1	R0,F6
NOP
SUB.D	F10,F0,F6
TRUNC.W.D	F8,F10
MFC1	V0,F8
NOP
MTC1	V0,F16
LUI	AT,8003
LDC1	F18,9A30 (AT)
CVT.D.W	F0,F16
LUI	AT,8003
LDC1	F6,9A38 (AT)
LUI	V1,8003
ADDIU	V1,V1,9A00
MUL.D	F4,F0,F18
LDC1	F8,0020 (V1)
LDC1	F18,0018 (V1)
ANDI	T9,V0,0001
MUL.D	F10,F0,F6
SUB.D	F2,F2,F4
SUB.D	F2,F2,F10
LDC1	F10,0010 (V1)
MUL.D	F12,F2,F2
NOP
MUL.D	F16,F8,F12
ADD.D	F4,F16,F18
LDC1	F18,0008 (V1)
MUL.D	F6,F4,F12
ADD.D	F8,F6,F10
MUL.D	F16,F8,F12
BNE	T9,R0,7001BB1C
ADD.D	F14,F18,F16
MUL.D	F4,F2,F12
NOP
MUL.D	F6,F4,F14
ADD.D	F10,F6,F2
JR	RA
CVT.S.D	F0,F10
MUL.D	F8,F2,F12
NOP
MUL.D	F18,F8,F14
ADD.D	F16,F18,F2
CVT.S.D	F0,F16
JR	RA
NEG.S	F0,F0
C.EQ.S	F4,F4
LUI	AT,8003
BC1T	7001BB54
NOP
LUI	AT,8003
JR	RA
LWC1	F0,9D40 (AT)
LWC1	F0,9A40 (AT)
JR	RA
NOP

7001BB60	1C760	???; best guess is it reinitializes or removes a dead thread
	accepts: A0=p->thread
ADDIU	SP,SP,FFC8
SW	RA,0024 (SP)
SW	A0,0038 (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LW	T6,0038 (SP)	;T6=A0: p->thread
OR	S0,V0,R0	;V0=S0: interrupt flag
BNE	T6,R0,7001BB9C	;branch if not NULL
NOP
//7001BB8C:	if NULL, use current value
LUI	T7,8002
LW	T7,7730 (T7)	;T7=80027730: p->cur.thread
BEQ	R0,R0,7001BBBC
SW	T7,0038 (SP)	;SP+38= value
//7001BB9C:	load value from address
LW	T8,0038 (SP)
ADDIU	AT,R0,0001
LHU	T9,0010 (T8)	;T9=A0+10: index
BEQ	T9,AT,7001BBBC	;skip if 1
NOP
//7001BBB0:	if A1 in A0, remove it
LW	A0,0008 (T8)	;A0=A0+8: p->thread list
JAL	70010A90	;remove thread pointer A1 from thread A0
OR	A1,T8,R0	;A1=A0
//7001BBBC:
LUI	T0,8002
LW	T0,772C (T0)	;T0=8002772C: p->table
LW	T1,0038 (SP)	;T1= A0 or previous value
BNE	T0,T1,7001BBE0	;branch if different
NOP
//7001BBD0:	
LW	T2,000C (T0)
LUI	AT,8002
BEQ	R0,R0,7001BC1C
SW	T2,772C (AT)
//7001BBE0:
LUI	S1,8002
LW	S1,772C (S1)
LW	S2,000C (S1)
BEQ	S2,R0,7001BC1C
NOP
//7001BBF4:
LW	T3,0038 (SP)
BNE	S2,T3,7001BC0C
NOP
LW	T4,000C (T3)
BEQ	R0,R0,7001BC1C
SW	T4,000C (S1)
//7001BC0C:
OR	S1,S2,R0
LW	S2,000C (S1)
BNE	S2,R0,7001BBF4
NOP
//7001BC1C:
LUI	T6,8002
LW	T6,7730 (T6)
LW	T5,0038 (SP)
BNE	T5,T6,7001BC38
NOP
JAL	70010904	;execute thread
NOP
//7001BC38:	enable interrupts and return
JAL	70018610	;A0->COP0 status
OR	A0,S0,R0	;A0=S0: interrupt flag
LW	RA,0024 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
JR	RA
ADDIU	SP,SP,0038

7001BC60
LW	T6,0060 (A0)
SLL	V0,A2,0x4
ADDU	T7,T6,V0
SW	A1,0000 (T7)
LW	T9,0060 (A0)
LBU	T8,0001 (A1)
ADDU	T0,T9,V0
SB	T8,0007 (T0)
LW	T2,0060 (A0)
LBU	T1,0000 (A1)
ADDU	T3,T2,V0
SB	T1,0009 (T3)
LW	T5,0060 (A0)
LBU	T4,0002 (A1)
ADDU	T6,T5,V0
SB	T4,0008 (T6)
LW	T9,0060 (A0)
LH	T7,000C (A1)
ADDU	T8,T9,V0
JR	RA
SH	T7,0004 (T8)

7001BCB4
LW	T6,0060 (A0)
SLL	V0,A1,0x4
ADDIU	T0,R0,0040
ADDU	T7,T6,V0
SB	R0,0006 (T7)
LW	T8,0060 (A0)
ADDIU	T3,R0,007F
ADDIU	T6,R0,0005
ADDU	T9,T8,V0
SB	R0,000A (T9)
LW	T1,0060 (A0)
LUI	AT,3F80
MTC1	AT,F4
ADDU	T2,T1,V0
SB	T0,0007 (T2)
LW	T4,0060 (A0)
ADDIU	T0,R0,00C8
ADDU	T5,T4,V0
SB	T3,0009 (T5)
LW	T7,0060 (A0)
ADDU	T8,T7,V0
SB	T6,0008 (T8)
LW	T9,0060 (A0)
ADDU	T1,T9,V0
SB	R0,000B (T1)
LW	T2,0060 (A0)
ADDU	T4,T2,V0
SH	T0,0004 (T4)
LW	T3,0060 (A0)
ADDU	T5,T3,V0
JR	RA
SWC1	F4,000C (T5)

7001BD34
ADDIU	SP,SP,FFD8
SW	S2,0020 (SP)
OR	S2,A0,R0
SW	RA,0024 (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
SW	A1,002C (SP)
OR	V0,A1,R0
LW	S1,000C (V0)
ADDIU	V0,V0,0004
BEQL	S1,R0,7001BD58
LW	S1,000C (V0)
LBU	T6,0034 (S2)
OR	S0,R0,R0
BLEZ	T6,7001BDA0
OR	A0,S2,R0
JAL	7001BCB4
OR	A1,S0,R0
OR	A0,S2,R0
OR	A1,S1,R0
JAL	7001BC60
OR	A2,S0,R0
LBU	T7,0034 (S2)
ADDIU	S0,S0,0001
SLT	AT,S0,T7
BNEL	AT,R0,7001BD74
OR	A0,S2,R0
LW	T8,002C (SP)
OR	A0,S2,R0
LW	T9,0008 (T8)
BEQL	T9,R0,7001BDD4
LW	RA,0024 (SP)
JAL	7001BCB4
OR	A1,S0,R0
LW	T0,002C (SP)
OR	A0,S2,R0
ADDIU	A2,R0,0009
JAL	7001BC60
LW	A1,0008 (T0)
LW	RA,0024 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
JR	RA
ADDIU	SP,SP,0028

7001BDE8
JR	RA
NOP

7001BDF0
LW	T6,0024 (A0)
ADDIU	V0,R0,03E8
SUBU	V1,T6,A1
BLTZ	V1,7001BE0C
NOP
JR	RA
OR	V0,V1,R0
JR	RA
NOP

7001BE14
LBU	T6,0036 (A0)
LBU	T7,0033 (A0)
LBU	T9,0030 (A0)
LBU	T2,0031 (A0)
MULTU	T6,T7
LW	T1,0060 (A1)
LW	T6,0020 (A0)
SLL	T3,T2,0x4
ADDU	T4,T1,T3
LBU	T5,0009 (T4)
LBU	T7,000D (T6)
MFLO	T8
NOP
NOP
MULTU	T8,T9
LH	T9,0032 (A1)
MFLO	V1
SRA	T0,V1,0x6
OR	V1,T0,R0
MULTU	T5,T7
MFLO	T8
NOP
NOP
MULTU	T8,T9
MFLO	A2
SRA	T0,A2,0xE
NOP
MULTU	V1,T0
MFLO	V1
SRL	T2,V1,0xF
SLL	V0,T2,0x10
SRA	T1,V0,0x10
JR	RA
OR	V0,T1,R0

7001BE9C
ADDIU	SP,SP,FFA0
SW	RA,0034 (SP)
SW	S6,0030 (SP)
SW	S5,002C (SP)
SW	S4,0028 (SP)
SW	S3,0024 (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
SW	A2,0068 (SP)
LW	S6,0010 (A1)
OR	S4,A0,R0
OR	S5,A1,R0
LBU	T6,0034 (S6)
BNEL	T6,R0,7001BF40
ADDIU	T2,R0,0003
LW	S0,0050 (A0)
ADDIU	S3,R0,0006
BEQL	S0,R0,7001BF40
ADDIU	T2,R0,0003
LH	T7,000C (S0)
LW	S1,0000 (S0)
BNE	S3,T7,7001BF34
NOP
LW	T8,0010 (S0)
BNE	S5,T8,7001BF34
NOP
BEQ	S1,R0,7001BF20
ADDIU	S2,S4,0048
LW	T9,0008 (S1)
LW	T0,0008 (S0)
ADDU	T1,T9,T0
SW	T1,0008 (S1)
JAL	7000EA90
OR	A0,S0,R0
OR	A0,S0,R0
JAL	7000EAC0
OR	A1,S2,R0
BNE	S1,R0,7001BEEC
OR	S0,S1,R0
ADDIU	T2,R0,0003
SB	R0,0033 (S6)
SB	T2,0034 (S6)
SB	R0,0030 (S6)
LW	T4,0068 (SP)
LW	T3,001C (S4)
OR	A1,S5,R0
OR	A2,R0,R0
ADDU	T5,T3,T4
SW	T5,0024 (S6)
LW	A0,0014 (S4)
JAL	70020B40
ADDIU	S2,S4,0048
LW	A0,0014 (S4)
OR	A1,S5,R0
OR	A2,R0,R0
JAL	700133A0
LW	A3,0068 (SP)
ADDIU	T6,R0,0005
SH	T6,0050 (SP)
SW	S5,0054 (SP)
OR	A0,S2,R0
ADDIU	A1,SP,0050
JAL	70012EFC
LW	A2,0068 (SP)
LW	RA,0034 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
LW	S3,0024 (SP)
LW	S4,0028 (SP)
LW	S5,002C (SP)
LW	S6,0030 (SP)
JR	RA
ADDIU	SP,SP,0060

7001BFC8
ADDIU	SP,SP,FFD0
SW	RA,0014 (SP)
LW	A3,0050 (A0)
OR	T2,A0,R0
OR	T0,R0,R0
BEQ	A3,R0,7001C05C
ADDIU	T1,R0,0001
ADDIU	A0,R0,0005
LH	T6,000C (A3)
LW	V1,0008 (A3)
LW	V0,0000 (A3)
BNE	A0,T6,7001C054
ADDU	T0,T0,V1
LW	T7,0010 (A3)
BNE	A1,T7,7001C054
SLT	AT,A2,T0
BEQ	AT,R0,7001C04C
OR	A0,A3,R0
BEQL	V0,R0,7001C028
SW	A3,002C (SP)
LW	T8,0008 (V0)
ADDU	T9,T8,V1
SW	T9,0008 (V0)
SW	A3,002C (SP)
SB	T1,001F (SP)
JAL	7000EA90
SW	T2,0030 (SP)
LW	T2,0030 (SP)
LW	A0,002C (SP)
JAL	7000EAC0
ADDIU	A1,T2,0048
BEQ	R0,R0,7001C05C
LBU	T1,001F (SP)
BEQ	R0,R0,7001C05C
OR	T1,R0,R0
BNE	V0,R0,7001BFE8
OR	A3,V0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0030
OR	V0,T1,R0
JR	RA
NOP

7001C070
LW	V1,0064 (A0)
OR	V0,R0,R0
ADDIU	A2,A1,FFFC
BEQ	V1,R0,7001C0D8
NOP
BNEL	V1,A2,7001C0CC
OR	V0,V1,R0
BEQL	V0,R0,7001C0A4
LW	T7,0000 (V1)
LW	T6,0000 (V1)
BEQ	R0,R0,7001C0A8
SW	T6,0000 (V0)
LW	T7,0000 (V1)
SW	T7,0064 (A0)
LW	T8,0068 (A0)
BNEL	V1,T8,7001C0BC
LW	T9,006C (A0)
SW	V0,0068 (A0)
LW	T9,006C (A0)
SW	T9,0000 (V1)
JR	RA
SW	V1,006C (A0)
OR	V0,V1,R0
LW	V1,0000 (V1)
BNE	V1,R0,7001C084
NOP
JR	RA
NOP

7001C0E0
ADDIU	SP,SP,FFC8
SW	RA,0014 (SP)
LW	T6,002C (A0)
ADDIU	AT,R0,0001
OR	A3,A0,R0
BNE	T6,AT,7001C1AC
LW	A2,0018 (A0)
BEQ	A2,R0,7001C1AC
OR	A0,A2,R0
ADDIU	A1,SP,0024
SW	A2,0020 (SP)
JAL	70020990
SW	A3,0038 (SP)
LW	A2,0020 (SP)
BEQ	V0,R0,7001C1AC
LW	A3,0038 (SP)
LW	T7,0084 (A3)
OR	A0,A2,R0
BEQL	T7,R0,7001C18C
SH	R0,0028 (SP)
SW	A2,0020 (SP)
JAL	70020558
SW	A3,0038 (SP)
LW	A3,0038 (SP)
LW	T8,0024 (SP)
LW	A2,0020 (SP)
LW	T0,0080 (A3)
ADDU	T9,V0,T8
OR	A0,A2,R0
LW	T1,0008 (T0)
SLT	AT,T9,T1
BNEL	AT,R0,7001C18C
SH	R0,0028 (SP)
LW	A1,007C (A3)
JAL	7002053C
SW	A3,0038 (SP)
LW	A3,0038 (SP)
ADDIU	AT,R0,FFFF
LW	V0,0084 (A3)
BEQ	V0,AT,7001C188
ADDIU	T2,V0,FFFF
SW	T2,0084 (A3)
SH	R0,0028 (SP)
LW	T3,0024 (A3)
LW	T4,0024 (SP)
ADDIU	A0,A3,0048
ADDIU	A1,SP,0028
MULTU	T3,T4
MFLO	A2
JAL	70012EFC
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0038
JR	RA
NOP

7001C1BC
LBU	T6,0008 (A0)
ADDIU	AT,R0,00FF
BNE	T6,AT,7001C22C
NOP
LBU	T7,0009 (A0)
ADDIU	AT,R0,0051
ADDIU	V0,A0,0004
BNE	T7,AT,7001C22C
NOP
LBU	T6,0008 (V0)
LBU	T8,0007 (V0)
LW	A2,0018 (A1)
SLL	T7,T6,0x8
LBU	T6,0009 (V0)
SLL	T9,T8,0x10
OR	T8,T9,T7
OR	V1,T8,T6
MTC1	V1,F4
ADDIU	T8,R0,01E8
BEQ	A2,R0,7001C228
CVT.S.W	F0,F4
LWC1	F6,0014 (A2)
MUL.S	F8,F0,F6
TRUNC.W.S	F10,F8
MFC1	T7,F10
JR	RA
SW	T7,0024 (A1)
SW	T8,0024 (A1)
JR	RA
NOP

7001C234
LBU	T7,0031 (A0)
LW	T6,0060 (A1)
LW	T1,0020 (A0)
SLL	T8,T7,0x4
ADDU	T9,T6,T8
LBU	T0,0007 (T9)
LBU	T2,000C (T1)
ADDU	V1,T0,T2
ADDIU	V1,V1,FFC0
BGTZL	V1,7001C268
SLTI	AT,V1,007F
OR	V1,R0,R0
SLTI	AT,V1,007F
BNE	AT,R0,7001C274
NOP
ADDIU	V1,R0,007F
JR	RA
ANDI	V0,V1,00FF

7001C27C
SW	A1,0004 (SP)
SW	A2,0008 (SP)
LW	V1,0064 (A0)
ANDI	T7,A2,00FF
OR	A2,T7,R0
BEQ	V1,R0,7001C2E4
ANDI	T6,A1,00FF
OR	V0,T6,R0
ADDIU	A3,R0,0004
ADDIU	A1,R0,0003
LBU	T8,0032 (V1)
BNEL	V0,T8,7001C2DC
LW	V1,0000 (V1)
LBU	T9,0031 (V1)
BNEL	A2,T9,7001C2DC
LW	V1,0000 (V1)
LBU	A0,0035 (V1)
BEQL	A1,A0,7001C2DC
LW	V1,0000 (V1)
BEQL	A3,A0,7001C2DC
LW	V1,0000 (V1)
JR	RA
OR	V0,V1,R0
LW	V1,0000 (V1)
BNEL	V1,R0,7001C2A8
LBU	T8,0032 (V1)
OR	V0,R0,R0
JR	RA
NOP

7001C2F0
SW	A1,0004 (SP)
SW	A2,0008 (SP)
SW	A3,000C (SP)
LW	V1,006C (A0)
ANDI	T6,A1,00FF
ANDI	T7,A2,00FF
ANDI	T8,A3,00FF
OR	A3,T8,R0
OR	A2,T7,R0
BEQ	V1,R0,7001C358
OR	A1,T6,R0
LW	T9,0000 (V1)
SW	T9,006C (A0)
SW	R0,0000 (V1)
LW	T0,0064 (A0)
BNEL	T0,R0,7001C340
LW	T1,0068 (A0)
BEQ	R0,R0,7001C344
SW	V1,0064 (A0)
LW	T1,0068 (A0)
SW	V1,0000 (T1)
SW	V1,0068 (A0)
SB	A3,0031 (V1)
SB	A1,0032 (V1)
SB	A2,0033 (V1)
SW	V1,0014 (V1)
JR	RA
OR	V0,V1,R0

7001C360
SW	A1,0004 (SP)
SW	A2,0008 (SP)
SW	A3,000C (SP)
LW	T8,0060 (A0)
ANDI	T7,A3,00FF
SLL	T9,T7,0x4
ADDU	T4,T8,T9
LW	V0,0000 (T4)
ANDI	T6,A1,00FF
ANDI	T3,A2,00FF
LH	T0,000E (V0)
ADDIU	V1,R0,0001
OR	T1,T6,R0
BLEZ	T0,7001C450
ADDU	A1,V1,T0
BGEZ	A1,7001C3AC
SRA	T5,A1,0x1
ADDIU	AT,A1,0001
SRA	T5,AT,0x1
SLL	T6,T5,0x2
ADDU	T7,V0,T6
LW	A3,000C (T7)
OR	A0,T5,R0
LW	A2,0004 (A3)
LBU	T2,0002 (A2)
SLT	AT,T1,T2
BNEL	AT,R0,7001C410
SLT	AT,T1,T2
LBU	T8,0003 (A2)
SLT	AT,T8,T1
BNEL	AT,R0,7001C410
SLT	AT,T1,T2
LBU	T9,0000 (A2)
OR	A1,T3,R0
SLT	AT,T3,T9
BNEL	AT,R0,7001C410
SLT	AT,T1,T2
LBU	T4,0001 (A2)
SLT	AT,T4,A1
BNEL	AT,R0,7001C410
SLT	AT,T1,T2
JR	RA
OR	V0,A3,R0
SLT	AT,T1,T2
BNE	AT,R0,7001C438
NOP
LBU	T5,0000 (A2)
SLT	AT,T3,T5
BEQL	AT,R0,7001C444
ADDIU	V1,A0,0001
LBU	T6,0003 (A2)
SLT	AT,T6,T1
BNEL	AT,R0,7001C444
ADDIU	V1,A0,0001
BEQ	R0,R0,7001C444
ADDIU	T0,A0,FFFF
ADDIU	V1,A0,0001
SLT	AT,T0,V1
BEQL	AT,R0,7001C39C
ADDU	A1,V1,T0
OR	V0,R0,R0
JR	RA
NOP

7001C45C
ADDIU	SP,SP,FF20
SW	RA,0024 (SP)
LBU	S6,0008 (A0)
LBU	S3,0009 (A0)
LBU	S4,000A (A0)
ANDI	V1,S6,00F0
ADDIU	T7,V1,FF80
SLTIU	AT,T7,0061
ANDI	T6,S6,000F
BEQ	AT,R0,7001CC64
OR	S6,T6,R0
SLL	T7,T7,0x2
LUI	AT,8003
ADDU	AT,AT,T7
LW	T7,9A50 (AT)	;T7=80029A50+offset: p->handler
JR	T7
NOP
BEQL	S4,R0,7001C7F8
OR	A0,S1,R0
LW	T8,002C (S1)
ADDIU	AT,R0,0001
OR	A0,S1,R0
BNE	T8,AT,7001CC64
ANDI	A1,S3,00FF
ANDI	A2,S4,00FF
JAL	7001C360
ANDI	A3,S6,00FF
BEQ	V0,R0,7001CC64
OR	S7,V0,R0
LW	T9,0060 (S1)
SLL	S8,S6,0x4
OR	A0,S1,R0
ADDU	T6,T9,S8
LBU	T7,0008 (T6)
SH	R0,009E (SP)
SB	R0,00A0 (SP)
ANDI	A1,S3,00FF
ANDI	A2,S4,00FF
ANDI	A3,S6,00FF
JAL	7001C2F0
SH	T7,009C (SP)
BEQ	V0,R0,7001CC64
OR	S0,V0,R0
LW	A0,0014 (S1)
ADDIU	A1,V0,0004
SW	A1,0034 (SP)
JAL	70013258
ADDIU	A2,SP,009C
SW	S7,0020 (S0)
SB	R0,0034 (S0)
LW	T8,0060 (S1)
ADDIU	S5,R0,0002
ADDU	T9,T8,S8
LBU	T6,000B (T9)
SLTI	AT,T6,0040
BNEL	AT,R0,7001C54C
SB	R0,0035 (S0)
BEQ	R0,R0,7001C54C
SB	S5,0035 (S0)
SB	R0,0035 (S0)
LW	V0,0004 (S7)
LBU	T7,0004 (V0)
LB	T6,0005 (V0)
SUBU	T8,S3,T7
SLL	T9,T8,0x2
SUBU	T9,T9,T8
SLL	T9,T9,0x3
ADDU	T9,T9,T8
SLL	T9,T9,0x2
ADDU	A0,T9,T6
SLL	T7,A0,0x10
JAL	700137C0
SRA	A0,T7,0x10
SWC1	F0,0028 (S0)
LW	T9,0000 (S7)
LUI	AT,42FE
MTC1	AT,F4
LBU	T6,000C (T9)
SB	T6,0030 (S0)
LW	T8,0000 (S7)
LW	T7,001C (S1)
LW	T9,0000 (T8)
SB	R0,0037 (S0)
ADDU	T6,T7,T9
SW	T6,0024 (S0)
LW	T8,0060 (S1)
ADDU	T7,T8,S8
LW	S2,0000 (T7)
SWC1	F4,008C (SP)
LBU	A2,0004 (S2)
BEQL	A2,R0,7001C630
CFC1	T8,F31
LW	V0,0070 (S1)
BEQL	V0,R0,7001C630
CFC1	T8,F31
LBU	T9,0006 (S2)
LBU	A3,0005 (S2)
ADDIU	A0,SP,0084
SW	T9,0010 (SP)
LBU	T6,0007 (S2)
ADDIU	A1,SP,008C
JALR	RA,V0
SW	T6,0014 (SP)
BEQ	V0,R0,7001C62C
ADDIU	T8,R0,0016
LW	T7,0084 (SP)
SH	T8,00B4 (SP)
SW	S0,00B8 (SP)
ADDIU	A0,S1,0048
ADDIU	A1,SP,00B4
OR	A2,V0,R0
JAL	70012EFC
SW	T7,00BC (SP)
LBU	T9,0037 (S0)
ORI	T6,T9,0001
SB	T6,0037 (S0)
CFC1	T8,F31
ADDIU	T7,R0,0001
CTC1	T7,F31
LWC1	F6,008C (SP)
LUI	AT,4F00
CVT.W.S	F8,F6
CFC1	T7,F31
NOP
ANDI	T7,T7,0078
BEQL	T7,R0,7001C6A0
MFC1	T7,F8
MTC1	AT,F8
ADDIU	T7,R0,0001
SUB.S	F8,F6,F8
CTC1	T7,F31
NOP
CVT.W.S	F8,F8
CFC1	T7,F31
NOP
ANDI	T7,T7,0078
BNE	T7,R0,7001C694
NOP
MFC1	T7,F8
LUI	AT,8000
BEQ	R0,R0,7001C6AC
OR	T7,T7,AT
BEQ	R0,R0,7001C6AC
ADDIU	T7,R0,FFFF
MFC1	T7,F8
NOP
BLTZ	T7,7001C694
NOP
LUI	AT,3F80
MTC1	AT,F10
SB	T7,0036 (S0)
CTC1	T8,F31
SWC1	F10,008C (SP)
LBU	A2,0008 (S2)
ADDIU	S5,S1,0048
BEQL	A2,R0,7001C738
LWC1	F4,008C (SP)
LW	V0,0070 (S1)
BEQL	V0,R0,7001C738
LWC1	F4,008C (SP)
LBU	T9,000A (S2)
LBU	A3,0009 (S2)
ADDIU	A0,SP,0084
SW	T9,0010 (SP)
LBU	T6,000B (S2)
ADDIU	A1,SP,008C
JALR	RA,V0
SW	T6,0014 (SP)
BEQ	V0,R0,7001C734
ADDIU	T8,R0,0017
LW	T7,0084 (SP)
SH	T8,00B4 (SP)
SW	S0,00B8 (SP)
SB	S6,00C0 (SP)
OR	A0,S5,R0
ADDIU	A1,SP,00B4
OR	A2,V0,R0
JAL	70012EFC
SW	T7,00BC (SP)
LBU	T9,0037 (S0)
ORI	T6,T9,0002
SB	T6,0037 (S0)
LWC1	F4,008C (SP)
LWC1	F8,0028 (S0)
OR	A0,S0,R0
SWC1	F4,002C (S0)
LW	T8,0060 (S1)
LWC1	F4,002C (S0)
OR	A1,S1,R0
ADDU	V0,T8,S8
LWC1	F6,000C (V0)
LBU	S2,000A (V0)
MUL.S	F10,F6,F8
NOP
MUL.S	F20,F10,F4
JAL	7001C234
NOP
ANDI	S4,V0,00FF
OR	A0,S0,R0
JAL	7001BE14
OR	A1,S1,R0
LW	T7,0000 (S7)
LW	A0,0014 (S1)
LW	A2,0008 (S7)
LW	S3,0000 (T7)
MFC1	A3,F20
SW	S2,0018 (SP)
SW	S4,0014 (SP)
SW	V0,0010 (SP)
LW	A1,0034 (SP)
JAL	7001D5A0
SW	S3,001C (SP)
LW	T6,0034 (SP)
ADDIU	T9,R0,0006
SH	T9,00B4 (SP)
SW	T6,00B8 (SP)
LW	T8,0000 (S7)
OR	A0,S5,R0
ADDIU	A1,SP,00B4
LBU	T7,000D (T8)
SB	T7,00C0 (SP)
LW	T9,0000 (S7)
LW	T6,0004 (T9)
SW	T6,00BC (SP)
LW	T8,0000 (S7)
LW	S3,0000 (T8)
JAL	70012EFC
OR	A2,S3,R0
BEQ	R0,R0,7001CC68
LW	RA,0024 (SP)
OR	A0,S1,R0
ANDI	A1,S3,00FF
JAL	7001C27C
ANDI	A2,S6,00FF
BEQ	V0,R0,7001CC64
OR	S0,V0,R0
LBU	T7,0035 (V0)
ADDIU	S6,R0,0002
ADDIU	T9,R0,0004
BNE	S6,T7,7001C828
OR	A0,S1,R0
BEQ	R0,R0,7001CC64
SB	T9,0035 (V0)
LW	T6,0020 (S0)
ADDIU	S8,R0,0003
SB	S8,0035 (S0)
LW	T8,0000 (T6)
ADDIU	A1,S0,0004
JAL	7001BE9C
LW	A2,0008 (T8)
BEQ	R0,R0,7001CC68
LW	RA,0024 (SP)
OR	A0,S1,R0
ANDI	A1,S3,00FF
JAL	7001C27C
ANDI	A2,S6,00FF
BEQ	V0,R0,7001CC64
OR	S0,V0,R0
SB	S4,0033 (V0)
OR	A0,V0,R0
JAL	7001BE14
OR	A1,S1,R0
LW	V1,001C (S1)
LW	T9,0024 (S0)
SLL	A2,V0,0x10
SRA	T7,A2,0x10
SUBU	A0,T9,V1
BLTZ	A0,7001C898
OR	A2,T7,R0
BEQ	R0,R0,7001C89C
OR	V0,A0,R0
ADDIU	V0,R0,03E8
LW	A0,0014 (S1)
ADDIU	A1,S0,0004
JAL	700133A0
OR	A3,V0,R0
BEQ	R0,R0,7001CC68
LW	RA,0024 (SP)
LW	S0,0064 (S1)
BEQL	S0,R0,7001CC68
LW	RA,0024 (SP)
OR	S2,S6,R0
LBU	T6,0031 (S0)
OR	A0,S0,R0
OR	A1,S1,R0
BNEL	S2,T6,7001C91C
LW	S0,0000 (S0)
JAL	7001BE14
SB	S3,0033 (S0)
LW	V1,001C (S1)
LW	T7,0024 (S0)
SLL	A2,V0,0x10
SRA	T8,A2,0x10
SUBU	A0,T7,V1
BLTZ	A0,7001C904
OR	A2,T8,R0
BEQ	R0,R0,7001C908
OR	V0,A0,R0
ADDIU	V0,R0,03E8
LW	A0,0014 (S1)
ADDIU	A1,S0,0004
JAL	700133A0
OR	A3,V0,R0
LW	S0,0000 (S0)
BNEL	S0,R0,7001C8C8
LBU	T6,0031 (S0)
BEQ	R0,R0,7001CC68
LW	RA,0024 (SP)
SLTI	AT,S3,0041
BNE	AT,R0,7001C954
OR	V0,S3,R0
ADDIU	AT,R0,005B
BEQ	V0,AT,7001CB48
ADDIU	AT,R0,005D
BEQL	V0,AT,7001CC68
LW	RA,0024 (SP)
BEQ	R0,R0,7001CC68
LW	RA,0024 (SP)
SLTI	AT,V0,001C
BNE	AT,R0,7001C974
ADDIU	T9,V0,FFF9
ADDIU	AT,R0,0040
BEQL	V0,AT,7001CA9C
LW	T7,0060 (S1)
BEQ	R0,R0,7001CC68
LW	RA,0024 (SP)
SLTIU	AT,T9,0015
BEQ	AT,R0,7001CC64
SLL	T9,T9,0x2
LUI	AT,8003
ADDU	AT,AT,T9
LW	T9,9BD4 (AT)	;T9=80029BD4+offset: p->handler
JR	T9
NOP
LW	T6,0060 (S1)
SLL	T8,S6,0x4
ADDU	T7,T6,T8
SB	S4,0007 (T7)
LW	S0,0064 (S1)
BEQL	S0,R0,7001CC68
LW	RA,0024 (SP)
OR	S2,S6,R0
LBU	T9,0031 (S0)
OR	A0,S0,R0
BNEL	S2,T9,7001C9E0
LW	S0,0000 (S0)
JAL	7001C234
OR	A1,S1,R0
LW	A0,0014 (S1)
ADDIU	A1,S0,0004
JAL	700134D0
ANDI	A2,V0,00FF
LW	S0,0000 (S0)
BNEL	S0,R0,7001C9B8
LBU	T9,0031 (S0)
BEQ	R0,R0,7001CC68
LW	RA,0024 (SP)
LW	T6,0060 (S1)
SLL	T8,S6,0x4
ADDU	T7,T6,T8
SB	S4,0009 (T7)
LW	S0,0064 (S1)
BEQL	S0,R0,7001CC68
LW	RA,0024 (SP)
OR	S2,S6,R0
ADDIU	S3,R0,0003
LBU	T9,0031 (S0)
BNEL	S2,T9,7001CA74
LW	S0,0000 (S0)
LBU	T6,0034 (S0)
OR	A0,S0,R0
BEQL	S3,T6,7001CA74
LW	S0,0000 (S0)
JAL	7001BE14
OR	A1,S1,R0
LW	V1,001C (S1)
LW	T7,0024 (S0)
SLL	A2,V0,0x10
SRA	T8,A2,0x10
SUBU	A0,T7,V1
BLTZ	A0,7001CA5C
OR	A2,T8,R0
BEQ	R0,R0,7001CA60
OR	V0,A0,R0
ADDIU	V0,R0,03E8
LW	A0,0014 (S1)
ADDIU	A1,S0,0004
JAL	700133A0
OR	A3,V0,R0
LW	S0,0000 (S0)
BNEL	S0,R0,7001CA18
LBU	T9,0031 (S0)
BEQ	R0,R0,7001CC68
LW	RA,0024 (SP)
LW	T9,0060 (S1)
SLL	T6,S6,0x4
ADDU	T8,T9,T6
BEQ	R0,R0,7001CC64
SB	S4,0008 (T8)
LW	T7,0060 (S1)
SLL	T9,S6,0x4
ADDU	T6,T7,T9
SB	S4,000B (T6)
LW	S0,0064 (S1)
BEQL	S0,R0,7001CC68
LW	RA,0024 (SP)
OR	S2,S6,R0
ADDIU	S6,R0,0002
ADDIU	S8,R0,0003
ADDIU	S7,R0,0004
ADDIU	S5,R0,0002
ADDIU	S3,R0,0003
LBU	T8,0031 (S0)
BNEL	S2,T8,7001CB38
LW	S0,0000 (S0)
LBU	V0,0035 (S0)
SLTI	AT,S4,0040
BEQL	S3,V0,7001CB38
LW	S0,0000 (S0)
BNE	AT,R0,7001CB00
NOP
BNEL	V0,R0,7001CB38
LW	S0,0000 (S0)
BEQ	R0,R0,7001CB34
SB	S5,0035 (S0)
BNE	S6,V0,7001CB10
NOP
BEQ	R0,R0,7001CB34
SB	R0,0035 (S0)
BNEL	S7,V0,7001CB38
LW	S0,0000 (S0)
LW	T7,0020 (S0)
SB	S8,0035 (S0)
OR	A0,S1,R0
LW	T9,0000 (T7)
ADDIU	A1,S0,0004
JAL	7001BE9C
LW	A2,0008 (T9)
LW	S0,0000 (S0)
BNEL	S0,R0,7001CAD0
LBU	T8,0031 (S0)
BEQ	R0,R0,7001CC68
LW	RA,0024 (SP)
LW	T6,0060 (S1)
SLL	T8,S6,0x4
ADDU	T7,T6,T8
SB	S4,000A (T7)
LW	S0,0064 (S1)
BEQL	S0,R0,7001CC68
LW	RA,0024 (SP)
OR	S2,S6,R0
LBU	T9,0031 (S0)
ADDIU	A1,S0,0004
ANDI	A2,S4,00FF
BNEL	S2,T9,7001CB88
LW	S0,0000 (S0)
JAL	700135F0
LW	A0,0014 (S1)
LW	S0,0000 (S0)
BNEL	S0,R0,7001CB6C
LBU	T9,0031 (S0)
BEQ	R0,R0,7001CC68
LW	RA,0024 (SP)
LW	V0,0020 (S1)
SLL	T8,S3,0x2
OR	A0,S1,R0
LH	T6,0000 (V0)
OR	A2,S6,R0
ADDU	T7,V0,T8
SLT	AT,S3,T6
BEQL	AT,R0,7001CC68
LW	RA,0024 (SP)
JAL	7001BC60
LW	A1,000C (T7)
BEQ	R0,R0,7001CC68
LW	RA,0024 (SP)
LW	T9,0060 (S1)
SLL	S8,S6,0x4
SLL	T7,S4,0x7
ADDU	T6,T9,S8
LH	T8,0004 (T6)
ADDU	T9,T7,S3
ADDIU	T6,T9,E000
MULTU	T8,T6
MFLO	A0
BGEZ	A0,7001CC00
SRA	T7,A0,0xD
ADDIU	AT,A0,1FFF
SRA	T7,AT,0xD
JAL	700137C0
OR	A0,T7,R0
LW	T9,0060 (S1)
MOV.S	F20,F0
ADDU	T8,T9,S8
SWC1	F0,000C (T8)
LW	S0,0064 (S1)
BEQL	S0,R0,7001CC68
LW	RA,0024 (SP)
OR	S2,S6,R0
LBU	T6,0031 (S0)
BNEL	S2,T6,7001CC5C
LW	S0,0000 (S0)
LWC1	F6,0028 (S0)
LWC1	F10,002C (S0)
LW	A0,0014 (S1)
MUL.S	F8,F6,F20
ADDIU	A1,S0,0004
MUL.S	F4,F8,F10
MFC1	A2,F4
JAL	70013560
NOP
LW	S0,0000 (S0)
BNEL	S0,R0,7001CC2C
LBU	T6,0031 (S0)
LW	RA,0024 (SP)
ADDIU	SP,SP,00E0
JR	RA
NOP

7001CC74	1D874	unconditional return
JR	RA
NOP

7001CC7C
ADDIU	SP,SP,FF30
SW	S5,0034 (SP)
SW	S2,0028 (SP)
ADDIU	T6,A0,0038
OR	S2,A0,R0
SW	RA,0044 (SP)
SW	S8,0040 (SP)
SW	S7,003C (SP)
SW	S6,0038 (SP)
SW	S4,0030 (SP)
SW	S3,002C (SP)
SW	S1,0024 (SP)
SW	S0,0020 (SP)
SDC1	F20,0018 (SP)
SW	T6,0050 (SP)
ADDIU	S5,A0,0048
LHU	T7,0038 (S2)
SLTIU	AT,T7,0018
BEQ	AT,R0,7001D24C
SLL	T7,T7,0x2
LUI	AT,8003
ADDU	AT,AT,T7
LW	T7,9C28 (AT)	;T7=80029C28+offset: p->handler
JR	T7
NOP
LW	A0,0018 (S2)
BEQL	A0,R0,7001D250
OR	A0,S5,R0
JAL	700205B4
ADDIU	A1,SP,0088
LH	V0,0088 (SP)
ADDIU	AT,R0,0001
OR	S1,S2,R0
BEQ	V0,AT,7001CD28
ADDIU	A0,SP,0088
ADDIU	AT,R0,0003
BEQ	V0,AT,7001CD4C
OR	A1,S2,R0
ADDIU	AT,R0,0004
BEQ	V0,AT,7001CD64
ADDIU	T8,R0,0002
BEQ	R0,R0,7001D250
OR	A0,S5,R0
SW	S2,00D0 (SP)
JAL	7001C45C
SW	S5,004C (SP)
LW	S2,00D0 (SP)
LW	S5,004C (SP)
JAL	7001C0E0
OR	A0,S2,R0
BEQ	R0,R0,7001D250
OR	A0,S5,R0
JAL	7001C1BC
ADDIU	A0,SP,0088
JAL	7001C0E0
OR	A0,S2,R0
BEQ	R0,R0,7001D250
OR	A0,S5,R0
SW	T8,002C (S2)
ADDIU	T9,R0,0010
LUI	A2,7FFF
SH	T9,0088 (SP)
ORI	A2,A2,FFFF
OR	A0,S5,R0
JAL	70012EFC
ADDIU	A1,SP,0088
BEQ	R0,R0,7001D250
OR	A0,S5,R0
ADDIU	T6,R0,0009
SH	T6,00BC (SP)
LW	A2,005C (S2)
OR	A0,S5,R0
JAL	70012EFC
ADDIU	A1,SP,00BC
BEQ	R0,R0,7001D250
OR	A0,S5,R0
LW	S0,003C (S2)
LW	A0,0014 (S2)
JAL	70013690
OR	A1,S0,R0
LW	A0,0014 (S2)
JAL	70013710
OR	A1,S0,R0
LW	S1,0010 (S0)
OR	A0,S2,R0
LBU	T7,0037 (S1)
BEQL	T7,R0,7001CDE8
OR	A0,S2,R0
JAL	7001D2A0
OR	A1,S1,R0
OR	A0,S2,R0
JAL	7001C070
OR	A1,S0,R0
BEQ	R0,R0,7001D250
OR	A0,S5,R0
LW	S0,003C (S2)
ADDIU	T9,R0,0001
LW	S1,0010 (S0)
LBU	T8,0034 (S1)
BNEL	T8,R0,7001CE18
LBU	T6,0044 (S2)
SB	T9,0034 (S1)
LBU	T6,0044 (S2)
LW	S3,0040 (S2)
OR	A0,S1,R0
SB	T6,0030 (S1)
LW	T7,001C (S2)
OR	A1,S2,R0
ADDU	T8,T7,S3
JAL	7001BE14
SW	T8,0024 (S1)
SLL	A2,V0,0x10
SRA	T9,A2,0x10
OR	A2,T9,R0
LW	A0,0014 (S2)
OR	A1,S0,R0
JAL	700133A0
OR	A3,S3,R0
BEQ	R0,R0,7001D250
OR	A0,S5,R0
LW	T9,0074 (S2)
LW	S4,0040 (S2)
LW	S1,003C (S2)
ADDIU	A1,SP,00A8
JALR	RA,T9
OR	A0,S4,R0
CFC1	T6,F31
ADDIU	T7,R0,0001
CTC1	T7,F31
LWC1	F4,00A8 (SP)
OR	S3,V0,R0
LUI	AT,4F00
CVT.W.S	F6,F4
OR	A0,S1,R0
OR	A1,S2,R0
CFC1	T7,F31
NOP
ANDI	T7,T7,0078
BEQL	T7,R0,7001CEF4
MFC1	T7,F6
MTC1	AT,F6
ADDIU	T7,R0,0001
SUB.S	F6,F4,F6
CTC1	T7,F31
NOP
CVT.W.S	F6,F6
CFC1	T7,F31
NOP
ANDI	T7,T7,0078
BNE	T7,R0,7001CEE8
NOP
MFC1	T7,F6
LUI	AT,8000
BEQ	R0,R0,7001CF00
OR	T7,T7,AT
BEQ	R0,R0,7001CF00
ADDIU	T7,R0,FFFF
MFC1	T7,F6
NOP
BLTZ	T7,7001CEE8
NOP
CTC1	T6,F31
JAL	7001BE14
SB	T7,0036 (S1)
LW	V1,001C (S2)
LW	T9,0024 (S1)
SLL	A2,V0,0x10
SRA	T8,A2,0x10
SUBU	A0,T9,V1
BLTZ	A0,7001CF30
OR	A2,T8,R0
BEQ	R0,R0,7001CF34
OR	V0,A0,R0
ADDIU	V0,R0,03E8
LW	A0,0014 (S2)
ADDIU	A1,S1,0004
JAL	700133A0
OR	A3,V0,R0
ADDIU	T6,R0,0016
SH	T6,00BC (SP)
SW	S1,00C0 (SP)
SW	S4,00C4 (SP)
OR	A0,S5,R0
ADDIU	A1,SP,00BC
JAL	70012EFC
OR	A2,S3,R0
BEQ	R0,R0,7001D250
OR	A0,S5,R0
LW	T9,0074 (S2)
LW	S4,0040 (S2)
LW	S1,003C (S2)
LBU	S0,0044 (S2)
ADDIU	A1,SP,00A8
JALR	RA,T9
OR	A0,S4,R0
LWC1	F8,00A8 (SP)
LWC1	F4,0028 (S1)
SLL	T8,S0,0x4
SWC1	F8,002C (S1)
LWC1	F6,002C (S1)
LW	T7,0060 (S2)
OR	S3,V0,R0
MUL.S	F8,F4,F6
ADDU	T6,T7,T8
LWC1	F10,000C (T6)
LW	A0,0014 (S2)
ADDIU	A1,S1,0004
MUL.S	F4,F10,F8
MFC1	A2,F4
JAL	70013560
NOP
ADDIU	T9,R0,0017
SH	T9,00BC (SP)
SW	S1,00C0 (SP)
SW	S4,00C4 (SP)
SB	S0,00C8 (SP)
OR	A0,S5,R0
ADDIU	A1,SP,00BC
JAL	70012EFC
OR	A2,S3,R0
BEQ	R0,R0,7001D250
OR	A0,S5,R0
OR	S1,S2,R0
LW	A0,0050 (SP)
SW	S2,00D0 (SP)
JAL	7001C45C
SW	S5,004C (SP)
LW	S2,00D0 (SP)
BEQ	R0,R0,7001D24C
LW	S5,004C (SP)
OR	A1,S2,R0
JAL	7001C1BC
LW	A0,0050 (SP)
BEQ	R0,R0,7001D250
OR	A0,S5,R0
LW	T7,002C (S2)
ADDIU	AT,R0,0001
ADDIU	T8,R0,0001
BEQ	T7,AT,7001D24C
OR	A0,S2,R0
JAL	7001C0E0
SW	T8,002C (S2)
BEQ	R0,R0,7001D250
OR	A0,S5,R0
LW	T6,002C (S2)
ADDIU	AT,R0,0002
BNEL	T6,AT,7001D250
OR	A0,S5,R0
LW	S1,0064 (S2)
BEQ	S1,R0,7001D0B0
ADDIU	S0,S1,0004
OR	A1,S0,R0
JAL	70013690
LW	A0,0014 (S2)
LW	A0,0014 (S2)
JAL	70013710
OR	A1,S0,R0
LBU	T9,0037 (S1)
OR	A0,S2,R0
BEQL	T9,R0,7001D09C
OR	A0,S2,R0
JAL	7001D2A0
OR	A1,S1,R0
OR	A0,S2,R0
JAL	7001C070
OR	A1,S0,R0
LW	S1,0064 (S2)
BNEL	S1,R0,7001D068
ADDIU	S0,S1,0004
SW	R0,001C (S2)
BEQ	R0,R0,7001D24C
SW	R0,002C (S2)
LW	T7,002C (S2)
ADDIU	AT,R0,0001
OR	A0,S5,R0
BNEL	T7,AT,7001D250
OR	A0,S5,R0
JAL	70012DE0
OR	A1,R0,R0
OR	A0,S5,R0
JAL	70012DE0
ADDIU	A1,R0,0002
LW	S1,0064 (S2)
BEQ	S1,R0,7001D120
ADDIU	S0,S1,0004
OR	A1,S0,R0
OR	A0,S2,R0
JAL	7001BFC8
ORI	A2,R0,C350
BEQ	V0,R0,7001D114
OR	A0,S2,R0
OR	A1,S0,R0
JAL	7001BE9C
ORI	A2,R0,C350
LW	S1,0000 (S1)
BNEL	S1,R0,7001D0F0
ADDIU	S0,S1,0004
ADDIU	T8,R0,0002
SW	T8,002C (S2)
ADDIU	T6,R0,0010
LUI	A2,7FFF
SH	T6,00BC (SP)
ORI	A2,A2,FFFF
OR	A0,S5,R0
JAL	70012EFC
ADDIU	A1,SP,00BC
BEQ	R0,R0,7001D250
OR	A0,S5,R0
LW	S1,0064 (S2)
LH	T9,003C (S2)
BEQ	S1,R0,7001D24C
SH	T9,0032 (S2)
OR	A0,S1,R0
JAL	7001BE14
OR	A1,S2,R0
LW	V1,001C (S2)
LW	T8,0024 (S1)
SLL	A2,V0,0x10
SRA	T7,A2,0x10
SUBU	A0,T8,V1
BLTZ	A0,7001D18C
OR	A2,T7,R0
BEQ	R0,R0,7001D190
OR	V0,A0,R0
ADDIU	V0,R0,03E8
LW	A0,0014 (S2)
ADDIU	A1,S1,0004
JAL	700133A0
OR	A3,V0,R0
LW	S1,0000 (S1)
BNEL	S1,R0,7001D160
OR	A0,S1,R0
BEQ	R0,R0,7001D250
OR	A0,S5,R0
LW	T6,003C (S2)
LW	T9,0040 (S2)
LW	T7,0044 (S2)
SW	T6,007C (S2)
SW	T9,0080 (S2)
BEQ	R0,R0,7001D24C
SW	T7,0084 (S2)
LBU	S0,003C (S2)
LW	T6,0060 (S2)
LBU	T8,003D (S2)
SLL	T9,S0,0x4
ADDU	T7,T6,T9
BEQ	R0,R0,7001D24C
SB	T8,0008 (T7)
LW	A1,003C (S2)
ADDIU	T7,R0,01E8
LUI	AT,8003
BEQ	A1,R0,7001D21C
SW	A1,0018 (S2)
LWC1	F6,9C88 (AT)
LWC1	F10,0014 (A1)
MUL.S	F8,F6,F10
TRUNC.W.S	F4,F8
MFC1	T8,F4
BEQ	R0,R0,7001D220
SW	T8,0024 (S2)
SW	T7,0024 (S2)
LW	A1,0020 (S2)
BEQL	A1,R0,7001D250
OR	A0,S5,R0
JAL	7001BD34
OR	A0,S2,R0
BEQ	R0,R0,7001D250
OR	A0,S5,R0
LW	A1,003C (S2)
OR	A0,S2,R0
JAL	7001BD34
SW	A1,0020 (S2)
OR	A0,S5,R0
JAL	70013020
LW	A1,0050 (SP)
BEQ	V0,R0,7001CCBC
SW	V0,0028 (S2)
LW	T6,001C (S2)
ADDU	T9,T6,V0
SW	T9,001C (S2)
LW	RA,0044 (SP)
LW	S8,0040 (SP)
LW	S7,003C (SP)
LW	S6,0038 (SP)
LW	S5,0034 (SP)
LW	S4,0030 (SP)
LW	S3,002C (SP)
LW	S2,0028 (SP)
LW	S1,0024 (SP)
LW	S0,0020 (SP)
LDC1	F20,0018 (SP)
JR	RA
ADDIU	SP,SP,00D0

7001D2A0
ADDIU	SP,SP,FFC8
SW	RA,0034 (SP)
SW	S7,0030 (SP)
SW	S6,002C (SP)
SW	S5,0028 (SP)
SW	S4,0024 (SP)
SW	S3,0020 (SP)
SW	S2,001C (SP)
SW	S1,0018 (SP)
SW	S0,0014 (SP)
LW	S0,0050 (A0)
OR	S2,A1,R0
OR	S5,A0,R0
BEQ	S0,R0,7001D378
ADDIU	S7,R0,0017
ADDIU	S6,R0,0016
LH	S3,000C (S0)
LW	S1,0000 (S0)
BEQL	S3,S6,7001D2FC
LW	T6,0010 (S0)
BNE	S3,S7,7001D370
NOP
LW	T6,0010 (S0)
BNE	S2,T6,7001D370
NOP
LW	T9,0078 (S5)
LW	A0,0014 (S0)
ADDIU	S4,S5,0048
JALR	RA,T9
NOP
JAL	7000EA90
OR	A0,S0,R0
BEQ	S1,R0,7001D338
OR	A0,S0,R0
LW	T7,0008 (S1)
LW	T8,0008 (S0)
ADDU	T0,T7,T8
SW	T0,0008 (S1)
JAL	7000EAC0
OR	A1,S4,R0
BNEL	S3,S6,7001D35C
LBU	T3,0037 (S2)
LBU	T1,0037 (S2)
ANDI	T2,T1,00FE
BEQ	R0,R0,7001D364
SB	T2,0037 (S2)
LBU	T3,0037 (S2)
ANDI	T4,T3,00FD
SB	T4,0037 (S2)
LBU	T5,0037 (S2)
BEQL	T5,R0,7001D37C
LW	RA,0034 (SP)
BNE	S1,R0,7001D2E0
OR	S0,S1,R0
LW	RA,0034 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
LW	S4,0024 (SP)
LW	S5,0028 (SP)
LW	S6,002C (SP)
LW	S7,0030 (SP)
JR	RA
ADDIU	SP,SP,0038

7001D3A4
ADDIU	SP,SP,FFD8
SW	RA,0024 (SP)
SW	S2,0020 (SP)
SW	S1,001C (SP)
SW	S0,0018 (SP)
LBU	T6,0034 (A0)
OR	S1,A0,R0
OR	S0,R0,R0
BLEZ	T6,7001D3FC
OR	S2,R0,R0
LW	T7,0060 (S1)
OR	A0,S1,R0
OR	A1,S0,R0
ADDU	T8,T7,S2
JAL	7001BCB4
SW	R0,0000 (T8)
LBU	T9,0034 (S1)
ADDIU	S0,S0,0001
ADDIU	S2,S2,0010
SLT	AT,S0,T9
BNEL	AT,R0,7001D3D0
LW	T7,0060 (S1)
LW	RA,0024 (SP)
LW	S0,0018 (SP)
LW	S1,001C (SP)
LW	S2,0020 (SP)
JR	RA
ADDIU	SP,SP,0028

7001D414
ADDIU	SP,SP,FFC0
SW	RA,0024 (SP)
SW	S1,0020 (SP)
SW	S0,001C (SP)
LW	A2,000C (A1)
SW	R0,0020 (A0)
SW	R0,0018 (A0)
LUI	T6,8002
LW	T6,76E0 (T6)
ADDIU	T7,R0,00FF
ADDIU	T8,R0,01E8
ADDIU	T9,R0,7FFF
SH	T7,0030 (A0)
SW	T8,0024 (A0)
SW	R0,0028 (A0)
SW	R0,002C (A0)
SH	T9,0032 (A0)
SW	T6,0014 (A0)
LBU	T0,0009 (A1)
ADDIU	T1,R0,3E80
SW	T1,005C (A0)
SW	R0,001C (A0)
SB	T0,0035 (A0)
LW	T2,0010 (A1)
ADDIU	T5,R0,0009
OR	S1,A1,R0
SW	T2,0070 (A0)
LW	T3,0014 (A1)
OR	S0,A0,R0
ADDIU	T7,R0,0010
SW	T3,0074 (A0)
LW	T4,0018 (A1)
SW	R0,007C (A0)
SW	R0,0080 (A0)
SW	R0,0084 (A0)
SH	T5,0038 (A0)
SW	T4,0078 (A0)
LBU	T6,0008 (A1)
OR	A1,R0,R0
SB	T6,0034 (A0)
LBU	A3,0008 (S1)
SW	T7,0010 (SP)	;SP+10= 10 bytes
OR	A0,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
SW	A2,002C (SP)
SW	V0,0060 (S0)
JAL	7001D3A4
OR	A0,S0,R0
LW	A3,0000 (S1)
ADDIU	T8,R0,0038
SW	T8,0010 (SP)	;SP+10= 38 bytes
OR	A0,R0,R0
OR	A1,R0,R0
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
LW	A2,002C (SP)
SW	R0,006C (S0)
LW	T9,0000 (S1)
OR	A0,R0,R0
OR	A1,R0,R0
BLEZ	T9,7001D530
ADDIU	T2,R0,001C
OR	V1,V0,R0
LW	T0,006C (S0)
ADDIU	A0,A0,0001
SW	T0,0000 (V1)
SW	V1,006C (S0)
LW	T1,0000 (S1)
ADDIU	V1,V1,0038
SLT	AT,A0,T1
BNEL	AT,R0,7001D510
LW	T0,006C (S0)
SW	R0,0064 (S0)
SW	R0,0068 (S0)
LW	A3,0004 (S1)
SW	T2,0010 (SP)	;SP+10= 1C bytes
LW	A2,002C (SP)
JAL	7000EB50	;V0= p->A3 blocks of data of SP+10 bytes each allocated in sound buffer entry A2
OR	A0,R0,R0
ADDIU	A0,S0,0048
OR	A1,V0,R0
JAL	700130AC
LW	A2,0004 (S1)
LUI	T3,7002
ADDIU	T3,T3,CC7C
SW	R0,0000 (S0)
SW	T3,0008 (S0)
SW	S0,0004 (S0)
LUI	A0,8002
LW	A0,76E0 (A0)
JAL	70013120
OR	A1,S0,R0
LW	RA,0024 (SP)
LW	S0,001C (SP)
LW	S1,0020 (SP)
JR	RA
ADDIU	SP,SP,0040

7001D5A0
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
SW	A1,0024 (SP)
SW	A2,0028 (SP)
SW	A3,002C (SP)
LW	T6,0008 (A1)
BEQL	T6,R0,7001D678
LW	RA,0014 (SP)
SW	A0,0020 (SP)
JAL	7000F0D0
SW	A1,0024 (SP)
LW	A0,0020 (SP)
LW	A3,0024 (SP)
BEQ	V0,R0,7001D674
OR	A2,V0,R0
LBU	V1,003B (SP)
BGEZ	V1,7001D5F4
OR	V0,V1,R0
SUBU	V1,R0,V0
ANDI	T7,V1,00FF
OR	V1,T7,R0
LW	T9,0008 (A3)
LW	T8,001C (A0)
ADDIU	T2,R0,000D
LW	T0,00D8 (T9)
SW	R0,0000 (A2)
SH	T2,0008 (A2)
ADDU	T1,T8,T0
SW	T1,0004 (A2)
LH	T3,001A (A3)
SH	T3,000A (A2)
LBU	T4,0037 (SP)
SB	T4,0012 (A2)
LH	T5,0032 (SP)
SB	V1,0013 (A2)
SH	T5,0010 (A2)
LWC1	F4,002C (SP)
SWC1	F4,000C (A2)
SW	A3,0024 (SP)
SW	A2,001C (SP)
JAL	7000EFC8
LW	A1,003C (SP)
LW	A2,001C (SP)
LW	A3,0024 (SP)
ADDIU	A1,R0,0003
SW	V0,0014 (A2)
LW	T6,0028 (SP)
SW	T6,0018 (A2)
LW	T7,0008 (A3)
LW	A0,000C (T7)
LW	T9,0008 (A0)
JALR	RA,T9
NOP
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7001D690
OR	V0,A0,R0
OR	V1,A1,R0
BLEZ	A2,7001D6FC
OR	A3,R0,R0
ANDI	A1,A2,0003
BEQ	A1,R0,7001D6CC
OR	A0,A1,R0
LBU	T6,0000 (V0)
ADDIU	A3,A3,0001
ADDIU	V1,V1,0001
ADDIU	V0,V0,0001
BNE	A0,A3,7001D6AC
SB	T6,FFFF (V1)
BEQ	A3,A2,7001D6FC
NOP
LBU	T7,0000 (V0)
ADDIU	A3,A3,0004
ADDIU	V1,V1,0004
SB	T7,FFFC (V1)
LBU	T8,0001 (V0)
ADDIU	V0,V0,0004
SB	T8,FFFD (V1)
LBU	T9,FFFE (V0)
SB	T9,FFFE (V1)
LBU	T0,FFFF (V0)
BNE	A3,A2,7001D6CC
SB	T0,FFFF (V1)
JR	RA
NOP

7001D710
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
ADDIU	T6,R0,0001
LUI	AT,8003
LUI	A0,8007
LUI	A1,8007
SW	T6,82E0 (AT)
ADDIU	A1,A1,8FE0	;A1=80068FE0
ADDIU	A0,A0,8FE8	;A0=80068FE8
JAL	7000D6D0
ADDIU	A2,R0,0001	;A2=1
LUI	A0,8007
ADDIU	A0,A0,8FE8
OR	A1,R0,R0
JAL	7000DF10
OR	A2,R0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7001D760
LUI	T6,8003
LW	T6,82E0 (T6)
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
BNE	T6,R0,7001D780
NOP
JAL	7001D710
NOP
LUI	A0,8007
ADDIU	A0,A0,8FE8
ADDIU	A1,SP,001C
JAL	7000DDD0
ADDIU	A2,R0,0001
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP

7001D7A4
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LUI	A0,8007
ADDIU	A0,A0,8FE8
OR	A1,R0,R0
JAL	7000DF10
OR	A2,R0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7001D7D0
ADDIU	SP,SP,FF70
SW	S1,0020 (SP)
ANDI	V0,A1,00FF
ADDIU	V1,R0,0058
OR	S1,A0,R0
SW	RA,002C (SP)
SW	S3,0028 (SP)
SW	S2,0024 (SP)
SW	S0,001C (SP)
BNE	V1,V0,7001D808
SW	A1,0094 (SP)
LUI	S3,8003
BEQ	R0,R0,7001D810
ADDIU	S3,S3,8304
LUI	S3,8003
ADDIU	S3,S3,82F0
ADDIU	AT,R0,006F
BNE	V0,AT,7001D824
ADDIU	S0,R0,0018
BEQ	R0,R0,7001D844
ADDIU	T1,R0,0008
ADDIU	AT,R0,0078
BEQ	V0,AT,7001D840
ADDIU	T0,R0,0010
BEQ	V1,V0,7001D840
NOP
BEQ	R0,R0,7001D840
ADDIU	T0,R0,000A
OR	T1,T0,R0
LW	T8,0000 (S1)
LW	T9,0004 (S1)
ADDIU	AT,R0,0064
SW	T8,0060 (SP)
SW	T8,0040 (SP)
SW	T9,0044 (SP)
BEQ	V0,AT,7001D870
SW	T9,0064 (SP)
ADDIU	AT,R0,0069
BNEL	V0,AT,7001D8AC
LW	T2,0060 (SP)
LW	T4,0040 (SP)
BGTZL	T4,7001D8AC
LW	T2,0060 (SP)
BLTZ	T4,7001D88C
LW	T6,0060 (SP)
BEQ	R0,R0,7001D8AC
LW	T2,0060 (SP)
LW	T7,0064 (SP)
NOR	T8,T6,R0
SLTIU	AT,T7,0001
ADDU	T8,T8,AT
SUBU	T9,R0,T7
SW	T9,0064 (SP)
SW	T8,0060 (SP)
LW	T2,0060 (SP)
LW	T3,0064 (SP)
ADDIU	T0,R0,0017
BNE	T2,R0,7001D8D0
LW	A0,0060 (SP)
BNEL	T3,R0,7001D8D4
ADDIU	S0,R0,0017
LW	T4,0024 (S1)
BEQL	T4,R0,7001D90C
ADDIU	S2,SP,0078
ADDIU	S0,R0,0017
LW	A1,0064 (SP)
OR	A3,T1,R0
SRA	A2,T1,0x1F
SW	T0,004C (SP)
JAL	7000EC6C	;(V0,V1) = (A0,A1) % (A2,A3)
SW	T1,0070 (SP)
LW	T0,004C (SP)
ADDU	T6,V1,S3
LBU	T7,0000 (T6)
ADDIU	S2,SP,0078
LW	T1,0070 (SP)
ADDU	T8,S2,T0
SB	T7,0000 (T8)
ADDIU	S2,SP,0078
LW	A0,0060 (SP)
LW	A1,0064 (SP)
OR	A3,T1,R0
SRA	A2,T1,0x1F
JAL	7000ECA8	;(V0,V1) = (A0,A1) / (A2,A3)
SW	T1,0070 (SP)
LW	T1,0070 (SP)
SW	V1,0004 (S1)
BLTZ	V0,7001D9DC
SW	V0,0000 (S1)
BGTZ	V0,7001D944
NOP
BEQL	V1,R0,7001D9E0
ADDIU	T4,R0,0018
BLEZ	S0,7001D9DC
SRA	T4,T1,0x1F
LW	T2,0000 (S1)
LW	T3,0004 (S1)
SW	T1,003C (SP)
SW	T4,0038 (SP)
SW	T2,0040 (SP)
SW	T3,0044 (SP)
LW	T6,0038 (SP)
LW	T7,003C (SP)
ADDIU	A0,SP,0050
LW	A2,0040 (SP)
LW	A3,0044 (SP)
SW	T6,0010 (SP)
JAL	70020B50
SW	T7,0014 (SP)
LW	T8,0050 (SP)
LW	T9,0054 (SP)
ADDIU	A0,S0,FFFF
SW	T8,0000 (S1)
SW	T9,0004 (S1)
LW	T3,005C (SP)
ADDU	T7,S2,A0
OR	S0,A0,R0
ADDU	T5,T3,S3
LBU	T6,0000 (T5)
SB	T6,0000 (T7)
LW	T8,0000 (S1)
LW	T9,0004 (S1)
SW	T8,0040 (SP)
BLTZ	T8,7001D9DC
SW	T9,0044 (SP)
BGTZ	T8,7001D9D4
NOP
BEQL	T9,R0,7001D9E0
ADDIU	T4,R0,0018
BGTZL	S0,7001D968
LW	T6,0038 (SP)
ADDIU	T4,R0,0018
SUBU	A2,T4,S0
SW	A2,0014 (S1)
LW	A0,0008 (S1)
JAL	70013850	;V0= memcpy(A0,A1,A2)
ADDU	A1,S2,S0
LW	A1,0014 (S1)
LW	A0,0024 (S1)
SLT	AT,A1,A0
BEQ	AT,R0,7001DA0C
SUBU	T5,A0,A1
SW	T5,0010 (S1)
BGEZL	A0,7001DA50
LW	RA,002C (SP)
LW	T6,0030 (S1)
ADDIU	AT,R0,0010
ANDI	T7,T6,0014
BNEL	T7,AT,7001DA50
LW	RA,002C (SP)
LW	T8,0028 (S1)
LW	T9,000C (S1)
LW	V0,0010 (S1)
SUBU	T2,T8,T9
SUBU	T3,T2,V0
SUBU	S0,T3,A1
BLEZ	S0,7001DA4C
ADDU	T4,V0,S0
SW	T4,0010 (S1)
LW	RA,002C (SP)
LW	S0,001C (SP)
LW	S1,0020 (SP)
LW	S2,0024 (SP)
LW	S3,0028 (SP)
JR	RA
ADDIU	SP,SP,0090

7001DA70
ADDIU	SP,SP,FFE8
SW	S2,0028 (SP)
SLL	T6,S2,0x10
SRA	S2,T6,0x10
SW	S3,0024 (SP)
SLL	T8,S3,0x10
SRA	S3,T8,0x10
ANDI	T6,S4,00FF
SW	S4,001C (SP)
OR	S4,T6,R0
BGTZ	S3,7001DAAC
SW	RA,0014 (SP)
LUI	S1,8003
ADDIU	S1,S1,9CE0
ADDIU	S3,R0,0001
ADDIU	V0,R0,0066
BEQ	V0,S4,7001DAE4
OR	V1,S4,R0
ADDIU	A0,R0,0067
BEQ	A0,V1,7001DAC8
ADDIU	AT,R0,0047
BNE	V1,AT,7001DD20
SLTI	AT,S2,FFFC
BNE	AT,R0,7001DD20
NOP
LW	T7,0024 (S0)
SLT	AT,S2,T7
BEQ	AT,R0,7001DD20
NOP
ADDIU	S2,S2,0001
SLL	T8,S2,0x10
BEQ	V0,V1,7001DB28
SRA	S2,T8,0x10
LW	T6,0030 (S0)
LW	V0,0024 (S0)
ANDI	T7,T6,0008
BNE	T7,R0,7001DB18
SLT	AT,S3,V0
BEQL	AT,R0,7001DB1C
SUBU	T8,V0,S2
SW	S3,0024 (S0)
OR	V0,S3,R0
SUBU	T8,V0,S2
BGEZ	T8,7001DB28
SW	T8,0024 (S0)
SW	R0,0024 (S0)
BGTZ	S2,7001DBF8
SLT	AT,S3,S2
LW	T7,0008 (S0)
LW	T8,0014 (S0)
ADDIU	T6,R0,0030
SUBU	V1,R0,S2
ADDU	T9,T7,T8
SB	T6,0000 (T9)
LW	T7,0014 (S0)
LW	V0,0024 (S0)
OR	A1,S1,R0
ADDIU	T8,T7,0001
BGTZ	V0,7001DB70
SW	T8,0014 (S0)
LW	T6,0030 (S0)
ANDI	T9,T6,0008
BEQL	T9,R0,7001DB98
SLT	AT,V0,V1
LW	T8,0008 (S0)
LW	T6,0014 (S0)
ADDIU	T7,R0,002E
ADDU	T9,T8,T6
SB	T7,0000 (T9)
LW	T8,0014 (S0)
LW	V0,0024 (S0)
ADDIU	T6,T8,0001
SW	T6,0014 (S0)
SLT	AT,V0,V1
BEQL	AT,R0,7001DBB4
ADDU	T8,V0,S2
SUBU	S2,R0,V0
SLL	T7,S2,0x10
SRA	S2,T7,0x10
SUBU	V1,R0,S2
ADDU	T8,V0,S2
SLT	AT,T8,S3
SW	V1,0018 (S0)
BEQ	AT,R0,7001DBD0
SW	T8,0024 (S0)
SLL	S3,T8,0x10
SRA	T6,S3,0x10
OR	S3,T6,R0
LW	T7,0008 (S0)
LW	T9,0014 (S0)
SW	S3,001C (S0)
OR	A2,S3,R0
JAL	70013850	;V0= memcpy(A0,A1,A2)
ADDU	A0,T7,T9
LW	T8,0024 (S0)
SUBU	T6,T8,S3
BEQ	R0,R0,7001DF7C
SW	T6,0020 (S0)
BEQ	AT,R0,7001DC70
OR	A1,S1,R0
LW	T7,0008 (S0)
LW	T9,0014 (S0)
OR	A1,S1,R0
OR	A2,S3,R0
JAL	70013850	;V0= memcpy(A0,A1,A2)
ADDU	A0,T7,T9
LW	T8,0014 (S0)
LW	V0,0024 (S0)
SUBU	T7,S2,S3
ADDU	T6,T8,S3
SW	T6,0014 (S0)
BGTZ	V0,7001DC44
SW	T7,0018 (S0)
LW	T9,0030 (S0)
ANDI	T8,T9,0008
BEQ	T8,R0,7001DC68
NOP
LW	T7,0008 (S0)
LW	T9,0014 (S0)
ADDIU	T6,R0,002E
ADDU	T8,T7,T9
SB	T6,0000 (T8)
LW	T7,001C (S0)
LW	V0,0024 (S0)
ADDIU	T9,T7,0001
SW	T9,001C (S0)
BEQ	R0,R0,7001DF7C
SW	V0,0020 (S0)
LW	T6,0008 (S0)
LW	T8,0014 (S0)
OR	A2,S2,R0
JAL	70013850	;V0= memcpy(A0,A1,A2)
ADDU	A0,T6,T8
LW	T7,0014 (S0)
LW	V0,0024 (S0)
SUBU	S3,S3,S2
SLL	T6,S3,0x10
ADDU	T9,T7,S2
SW	T9,0014 (S0)
BGTZ	V0,7001DCB4
SRA	S3,T6,0x10
LW	T7,0030 (S0)
ANDI	T9,T7,0008
BEQL	T9,R0,7001DCDC
SLT	AT,V0,S3
LW	T8,0008 (S0)
LW	T7,0014 (S0)
ADDIU	T6,R0,002E
ADDU	T9,T8,T7
SB	T6,0000 (T9)
LW	T8,0014 (S0)
LW	V0,0024 (S0)
ADDIU	T7,T8,0001
SW	T7,0014 (S0)
SLT	AT,V0,S3
BEQ	AT,R0,7001DCF0
ADDU	A1,S2,S1
SLL	S3,V0,0x10
SRA	T6,S3,0x10
OR	S3,T6,R0
LW	T9,0008 (S0)
LW	T8,0014 (S0)
OR	A2,S3,R0
JAL	70013850	;V0= memcpy(A0,A1,A2)
ADDU	A0,T9,T8
LW	T7,0014 (S0)
LW	T9,0024 (S0)
ADDU	T6,T7,S3
SUBU	T8,T9,S3
SW	T6,0014 (S0)
BEQ	R0,R0,7001DF7C
SW	T8,0018 (S0)
BEQ	A0,V1,7001DD30
ADDIU	AT,R0,0047
BNEL	V1,AT,7001DD70
LW	T8,0008 (S0)
LW	V0,0024 (S0)
ADDIU	S4,R0,0045
SLT	AT,S3,V0
BEQL	AT,R0,7001DD50
ADDIU	T7,V0,FFFF
SW	S3,0024 (S0)
OR	V0,S3,R0
ADDIU	T7,V0,FFFF
BGEZ	T7,7001DD5C
SW	T7,0024 (S0)
SW	R0,0024 (S0)
BNE	A0,V1,7001DD6C
NOP
BEQ	R0,R0,7001DD6C
ADDIU	S4,R0,0065
LW	T8,0008 (S0)
LW	T7,0014 (S0)
LBU	T9,0000 (S1)
ADDIU	S1,S1,0001
ADDU	T6,T8,T7
SB	T9,0000 (T6)
LW	T8,0014 (S0)
LW	V0,0024 (S0)
ADDIU	T7,T8,0001
BGTZ	V0,7001DDA8
SW	T7,0014 (S0)
LW	T9,0030 (S0)
ANDI	T6,T9,0008
BEQ	T6,R0,7001DDCC
NOP
LW	T7,0008 (S0)
LW	T9,0014 (S0)
ADDIU	T8,R0,002E
ADDU	T6,T7,T9
SB	T8,0000 (T6)
LW	T7,0014 (S0)
LW	V0,0024 (S0)
ADDIU	T9,T7,0001
SW	T9,0014 (S0)
BLEZL	V0,7001DE28
LW	T6,0008 (S0)
ADDIU	S3,S3,FFFF
SLL	T8,S3,0x10
SRA	S3,T8,0x10
SLT	AT,V0,S3
BEQ	AT,R0,7001DDF8
OR	A1,S1,R0
SLL	S3,V0,0x10
SRA	T7,S3,0x10
OR	S3,T7,R0
LW	T9,0008 (S0)
LW	T8,0014 (S0)
OR	A2,S3,R0
JAL	70013850	;V0= memcpy(A0,A1,A2)
ADDU	A0,T9,T8
LW	T6,0014 (S0)
LW	T9,0024 (S0)
ADDU	T7,T6,S3
SUBU	T8,T9,S3
SW	T7,0014 (S0)
SW	T8,0018 (S0)
LW	T6,0008 (S0)
LW	T7,0014 (S0)
ADDU	S1,T6,T7
ADDIU	S1,S1,0001
BLTZ	S2,7001DE4C
SB	S4,FFFF (S1)
ADDIU	T9,R0,002B
SB	T9,0000 (S1)
BEQ	R0,R0,7001DE68
ADDIU	S1,S1,0001
SUBU	S2,R0,S2
SLL	T6,S2,0x10
ADDIU	T8,R0,002D
SRA	T7,T6,0x10
SB	T8,0000 (S1)
ADDIU	S1,S1,0001
OR	S2,T7,R0
SLTI	AT,S2,0064
BNEL	AT,R0,7001DF18
ADDIU	V0,R0,000A
SLTI	AT,S2,03E8
BNE	AT,R0,7001DEC8
ADDIU	V0,R0,03E8
DIV	S2,V0
BNE	V0,R0,7001DE90
NOP
BREAK	00001C00	;Break: division by zero
ADDIU	AT,R0,FFFF
BNE	V0,AT,7001DEA8
LUI	AT,8000
BNE	S2,AT,7001DEA8
NOP
BREAK	00001800
MFHI	S2
SLL	T6,S2,0x10
MFLO	T9
ADDIU	T8,T9,0030
SRA	T7,T6,0x10
OR	S2,T7,R0
SB	T8,0000 (S1)
ADDIU	S1,S1,0001
ADDIU	V0,R0,0064
DIV	S2,V0
BNE	V0,R0,7001DEDC
NOP
BREAK	00001C00	;Break: division by zero
ADDIU	AT,R0,FFFF
BNE	V0,AT,7001DEF4
LUI	AT,8000
BNE	S2,AT,7001DEF4
NOP
BREAK	00001800
MFHI	S2
SLL	T6,S2,0x10
MFLO	T9
ADDIU	T8,T9,0030
SRA	T7,T6,0x10
OR	S2,T7,R0
SB	T8,0000 (S1)
ADDIU	S1,S1,0001
ADDIU	V0,R0,000A
DIV	S2,V0
BNE	V0,R0,7001DF28
NOP
BREAK	00001C00	;Break: division by zero
ADDIU	AT,R0,FFFF
BNE	V0,AT,7001DF40
LUI	AT,8000
BNE	S2,AT,7001DF40
NOP
BREAK	00001800
MFHI	S2
SLL	T6,S2,0x10
MFLO	T9
ADDIU	T8,T9,0030
SRA	T7,T6,0x10
ADDIU	T9,T7,0030
SB	T8,0000 (S1)
SB	T9,0001 (S1)
LW	T8,0008 (S0)
OR	S2,T7,R0
LW	T7,0014 (S0)
ADDIU	S1,S1,0002
SUBU	T6,S1,T8
SUBU	T9,T6,T7
SW	T9,001C (S0)
LW	T8,0030 (S0)
ADDIU	AT,R0,0010
ANDI	T6,T8,0014
BNEL	T6,AT,7001DFCC
LW	RA,0014 (SP)
LW	T7,000C (S0)
LW	T9,0014 (S0)
LW	T6,0018 (S0)
LW	V1,0028 (S0)
ADDU	T8,T7,T9
LW	T9,001C (S0)
ADDU	T7,T8,T6
LW	T6,0020 (S0)
ADDU	T8,T7,T9
ADDU	V0,T8,T6
SLT	AT,V0,V1
BEQ	AT,R0,7001DFC8
SUBU	T7,V1,V0
SW	T7,0010 (S0)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7001DFD8
JR	RA
NOP

7001DFE0
ADDIU	SP,SP,FF30
SW	RA,003C (SP)
SW	S5,0038 (SP)
SW	S4,0034 (SP)
SW	S3,0030 (SP)
SW	S2,002C (SP)
SW	S1,0028 (SP)
SW	S0,0024 (SP)
SDC1	F20,0018 (SP)
SW	A0,00D0 (SP)
SW	A1,00D4 (SP)
LW	V0,0024 (A0)
ADDIU	S5,SP,00B0
LDC1	F20,0000 (A0)
BGEZ	V0,7001E028
ADDIU	T7,R0,0006
BEQ	R0,R0,7001E054
SW	T7,0024 (A0)
BNE	V0,R0,7001E054
LBU	T8,00D7 (SP)
ADDIU	AT,R0,0067
BEQ	T8,AT,7001E048
SW	T8,0048 (SP)
ADDIU	AT,R0,0047
BNEL	T8,AT,7001E058
LW	T6,00D0 (SP)
LW	T7,00D0 (SP)
ADDIU	T9,R0,0001
SW	T9,0024 (T7)
LW	T6,00D0 (SP)
ADDIU	AT,R0,07FF
LHU	A0,0000 (T6)
ANDI	V1,A0,7FF0
SRA	T8,V1,0x4
SLL	T9,T8,0x10
SRA	V1,T9,0x10
BNE	V1,AT,7001E0D4
NOP
SH	R0,009A (SP)
LHU	T8,0000 (T6)
ADDIU	V1,R0,0002
SLL	V0,V1,0x10
ANDI	T9,T8,000F
BNEL	T9,R0,7001E0B8
SRA	T7,V0,0x10
LHU	T7,0002 (T6)
BNEL	T7,R0,7001E0B8
SRA	T7,V0,0x10
LHU	T8,0004 (T6)
BNEL	T8,R0,7001E0B8
SRA	T7,V0,0x10
LHU	T9,0006 (T6)
BEQ	T9,R0,7001E0C0
SRA	T7,V0,0x10
BEQ	R0,R0,7001E10C
OR	V0,T7,R0
ADDIU	V1,R0,0001
SLL	V0,V1,0x10
SRA	T7,V0,0x10
BEQ	R0,R0,7001E10C
OR	V0,T7,R0
BLEZ	V1,7001E0F8
ANDI	T8,A0,800F
LW	T9,00D0 (SP)
ORI	T6,T8,3FF0
ADDIU	T7,V1,FC02
SH	T6,0000 (T9)
SH	T7,009A (SP)
BEQ	R0,R0,7001E10C
ADDIU	V0,R0,FFFF
BGEZ	V1,7001E108
OR	V0,R0,R0
BEQ	R0,R0,7001E10C
ADDIU	V0,R0,0002
SH	R0,009A (SP)
BLEZ	V0,7001E158
SLL	T8,V0,0x10
SLL	T8,V0,0x10
SRA	T6,T8,0x10
ADDIU	AT,R0,0002
BNE	T6,AT,7001E134
LW	T9,00D0 (SP)
LUI	A1,8003
BEQ	R0,R0,7001E13C
ADDIU	A1,A1,9CD8
LUI	A1,8003
ADDIU	A1,A1,9CDC
ADDIU	T7,R0,0003
SW	T7,0014 (T9)
LW	A0,0008 (T9)
JAL	70013850	;V0= memcpy(A0,A1,A2)
ADDIU	A2,R0,0003
BEQ	R0,R0,7001E508
LW	RA,003C (SP)
SRA	T6,T8,0x10
BNE	T6,R0,7001E16C
OR	S3,R0,R0
BEQ	R0,R0,7001E4F0
SH	R0,009A (SP)
MTC1	R0,F3
MTC1	R0,F2
LBU	T7,00D7 (SP)
LH	T9,009A (SP)
C.LT.D	F20,F2
ADDIU	AT,R0,7597
OR	V1,R0,R0
ADDIU	S5,SP,00B1
BC1F	7001E198
SW	T7,0048 (SP)
NEG.D	F20,F20
MULTU	T9,AT
LUI	AT,0001
ORI	AT,AT,86A0
ADDIU	A1,R0,0006
MFLO	T8
NOP
NOP
DIV	T8,AT
MFLO	T6
ADDIU	T7,T6,FFFC
SLL	T9,T7,0x10
SRA	T8,T9,0x10
BGEZ	T8,7001E230
SH	T7,009A (SP)
SLL	T9,T7,0x10
SRA	T8,T9,0x10
ADDIU	T6,R0,0003
SUBU	A0,T6,T8
ADDIU	AT,R0,FFFC
AND	V0,A0,AT
SUBU	T9,R0,V0
BLEZ	V0,7001E2A0
SH	T9,009A (SP)
LUI	A0,8003
ADDIU	A0,A0,9C90
ANDI	T6,V0,0001
BEQ	T6,R0,7001E21C
SRA	T9,V0,0x1
SLL	T8,V1,0x3
ADDU	T7,A0,T8
LDC1	F4,0000 (T7)
MUL.D	F20,F20,F4
NOP
OR	V0,T9,R0
BGTZ	T9,7001E1FC
ADDIU	V1,V1,0001
BEQ	R0,R0,7001E2A4
LW	T7,0048 (SP)
LH	T6,009A (SP)
LUI	AT,3FF0
OR	V1,R0,R0
BLEZ	T6,7001E2A0
ANDI	T8,T6,FFFC
SLL	V0,T8,0x10
SLL	T9,T8,0x10
MTC1	AT,F1
MTC1	R0,F0
SRA	T6,T9,0x10
SRA	T7,V0,0x10
SH	T8,009A (SP)
BLEZ	T6,7001E29C
OR	V0,T7,R0
LUI	A0,8003
ADDIU	A0,A0,9C90
ANDI	T7,V0,0001
BEQ	T7,R0,7001E290
SRA	T6,V0,0x1
SLL	T8,V1,0x3
ADDU	T9,A0,T8
LDC1	F6,0000 (T9)
MUL.D	F0,F0,F6
NOP
OR	V0,T6,R0
BGTZ	T6,7001E270
ADDIU	V1,V1,0001
DIV.D	F20,F20,F0
LW	T7,0048 (SP)
ADDIU	AT,R0,0066
LW	T8,00D0 (SP)
BNE	T7,AT,7001E2C0
ADDIU	T6,R0,0030
LH	A1,009A (SP)
BEQ	R0,R0,7001E2C0
ADDIU	A1,A1,000A
LW	T9,0024 (T8)
ADDU	S4,A1,T9
SLTI	AT,S4,0014
BNE	AT,R0,7001E2D8
NOP
ADDIU	S4,R0,0013
BLEZ	S4,7001E3A8
SB	T6,00B0 (SP)
C.LT.D	F2,F20
ADDIU	S3,R0,0030
ADDIU	S2,SP,0074
BC1FL	7001E3AC
LH	T8,009A (SP)
TRUNC.W.D	F8,F20
ADDIU	S4,S4,FFF8
ADDIU	S5,S5,0008
MFC1	S1,F8
BLEZ	S4,7001E328
NOP
MTC1	S1,F10
LUI	AT,8003
LDC1	F8,9CE8 (AT)
CVT.D.W	F4,F10
SUB.D	F6,F20,F4
MUL.D	F20,F6,F8
NOP
BLEZ	S1,7001E370
ADDIU	S0,R0,0008
ADDIU	S0,R0,0007
BLTZ	S0,7001E370
OR	A0,S2,R0
OR	A1,S1,R0
JAL	70020C50
ADDIU	A2,R0,000A
LW	T8,0078 (SP)
ADDIU	S5,S5,FFFF
ADDIU	T9,T8,0030
SB	T9,0000 (S5)
LW	S1,0074 (SP)
BLEZL	S1,7001E374
MTC1	R0,F3
ADDIU	S0,S0,FFFF
BGEZL	S0,7001E33C
OR	A0,S2,R0
MTC1	R0,F3
MTC1	R0,F2
ADDIU	S0,S0,FFFF
BLTZ	S0,7001E390
ADDIU	S0,S0,FFFF
ADDIU	S5,S5,FFFF
BGEZ	S0,7001E380
SB	S3,0000 (S5)
BLEZ	S4,7001E3A8
ADDIU	S5,S5,0008
C.LT.D	F2,F20
NOP
BC1TL	7001E2F8
TRUNC.W.D	F8,F20
LH	T8,009A (SP)
LBU	T6,00B1 (SP)
ADDIU	T7,SP,00B0
ADDIU	V0,R0,0030
SUBU	S4,S5,T7
ADDIU	T9,T8,0007
ADDIU	S4,S4,FFFF
SH	T9,009A (SP)
BNE	V0,T6,7001E3F0
ADDIU	S5,SP,00B1
LH	T7,009A (SP)
ADDIU	S5,S5,0001
ADDIU	S4,S4,FFFF
ADDIU	T8,T7,FFFF
SH	T8,009A (SP)
LBU	T9,0000 (S5)
BEQL	V0,T9,7001E3D4
LH	T7,009A (SP)
LW	T6,0048 (SP)
ADDIU	AT,R0,0066
LW	T8,00D0 (SP)
BNE	T6,AT,7001E410
LW	T7,0048 (SP)
LH	A1,009A (SP)
BEQ	R0,R0,7001E430
ADDIU	A1,A1,0001
ADDIU	AT,R0,0065
BEQ	T7,AT,7001E424
ADDIU	AT,R0,0045
BNE	T7,AT,7001E42C
OR	V0,R0,R0
BEQ	R0,R0,7001E42C
ADDIU	V0,R0,0001
OR	A1,V0,R0
LW	T9,0024 (T8)
ADDU	S3,A1,T9
SLL	T6,S3,0x10
SRA	S3,T6,0x10
SLT	AT,S4,S3
BEQ	AT,R0,7001E458
NOP
SLL	S3,S4,0x10
SRA	T8,S3,0x10
OR	S3,T8,R0
BLEZ	S3,7001E4F0
SLT	AT,S3,S4
BEQ	AT,R0,7001E480
ADDU	V0,S3,S5
LBU	T9,0000 (V0)
SLTI	AT,T9,0035
BNEL	AT,R0,7001E484
ADDIU	A1,R0,0030
BEQ	R0,R0,7001E488
ADDIU	A1,R0,0039
ADDIU	A1,R0,0030
ADDU	V0,S3,S5
LBU	T6,FFFF (V0)
ADDIU	V1,S3,FFFF
OR	A0,A1,R0
BNE	A1,T6,7001E4BC
ADDIU	AT,R0,0039
ADDU	V0,V1,S5
LBU	T9,FFFF (V0)
ADDIU	S3,S3,FFFF
SLL	T7,S3,0x10
ADDIU	V1,V1,FFFF
ADDIU	V0,V0,FFFF
BEQ	A0,T9,7001E4A0
SRA	S3,T7,0x10
BNE	A0,AT,7001E4D0
ADDU	V0,S5,V1
LBU	T6,0000 (V0)
ADDIU	T7,T6,0001
SB	T7,0000 (V0)
BGEZ	V1,7001E4F0
LH	T6,009A (SP)
ADDIU	S3,S3,0001
SLL	T8,S3,0x10
ADDIU	T7,T6,0001
SH	T7,009A (SP)
SRA	S3,T8,0x10
ADDIU	S5,S5,FFFF
LW	S0,00D0 (SP)
LBU	S4,00D7 (SP)
OR	S1,S5,R0
JAL	7001DA70
LH	S2,009A (SP)
LW	RA,003C (SP)
LDC1	F20,0018 (SP)
LW	S0,0024 (SP)
LW	S1,0028 (SP)
LW	S2,002C (SP)
LW	S3,0030 (SP)
LW	S4,0034 (SP)
LW	S5,0038 (SP)
JR	RA
ADDIU	SP,SP,00D0

7001E530	1F130	request I/O with hardware A0; read/write (A1) SP+10 bytes between hardware offset A2 and rdram A3
	accepts: A0=p->PI BSD hardware entry, A1=mode(read 0/write 1), A2=base hardware address, A3=p->rdram, SP+10=length
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)
SW	A1,002C (SP)
SW	A2,0030 (SP)
SW	A3,0034 (SP)
SW	S1,0018 (SP)
SW	S0,0014 (SP)
LUI	T6,A460
LW	S0,0010 (T6)	;S0= A4600010: PI Status
ANDI	T7,S0,0003
BEQ	T7,R0,7001E578	;branch if ready
NOP
//7001E564:	loop until ready
LUI	T8,A460
LW	S0,0010 (T8)
ANDI	T9,S0,0003
BNE	T9,R0,7001E564
NOP
//7001E578:	set ram and rom addresses
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
LW	A0,0034 (SP)	;A0=A3 f/caller
LUI	T0,A460
SW	V0,0000 (T0)	;V0->A4600000: set PI rdram address
LW	T1,0028 (SP)	;T1= A0 f/caller: PI BSD hardware entry
LW	T3,0030 (SP)	;T3= A2 f/caller: hardware offset
LUI	AT,1FFF
LW	T2,000C (T1)	;T2=A0+C: base address for hardware entry
ORI	AT,AT,FFFF
LUI	T6,A460
OR	T4,T2,T3
AND	T5,T4,AT	;T5= (base | offset) & 1FFFFFFF: formatted hardware address
SW	T5,0004 (T6)	;T5->A4600004: set PI hardware address
//7001E5AC:	use mode flag to set IO direction
LW	S1,002C (SP)	;S1=A1 f/caller
BEQ	S1,R0,7001E5C8
ADDIU	AT,R0,0001
BEQ	S1,AT,7001E5DC
NOP
BEQ	R0,R0,7001E5F0	;return error on bad mode
NOP
//7001E5C8:	0: write to rdram
LW	T7,0038 (SP)	;T7=SP+10 f/caller: length
LUI	T9,A460
ADDIU	T8,T7,FFFF	;T8= length-1
BEQ	R0,R0,7001E5F8
SW	T8,000C (T9)	;T8->A460000C: set PI Write Length
//7001E5DC:	1: read rdram and write to hardware
LW	T0,0038 (SP)	;T0=SP+10 f/caller: length
LUI	T2,A460
ADDIU	T1,T0,FFFF	;T1= length-1
BEQ	R0,R0,7001E5F8
SW	T1,0008 (T2)	;T1->A4600008: set PI Read Length
//7001E5F0:	return -1: error!
BEQ	R0,R0,7001E5FC
ADDIU	V0,R0,FFFF
//7001E5F8:	return 0: okay!
OR	V0,R0,R0
LW	RA,001C (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
JR	RA
ADDIU	SP,SP,0028

7001E610
ADDIU	SP,SP,FFC0
SW	A0,0040 (SP)
LW	T6,0040 (SP)
SW	RA,001C (SP)
SW	R0,0028 (SP)
SW	R0,003C (SP)
SW	R0,0030 (SP)
SW	T6,002C (SP)
LW	T7,002C (SP)
ADDIU	A1,SP,003C
ADDIU	A2,R0,0001
JAL	7000DDD0
LW	A0,0008 (T7)
LW	T8,003C (SP)
LW	T9,0014 (T8)
BEQ	T9,R0,7001E7E4
NOP
LBU	T0,0004 (T9)
ADDIU	AT,R0,0002
BNE	T0,AT,7001E7E4
NOP
LW	T1,0014 (T9)
BEQ	T1,R0,7001E678
ADDIU	AT,R0,0001
BNE	T1,AT,7001E7E4
NOP
LW	T2,003C (SP)
ADDIU	T0,R0,FFFF
ADDIU	AT,R0,0003
LW	T3,0014 (T2)
ADDIU	T4,T3,0014
SW	T4,0020 (SP)
LHU	T5,0006 (T4)
SLL	T6,T5,0x3
ADDU	T6,T6,T5
SLL	T6,T6,0x2
ADDU	T7,T4,T6
ADDIU	T8,T7,0018
SW	T8,0024 (SP)
SW	T0,0008 (T4)
LW	T9,0020 (SP)
LHU	T1,0004 (T9)
BEQ	T1,AT,7001E6D4
NOP
LW	T2,0024 (SP)
LW	T3,0004 (T2)
LW	T5,000C (T2)
SUBU	T6,T3,T5
SW	T6,0004 (T2)
LW	T7,0020 (SP)
ADDIU	AT,R0,0002
LHU	T8,0004 (T7)
BNE	T8,AT,7001E708
NOP
LW	T0,003C (SP)
LW	T4,0014 (T0)
LW	T9,0014 (T4)
BNE	T9,R0,7001E708
NOP
ADDIU	T1,R0,0001
BEQ	R0,R0,7001E70C
SW	T1,0028 (SP)
SW	R0,0028 (SP)
LW	T3,002C (SP)
ADDIU	A1,SP,0034
ADDIU	A2,R0,0001
JAL	7000DDD0
LW	A0,0010 (T3)
LUI	A0,0010
JAL	70020CE0
ORI	A0,A0,0401
LW	T6,0020 (SP)
LW	T5,003C (SP)
LUI	AT,8000
LW	A2,0010 (T6)
LUI	A1,0500
ORI	A1,A1,0510	;A1=05000510: 64DD Interrupts
OR	T2,A2,AT
OR	A2,T2,R0	;A2= 80000000 | org
JAL	70020D40	;store value A2 to offset A1 using BSD hardware entry A0
LW	A0,0014 (T5)	;A0=T5+14: BSD hardware entry
LW	T7,002C (SP)
ADDIU	A1,SP,0038
ADDIU	A2,R0,0001
JAL	7000DDD0
LW	A0,000C (T7)
LW	T8,003C (SP)
OR	A2,R0,R0
LW	A0,0004 (T8)
JAL	7000DF10
OR	A1,T8,R0
LW	T0,0028 (SP)
ADDIU	AT,R0,0001
BNE	T0,AT,7001E7A8
NOP
LW	T4,003C (SP)
LW	T9,0014 (T4)
LW	T1,002C (T9)
BNE	T1,R0,7001E7A8
NOP
BEQ	R0,R0,7001E754
SW	R0,0028 (SP)
LW	T3,002C (SP)
OR	A1,R0,R0
OR	A2,R0,R0
JAL	7000DF10
LW	A0,0010 (T3)
LW	T5,003C (SP)
ADDIU	AT,R0,0001
LW	T6,0014 (T5)
LHU	T2,001A (T6)
BNE	T2,AT,7001E630
NOP
JAL	70010AD0	;set priority of current thread to 2, then update, insert, and execute
NOP
BEQ	R0,R0,7001E630
NOP
LW	T7,003C (SP)
LHU	T8,0000 (T7)
ADDIU	T0,T8,FFF6
SLTIU	AT,T0,0007
BEQ	AT,R0,7001E940
NOP
SLL	T0,T0,0x2
LUI	AT,8003
ADDU	AT,AT,T0
LW	T0,9CF0 (AT)	;T0=80029CF0+offset: p->handler
JR	T0
NOP
LW	T4,002C (SP)
ADDIU	A1,SP,0034
ADDIU	A2,R0,0001
JAL	7000DDD0
LW	A0,0010 (T4)
LW	T9,003C (SP)
LW	T1,002C (SP)
OR	A0,R0,R0
LW	A1,000C (T9)
LW	A2,0008 (T9)
LW	A3,0010 (T9)
LW	T9,0014 (T1)
JALR	RA,T9
NOP
BEQ	R0,R0,7001E948
SW	V0,0030 (SP)
LW	T3,002C (SP)
ADDIU	A1,SP,0034
ADDIU	A2,R0,0001
JAL	7000DDD0
LW	A0,0010 (T3)
LW	T6,002C (SP)
LW	T5,003C (SP)
ADDIU	A0,R0,0001
LW	T9,0014 (T6)
LW	A1,000C (T5)
LW	A2,0008 (T5)
JALR	RA,T9
LW	A3,0010 (T5)
BEQ	R0,R0,7001E948
SW	V0,0030 (SP)
LW	T2,002C (SP)
ADDIU	A1,SP,0034
ADDIU	A2,R0,0001
JAL	7000DDD0
LW	A0,0010 (T2)
LW	T7,003C (SP)
LW	T0,002C (SP)
OR	A1,R0,R0
LW	T8,0010 (T7)
LW	A0,0014 (T7)
LW	A2,000C (T7)
LW	A3,0008 (T7)
SW	T8,0010 (SP)
LW	T9,0018 (T0)
JALR	RA,T9
NOP
BEQ	R0,R0,7001E948
SW	V0,0030 (SP)
LW	T4,002C (SP)
ADDIU	A1,SP,0034
ADDIU	A2,R0,0001
JAL	7000DDD0
LW	A0,0010 (T4)
LW	T1,003C (SP)
LW	T5,002C (SP)
ADDIU	A1,R0,0001
LW	T3,0010 (T1)
LW	A0,0014 (T1)
LW	A2,000C (T1)
LW	A3,0008 (T1)
SW	T3,0010 (SP)
LW	T9,0018 (T5)
JALR	RA,T9
NOP
BEQ	R0,R0,7001E948
SW	V0,0030 (SP)
LW	T6,003C (SP)
OR	A2,R0,R0
LW	A0,0004 (T6)
JAL	7000DF10
OR	A1,T6,R0
ADDIU	T2,R0,FFFF
BEQ	R0,R0,7001E948
SW	T2,0030 (SP)
ADDIU	T7,R0,FFFF
SW	T7,0030 (SP)
LW	T8,0030 (SP)
BNE	T8,R0,7001E630
NOP
LW	T0,002C (SP)
ADDIU	A1,SP,0038
ADDIU	A2,R0,0001
JAL	7000DDD0
LW	A0,000C (T0)
LW	T4,003C (SP)
OR	A2,R0,R0
LW	A0,0004 (T4)
JAL	7000DF10
OR	A1,T4,R0
LW	T1,002C (SP)
OR	A1,R0,R0
OR	A2,R0,R0
JAL	7000DF10
LW	A0,0010 (T1)
BEQ	R0,R0,7001E630
NOP
NOP
NOP
NOP
NOP
NOP
NOP
LW	RA,001C (SP)
ADDIU	SP,SP,0040
JR	RA
NOP

7001E9C0
ADDIU	SP,SP,FFF0
SW	R0,0008 (SP)
SW	A0,0004 (SP)
BLEZ	A1,7001EA10
SW	R0,000C (SP)
LW	T7,0004 (SP)
LW	T6,0008 (SP)
LW	T3,000C (SP)
LBU	T8,0000 (T7)
ADDIU	T0,T7,0001
ADDIU	T4,T3,0001
ADDU	T9,T6,T8
SW	T9,0008 (SP)
LW	T1,0008 (SP)
SLT	AT,T4,A1
SW	T4,000C (SP)
ANDI	T2,T1,FFFF
SW	T0,0004 (SP)
BNE	AT,R0,7001E9D4
SW	T2,0008 (SP)
LHU	V0,000A (SP)
JR	RA
ADDIU	SP,SP,0010

7001EA1C
ADDIU	SP,SP,FFF8
SH	R0,0006 (SP)
SH	R0,0000 (A2)
LHU	T6,0000 (A2)
SH	T6,0000 (A1)
SW	R0,0000 (SP)
LW	T7,0000 (SP)
ADDU	T8,A0,T7
LHU	T9,0000 (T8)
SH	T9,0006 (SP)
LHU	T0,0000 (A1)
ADDU	T1,T0,T9
SH	T1,0000 (A1)
LHU	T3,0006 (SP)
LHU	T2,0000 (A2)
NOR	T4,T3,R0
ADDU	T5,T2,T4
SH	T5,0000 (A2)
LW	T6,0000 (SP)
ADDIU	T7,T6,0002
SLTIU	AT,T7,001C
BNE	AT,R0,7001EA34
SW	T7,0000 (SP)
OR	V0,R0,R0
JR	RA
ADDIU	SP,SP,0008

7001EA84
ADDIU	SP,SP,FF88
SW	A0,0078 (SP)
LW	T6,0078 (SP)
SW	RA,001C (SP)
SW	A1,007C (SP)
SW	A2,0080 (SP)
SW	R0,0074 (SP)
SB	R0,0033 (SP)
LBU	T7,0065 (T6)
BEQ	T7,R0,7001EAD4
NOP
SB	R0,0065 (T6)
JAL	7001F6AC
LW	A0,0078 (SP)
SW	V0,0074 (SP)
LW	T8,0074 (SP)
BEQ	T8,R0,7001EAD4
NOP
BEQ	R0,R0,7001EE8C
OR	V0,T8,R0
LW	T0,0080 (SP)
ADDIU	T9,R0,FFFF
JAL	7000D8E0	;V0=Count
SW	T9,0000 (T0)
LW	T1,0080 (SP)
SW	V0,0004 (T1)
LW	T2,007C (SP)
LW	T3,0080 (SP)
LW	T4,0008 (T2)
LW	T5,000C (T2)
SW	T4,0008 (T3)
SW	T5,000C (T3)
LW	T7,007C (SP)
LW	T8,0080 (SP)
LW	T6,0010 (T7)
LW	T7,0014 (T7)
SW	T6,0010 (T8)
SW	T7,0014 (T8)
SW	R0,0028 (SP)
LW	T9,0028 (SP)
LW	T0,0078 (SP)
SB	T9,0065 (T0)
JAL	7001F6AC
LW	A0,0078 (SP)
SW	V0,0074 (SP)
LW	T1,0074 (SP)
BEQ	T1,R0,7001EB4C
NOP
BEQ	R0,R0,7001EE8C
OR	V0,T1,R0
LW	T2,0078 (SP)
OR	A2,R0,R0
ADDIU	A3,SP,0054
LW	A0,0004 (T2)
JAL	700164B0	;reads block A2 from controller A1 to @A3
LW	A1,0008 (T2)
SW	V0,0074 (SP)
LW	T4,0074 (SP)
BEQ	T4,R0,7001EB7C
NOP
BEQ	R0,R0,7001EE8C
OR	V0,T4,R0
LW	T5,0028 (SP)
ADDIU	T6,SP,0054
ADDIU	T7,R0,0001
ORI	T3,T5,0080
SB	T3,0000 (T6)
SW	T7,002C (SP)
LW	T8,002C (SP)
ADDIU	T9,SP,0054
ADDU	T0,T8,T9
LBU	T1,0000 (T0)
NOR	T2,T1,R0
SB	T2,0000 (T0)
LW	T4,002C (SP)
ADDIU	T5,T4,0001
SLTI	AT,T5,0020
BNE	AT,R0,7001EB94
SW	T5,002C (SP)
LW	T3,0078 (SP)
OR	A2,R0,R0
ADDIU	A3,SP,0054
LW	A0,0004 (T3)
LW	A1,0008 (T3)
JAL	70016100	;sends data A3 to controller slot A1 at address A2, returning status
SW	R0,0010 (SP)
SW	V0,0074 (SP)
LW	T6,0074 (SP)
BEQ	T6,R0,7001EBF4
NOP
BEQ	R0,R0,7001EE8C
OR	V0,T6,R0
LW	T7,0078 (SP)
OR	A2,R0,R0
ADDIU	A3,SP,0034
LW	A0,0004 (T7)
JAL	700164B0	;reads block A2 from controller A1 to @A3
LW	A1,0008 (T7)
SW	V0,0074 (SP)
LW	T8,0074 (SP)
BEQ	T8,R0,7001EC24
NOP
BEQ	R0,R0,7001EE8C
OR	V0,T8,R0
SW	R0,002C (SP)
LW	T9,002C (SP)
ADDU	T1,SP,T9
ADDU	T2,SP,T9
LBU	T2,0034 (T2)
LBU	T1,0054 (T1)
BNE	T1,T2,7001EC58
NOP
LW	T0,002C (SP)
ADDIU	T4,T0,0001
SLTI	AT,T4,0020
BNE	AT,R0,7001EC28
SW	T4,002C (SP)
LW	T5,002C (SP)
ADDIU	AT,R0,0020
BNE	T5,AT,7001ECFC
NOP
LW	T3,0028 (SP)
BLEZ	T3,7001ECE0
NOP
LW	T6,0078 (SP)
SB	R0,0065 (T6)
JAL	7001F6AC
LW	A0,0078 (SP)
SW	V0,0074 (SP)
LW	T7,0074 (SP)
BEQ	T7,R0,7001EC9C
NOP
BEQ	R0,R0,7001EE8C
OR	V0,T7,R0
LW	T8,0078 (SP)
OR	A2,R0,R0
ADDIU	A3,SP,0054
LW	A0,0004 (T8)
JAL	700164B0	;reads block A2 from controller A1 to @A3
LW	A1,0008 (T8)
SW	V0,0074 (SP)
LW	T9,0074 (SP)
BEQ	T9,R0,7001ECCC
NOP
BEQ	R0,R0,7001EE8C
OR	V0,T9,R0
ADDIU	T1,SP,0054
LBU	T2,0000 (T1)
ADDIU	AT,R0,0080
BNE	T2,AT,7001ECFC
NOP
LW	T0,0028 (SP)
ADDIU	T4,T0,0001
SW	T4,0028 (SP)
LW	T5,0028 (SP)
SLTI	AT,T5,003E
BNE	AT,R0,7001EB20
NOP
LW	T3,0078 (SP)
SB	R0,0065 (T3)
JAL	7001F6AC
LW	A0,0078 (SP)
SW	V0,0074 (SP)
LW	T6,0074 (SP)
BEQ	T6,R0,7001ED24
NOP
BEQ	R0,R0,7001EE8C
OR	V0,T6,R0
LW	T7,0028 (SP)
BLEZ	T7,7001ED3C
NOP
ADDIU	T8,R0,0001
BEQ	R0,R0,7001ED40
SB	T8,0033 (SP)
SB	R0,0033 (SP)
LW	T9,007C (SP)
LBU	T0,0033 (SP)
LW	T5,0080 (SP)
LHU	T1,0018 (T9)
ANDI	T2,T1,FFFE
OR	T4,T2,T0
SH	T4,0018 (T5)
LW	T6,0080 (SP)
LW	T3,0028 (SP)
SB	T3,001A (T6)
LW	T7,007C (SP)
LW	T9,0080 (SP)
LBU	T8,001B (T7)
SB	T8,001B (T9)
LW	T1,0080 (SP)
OR	A0,T1,R0
ADDIU	A1,T1,001C
JAL	7001EA1C
ADDIU	A2,T1,001E
ADDIU	T2,R0,0001
ADDIU	T0,SP,0020
SH	T2,0000 (T0)
ADDIU	T4,R0,0003
ADDIU	T5,SP,0020
SH	T4,0002 (T5)
ADDIU	T3,R0,0004
ADDIU	T6,SP,0020
SH	T3,0004 (T6)
ADDIU	T7,R0,0006
ADDIU	T8,SP,0020
SH	T7,0006 (T8)
SW	R0,002C (SP)
LW	T1,002C (SP)
LW	T9,0078 (SP)
ADDIU	T0,R0,0001
SLL	T2,T1,0x1
ADDU	A2,SP,T2
LHU	A2,0020 (A2)
LW	A0,0004 (T9)
LW	A1,0008 (T9)
SW	T0,0010 (SP)
JAL	70016100	;sends data A3 to controller slot A1 at address A2, returning status
LW	A3,0080 (SP)
SW	V0,0074 (SP)
LW	T4,0074 (SP)
BEQ	T4,R0,7001EE04
NOP
BEQ	R0,R0,7001EE8C
OR	V0,T4,R0
LW	T5,002C (SP)
ADDIU	T3,T5,0001
SLTI	AT,T3,0004
BNE	AT,R0,7001EDC0
SW	T3,002C (SP)
LW	T6,0078 (SP)
ADDIU	A2,R0,0001
ADDIU	A3,SP,0054
LW	A0,0004 (T6)
JAL	700164B0	;reads block A2 from controller A1 to @A3
LW	A1,0008 (T6)
SW	V0,0074 (SP)
LW	T7,0074 (SP)
BEQ	T7,R0,7001EE48
NOP
BEQ	R0,R0,7001EE8C
OR	V0,T7,R0
SW	R0,002C (SP)
LW	T9,002C (SP)
LW	T8,0080 (SP)
ADDU	T0,SP,T9
ADDU	T1,T8,T9
LBU	T2,0000 (T1)
LBU	T0,0054 (T0)
BEQ	T2,T0,7001EE74
NOP
BEQ	R0,R0,7001EE8C
ADDIU	V0,R0,000A
LW	T4,002C (SP)
ADDIU	T5,T4,0001
SLTI	AT,T5,0020
BNE	AT,R0,7001EE4C
SW	T5,002C (SP)
OR	V0,R0,R0
LW	RA,001C (SP)
ADDIU	SP,SP,0078
JR	RA
NOP

7001EE9C
ADDIU	SP,SP,FFC8
SW	A0,0038 (SP)
LW	T6,0038 (SP)
SW	RA,001C (SP)
SW	A1,003C (SP)
SW	R0,002C (SP)
LBU	T7,0065 (T6)
BEQ	T7,R0,7001EEE4
NOP
SB	R0,0065 (T6)
JAL	7001F6AC
LW	A0,0038 (SP)
SW	V0,002C (SP)
LW	T8,002C (SP)
BEQ	T8,R0,7001EEE4
NOP
BEQ	R0,R0,7001F024
OR	V0,T8,R0
ADDIU	T9,R0,0001
ADDIU	T0,SP,0030
SH	T9,0000 (T0)
ADDIU	T1,R0,0003
ADDIU	T2,SP,0030
SH	T1,0002 (T2)
ADDIU	T3,R0,0004
ADDIU	T4,SP,0030
SH	T3,0004 (T4)
ADDIU	T5,R0,0006
ADDIU	T7,SP,0030
SH	T5,0006 (T7)
ADDIU	T6,R0,0001
SW	T6,0024 (SP)
LW	T9,0024 (SP)
LW	T8,0038 (SP)
LW	A3,003C (SP)
SLL	T0,T9,0x1
ADDU	A2,SP,T0
LHU	A2,0030 (A2)
LW	A0,0004 (T8)
JAL	700164B0	;reads block A2 from controller A1 to @A3
LW	A1,0008 (T8)
SW	V0,002C (SP)
LW	T1,002C (SP)
BEQ	T1,R0,7001EF58
NOP
BEQ	R0,R0,7001F024
OR	V0,T1,R0
LW	A0,003C (SP)
ADDIU	A1,SP,002A
JAL	7001EA1C
ADDIU	A2,SP,0028
LW	T2,003C (SP)
LHU	T4,002A (SP)
LHU	T3,001C (T2)
BNE	T3,T4,7001EF8C
NOP
LHU	T5,001E (T2)
LHU	T7,0028 (SP)
BEQ	T5,T7,7001EFA0
NOP
LW	T6,0024 (SP)
ADDIU	T8,T6,0001
SLTI	AT,T8,0004
BNE	AT,R0,7001EF1C
SW	T8,0024 (SP)
LW	T9,0024 (SP)
ADDIU	AT,R0,0004
BNE	T9,AT,7001EFB8
NOP
BEQ	R0,R0,7001F024
ADDIU	V0,R0,000A
SW	R0,0020 (SP)
LW	T0,0020 (SP)
LW	T1,0024 (SP)
BEQ	T0,T1,7001F00C
NOP
LW	T3,0038 (SP)
SLL	T4,T0,0x1
ADDU	A2,SP,T4
LHU	A2,0030 (A2)
ADDIU	T2,R0,0001
LW	A0,0004 (T3)
LW	A1,0008 (T3)
SW	T2,0010 (SP)
JAL	70016100	;sends data A3 to controller slot A1 at address A2, returning status
LW	A3,003C (SP)
SW	V0,002C (SP)
LW	T5,002C (SP)
BEQ	T5,R0,7001F00C
NOP
BEQ	R0,R0,7001F024
OR	V0,T5,R0
LW	T7,0020 (SP)
ADDIU	T6,T7,0001
SLTI	AT,T6,0004
BNE	AT,R0,7001EFBC
SW	T6,0020 (SP)
OR	V0,R0,R0
LW	RA,001C (SP)
ADDIU	SP,SP,0038
JR	RA
NOP

7001F034
ADDIU	SP,SP,FF98
SW	A0,0068 (SP)
LW	T6,0068 (SP)
SW	RA,0014 (SP)
LBU	T7,0065 (T6)
BEQ	T7,R0,7001F074
NOP
SB	R0,0065 (T6)
JAL	7001F6AC
LW	A0,0068 (SP)
SW	V0,001C (SP)
LW	T8,001C (SP)
BEQ	T8,R0,7001F074
NOP
BEQ	R0,R0,7001F280
OR	V0,T8,R0
LW	T9,0068 (SP)
ADDIU	A2,R0,0001
ADDIU	A3,SP,0040
LW	A0,0004 (T9)
JAL	700164B0	;reads block A2 from controller A1 to @A3
LW	A1,0008 (T9)
SW	V0,001C (SP)
LW	T0,001C (SP)
BEQ	T0,R0,7001F0A4
NOP
BEQ	R0,R0,7001F280
OR	V0,T0,R0
ADDIU	A0,SP,0040
ADDIU	A1,SP,0062
JAL	7001EA1C
ADDIU	A2,SP,0060
ADDIU	T1,SP,0040
SW	T1,0018 (SP)
LHU	T2,001C (T1)
LHU	T3,0062 (SP)
BNE	T2,T3,7001F0DC
NOP
LHU	T4,001E (T1)
LHU	T5,0060 (SP)
BEQ	T4,T5,7001F144
NOP
LW	A0,0068 (SP)
JAL	7001EE9C
LW	A1,0018 (SP)
SW	V0,001C (SP)
LW	T7,001C (SP)
ADDIU	AT,R0,000A
BNE	T7,AT,7001F130
NOP
LW	A0,0068 (SP)
LW	A1,0018 (SP)
JAL	7001EA84
ADDIU	A2,SP,0020
SW	V0,001C (SP)
LW	T6,001C (SP)
BEQ	T6,R0,7001F124
NOP
BEQ	R0,R0,7001F280
OR	V0,T6,R0
ADDIU	T8,SP,0020
BEQ	R0,R0,7001F144
SW	T8,0018 (SP)
LW	T9,001C (SP)
BEQ	T9,R0,7001F144
NOP
BEQ	R0,R0,7001F280
OR	V0,T9,R0
LW	T0,0018 (SP)
LHU	T2,0018 (T0)
ANDI	T3,T2,0001
BNE	T3,R0,7001F1A0
NOP
LW	A0,0068 (SP)
OR	A1,T0,R0
JAL	7001EA84
ADDIU	A2,SP,0020
SW	V0,001C (SP)
LW	T1,001C (SP)
BEQ	T1,R0,7001F180
NOP
BEQ	R0,R0,7001F280
OR	V0,T1,R0
ADDIU	T4,SP,0020
SW	T4,0018 (SP)
LHU	T5,0018 (T4)
ANDI	T7,T5,0001
BNE	T7,R0,7001F1A0
NOP
BEQ	R0,R0,7001F280
ADDIU	V0,R0,000B
SW	R0,0064 (SP)
LW	T6,0018 (SP)
LW	T8,0064 (SP)
LW	T3,0068 (SP)
ADDU	T9,T6,T8
LBU	T2,0000 (T9)
ADDU	T0,T3,T8
SB	T2,000C (T0)
LW	T1,0064 (SP)
ADDIU	T4,T1,0001
SLTI	AT,T4,0020
BNE	AT,R0,7001F1A4
SW	T4,0064 (SP)
LW	T5,0018 (SP)
LW	T6,0068 (SP)
ADDIU	A2,R0,0007
LBU	T7,001B (T5)
ADDIU	T5,R0,0010
SW	T7,004C (T6)
LW	T9,0018 (SP)
LW	T8,0068 (SP)
ADDIU	T6,R0,0008
LBU	T3,001A (T9)
SB	T3,0064 (T8)
LW	T2,0068 (SP)
LBU	T0,0064 (T2)
SLL	T1,T0,0x1
ADDIU	T4,T1,0003
SW	T4,0060 (T2)
LW	T7,0068 (SP)
SW	T5,0050 (T7)
LW	T9,0068 (SP)
SW	T6,0054 (T9)
LW	T3,0068 (SP)
LBU	T8,0064 (T3)
SLL	T0,T8,0x3
ADDIU	T1,T0,0008
SW	T1,0058 (T3)
LW	T4,0068 (SP)
LBU	T5,0064 (T4)
LW	T2,0058 (T4)
SLL	T7,T5,0x3
ADDU	T6,T2,T7
SW	T6,005C (T4)
LW	T9,0068 (SP)
LW	A0,0004 (T9)
LW	A1,0008 (T9)
JAL	700164B0	;reads block A2 from controller A1 to @A3
ADDIU	A3,T9,002C
SW	V0,001C (SP)
LW	T8,001C (SP)
BEQ	T8,R0,7001F27C
NOP
BEQ	R0,R0,7001F280
OR	V0,T8,R0
OR	V0,R0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0068
JR	RA
NOP

7001F290
ADDIU	SP,SP,FFC0
SW	A0,0040 (SP)
LW	T6,0040 (SP)
SW	RA,0014 (SP)
LBU	T7,0065 (T6)
BEQ	T7,R0,7001F2D0
NOP
SB	R0,0065 (T6)
JAL	7001F6AC
LW	A0,0040 (SP)
SW	V0,0018 (SP)
LW	T8,0018 (SP)
BEQ	T8,R0,7001F2D0
NOP
BEQ	R0,R0,7001F37C
OR	V0,T8,R0
LW	T9,0040 (SP)
ADDIU	A2,R0,0001
ADDIU	A3,SP,001C
LW	A0,0004 (T9)
JAL	700164B0	;reads block A2 from controller A1 to @A3
LW	A1,0008 (T9)
SW	V0,0018 (SP)
LW	T0,0018 (SP)
BEQ	T0,R0,7001F338
ADDIU	AT,R0,0002
BEQ	T0,AT,7001F308
NOP
BEQ	R0,R0,7001F37C
OR	V0,T0,R0
LW	T1,0040 (SP)
ADDIU	A2,R0,0001
ADDIU	A3,SP,001C
LW	A0,0004 (T1)
JAL	700164B0	;reads block A2 from controller A1 to @A3
LW	A1,0008 (T1)
SW	V0,0018 (SP)
LW	T2,0018 (SP)
BEQ	T2,R0,7001F338
NOP
BEQ	R0,R0,7001F37C
OR	V0,T2,R0
SW	R0,003C (SP)
LW	T3,003C (SP)
LW	T5,0040 (SP)
ADDU	T4,SP,T3
ADDU	T7,T5,T3
LBU	T6,000C (T7)
LBU	T4,001C (T4)
BEQ	T4,T6,7001F364
NOP
BEQ	R0,R0,7001F37C
ADDIU	V0,R0,0002
LW	T8,003C (SP)
ADDIU	T9,T8,0001
SLTI	AT,T9,0020
BNE	AT,R0,7001F33C
SW	T9,003C (SP)
OR	V0,R0,R0
LW	RA,0014 (SP)
ADDIU	SP,SP,0040
JR	RA
NOP

7001F38C
ADDIU	SP,SP,FFC8
SW	A0,0038 (SP)
LW	T6,0038 (SP)
SW	RA,001C (SP)
SW	A1,003C (SP)
SW	A2,0040 (SP)
SW	A3,0044 (SP)
LBU	T7,0065 (T6)
BEQ	T7,R0,7001F3D8
NOP
SB	R0,0065 (T6)
JAL	7001F6AC
LW	A0,0038 (SP)
SW	V0,002C (SP)
LW	T8,002C (SP)
BEQ	T8,R0,7001F3D8
NOP
BEQ	R0,R0,7001F69C
OR	V0,T8,R0
LBU	T9,0047 (SP)
BLEZ	T9,7001F3F0
NOP
ADDIU	T0,R0,0001
BEQ	R0,R0,7001F3FC
SW	T0,0028 (SP)
LW	T1,0038 (SP)
LW	T2,0060 (T1)
SW	T2,0028 (SP)
LBU	T3,0043 (SP)
ADDIU	AT,R0,0001
BNE	T3,AT,7001F438
NOP
LW	T5,0028 (SP)
LW	T4,003C (SP)
SUBU	A1,R0,T5
SLL	T6,A1,0x1
OR	A1,T6,R0
SLL	T7,T5,0x1
ADDIU	A1,A1,0100
JAL	7001E9C0
ADDU	A0,T4,T7
LW	T8,003C (SP)
SB	V0,0001 (T8)
SW	R0,0030 (SP)
LW	T0,0030 (SP)
LW	T9,003C (SP)
LBU	T3,0043 (SP)
SLL	T1,T0,0x5
ADDIU	AT,R0,0001
ADDU	T2,T9,T1
BNE	T3,AT,7001F4C4
SW	T2,0024 (SP)
LW	T4,0038 (SP)
LBU	T5,0047 (SP)
OR	A3,T2,R0
LW	T7,0054 (T4)
SLL	T6,T5,0x3
LW	A0,0004 (T4)
LW	A1,0008 (T4)
ADDU	T8,T7,T6
ADDU	A2,T8,T0
JAL	70016100	;sends data A3 to controller slot A1 at address A2, returning status
SW	R0,0010 (SP)
LW	T9,0038 (SP)
LBU	T3,0047 (SP)
SW	V0,002C (SP)
LW	T1,0058 (T9)
LW	T7,0030 (SP)
SLL	T4,T3,0x3
LW	A1,0008 (T9)
LW	A0,0004 (T9)
ADDU	T5,T1,T4
SW	R0,0010 (SP)
LW	A3,0024 (SP)
JAL	70016100	;sends data A3 to controller slot A1 at address A2, returning status
ADDU	A2,T5,T7
BEQ	R0,R0,7001F4F4
SW	V0,002C (SP)
LW	T6,0038 (SP)
LBU	T0,0047 (SP)
LW	T3,0030 (SP)
LW	T8,0054 (T6)
SLL	T2,T0,0x3
LW	A3,0024 (SP)
ADDU	T9,T8,T2
LW	A0,0004 (T6)
LW	A1,0008 (T6)
JAL	700164B0	;reads block A2 from controller A1 to @A3
ADDU	A2,T9,T3
SW	V0,002C (SP)
LW	T1,002C (SP)
BEQ	T1,R0,7001F508
NOP
BEQ	R0,R0,7001F69C
OR	V0,T1,R0
LW	T4,0030 (SP)
ADDIU	T5,T4,0001
SLTI	AT,T5,0008
BNE	AT,R0,7001F43C
SW	T5,0030 (SP)
LBU	T7,0043 (SP)
BNE	T7,R0,7001F698
NOP
LW	T0,0028 (SP)
LW	T6,003C (SP)
SUBU	A1,R0,T0
SLL	T2,A1,0x1
OR	A1,T2,R0
SLL	T8,T0,0x1
ADDIU	A1,A1,0100
JAL	7001E9C0
ADDU	A0,T6,T8
LW	T9,003C (SP)
SB	V0,0037 (SP)
LBU	T1,0037 (SP)
LBU	T3,0001 (T9)
BEQ	T3,T1,7001F63C
NOP
SW	R0,0030 (SP)
LW	T5,0030 (SP)
LW	T4,003C (SP)
LW	T8,0038 (SP)
SLL	T7,T5,0x5
ADDU	T6,T4,T7
LBU	T2,0047 (SP)
SW	T6,0024 (SP)
LW	T0,0058 (T8)
SLL	T9,T2,0x3
OR	A3,T6,R0
ADDU	T3,T0,T9
ADDU	A2,T3,T5
LW	A1,0008 (T8)
JAL	700164B0	;reads block A2 from controller A1 to @A3
LW	A0,0004 (T8)
LW	T1,0030 (SP)
SW	V0,002C (SP)
ADDIU	T4,T1,0001
SLTI	AT,T4,0008
BNE	AT,R0,7001F568
SW	T4,0030 (SP)
LW	T7,003C (SP)
LBU	T2,0037 (SP)
LBU	T8,0001 (T7)
BEQ	T8,T2,7001F5D8
NOP
BEQ	R0,R0,7001F69C
ADDIU	V0,R0,0003
SW	R0,0030 (SP)
LW	T9,0030 (SP)
LW	T0,003C (SP)
LW	T6,0038 (SP)
SLL	T3,T9,0x5
ADDU	T5,T0,T3
LBU	T4,0047 (SP)
SW	T5,0024 (SP)
LW	T1,0054 (T6)
SLL	T7,T4,0x3
LW	A1,0008 (T6)
LW	A0,0004 (T6)
ADDU	T8,T1,T7
SW	R0,0010 (SP)
OR	A3,T5,R0
JAL	70016100	;sends data A3 to controller slot A1 at address A2, returning status
ADDU	A2,T8,T9
LW	T2,0030 (SP)
SW	V0,002C (SP)
ADDIU	T0,T2,0001
SLTI	AT,T0,0008
BNE	AT,R0,7001F5DC
SW	T0,0030 (SP)
BEQ	R0,R0,7001F698
NOP
SW	R0,0030 (SP)
LW	T6,0030 (SP)
LW	T3,003C (SP)
LW	T7,0038 (SP)
SLL	T4,T6,0x5
ADDU	T1,T3,T4
LBU	T9,0047 (SP)
SW	T1,0024 (SP)
LW	T8,0058 (T7)
SLL	T5,T9,0x3
LW	A1,0008 (T7)
LW	A0,0004 (T7)
ADDU	T2,T8,T5
SW	R0,0010 (SP)
OR	A3,T1,R0
JAL	70016100	;sends data A3 to controller slot A1 at address A2, returning status
ADDU	A2,T2,T6
LW	T0,0030 (SP)
SW	V0,002C (SP)
ADDIU	T3,T0,0001
SLTI	AT,T3,0008
BNE	AT,R0,7001F640
SW	T3,0030 (SP)
OR	V0,R0,R0
LW	RA,001C (SP)
ADDIU	SP,SP,0038
JR	RA
NOP

7001F6AC
ADDIU	SP,SP,FFB8
SW	RA,001C (SP)
SW	A0,0048 (SP)
SW	R0,0020 (SP)
SW	R0,0024 (SP)
LW	T6,0048 (SP)
LW	T8,0024 (SP)
LBU	T7,0065 (T6)
ADDU	T9,SP,T8
SB	T7,0028 (T9)
LW	T0,0024 (SP)
ADDIU	T1,T0,0001
SLTI	AT,T1,0020
BNE	AT,R0,7001F6C0
SW	T1,0024 (SP)
LW	T2,0048 (SP)
ADDIU	A2,R0,0400
ADDIU	A3,SP,0028
LW	A0,0004 (T2)
LW	A1,0008 (T2)
JAL	70016100	;sends data A3 to controller slot A1 at address A2, returning status
SW	R0,0010 (SP)
LW	RA,001C (SP)
SW	V0,0020 (SP)
LW	V0,0020 (SP)
JR	RA
ADDIU	SP,SP,0048

7001F720
LUI	T6,A480
LW	A0,0018 (T6)
ADDIU	SP,SP,FFF8
ANDI	T7,A0,0003
BEQ	T7,R0,7001F740
NOP
BEQ	R0,R0,7001F744
ADDIU	V0,R0,0001
OR	V0,R0,R0
JR	RA
ADDIU	SP,SP,0008

7001F750
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LWC1	F2,0000 (A0)
LWC1	F14,0000 (A1)
LWC1	F0,0000 (A2)
MUL.S	F4,F2,F2
SW	A2,0020 (SP)
SW	A1,001C (SP)
MUL.S	F6,F14,F14
SW	A0,0018 (SP)
MUL.S	F10,F0,F0
ADD.S	F8,F4,F6
JAL	7001F7E0	;F0= square root of F12
ADD.S	F12,F10,F8
LUI	AT,3F80
MTC1	AT,F16
LW	A0,0018 (SP)
LW	A1,001C (SP)
DIV.S	F2,F16,F0
LWC1	F18,0000 (A0)
LW	A2,0020 (SP)
MUL.S	F4,F18,F2
SWC1	F4,0000 (A0)
LWC1	F6,0000 (A1)
MUL.S	F10,F6,F2
SWC1	F10,0000 (A1)
LWC1	F8,0000 (A2)
MUL.S	F16,F8,F2
SWC1	F16,0000 (A2)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7001F7E0	203E0	F0= square root of F12
JR	RA
SQRT.S	F0,F12

7001F7F0	203F0	sets PI Domain 2 hardware entry for 64DD; V0=p->entry (80069000)
BSD hardware entry format:
	0x0	4	p->previous read settings?
	0x4	1	type: 0-cart, 2-disk, 8-flash
	0x5	1	Latency
	0x6	1	Page Size
	0x7	1	Release Duration
	0x8	1	Pulse Width
	0x9	1	domain: 0-dom1, 1-dom2
	0xA	2	RESERVED
	0xC	4	p->hardware
ADDIU	T6,R0,0002
LUI	AT,8007
SB	T6,9004 (AT)	;80069004 = 2
LUI	AT,8007
LUI	T7,A500
SW	T7,900C (AT)	;8006900C = A5000000
LUI	AT,8007
ADDIU	T8,R0,0003
SB	T8,9005 (AT)	;80069005 = 3
LUI	AT,8007
ADDIU	T9,R0,0006
SB	T9,9008 (AT)	;80069008 = 6
LUI	AT,8007
ADDIU	SP,SP,FFE0
ADDIU	T0,R0,0006
ADDIU	T1,R0,0002
SW	RA,0014 (SP)
SB	T0,9006 (AT)	;80069006 = 6
SB	T1,9007 (AT)	;80069007 = 2
ADDIU	T2,R0,0003
LUI	T3,A460
SW	T2,0024 (T3)	;A4600024 = 3: PI BSD Domain 2 Latency
LUI	T4,8007
LBU	T4,9008 (T4)	;T4= 6
LUI	T5,A460
LUI	T6,8007
SW	T4,0028 (T5)	;A4600028 = 6: PI BSD Domain 2 Pulse Width
LBU	T6,9006 (T6)	;T6= 6
LUI	T7,A460
LUI	T8,8007
SW	T6,002C (T7)	;A460002C = 6: PI BSD Domain 2 Page Size
LBU	T8,9007 (T8)	;T8= 2
LUI	A0,8007
LUI	T9,A460
ADDIU	A0,A0,9000	;A0= 80069000
ADDIU	A0,A0,0014
ADDIU	A1,R0,0060	;A1=60
JAL	70017C40	;initialize A1 bytes at A0 to zero
SW	T8,0030 (T9)	;A4600030 = 2: PI BSD Domain 2 Release Duration
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
NOP
LUI	T0,8002
LW	T0,77AC (T0)	;T0=800277AC: 
LUI	AT,8007
LUI	T1,8007
SW	T0,9000 (AT)	;T0->80069000: 
LUI	AT,8002
ADDIU	T1,T1,9000
SW	T1,77AC (AT)	;80069000->800277AC: 
SW	V0,001C (SP)
LUI	AT,8007
SW	T1,9074 (AT)	;80069000->80069074: 
JAL	70018610	;A0->COP0 status
LW	A0,001C (SP)	;A0= int.enabled flag
LW	RA,0014 (SP)
LUI	V0,8007
ADDIU	V0,V0,9000	;V0= 80069000
JR	RA
ADDIU	SP,SP,0020

7001F8E0	204E0	A0->COP0 Compare
MTC0	A0,Compare/DPC-Status
JR	RA
NOP

7001F8F0	204F0	
	accepts: A0=p->???, A1=p->function, A2=p->function, A3=value
SW	R0,0000 (A0)
SW	A1,0004 (A0)
SW	A2,0008 (A0)
SH	R0,000C (A0)
SH	R0,000E (A0)
JR	RA
SW	A3,0010 (A0)

7001F910
MTC1	A1,F6
LWC1	F4,0010 (A0)
LWC1	F16,0014 (A0)
CVT.S.W	F8,F6
LUI	AT,4000
MTC1	AT,F5
LUI	AT,4010
MUL.S	F10,F4,F8
MTC1	R0,F4
ADD.S	F18,F16,F10
SWC1	F18,0014 (A0)
LWC1	F6,0014 (A0)
CVT.D.S	F0,F6
MTC1	R0,F6
C.LT.D	F4,F0
NOP
BC1FL	7001F978
CVT.S.D	F18,F0
MTC1	AT,F9
MTC1	R0,F8
NOP
SUB.D	F16,F0,F8
CVT.S.D	F10,F16
BEQ	R0,R0,7001F97C
SWC1	F10,0014 (A0)
CVT.S.D	F18,F0
SWC1	F18,0014 (A0)
LWC1	F2,0014 (A0)
LUI	AT,3FF0
MTC1	AT,F9
C.LT.S	F2,F6
MTC1	R0,F8
BC1FL	7001F9A0
CVT.D.S	F4,F2
NEG.S	F2,F2
CVT.D.S	F4,F2
LWC1	F10,001C (A0)
SUB.D	F16,F4,F8
CVT.S.D	F2,F16
MUL.S	F0,F10,F2
JR	RA
NOP

7001F9B8
ADDIU	SP,SP,FFD8
SW	RA,0014 (SP)
ANDI	V0,A1,FFFF
SLL	T8,A2,0x1
ANDI	T9,T8,FFFF
SLL	T7,V0,0x10
LUI	AT,0800
LUI	T2,0B00
OR	T6,V0,AT
OR	T1,T7,T9
ORI	T2,T2,0020
OR	T0,A0,R0
SW	T1,0004 (A3)
SW	T6,0000 (A3)
SW	T2,0008 (A3)
SW	T0,0028 (SP)
SW	A3,0034 (SP)
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
ADDIU	A0,A0,0008
LW	A3,0034 (SP)
LW	T0,0028 (SP)
LUI	AT,0E00
ADDIU	V1,A3,0010
ADDIU	T3,V1,0008
SW	V0,000C (A3)
SW	T3,0024 (SP)
LW	T4,002C (T0)
LH	T7,0002 (T0)
ANDI	T5,T4,00FF
SLL	T6,T5,0x10
OR	T8,T6,AT
ANDI	T9,T7,FFFF
OR	T1,T8,T9
SW	T1,0000 (V1)
LW	A0,0028 (T0)
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
SW	V1,0018 (SP)
LW	A1,0018 (SP)
LW	T0,0028 (SP)
SW	V0,0004 (A1)
SW	R0,002C (T0)
LW	RA,0014 (SP)
LW	V0,0024 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

7001FA70
ADDIU	SP,SP,FFA0
SW	RA,001C (SP)
SW	S0,0018 (SP)
LW	V1,001C (A0)
LW	V0,0014 (A0)
LW	T0,0070 (SP)
SLL	T6,V1,0x1
SLTU	AT,A1,V0
OR	T2,A0,R0
OR	T5,A2,R0
OR	T3,A3,R0
BEQ	AT,R0,7001FAA8
ADDU	T1,V0,T6
ADDU	A1,A1,T6
SLL	A2,T3,0x1
ADDU	A3,A2,A1
SLTU	AT,T1,A3
BEQ	AT,R0,7001FBA8
ADDIU	S0,T0,0008
SUBU	T3,T1,A1
SRA	T8,T3,0x1
LUI	T7,0800
SW	T7,0000 (T0)
SLL	T3,T8,0x1
ANDI	T8,T3,FFFF
SLL	T7,T5,0x10
OR	T9,T7,T8
ADDIU	S0,T0,0008
SW	T9,0004 (T0)
OR	T4,S0,R0
LUI	T6,0600
SW	T6,0000 (T4)
SW	T5,0068 (SP)
SW	T4,0044 (SP)
SW	T3,0024 (SP)
SW	T2,0060 (SP)
SW	T1,004C (SP)
SW	A3,0028 (SP)
SW	A2,002C (SP)
ADDIU	S0,S0,0008
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
OR	A0,A1,R0
LW	T4,0044 (SP)
LW	A3,0028 (SP)
LW	T1,004C (SP)
LW	T3,0024 (SP)
LW	T5,0068 (SP)
LW	T2,0060 (SP)
OR	V1,S0,R0
LUI	T7,0800
SW	V0,0004 (T4)
SW	T7,0000 (V1)
SUBU	T7,A3,T1
ADDU	T9,T3,T5
SLL	T6,T9,0x10
SRA	T8,T7,0x1
SLL	T9,T8,0x1
ANDI	T7,T9,FFFF
OR	T8,T6,T7
ADDIU	S0,S0,0008
SW	T8,0004 (V1)
OR	A1,S0,R0
LUI	T9,0600
SW	T9,0000 (A1)
LW	A0,0014 (T2)
SW	A1,003C (SP)
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
ADDIU	S0,S0,0008
LW	A1,003C (SP)
LW	A2,002C (SP)
OR	V1,S0,R0
LUI	T6,0800
SW	V0,0004 (A1)
ANDI	T7,A2,FFFF
SW	T7,0004 (V1)
SW	T6,0000 (V1)
BEQ	R0,R0,7001FBE4
ADDIU	S0,S0,0008
LUI	T8,0800
SW	T8,0000 (T0)
SLL	T6,T5,0x10
ANDI	T7,A2,FFFF
OR	T8,T6,T7
SW	T8,0004 (T0)
OR	V1,S0,R0
LUI	T9,0600
SW	T9,0000 (V1)
SW	V1,0030 (SP)
ADDIU	S0,S0,0008
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
OR	A0,A1,R0
LW	V1,0030 (SP)
SW	V0,0004 (V1)
LW	RA,001C (SP)
OR	V0,S0,R0
LW	S0,0018 (SP)
JR	RA
ADDIU	SP,SP,0060

7001FBF8
ADDIU	SP,SP,FFA0
SW	RA,001C (SP)
SW	S0,0018 (SP)
LW	V1,001C (A0)
LW	V0,0014 (A0)
LW	T0,0070 (SP)
SLL	T6,V1,0x1
SLTU	AT,A1,V0
OR	T2,A0,R0
OR	T5,A2,R0
OR	T3,A3,R0
BEQ	AT,R0,7001FC30
ADDU	T1,V0,T6
ADDU	A1,A1,T6
SLL	A2,T3,0x1
ADDU	A3,A2,A1
SLTU	AT,T1,A3
BEQ	AT,R0,7001FD1C
ADDIU	S0,T0,0008
ANDI	T7,T5,FFFF
LUI	AT,0800
SUBU	T3,T1,A1
SRA	T9,T3,0x1
OR	T8,T7,AT
SLL	T6,T9,0x1
ANDI	T7,T6,FFFF
SW	T8,0000 (T0)
ADDIU	S0,T0,0008
SW	T7,0004 (T0)
OR	T4,S0,R0
LUI	T8,0400
SW	T8,0000 (T4)
SW	T5,0068 (SP)
SW	T4,0044 (SP)
SW	T6,0024 (SP)
SW	T2,0060 (SP)
SW	T1,004C (SP)
SW	A3,0028 (SP)
SW	A2,002C (SP)
ADDIU	S0,S0,0008
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
OR	A0,A1,R0
LW	T3,0024 (SP)
LW	T5,0068 (SP)
LW	A3,0028 (SP)
LW	T1,004C (SP)
LW	T4,0044 (SP)
ADDU	T9,T3,T5
ANDI	T6,T9,FFFF
LUI	AT,0800
LW	T2,0060 (SP)
OR	T7,T6,AT
SUBU	T8,A3,T1
SRA	T9,T8,0x1
OR	V1,S0,R0
SW	V0,0004 (T4)
SW	T7,0000 (V1)
SLL	T6,T9,0x1
ANDI	T7,T6,FFFF
ADDIU	S0,S0,0008
SW	T7,0004 (V1)
OR	A1,S0,R0
LUI	T8,0400
SW	T8,0000 (A1)
LW	A0,0014 (T2)
SW	A1,003C (SP)
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
ADDIU	S0,S0,0008
LW	A1,003C (SP)
LW	A2,002C (SP)
SW	V0,0004 (A1)
BEQ	R0,R0,7001FD60
ANDI	A3,A2,FFFF
ANDI	T9,T5,FFFF
LUI	AT,0800
OR	T6,T9,AT
ANDI	A3,A2,FFFF
SW	A3,0004 (T0)
SW	T6,0000 (T0)
OR	V1,S0,R0
LUI	T7,0400
SW	T7,0000 (V1)
SW	A3,0028 (SP)
SW	V1,0034 (SP)
ADDIU	S0,S0,0008
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
OR	A0,A1,R0
LW	V1,0034 (SP)
LW	A3,0028 (SP)
SW	V0,0004 (V1)
OR	V1,S0,R0
LUI	T8,0800
SW	T8,0000 (V1)
SW	A3,0004 (V1)
LW	RA,001C (SP)
ADDIU	V0,S0,0008
LW	S0,0018 (SP)
JR	RA
ADDIU	SP,SP,0060

7001FD84
ADDIU	SP,SP,FFA0
SW	RA,0024 (SP)
SW	S1,0020 (SP)
SW	S0,001C (SP)
SW	A2,0068 (SP)
LW	T6,0024 (A1)
OR	S0,A1,R0
OR	S1,A3,R0
BEQ	T6,R0,7001FF60
OR	T2,A0,R0
LW	T7,0004 (A1)
LW	T8,0000 (A1)
OR	A0,A1,R0
OR	A1,A3,R0
SUBU	T9,T7,T8
SW	T9,0038 (SP)
JAL	7001F910
SW	T2,0060 (SP)
LW	T4,0038 (SP)
LUI	AT,4700
MTC1	AT,F14
MTC1	T4,F6
LUI	AT,3FF0
MTC1	AT,F5
CVT.S.W	F8,F6
MTC1	R0,F4
LW	A0,0060 (SP)
ADDIU	A2,R0,0280
DIV.S	F10,F0,F8
MUL.S	F16,F10,F14
TRUNC.W.S	F18,F16
MFC1	T6,F18
NOP
MTC1	T6,F6
NOP
CVT.S.W	F8,F6
DIV.S	F10,F8,F14
MTC1	S1,F8
CVT.D.S	F16,F10
CVT.S.W	F10,F8
SUB.D	F18,F4,F16
CVT.S.D	F2,F18
MUL.S	F4,F2,F10
SWC1	F2,0044 (SP)
LW	V0,0024 (S0)
LWC1	F6,0020 (V0)
ADD.S	F12,F6,F4
TRUNC.W.S	F16,F12
MFC1	T1,F16
NOP
MTC1	T1,F18
NOP
CVT.S.W	F8,F18
SUB.S	F10,F12,F8
SWC1	F10,0020 (V0)
LW	T9,0018 (S0)
LW	T8,0004 (S0)
LW	T7,0018 (A0)
SW	T1,002C (SP)
SUBU	T4,T8,T9
SUBU	T5,R0,T4
SLL	T6,T5,0x1
ADDU	T0,T7,T6
ANDI	V1,T0,0007
LW	T9,0070 (SP)
SRA	T8,V1,0x1
SLL	T3,T8,0x1
SUBU	A1,T0,T3
SW	T3,0028 (SP)
OR	V1,T8,R0
ADDU	A3,T1,T8
JAL	7001FBF8
SW	T9,0010 (SP)
LW	T3,0028 (SP)
LUI	AT,0800
ADDIU	T6,V0,0008
ADDIU	T4,T3,0280
ANDI	T5,T4,FFFF
OR	T7,T5,AT
SW	T7,0000 (V0)
LW	T8,0068 (SP)
SLL	T4,S1,0x1
ANDI	T5,T4,FFFF
SLL	T9,T8,0x10
OR	T7,T9,T5
SW	T7,0004 (V0)
LUI	AT,4700
MTC1	AT,F4
LWC1	F6,0044 (SP)
SW	T6,0030 (SP)
LW	T5,0024 (S0)
MUL.S	F16,F6,F4
LUI	AT,0500
LW	T7,0024 (T5)
ADDIU	V1,V0,0010
ANDI	T6,T7,00FF
SLL	T8,T6,0x10
TRUNC.W.S	F18,F16
MFC1	T4,F18
NOP
ANDI	T9,T4,FFFF
OR	T4,T8,AT
OR	T5,T4,T9
SW	T5,0008 (V0)
LW	T7,0024 (S0)
LW	A0,0014 (T7)
JAL	7000E8B0	;V0=rdram offset derived from pointer A0
SW	V1,005C (SP)
LW	T6,0030 (SP)
LW	T1,002C (SP)
LW	V1,005C (SP)
SW	V0,0004 (T6)
LW	T8,0024 (S0)
SW	R0,0024 (T8)
LW	T4,0018 (S0)
ADDU	T9,T4,T1
SUBU	T5,T9,S1
BEQ	R0,R0,7001FF90
SW	T5,0018 (S0)
LW	T6,0004 (S0)
LW	T7,0018 (T2)
LW	T9,0070 (SP)
SUBU	T8,R0,T6
SLL	T4,T8,0x1
OR	A0,T2,R0
LW	A2,0068 (SP)
OR	A3,S1,R0
ADDU	A1,T7,T4
JAL	7001FBF8
SW	T9,0010 (SP)
OR	V1,V0,R0
LW	RA,0024 (SP)
LW	S0,001C (SP)
LW	S1,0020 (SP)
ADDIU	SP,SP,0060
JR	RA
OR	V0,V1,R0

7001FFA8
ADDIU	V0,A1,FFFE
ANDI	T6,V0,0007
SLTIU	AT,T6,0008
BEQ	AT,R0,700201B8
LW	V1,0000 (A2)
SLL	T6,T6,0x2
LUI	AT,8003
ADDU	AT,AT,T6
LW	T6,9D10 (AT)	;T6=80029D10+offset: p->handler
JR	T6
NOP
LW	T7,0020 (A0)
BGEZ	V0,7001FFE8
SRA	T8,V0,0x3
ADDIU	AT,V0,0007
SRA	T8,AT,0x3
SLL	T9,T8,0x2
ADDU	T9,T9,T8
SLL	T9,T9,0x3
ADDU	T0,T7,T9
SW	V1,0000 (T0)
JR	RA
OR	V0,R0,R0
LW	T1,0020 (A0)
BGEZ	V0,70020018
SRA	T2,V0,0x3
ADDIU	AT,V0,0007
SRA	T2,AT,0x3
SLL	T3,T2,0x2
ADDU	T3,T3,T2
SLL	T3,T3,0x3
ADDU	T4,T1,T3
SW	V1,0004 (T4)
JR	RA
OR	V0,R0,R0
LW	T5,0020 (A0)
BGEZ	V0,70020048
SRA	T6,V0,0x3
ADDIU	AT,V0,0007
SRA	T6,AT,0x3
SLL	T8,T6,0x2
ADDU	T8,T8,T6
SLL	T8,T8,0x3
ADDU	T7,T5,T8
SH	V1,0008 (T7)
JR	RA
OR	V0,R0,R0
LW	T9,0020 (A0)
BGEZ	V0,70020078
SRA	T0,V0,0x3
ADDIU	AT,V0,0007
SRA	T0,AT,0x3
SLL	T2,T0,0x2
ADDU	T2,T2,T0
SLL	T2,T2,0x3
ADDU	T1,T9,T2
SH	V1,000A (T1)
JR	RA
OR	V0,R0,R0
LW	T3,0020 (A0)
BGEZ	V0,700200A8
SRA	T4,V0,0x3
ADDIU	AT,V0,0007
SRA	T4,AT,0x3
SLL	T6,T4,0x2
ADDU	T6,T6,T4
SLL	T6,T6,0x3
ADDU	T5,T3,T6
SH	V1,000C (T5)
JR	RA
OR	V0,R0,R0
MTC1	V1,F4
LUI	AT,8003
LWC1	F8,9D30 (AT)
CVT.S.W	F6,F4
LW	T8,0020 (A0)
DIV.S	F10,F6,F8
BGEZ	V0,700200EC
SRA	T7,V0,0x3
ADDIU	AT,V0,0007
SRA	T7,AT,0x3
SLL	T0,T7,0x2
ADDU	T0,T0,T7
SLL	T0,T0,0x3
ADDU	T9,T8,T0
OR	V0,R0,R0
JR	RA
SWC1	F10,0010 (T9)
LW	T2,0020 (A0)
BGEZ	V0,7002011C
SRA	T1,V0,0x3
ADDIU	AT,V0,0007
SRA	T1,AT,0x3
SLL	T4,T1,0x2
ADDU	T4,T4,T1
SLL	T4,T4,0x3
ADDU	A1,T2,T4
LW	T3,0004 (A1)
LW	T6,0000 (A1)
MTC1	V1,F6
LUI	AT,41F0
SUBU	T5,T3,T6
MTC1	T5,F16
CVT.S.W	F8,F6
BGEZ	T5,70020160
CVT.D.W	F18,F16
MTC1	AT,F5
MTC1	R0,F4
NOP
ADD.D	F18,F18,F4
LUI	AT,8003
LDC1	F16,9D38 (AT)
CVT.D.S	F10,F8
OR	V0,R0,R0
DIV.D	F4,F10,F16
MUL.D	F6,F18,F4
CVT.S.D	F8,F6
JR	RA
SWC1	F8,001C (A1)
LW	T7,0020 (A0)
BGEZ	V0,70020198
SRA	T8,V0,0x3
ADDIU	AT,V0,0007
SRA	T8,AT,0x3
SLL	T0,T8,0x2
ADDU	T0,T0,T8
SLL	T0,T0,0x3
ADDU	T9,T7,T0
LW	A1,0020 (T9)
BEQ	A1,R0,700201B8
NOP
SH	V1,0000 (A1)
JR	RA
OR	V0,R0,R0

700201C0
ADDIU	AT,R0,0001
BNE	A1,AT,700201D0
NOP
SW	A2,0000 (A0)
JR	RA
OR	V0,R0,R0

700201D8
ADDIU	SP,SP,FF58
SW	S3,002C (SP)
OR	S3,A0,R0
SW	RA,0044 (SP)
SW	S8,0040 (SP)
SW	S7,003C (SP)
SW	S6,0038 (SP)
SW	S5,0034 (SP)
SW	S4,0030 (SP)
SW	S2,0028 (SP)
SW	S1,0024 (SP)
SW	S0,0020 (SP)
LW	A0,0000 (A0)
LW	T6,00B8 (SP)
SW	R0,0080 (SP)
OR	S6,A2,R0
SW	T6,0010 (SP)
LW	T9,0004 (A0)
JALR	RA,T9
NOP
SLL	S1,S6,0x1
LUI	T8,0C00
LUI	T2,06C0
LUI	T3,0C00
LUI	T4,0800
ANDI	T1,S1,FFFF
LUI	T7,0800
ORI	T2,T2,06C0
ORI	T8,T8,DA83
ORI	T4,T4,06C0
ORI	T3,T3,5A82
SW	T7,0000 (V0)
SW	T1,0004 (V0)
SW	T8,0008 (V0)
SW	T2,000C (V0)
SW	T3,0010 (V0)
SW	T4,0014 (V0)
LW	A1,0018 (S3)
ADDIU	T5,V0,0018
OR	S5,R0,R0
ADDIU	S2,R0,0140
SW	T5,0010 (SP)
SW	T1,0048 (SP)
SW	S1,0050 (SP)
OR	A0,S3,R0
ADDIU	A2,R0,06C0
JAL	7001FA70
OR	A3,S6,R0
LW	V1,0080 (SP)
LUI	T6,0200
ORI	T6,T6,0800
SW	T6,0000 (V0)
SW	S1,0004 (V0)
LBU	T9,0024 (S3)
ADDIU	S0,V0,0008
OR	S7,R0,R0
BLEZL	T9,70020498
LW	V1,001C (S3)
LW	V0,0018 (S3)
LW	T7,0020 (S3)
SLL	T8,S7,0x2
ADDU	T8,T8,S7
SLL	T8,T8,0x3
ADDU	S1,T7,T8
LW	T2,0000 (S1)
LW	T5,0004 (S1)
OR	A0,S3,R0
SUBU	T3,R0,T2
SLL	T4,T3,0x1
SUBU	T6,R0,T5
ADDU	S4,V0,T4
SLL	T9,T6,0x1
BNE	S4,V1,70020320
ADDU	S8,V0,T9
OR	T7,S2,R0
SLL	S2,S5,0x10
SLL	S5,T7,0x10
SRA	T2,S5,0x10
SRA	T8,S2,0x10
OR	S2,T8,R0
BEQ	R0,R0,70020338
OR	S5,T2,R0
OR	A1,S4,R0
OR	A2,S5,R0
OR	A3,S6,R0
JAL	7001FBF8
SW	S0,0010 (SP)
OR	S0,V0,R0
OR	A0,S3,R0
OR	A1,S1,R0
OR	A2,S2,R0
OR	A3,S6,R0
JAL	7001FD84
SW	S0,0010 (SP)
LH	A0,0008 (S1)
OR	S0,V0,R0
LUI	AT,0C00
BEQ	A0,R0,700203B0
ANDI	T4,A0,FFFF
SLL	T9,S5,0x10
ANDI	T7,S2,FFFF
OR	T8,T9,T7
OR	T5,T4,AT
SW	T5,0000 (V0)
SW	T8,0004 (V0)
LW	T2,0024 (S1)
ADDIU	S0,V0,0008
BNEL	T2,R0,700203B4
LH	V1,000A (S1)
LW	T3,0020 (S1)
OR	A0,S3,R0
OR	A1,S8,R0
BNE	T3,R0,700203B0
OR	A2,S2,R0
OR	A3,S6,R0
JAL	7001FA70
SW	S0,0010 (SP)
OR	S0,V0,R0
LH	V1,000A (S1)
OR	V0,S0,R0
LUI	AT,0C00
BEQ	V1,R0,700203FC
ANDI	T5,V1,FFFF
SLL	T7,S2,0x10
ANDI	T8,S5,FFFF
OR	T2,T7,T8
OR	T6,T5,AT
SW	T6,0000 (V0)
SW	T2,0004 (V0)
ADDIU	S0,S0,0008
SW	S0,0010 (SP)
OR	A0,S3,R0
OR	A1,S4,R0
OR	A2,S5,R0
JAL	7001FA70
OR	A3,S6,R0
OR	S0,V0,R0
LW	A0,0020 (S1)
OR	A1,S2,R0
OR	A2,S6,R0
BEQL	A0,R0,70020420
LW	T3,0024 (S1)
JAL	7001F9B8
OR	A3,S0,R0
OR	S0,V0,R0
LW	T3,0024 (S1)
OR	A0,S3,R0
OR	A1,S8,R0
BNE	T3,R0,70020440
OR	A2,S2,R0
OR	A3,S6,R0
JAL	7001FA70
SW	S0,0010 (SP)
OR	S0,V0,R0
LH	V1,000C (S1)
ADDIU	S7,S7,0001
SLL	T4,S7,0x10
BEQ	V1,R0,70020478
SRA	S7,T4,0x10
OR	V0,S0,R0
ANDI	T5,V1,FFFF
LUI	AT,0C00
SLL	T7,S2,0x10
ORI	T8,T7,0800
OR	T6,T5,AT
SW	T6,0000 (V0)
SW	T8,0004 (V0)
ADDIU	S0,S0,0008
LBU	T6,0024 (S3)
LW	T2,0004 (S1)
LW	V0,0018 (S3)
SLT	AT,S7,T6
SLL	T3,T2,0x1
BNE	AT,R0,700202C4
ADDU	V1,V0,T3
LW	V1,001C (S3)
LW	T9,0018 (S3)
LW	T7,0050 (SP)
LW	T3,0014 (S3)
SLL	T2,V1,0x1
ADDU	T8,T9,T7
ADDU	T4,T3,T2
SLTU	AT,T4,T8
BEQ	AT,R0,700204C4
SW	T8,0018 (S3)
SUBU	T5,T8,T2
SW	T5,0018 (S3)
LUI	T6,0A00
ORI	T6,T6,0800
OR	V1,S0,R0
SW	T6,0000 (V1)
LW	T9,0048 (SP)
LUI	AT,06C0
ADDIU	V0,S0,0008
OR	T7,T9,AT
SW	T7,0004 (V1)
LW	RA,0044 (SP)
LW	S8,0040 (SP)
LW	S7,003C (SP)
LW	S6,0038 (SP)
LW	S5,0034 (SP)
LW	S4,0030 (SP)
LW	S3,002C (SP)
LW	S2,0028 (SP)
LW	S1,0024 (SP)
LW	S0,0020 (SP)
JR	RA
ADDIU	SP,SP,00A8

70020520
LW	T6,0008 (A0)
SW	T6,0000 (A1)
LH	T7,001A (A0)
SH	T7,000C (A1)
LW	T8,000C (A0)
JR	RA
SW	T8,0004 (A1)

7002053C
LW	T6,0000 (A1)
SW	T6,0008 (A0)
LH	T7,000C (A1)
SH	T7,001A (A0)
LW	T8,0004 (A1)
JR	RA
SW	T8,000C (A0)

70020558
JR	RA
LW	V0,000C (A0)

70020560
JR	RA
NOP

70020568
LW	V1,0008 (A0)
LBU	V0,0000 (V1)
ADDIU	T6,V1,0001
SW	T6,0008 (A0)
ANDI	T7,V0,0080
BEQ	T7,R0,700205AC
OR	A1,V0,R0
ANDI	A1,V0,007F
LW	V1,0008 (A0)
SLL	T9,A1,0x7
LBU	V0,0000 (V1)
ADDIU	T8,V1,0001
SW	T8,0008 (A0)
ANDI	T6,V0,007F
ANDI	T7,V0,0080
BNE	T7,R0,70020588
ADDU	A1,T9,T6
JR	RA
OR	V0,A1,R0

700205B4
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
OR	A2,A0,R0
JAL	70020568
OR	A3,A1,R0
LW	T6,000C (A2)
LW	V1,0008 (A2)
OR	T1,V0,R0
ADDU	T7,T6,V0
SW	T7,000C (A2)
LBU	A0,0000 (V1)
ADDIU	AT,R0,00FF
ADDIU	T8,V1,0001
SW	T8,0008 (A2)
OR	V0,A0,R0
BNE	A0,AT,700206B0
ANDI	A1,A0,00FF
LBU	V0,0000 (T8)
ADDIU	T9,T8,0001
ADDIU	AT,R0,0051
SW	T9,0008 (A2)
BNE	V0,AT,70020678
OR	T0,V0,R0
ADDIU	T6,R0,0003
SH	T6,0000 (A3)
SW	T1,0004 (A3)
SB	A1,0008 (A3)
SB	T0,0009 (A3)
LW	V1,0008 (A2)
LBU	V0,0000 (V1)
ADDIU	T7,V1,0001
SW	T7,0008 (A2)
SB	V0,000A (A3)
LW	V1,0008 (A2)
LBU	A0,0000 (V1)
ADDIU	T8,V1,0001
SW	T8,0008 (A2)
SB	A0,000B (A3)
LW	V1,0008 (A2)
LBU	A1,0000 (V1)
ADDIU	T9,V1,0001
SW	T9,0008 (A2)
SB	A1,000C (A3)
LW	V1,0008 (A2)
LBU	A0,0000 (V1)
ADDIU	T6,V1,0001
SW	T6,0008 (A2)
BEQ	R0,R0,700206A8
SB	A0,000D (A3)
ADDIU	AT,R0,002F
BNE	V0,AT,700206A8
ADDIU	T7,R0,0004
SH	T7,0000 (A3)
SW	T1,0004 (A3)
SB	A1,0008 (A3)
SB	T0,0009 (A3)
LW	V1,0008 (A2)
LBU	A0,0000 (V1)
ADDIU	T8,V1,0001
SW	T8,0008 (A2)
SB	A0,000A (A3)
BEQ	R0,R0,70020728
SH	R0,001A (A2)
ADDIU	T9,R0,0001
ANDI	T6,V0,0080
SH	T9,0000 (A3)
BEQ	T6,R0,700206E4
SW	T1,0004 (A3)
SB	A1,0008 (A3)
LW	V1,0008 (A2)
LBU	A0,0000 (V1)
ADDIU	T7,V1,0001
SW	T7,0008 (A2)
SB	A0,0009 (A3)
BEQ	R0,R0,700206F0
SH	A1,001A (A2)
LH	T8,001A (A2)
SB	A0,0009 (A3)
SB	T8,0008 (A3)
LBU	V0,0008 (A3)
ADDIU	AT,R0,00C0
ANDI	T9,V0,00F0
BEQ	T9,AT,70020724
ADDIU	AT,R0,00D0
BEQL	T9,AT,70020728
SB	R0,000A (A3)
LW	V1,0008 (A2)
LBU	A0,0000 (V1)
ADDIU	T6,V1,0001
SW	T6,0008 (A2)
BEQ	R0,R0,70020728
SB	A0,000A (A3)
SB	R0,000A (A3)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70020738
ADDIU	SP,SP,FFA0
SW	S7,0030 (SP)
SW	S1,0018 (SP)
SW	S0,0014 (SP)
OR	S0,A0,R0
OR	S1,A2,R0
OR	S7,A1,R0
SW	RA,0034 (SP)
SW	S6,002C (SP)
SW	S5,0028 (SP)
SW	S4,0024 (SP)
SW	S3,0020 (SP)
BNE	A2,R0,70020788
SW	S2,001C (SP)
LW	T6,0004 (A0)
SH	R0,000C (A1)
SW	R0,0004 (A1)
SW	R0,0008 (A1)
BEQ	R0,R0,7002082C
SW	T6,0000 (A1)
LW	T7,0008 (S0)
OR	V0,R0,R0
ADDIU	S3,R0,0004
SW	T7,004C (SP)
LH	T8,001A (S0)
ADDIU	S2,SP,0050
SH	T8,003E (SP)
LW	T9,000C (S0)
SW	T9,0044 (SP)
LW	T0,0004 (S0)
SH	R0,001A (S0)
SW	R0,000C (S0)
SW	T0,0008 (S0)
LW	S4,0008 (S0)
LH	S5,001A (S0)
OR	S6,V0,R0
OR	A0,S0,R0
JAL	700205B4
OR	A1,S2,R0
LH	T1,0050 (SP)
BNEL	T1,S3,700207F4
LW	V0,000C (S0)
LW	S4,0008 (S0)
LH	S5,001A (S0)
BEQ	R0,R0,70020800
LW	S6,000C (S0)
LW	V0,000C (S0)
SLTU	AT,V0,S1
BNEL	AT,R0,700207C0
LW	S4,0008 (S0)
SW	S4,0000 (S7)
SH	S5,000C (S7)
SW	S6,0004 (S7)
LW	T2,000C (S0)
SW	T2,0008 (S7)
LW	T3,004C (SP)
SW	T3,0008 (S0)
LH	T4,003E (SP)
SH	T4,001A (S0)
LW	T5,0044 (SP)
SW	T5,000C (S0)
LW	RA,0034 (SP)
LW	S0,0014 (SP)
LW	S1,0018 (SP)
LW	S2,001C (SP)
LW	S3,0020 (SP)
LW	S4,0024 (SP)
LW	S5,0028 (SP)
LW	S6,002C (SP)
LW	S7,0030 (SP)
JR	RA
ADDIU	SP,SP,0060

70020858
MTC1	A1,F12
LUI	AT,8003
LDC1	F6,9D50 (AT)
LH	T6,0018 (A0)
CVT.D.S	F4,F12
LUI	AT,41F0
MUL.D	F8,F4,F6
MTC1	T6,F10
MTC1	A2,F4
CVT.D.W	F16,F10
CVT.D.W	F6,F4
MUL.D	F18,F8,F16
BGEZL	A2,700208A4
DIV.D	F8,F18,F6
MTC1	AT,F11
MTC1	R0,F10
NOP
ADD.D	F6,F6,F10
DIV.D	F8,F18,F6
ADDIU	V0,R0,0001
LUI	AT,41E0
CFC1	T7,F31
CTC1	V0,F31
NOP
CVT.W.D	F16,F8
CFC1	V0,F31
NOP
ANDI	V0,V0,0078
BEQL	V0,R0,70020924
MFC1	V0,F16
MTC1	AT,F17
MTC1	R0,F16
ADDIU	V0,R0,0001
LUI	AT,8000
SUB.D	F16,F8,F16
CTC1	V0,F31
NOP
CVT.W.D	F16,F16
CFC1	V0,F31
NOP
ANDI	V0,V0,0078
BNEL	V0,R0,70020918
CTC1	T7,F31
MFC1	V0,F16
CTC1	T7,F31
JR	RA
OR	V0,V0,AT
CTC1	T7,F31
JR	RA
ADDIU	V0,R0,FFFF
MFC1	V0,F16
NOP
BLTZL	V0,70020918
CTC1	T7,F31
CTC1	T7,F31
JR	RA
NOP

7002093C
MTC1	A1,F4
MTC1	A2,F8
LUI	AT,4F80
CVT.S.W	F6,F4
BGEZ	A2,70020960
CVT.S.W	F10,F8
MTC1	AT,F16
NOP
ADD.S	F10,F10,F16
LH	T6,0018 (A0)
MUL.S	F18,F6,F10
LUI	AT,8003
MTC1	T6,F8
LDC1	F10,9D58 (AT)
CVT.S.W	F16,F8
CVT.D.S	F4,F18
CVT.D.S	F6,F16
MUL.D	F18,F6,F10
DIV.D	F8,F4,F18
JR	RA
CVT.S.D	F0,F8

70020990
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
LW	T7,0010 (A0)
LW	T6,0000 (A0)
LW	V0,0008 (A0)
OR	A2,A0,R0
ADDU	T8,T6,T7
SLTU	AT,V0,T8
BNE	AT,R0,700209C0
OR	T0,A1,R0
BEQ	R0,R0,700209D8
OR	V0,R0,R0
OR	A3,V0,R0
JAL	70020568
OR	A0,A2,R0
SW	V0,0000 (T0)
SW	A3,0008 (A2)
ADDIU	V0,R0,0001
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

700209E8
LW	A1,0008 (A0)
LBU	V1,0000 (A1)
ADDIU	T7,A1,0001
SW	T7,0008 (A0)
LBU	T8,0000 (T7)
SLL	T6,V1,0x18
SLL	T9,T8,0x10
OR	V1,T6,T9
ADDIU	T6,T7,0001
SW	T6,0008 (A0)
LBU	T7,0000 (T6)
ADDIU	T9,T6,0001
SW	T9,0008 (A0)
SLL	T8,T7,0x8
LBU	T6,0000 (T9)
OR	V1,V1,T8
ADDIU	T7,T9,0001
SW	T7,0008 (A0)
JR	RA
OR	V0,V1,T6

70020A38
LW	A1,0008 (A0)
LBU	V1,0000 (A1)
ADDIU	T9,A1,0001
SW	T9,0008 (A0)
LBU	T6,0000 (T9)
SLL	T8,V1,0x8
ADDIU	T9,T9,0001
OR	V1,T8,T6
SLL	T7,V1,0x10
SRA	V0,T7,0x10
JR	RA
SW	T9,0008 (A0)

70020A68
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
OR	A3,A0,R0
SW	A1,0000 (A0)
SW	A2,0010 (A0)
SH	R0,001A (A0)
SW	R0,000C (A0)
JAL	700209E8
SW	A1,0008 (A0)
LUI	AT,4D54
ORI	AT,AT,6864
BNEL	V0,AT,70020B34
LW	RA,0014 (SP)
JAL	700209E8
OR	A0,A3,R0
JAL	70020A38
OR	A0,A3,R0
BNEL	V0,R0,70020B34
LW	RA,0014 (SP)
JAL	70020A38
OR	A0,A3,R0
ADDIU	AT,R0,0001
BNEL	V0,AT,70020B34
LW	RA,0014 (SP)
JAL	70020A38
OR	A0,A3,R0
SH	V0,0018 (A3)
LH	V1,0018 (A3)
ANDI	T6,V1,8000
BNEL	T6,R0,70020B34
LW	RA,0014 (SP)
MTC1	V1,F6
LUI	AT,3FF0
MTC1	AT,F5
CVT.S.W	F8,F6
MTC1	R0,F4
OR	A0,A3,R0
CVT.D.S	F10,F8
DIV.D	F6,F4,F10
CVT.S.D	F8,F6
JAL	700209E8
SWC1	F8,0014 (A3)
LUI	AT,4D54
ORI	AT,AT,726B
BNEL	V0,AT,70020B34
LW	RA,0014 (SP)
JAL	700209E8
OR	A0,A3,R0
LW	T7,0008 (A3)
SW	T7,0004 (A3)
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

70020B40
SW	A0,0000 (SP)
SW	A2,0008 (SP)
JR	RA
SH	A2,0016 (A1)

70020B50
ADDIU	SP,SP,FFD0
SW	A0,0030 (SP)
SW	RA,0014 (SP)
SW	A2,0038 (SP)
SW	A3,003C (SP)
OR	A0,A2,R0
OR	A1,A3,R0
LW	A3,0044 (SP)
JAL	7000ED4C	;(V0,V1) = (A0,A1) / (A2,A3) [signed division]
LW	A2,0040 (SP)
SW	V0,0020 (SP)
SW	V1,0024 (SP)
LW	A0,0040 (SP)
LW	A1,0044 (SP)
OR	A2,V0,R0
JAL	7000EDA8	;(V0,V1) = (A0,A1) * (A2,A3)
OR	A3,V1,R0
LW	T6,0038 (SP)
LW	T7,003C (SP)
LW	T0,0020 (SP)
SUBU	T8,T6,V0
SLTU	AT,T7,V1
SUBU	T8,T8,AT
SUBU	T9,T7,V1
SW	T9,002C (SP)
SW	T8,0028 (SP)
BGTZ	T0,70020C18
LW	T1,0024 (SP)
BLTZ	T0,70020BD0
NOP
BEQ	R0,R0,70020C1C
ADDIU	T0,SP,0020
BLTZL	T8,70020C1C
ADDIU	T0,SP,0020
BGTZ	T8,70020BE8
ADDIU	T3,T1,0001
BEQL	T9,R0,70020C1C
ADDIU	T0,SP,0020
LW	T4,0040 (SP)
LW	T5,0044 (SP)
SLTIU	AT,T3,0001
ADDU	T2,T0,AT
SUBU	T6,T8,T4
SLTU	AT,T9,T5
SUBU	T6,T6,AT
SUBU	T7,T9,T5
SW	T2,0020 (SP)
SW	T3,0024 (SP)
SW	T7,002C (SP)
SW	T6,0028 (SP)
ADDIU	T0,SP,0020
LW	V0,0030 (SP)
LW	AT,0000 (T0)
SW	AT,0000 (V0)
LW	T3,0004 (T0)
SW	T3,0004 (V0)
LW	AT,0008 (T0)
SW	AT,0008 (V0)
LW	T3,000C (T0)
SW	T3,000C (V0)
LW	RA,0014 (SP)
ADDIU	SP,SP,0030
JR	RA
NOP

70020C50
DIV	A1,A2
MFLO	V0
ADDIU	SP,SP,FFF8
BNE	A2,R0,70020C68
NOP
BREAK	00001C00	;Break: division by zero
ADDIU	AT,R0,FFFF
BNE	A2,AT,70020C80
LUI	AT,8000
BNE	A1,AT,70020C80
NOP
BREAK	00001800
MULTU	A2,V0
SW	V0,0000 (SP)
ADDIU	T7,SP,0000
MFLO	T6
SUBU	V1,A1,T6
BGEZ	V0,70020CB8
SW	V1,0004 (SP)
SW	V0,0000 (SP)
BLEZ	V1,70020CB8
SW	V1,0004 (SP)
ADDIU	V0,V0,0001
SUBU	V1,V1,A2
SW	V1,0004 (SP)
SW	V0,0000 (SP)
LW	AT,0000 (T7)
OR	V0,A0,R0
SW	AT,0000 (A0)
LW	T0,0004 (T7)
ADDIU	SP,SP,0008
JR	RA
SW	T0,0004 (A0)

70020CE0
ADDIU	SP,SP,FFD8
SW	RA,001C (SP)
SW	A0,0028 (SP)
JAL	700185F0	;disables and returns COP0 interrupt enabled flag
SW	S0,0018 (SP)
LW	T7,0028 (SP)
LUI	T6,8002
LW	T6,698C (T6)
ADDIU	AT,R0,FBFE
AND	T8,T7,AT
NOR	T9,T8,R0
OR	S0,V0,R0
LUI	AT,8002
AND	T0,T6,T9
SW	T0,698C (AT)
JAL	70018610	;A0->COP0 status
OR	A0,S0,R0
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0028
JR	RA
NOP

70020D40	21940	store word A2 to offset A1 using BSD hardware entry A0
	accepts: A0=BSD hardware entry, A1=hardware offset, A2=value
LUI	T6,A460
LW	A3,0010 (T6)	;A3=A4600010: PI Status
ADDIU	SP,SP,FFF8
ANDI	T7,A3,0003
BEQ	T7,R0,70020D6C	;branch if ready
NOP
//70020D58:	loop until ready
LUI	T8,A460
LW	A3,0010 (T8)
ANDI	T9,A3,0003
BNE	T9,R0,70020D58
NOP
//70020D6C:	translate address and write word
LW	T0,000C (A0)	;T0=A0+C: base hardware address
LUI	AT,A000
ADDIU	SP,SP,0008
OR	T1,T0,A1
OR	T2,T1,AT	;T2= A0000000 | base | offset
SW	A2,0000 (T2)	;A2->hardware address
JR	RA
OR	V0,R0,R0	;return 0: okay!
