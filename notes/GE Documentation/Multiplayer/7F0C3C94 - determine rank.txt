7F0C3C94	F87C4	sprint rank of player A1 to A0
	accepts: A0=@string buffer, A1=player# (0-3)
ADDIU	SP,SP,FF80
SW	RA,001C (SP)
SW	S0,0018 (SP)
SW	A0,0080 (SP)	;SP+80=A0: p->string
JAL	7F014758	;V0=8002B540: scenario
SW	A1,0084 (SP)	;SP+84=A1: player#
JAL	7F09A464	;V0=# players
SW	V0,007C (SP)	;SP+7C=V0: scenario
OR	T3,V0,R0	;T3=#players
BLEZ	V0,7F0C3D08	;branch if invalid #players
OR	S0,R0,R0	;S0=0	playercount
ADDIU	V1,SP,0068	;V1=SP+68: score list
ADDIU	A1,SP,0058	;A1=SP+58: player list
//7F0C3CC8:	get each player's scores
OR	A0,S0,R0	;A0=S0: player A0
SW	V1,0038 (SP)	;SP+38=V1: table.scores
SW	A1,003C (SP)	;SP+3C=A1: table.player
JAL	7F0C38D8	;returns V0=score
SW	T3,0078 (SP)	;SP+78=T3: #players
LW	A1,003C (SP)	;A1=table.player
LW	T3,0078 (SP)	;T3=#players
LW	V1,0038 (SP)	;V1=table.scores
SW	S0,0000 (A1)	;S0->table.player: cur.player#
ADDIU	S0,S0,0001	;S0++	test next player
SLT	AT,S0,T3	;TRUE if cur.player < total players
ADDIU	A1,A1,0004	;A1+=4	next entry
ADDIU	V1,V1,0004	;V1+=4	next entry
BNEZ	AT,7F0C3CC8	;loop for each player
SW	V0,FFFC (V1)	;V0->table.scores	save score for player
//7F0C3D04:	
OR	S0,R0,R0	;S0=0
BLEZ	T3,7F0C3E08	;branch if invalid #players
OR	T2,R0,R0	;T2=0
ADDIU	T4,T3,FFFF	;T4=#players-1	0-3, not 1-4
ADDIU	T0,SP,0058	;T0=SP+58: table.player
LW	A1,0068 (SP)	;A1=player1's score
LW	A0,006C (SP)	;A0=player2's score
//7F0C3D20:
BLEZ	T4,7F0C3DF4	;branch if player 1 or invalid
ADDIU	T2,T2,0001	;T2++
ADDIU	V0,T3,FFFF	;V0=#players-1	0-3, not 1-4
ANDI	T6,V0,0001	;T6=T3: #players
BEQ	T6,R0,7F0C3D60
SLT	AT,A1,A0	;TRUE if pl1.score < pl2.score
BEQ	AT,R0,7F0C3D5C	;branch if pl1 outscored pl2
ADDIU	S0,R0,0001	;S0=1
//7F0C3D40:	pl2 outscored pl1
OR	V0,A0,R0	;V0=A0: pl2.score
OR	A0,A1,R0	;A0=A1: pl1.score
OR	A1,V0,R0	;A1=V0: pl2.score
LW	V0,005C (SP)	;V0=SP+5C: pl2.player
LW	T7,0058 (SP)	;T7=SP+5C: pl1.player
SW	V0,0058 (SP)	;pl1.player swap
SW	T7,005C (SP)	;pl2.player swap
//7F0C3D5C:
BEQ	S0,T4,7F0C3DF0	;branch if only 2 players
//7F0C3D60:
ADDIU	T8,SP,0068	;T8=table.scores
SLL	A3,S0,0x2	;A3=count*4
SLL	T9,T4,0x2	;T9=#players*4
ADDU	T1,T9,T8	;T1=p->final player's score
ADDU	V1,A3,T8	;V1=p->cur.player's score
SW	A0,006C (SP)	;A0->pl2.score
SW	A1,0068 (SP)	;A1->pl1.score
//7F0C3D7C:	test next two scores
LW	A2,0000 (V1)	;A2=pl.score
LW	A0,0004 (V1)	;A0=pl+1.score
ADDU	A1,T0,A3	;A1=p->cur.player's player
SLT	AT,A2,A0	;TRUE if cur.score < next.score
BEQL	AT,R0,7F0C3DB4	;branch if cur.score higher
LW	A2,0008 (V1)	;A2=3rd score
//7F0C3D94:	cur.score < next.score
LW	V0,0004 (A1)	;V0=next.player
LW	T5,0000 (A1)	;T5=cur.player
SW	A0,0000 (V1)	;cur.score = next.score
SW	A2,0004 (V1)	;next.score = cur.score
OR	A0,A2,R0	;A0=A2: cur.score
SW	V0,0000 (A1)	;cur.player = next.player
SW	T5,0004 (A1)	;next.player = cur.player
LW	A2,0008 (V1)	;A2=3rd score
//7F0C3DB4:	check 3rd player
ADDU	A1,T0,A3	;A1=p->cur.player's player
SLT	AT,A0,A2	;TRUE if next.score < 3rd.score
BEQL	AT,R0,7F0C3DE0	;branch if next.score higher
ADDIU	V1,V1,0008
//7F0C3DC4:	next.score < 3rd.score
LW	V0,0008 (A1)	;V0=3rd.player
LW	T6,0004 (A1)	;T6=2nd.player
SW	A0,0008 (V1)	;2nd.score->3rd.score
SW	A2,0004 (V1)	;3rd.score->2nd.score
SW	V0,0004 (A1)	;3rd.player->2nd.player
SW	T6,0008 (A1)	;2nd.player->3rd.player
//7F0C3DDC:
ADDIU	V1,V1,0008	;V1+=8
LW	A0,006C (SP)	;A0=pl2.score
LW	A1,0068 (SP)	;A1=pl1.score
BNE	V1,T1,7F0C3D7C	;loop for 4th player if present
ADDIU	A3,A3,0008	;A3+=8
//7F0C3DF0:
OR	S0,R0,R0	;S0=0
BNE	T2,T3,7F0C3D20	;loop if count < #players
NOP
SW	A1,0068 (SP)	;A1->pl1.score
SW	A0,006C (SP)	;A0->pl2.score
OR	T2,R0,R0	;T2=0	playercount
BLEZ	T3,7F0C3E2C	;branch if valid #players
ADDIU	A1,SP,0058	;A1=SP+58: p->table.player
LW	V0,0084 (SP)	;V0=player#
//7F0C3E14:	match entry with player#
LW	T7,0000 (A1)	;T7=entry.player
BEQ	V0,T7,7F0C3E2C	;branch if entry matches player#
NOP
ADDIU	S0,S0,0001	;S0++	count++
BNE	S0,T3,7F0C3E14	;loop to test all players
ADDIU	A1,A1,0004	;A1+=4	next entry
//7F0C3E2C:	get cur.player's score
BLTZ	S0,7F0C3E5C	;branch if invalid player#
SLL	T9,S0,0x2	;T9=entry*4
ADDIU	V0,SP,0068	;V0=SP+68: table.score
ADDU	T5,T9,V0	;T5=table+offset: p->cur.score
LW	A2,0000 (T5)	;A2=score for player#
//7F0C3E40:	find nearest matching entry
LW	T6,0000 (V0)	;T6=entry.score
ADDIU	T7,S0,0001	;T7=entry#+1
BEQ	T6,A2,7F0C3E5C	;branch if entry1.score matches cur.player's.score
NOP
ADDIU	T2,T2,0001	;T2++	playercount++
BNE	T7,T2,7F0C3E40	;loop until cur.entry read
ADDIU	V0,V0,0004	;V0+=4	next entry
//7F0C3E5C:
BEQ	T2,R0,7F0C3E88	;branch if 1st place uncontested
ADDIU	AT,R0,0001
BEQ	T2,AT,7F0C3EA4	;branch if 2nd place
ADDIU	AT,R0,0002
BEQ	T2,AT,7F0C3EC0	;branch if 3rd place
LW	V0,007C (SP)	;V0=SP+7C: scenario
ADDIU	AT,R0,0003
BEQ	T2,AT,7F0C3F0C	;branch if 4th place
LW	T9,007C (SP)
BEQ	R0,R0,7F0C3F4C	;return if didn't rank for some reason...
LW	RA,001C (SP)
//7F0C3E88:	output 1st place
JAL	7F0C1DD8	;V0=p->text A0
ORI	A0,R0,A011	;A0=A011: "Rank: 1st"
LW	A0,0080 (SP)	;A0=SP+80: p->output
JAL	7000AC94	;sprintf(A0,A1,...)
OR	A1,V0,R0	;A1=V0: p->source
BEQ	R0,R0,7F0C3F4C
LW	RA,001C (SP)
//7F0C3EA4:	output 2nd place
JAL	7F0C1DD8	;V0=p->text A0
ORI	A0,R0,A012	;A0=A012: "Rank: 2nd"
LW	A0,0080 (SP)	;A0=SP+80: p->output
JAL	7000AC94	;sprintf(A0,A1,...)
OR	A1,V0,R0	;A1=V0: p->source
BEQ	R0,R0,7F0C3F4C
LW	RA,001C (SP)
//7F0C3EC0:	3rd place: check scenario
ADDIU	AT,R0,0005
BEQ	V0,AT,7F0C3EF0	;branch if scenario 5: team 2vs2
ADDIU	AT,R0,0007
BEQ	V0,AT,7F0C3EF0	;branch if scenario 7: team 2vs1
NOP
//7F0C3ED4:	output 3rd place
JAL	7F0C1DD8	;V0=p->text A0
ORI	A0,R0,A013	;A0=A013: "Rank: 3rd"
LW	A0,0080 (SP)	;A0=SP+80: p->output
JAL	7000AC94	;sprintf(A0,A1,...)
OR	A1,V0,R0	;A1=V0: p->source
BEQ	R0,R0,7F0C3F4C
LW	RA,001C (SP)
//7F0C3EF0:	2 teams will always display 2nd place...
JAL	7F0C1DD8	;V0=p->text A0
ORI	A0,R0,A012	;A0=A012: "Rank: 2nd"
LW	A0,0080 (SP)	;A0=SP+80: p->output
JAL	7000AC94	;sprintf(A0,A1,...)
OR	A1,V0,R0	;A1=V0: p->source
BEQ	R0,R0,7F0C3F4C
LW	RA,001C (SP)
//7F0C3F0C:	4th place: check scenario
ADDIU	AT,R0,0006
BEQ	T9,AT,7F0C3F34	;branch if scenario 6: team 3vs1
NOP
//7F0C3F18:	output 4th place
JAL	7F0C1DD8	;V0=p->text A0
ORI	A0,R0,A014	;A0=A014: "Rank: 4th"
LW	A0,0080 (SP)	;A0=SP+80: p->output
JAL	7000AC94	;sprintf(A0,A1,...)
OR	A1,V0,R0	;A1=V0: p->source
BEQ	R0,R0,7F0C3F4C
LW	RA,001C (SP)
//7F0C3F34:	2 teams will always display 2nd place...
JAL	7F0C1DD8	;V0=p->text A0
ORI	A0,R0,A012	;A0=A012: "Rank: 2nd"
LW	A0,0080 (SP)	;A0=SP+80: p->output
JAL	7000AC94	;sprintf(A0,A1,...)
OR	A1,V0,R0	;A1=V0: p->source
//7F0C3F48:	return
LW	RA,001C (SP)
LW	S0,0018 (SP)
ADDIU	SP,SP,0080
JR	RA
NOP
