7F000EB8	359E8	allocate and intialize A0 + 10 GUARDdata entries
	accepts: A0= #guards
ADDIU	T6,A0,000A
SLL	T7,T6,0x4
SUBU	T7,T7,T6
SLL	T7,T7,0x3
SUBU	T7,T7,T6
SLL	T7,T7,0x2	;T7= 1DC(A0 + A): space for A0+10 guards
ADDIU	SP,SP,FFE8
LUI	A2,8003
ADDIU	A0,T7,000F
ADDIU	A2,A2,CC68
SW	RA,0014 (SP)
ORI	T8,A0,000F
SW	T6,0000 (A2)	;8002CC68 = A0+A: set #guards+10
XORI	A0,T8,000F	;A0->nearest quadword boundry
JAL	70009720	;V0=p->A0 bytes allocated in bank A1
ADDIU	A1,R0,0004	;A1= bank 4
//7F000EF8:	set pointer to allocated block
LUI	A2,8003
ADDIU	A2,A2,CC68
LW	T0,0000 (A2)	;T0=8002CC68: #guards
LUI	A0,8003
ADDIU	A0,A0,CC64
SW	V0,0000 (A0)	;V0->8002CC64: p->GUARDdata block
BLEZ	T0,7F000F40	;return if no entries, which isn't really possible
OR	V1,R0,R0	;V1=0	init. count
OR	V0,R0,R0	;V0=0	init. offset
//7F000F1C:	initialize each entry
LW	T1,0000 (A0)	;T1=p->GUARDdata
ADDIU	V1,V1,0001	;V1+=1	count+=1
ADDU	T2,T1,V0
SW	R0,001C (T2)	;0->GUARDdata+1C: set NULL p->model
LW	T3,0000 (A2)	;T3= #guards
ADDIU	V0,V0,01DC	;V0+=1DC: next GUARDdata's offset
SLT	AT,V1,T3
BNEL	AT,R0,7F000F20	;loop for each entry
LW	T1,0000 (A0)
//7F000F40:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP
