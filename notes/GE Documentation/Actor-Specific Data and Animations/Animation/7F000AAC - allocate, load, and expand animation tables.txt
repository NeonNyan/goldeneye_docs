7F000AAC	355DC	allocate, load, and expand animation tables
ADDIU	SP,SP,FFE0
SW	RA,0014 (SP)
LUI	A0,8007
LUI	A1,8007
ADDIU	A1,A1,9518	;A1=80069518: 
ADDIU	A0,A0,9440	;A0=80069440: 
JAL	7000D6D0
ADDIU	A2,R0,0008
//7F000ACC:
LUI	A0,8003
LUI	A1,8007
LUI	A2,8007
ADDIU	A2,A2,9458	;A2-80069458: 
ADDIU	A1,A1,9440	;A1=80069440: 
JAL	7F0009E0
ADDIU	A0,A0,9D60	;A0=80029D60
//7F000AE8:	allocate animation table
LUI	T6,0001
LUI	T7,0000
ADDIU	T7,T7,0000
ADDIU	T6,T6,E7E0
SUBU	A2,T6,T7	;A2= E7E0 - 0
OR	A0,A2,R0	;A0=size
SW	A2,0018 (SP)
JAL	70009720	;V0=p->A0 bytes allocated in bank A1
ADDIU	A1,R0,0006	;A1=6
//7F000B0C:	load the animations to rdram
LUI	V1,8007
ADDIU	V1,V1,9538
LUI	A1,0029
SW	V0,0000 (V1)	;V0->80069538: p->animation table
LW	A2,0018 (SP)	;A2= E7E0: size
ADDIU	A1,A1,E980	;A1= 28E980
JAL	70005C1C	;read A2 bytes from hardware A1 to rdram A0
OR	A0,V0,R0	;A0=p->animation table
//7F000B2C:	expand both animation tables
LUI	A0,8003
JAL	7F000A00	;expand animation table A0's entries
ADDIU	A0,A0,9D6C	;A0=80029D6C: offset table for animations
LUI	A0,8003
JAL	7F000A00	;expand animation table A0's entries
ADDIU	A0,A0,A04C	;A0=8002A04C: offset table for final animations
//7F000B44:	return
LW	RA,0014 (SP)
ADDIU	SP,SP,0020
JR	RA
NOP
