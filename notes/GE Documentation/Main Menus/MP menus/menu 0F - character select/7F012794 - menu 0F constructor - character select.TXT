7F012794:	menu 0F constructor: MP character select
	accepts: A0=p->display list
ADDIU	SP,SP,FF18
SW	RA,0064 (SP)
SW	S1,0044 (SP)
OR	S1,A0,R0	;S1=A0: display list target
SW	S8,0060 (SP)
SW	S7,005C (SP)
SW	S6,0058 (SP)
SW	S5,0054 (SP)
SW	S4,0050 (SP)
SW	S3,004C (SP)
SW	S2,0048 (SP)
SW	S0,0040 (SP)
JAL	7F010290	;V0=#players selected
SDC1	F20,0038 (SP)
SW	V0,00E4 (SP)	;SP+E4=V0: #players
OR	A0,S1,R0	;A0=S1: DL
OR	A1,R0,R0	;A1=0
OR	A2,R0,R0	;A2=0
JAL	700046D0	;setfillcolour("black")
OR	A3,R0,R0	;A3=0
JAL	70003EF8	;fillrect()
OR	A0,V0,R0	;A0=V0: DL
JAL	7F00D5E8
OR	A0,V0,R0	;A0=V0: DL
JAL	7F0ACD98
OR	A0,V0,R0	;A0=V0: DL
//7F0127FC:	make 2-screen division
ADDIU	T6,R0,00AB
ADDIU	T7,R0,0090
SW	T7,0014 (SP)	;SP+14= 00000090: colour (alpha present)
SW	T6,0010 (SP)	;SP+10= 0xAB: lower right y position
OR	A0,V0,R0	;A0=V0: DL
ADDIU	A1,R0,0026	;A1=0x26: upper left x position
ADDIU	A2,R0,00A9	;A2=0xA9: upper left y position
JAL	7F0AD014	;draw coloured box
ADDIU	A3,R0,0184	;A3=0x184: lower right x position
//7F012820:	detect if 3-4 player
LW	T0,00E4 (SP)	;T0=SP+E4: #players
OR	S1,V0,R0	;S1=V0: DL
OR	A0,S1,R0	;A0=S1: DL
SLTI	AT,T0,0003	;AT=TRUE if 1-2 players
BNEZ	AT,7F01285C	;branch if 2-screen
ADDIU	A1,R0,00D4	;A1= 0xD4: ul x
//7F012838:	add 4-screen division
ADDIU	T8,R0,0136
ADDIU	T9,R0,0080
SW	T9,0014 (SP)	;SP+14= 00000080: colour
SW	T8,0010 (SP)	;SP+10= 0x136: lr y
ADDIU	A2,R0,001E	;A2=0x1E: ul y
JAL	7F0AD014	;draw coloured box
ADDIU	A3,R0,00D6	;A3=0xD6: lr x
OR	S1,V0,R0	;S1=V0: DL
LW	T0,00E4 (SP)	;T0=#players
//7F01285C:	
BLEZ	T0,7F012DF4	;branch if invalid # players
LUI	T1,8007
LUI	T2,8007
LUI	T3,8007
LUI	T4,8007
LUI	AT,4080
ADDIU	T4,T4,9720	;T4=80069720: original selections
ADDIU	T3,T3,9730	;T3=80069730: selection buffer
ADDIU	T2,T2,9710	;T2=80069710: current selections
ADDIU	T1,T1,9740	;T1=80069740: TRUE when selection made
LUI	S8,8007
MTC1	AT,F20		;F20=4.0 [40800000]: 
ADDIU	S8,S8,9750	;S8=80069750: size of selected image
SW	T1,0088 (SP)	;SP+88=80069740: TRUE when selection made
SW	T2,0080 (SP)	;SP+80=80069710: current selections
SW	T3,0074 (SP)	;SP+74=80069730: selection buffer
SW	T4,0070 (SP)	;SP+70=80069720: original selections
SW	R0,00E0 (SP)	;SP+E0=0: 
//7F0128A4:	placement of character bars on screen
LW	T0,00E4 (SP)	;T0=SP+E4: #players
LW	A0,00E0 (SP)	;A0=SP+E0: 
ADDIU	AT,R0,0002
BNE	T0,AT,7F0128D8	;branch if not 2 player
ANDI	T5,A0,0001	;T5=A0 & 1: player 1 or 3
ADDIU	S2,R0,0026	;S2=0x26
BLEZ	A0,7F0128CC	;branch if count is 0
ADDIU	S4,R0,015E	;S4=0x15E	frame width
BEQ	R0,R0,7F012908
ADDIU	S7,R0,00AA	;S7=0xAA	frame height
//7F0128CC:	
OR	V1,R0,R0	;V1=0
BEQ	R0,R0,7F012908
ADDIU	S7,V1,001E	;S7=0x1E + 0	frame height
//7F0128D8:	2-screen division
SLTI	AT,A0,0002	;AT=TRUE if count < 2
BNEZ	AT,7F0128EC	;branch if 0,1
ADDIU	S4,R0,00AF	;S4=0xAF	frame width
BEQ	R0,R0,7F0128F0
ADDIU	V1,R0,008C	;V1=0x8C
//7F0128EC:	
OR	V1,R0,R0	;V1=0
//7F0128F0:
BEQ	T5,R0,7F012900	;branch if odd count
ADDIU	S7,V1,001E	;S7=V1 + 0x1E
BEQ	R0,R0,7F012904
ADDIU	V1,R0,00AF	;V1=0xAF
//7F012900:
OR	V1,R0,R0	;V1=0
//7F012904:	
ADDIU	S2,V1,0026	;S2=0x26 + V1
//7F012908:	generate setscissor DL op
ADDIU	T6,S2,0006	;T6=S2+6: frame width + margin
MTC1	T6,F4
ADDIU	S0,S7,0005	;S0=S7+5: frame height + margin
MTC1	S0,F16
CVT.S.W	F6,F4	;F6=(float) S2+6: 
ADDU	T7,S2,S4	;T7=S2+S4: frame width + margin
LUI	AT,ED00
ADDIU	S1,V0,0008	;S1=V0+8: DL
CVT.S.W	F18,F16	;F18=(float) S7+5: 
MUL.S	F8,F6,F20
TRUNC.W.S	F10,F8	;F10=F6 * 4.0: 
MUL.S	F4,F18,F20
MFC1	T8,F10		;T8=F10: 
NOP
ANDI	T9,T8,0FFF	;T9=T8 & 0xFFF: upper left x
TRUNC.W.S	F6,F4	;F6=F18 * 4.0: 
SLL	T1,T9,0xC	;T1=T9*0x1000: upper left x << C
ADDIU	T9,T7,FFFA	;T9=T7-6: 
MTC1	T9,F8
MFC1	T4,F6		;T4=F6: 
OR	T2,T1,AT	;T2=ED.FFF.000: setscissor | ulx
CVT.S.W	F10,F8	;F10=T9: 
ANDI	T5,T4,0FFF	;T5=T4 & 0xFFF: upper left y
OR	T6,T2,T5	;T6=ED.FFF.FFF: setscissor | uly
ADDIU	T5,S7,0087	;T5=S7+0x87: 
MTC1	T5,F4
SW	T6,0000 (V0)	;setscissor->DL
MUL.S	F16,F10,F20	;F16=F10 * 4.0: 
SW	T7,008C (SP)	;SP+8C=T7: 
CVT.S.W	F6,F4	;F6=(float) T5
TRUNC.W.S	F18,F16
MUL.S	F8,F6,F20	;F8=F6 * 4.0: 
MFC1	T3,F18		;T3=F16: 
NOP
ANDI	T4,T3,0FFF	;T4=T3 & 0xFFF: lower right x
TRUNC.W.S	F10,F8
SLL	T2,T4,0xC	;T2=T4 * 0x1000: lrx << C
MFC1	T7,F10		;T7=F8
NOP
ANDI	T8,T7,0FFF	;T8=T7 & 0xFFF: lower right y
OR	T9,T2,T8	;T9=00.FFF.FFF: lrx | lry
SW	T9,0004 (V0)	;setscissor->DL
//7F0129B0:	
LW	T1,0088 (SP)	;T1=SP+88: selected flags
SW	A0,00E0 (SP)	;A0->SP+E0: count
LW	T3,0000 (T1)	;T3=TRUE if pl1 has selected
BNEL	T3,R0,7F012A90	;branch if pl1 selection made
LW	T6,0080 (SP)
LW	T4,0000 (S8)	;T4=size of image
SW	A0,00E0 (SP)	;A0->SP+E0: count
BNEL	T4,R0,7F012A90	;branch if large (selection made)
LW	T6,0080 (SP)
JAL	7F0C1DD8	;V0=p->text ID A0
ORI	A0,R0,9C55	;A0=9C55: "Select Character"
LUI	T5,8004
LW	T5,0EB4 (T5)	;T5=80040EB4: p->1st font table
LUI	A3,8004
OR	S3,V0,R0	;S3=V0: p->text
LW	A3,0EB8 (A3)	;A3=80040EB8: p->2nd font table
ADDIU	A0,SP,00BC	;A0=SP+BC: @height
ADDIU	A1,SP,00B8	;A1=SP+B8: @width
OR	A2,V0,R0	;A2=V0: p->text
SW	R0,0014 (SP)	;SP+14=0
JAL	7F0AE98C	;proportions of string A2
SW	T5,0010 (SP)	;SP+10=p->1st font table
//7F012A08:	
LW	T2,00B8 (SP)	;T2=SP+B8: width
SRA	T6,S4,0x1	;T6=S4/2: frame width/2
ADDU	T7,T6,S2	;T7=(S4/2)+S2: frame width/2 + margin
SRA	T8,T2,0x1	;T8=T2/2: width/2
SUBU	T9,T7,T8	;T9=(S4/2)+S2-(T2/2): x position
SW	T9,00B4 (SP)	;T9->SP+B4: x pos.
SW	S0,00B0 (SP)	;S0->SP+B0: y pos.
JAL	7F0ACD98
OR	A0,S1,R0	;A0=S1: DL
JAL	7000441C	;V0= text clip width
OR	S1,V0,R0	;S1=V0: DL
SLL	S0,V0,0x10
SRA	T1,S0,0x10	;T1=text clip height
JAL	7000442C	;V0= text clip height
OR	S0,T1,R0	;S0=V0 & 0xFFFF
LUI	T3,8004
LUI	T4,8004
LW	T4,0EB4 (T4)	;T4=80040EB4: p->1st font table
LW	T3,0EB8 (T3)	;T3=80040EB8: p->2nd font table
ADDIU	T5,R0,00FF	;T5=000000FF	black
SW	T5,0018 (SP)	;SP+18=RGBA
OR	A0,S1,R0	;A0=S1: DL
ADDIU	A1,SP,00B4	;A1=SP+B4: p->x pos.
ADDIU	A2,SP,00B0	;A2=SP+B0: p->y pos.
OR	A3,S3,R0	;A3=S3: p->text
SW	S0,001C (SP)	;S0->SP+1C: clip width
SW	V0,0020 (SP)	;V0->SP+20: clip height
SW	R0,0024 (SP)	;0 ->SP+24: y offset
SW	R0,0028 (SP)	;0 ->SP+28: x offset
SW	T4,0014 (SP)	;T4->SP+14: p->1st font table
JAL	7F009760	;writes text to screen at absolute coordinates
SW	T3,0010 (SP)	;T3->SP+10: p->2nd font table
OR	S1,V0,R0
//7F012A8C:	display name of current selection
LW	T6,0080 (SP)	;T6=SP+80: cur.selections
LUI	A0,8003
SRA	T8,S4,0x1	;T8=S4/2: 
LW	T2,0000 (T6)	;T2=cur.selection
ADDU	S6,T8,S2	;S6=(S4/2)+S2
SLL	T7,T2,0x2
SUBU	T7,T7,T2
SLL	T7,T7,0x1	;T7=cur.selection * 0x6
ADDU	A0,A0,T7
JAL	7F0C1DD8	;V0=p->text ID A0
LHU	A0,B198 (A0)	;A0=8002B198+offset: character name
LUI	T9,8004
LW	T9,0EB4 (T9)	;T9=80040EB4: p->1st font table
LUI	A3,8004
OR	S3,V0,R0	;S3=V0: p->text
LW	A3,0EB8 (A3)	;A3=80040EB8: p->2nd font table
ADDIU	A0,SP,00A8	;A0=SP+A8: 
ADDIU	A1,SP,00A4	;A1=SP+A4: 
OR	A2,V0,R0	;A2=V0: p->text
SW	R0,0014 (SP)	;0 ->SP+14: 
JAL	7F0AE98C	;determine width of string
SW	T9,0010 (SP)	;T9->SP+10: p->1st font table
//7F012AE4:	
LW	T1,00A4 (SP)	;T1=SP+A4: strwidth
ADDIU	T5,S7,0078
SW	T5,009C (SP)	;0x78->SP+9C: text y position
SRA	T3,T1,0x1	;T3=strwidth /2
SUBU	T4,S6,T3	;T4=x position - (strwidth/2)
SW	T4,00A0 (SP)	;T4->SP+A0: text x position
JAL	7F0ACD98
OR	A0,S1,R0	;A0=S1: DL
JAL	7000441C	;V0= halfword @ 800232A8: 
OR	S1,V0,R0	;S1=V0: DL
SLL	S0,V0,0x10
SRA	T6,S0,0x10
JAL	7000442C
OR	S0,T6,R0	;S0=V0 & 0xFFFF: 
LUI	T2,8004
LUI	T7,8004
LW	T7,0EB4 (T7)	;T7=80040EB4: p->1st font table
LW	T2,0EB8 (T2)	;T2=80040EB8: p->2nd font table
ADDIU	T8,R0,00FF	;T8=000000FF
SW	T8,0018 (SP)	;RGBA->SP+18
OR	A0,S1,R0	;A0=S1: DL
ADDIU	A1,SP,00A0	;A1=SP+A0: p->x pos
ADDIU	A2,SP,009C	;A2=SP+9C: p->y pos
OR	A3,S3,R0	;A3=S3: p->text
SW	S0,001C (SP)	;S0->SP+1C: clip width
SW	V0,0020 (SP)	;V0->SP+20: clip height
SW	R0,0024 (SP)	;0 ->SP+24: y offset
SW	R0,0028 (SP)	;0 ->SP+28: x offset
SW	T7,0014 (SP)	;T7->SP+14: p->1st font table
JAL	7F009760	;draw text to screen
SW	T2,0010 (SP)	;T2->SP+10: p->2nd font table
//7F012B60:	
LW	T9,0074 (SP)	;T9=selection buffer
LW	T3,0070 (SP)	;T3=original selections
LW	S4,008C (SP)	;S4=
LW	T1,0000 (T9)	;T1=value in selection buffer
ADDIU	S5,S7,0046	;S5=S7+0x46
SW	S5,0010 (SP)	;S5->SP+10
LW	T5,0000 (S8)	;T5=size of image
LW	T4,0000 (T3)	;T4=original selection
ADDIU	S3,S2,000D	;S3=S2+0xD: 
ADDIU	S4,S4,FFF2	;S4-=E: 
OR	A2,S4,R0	;A2=S4
OR	A1,S3,R0	;A1=S3: 
OR	A0,V0,R0	;A0=V0: DL
SUBU	A3,S6,T1	;A3=S6-T1: x position - T1
SW	T5,0018 (SP)	;SP+18=size of image
JAL	7F01231C
SW	T4,0014 (SP)	;SP+14=original selection
//7F012BA4:	set size when not selected
LW	T6,0088 (SP)	;T6=SP+88: selected flags
OR	S1,V0,R0	;S1=V0: DL
LW	T8,0070 (SP)	;T8=SP+70: original selections
LW	T2,0000 (T6)	;T2=TRUE if selected
LW	T1,0080 (SP)	;T1=SP+80: cur. selections
BNEL	T2,R0,7F012BD0	;branch if selected
LW	T9,0000 (T8)
LW	T7,0000 (S8)	;T7=S8: size of image
BEQL	T7,R0,7F012BE0	;branch if not enlarged and not selected
LW	T4,0070 (SP)
//7F012BCC:	enlarged or selected
LW	T9,0000 (T8)	;T9=original selection
LW	T3,0000 (T1)	;T3=cur.selection
BEQL	T9,T3,7F012DB0	;branch if same selection
LW	T3,0088 (SP)
//7F012BDC:
LW	T4,0070 (SP)	;T4=SP+70: original selections
OR	A0,S1,R0	;A0=S1: DL
OR	A1,S3,R0	;A1=S3: 
LW	S0,0000 (T4)	;S0=original selection
OR	A2,S4,R0	;A2=S4: 
LW	T5,0074 (SP)	;T5=SP+74: selection buffer
SLTI	AT,S0,0003	;AT=TRUE if org.sel < 3
BNEZ	AT,7F012C2C	;branch if true
ADDIU	T2,S0,FFFD	;T2=S0-3: 
LW	T6,0000 (T5)	;T6=value
LW	T7,0000 (S8)	;T7=size of image
SW	T2,0014 (SP)	;T2->SP+14: 
SUBU	A3,S6,T6	;A3=x position - value
ADDIU	A3,A3,FF04	;A3-=0xFC
SW	S5,0010 (SP)	;SP+10=S5: 
JAL	7F01231C
SW	T7,0018 (SP)	;SP+18=T7: size of image
LW	T8,0070 (SP)	;T8=SP+70: original selections
OR	S1,V0,R0	;S1=V0: DL
LW	S0,0000 (T8)	;S0=original selection
//7F012C2C:
SLTI	AT,S0,0002
BNEZ	AT,7F012C74
OR	A0,S1,R0
LW	T1,0074 (SP)
LW	T4,0000 (S8)
ADDIU	T3,S0,FFFE
LW	T9,0000 (T1)
SW	T3,0014 (SP)
SW	S5,0010 (SP)
SUBU	A3,S6,T9
ADDIU	A3,A3,FF58
OR	A1,S3,R0
OR	A2,S4,R0
JAL	7F01231C
SW	T4,0018 (SP)
LW	T5,0070 (SP)
OR	S1,V0,R0
LW	S0,0000 (T5)
//7F012C74:
BLEZ	S0,7F012CB8
OR	A0,S1,R0
LW	T6,0074 (SP)
LW	T8,0000 (S8)
ADDIU	T7,S0,FFFF
LW	T2,0000 (T6)
SW	T7,0014 (SP)
SW	S5,0010 (SP)
SUBU	A3,S6,T2
ADDIU	A3,A3,FFAC
OR	A1,S3,R0
OR	A2,S4,R0
JAL	7F01231C
SW	T8,0018 (SP)
LW	T1,0070 (SP)
OR	S1,V0,R0
LW	S0,0000 (T1)
//7F012CB8:
LUI	V1,8003
LH	V1,B194 (V1)
OR	A0,S1,R0
OR	A1,S3,R0
ADDIU	T9,V1,FFFF
SLT	AT,S0,T9
BEQ	AT,R0,7F012D14
OR	A2,S4,R0
LW	T3,0074 (SP)
LW	T6,0000 (S8)
ADDIU	T5,S0,0001
LW	T4,0000 (T3)
SW	T5,0014 (SP)
SW	S5,0010 (SP)
SUBU	A3,S6,T4
ADDIU	A3,A3,0054
JAL	7F01231C
SW	T6,0018 (SP)
LW	T2,0070 (SP)
LUI	V1,8003
LH	V1,B194 (V1)
OR	S1,V0,R0
LW	S0,0000 (T2)
//7F012D14:
ADDIU	T7,V1,FFFE
SLT	AT,S0,T7
BEQ	AT,R0,7F012D68
OR	A0,S1,R0
LW	T8,0074 (SP)
LW	T3,0000 (S8)
ADDIU	T9,S0,0002
LW	T1,0000 (T8)
SW	T9,0014 (SP)
SW	S5,0010 (SP)
SUBU	A3,S6,T1
ADDIU	A3,A3,00A8
OR	A1,S3,R0
OR	A2,S4,R0
JAL	7F01231C
SW	T3,0018 (SP)
LW	T4,0070 (SP)
LUI	V1,8003
LH	V1,B194 (V1)
OR	S1,V0,R0
LW	S0,0000 (T4)
//7F012D68:
ADDIU	T5,V1,FFFD
SLT	AT,S0,T5
BEQ	AT,R0,7F012DAC
OR	A0,S1,R0
LW	T6,0074 (SP)
LW	T8,0000 (S8)
ADDIU	T7,S0,0003
LW	T2,0000 (T6)
SW	T7,0014 (SP)
SW	S5,0010 (SP)
SUBU	A3,S6,T2
ADDIU	A3,A3,00FC
OR	A1,S3,R0
OR	A2,S4,R0
JAL	7F01231C
SW	T8,0018 (SP)
OR	S1,V0,R0
//7F012DAC:
LW	T3,0088 (SP)
LW	T1,00E0 (SP)
LW	T5,0080 (SP)
LW	T2,0074 (SP)
LW	T8,0070 (SP)
ADDIU	T4,T3,0004
LW	T3,00E4 (SP)
ADDIU	T9,T1,0001
ADDIU	T6,T5,0004
ADDIU	T7,T2,0004
ADDIU	T1,T8,0004
SW	T1,0070 (SP)
SW	T7,0074 (SP)
SW	T6,0080 (SP)
SW	T9,00E0 (SP)
SW	T4,0088 (SP)
BNE	T9,T3,7F0128A4
ADDIU	S8,S8,0004
JAL	7F0ACEF0
OR	A0,S1,R0
//7F012DFC:	return
LW	RA,0064 (SP)
LDC1	F20,0038 (SP)
LW	S0,0040 (SP)
LW	S1,0044 (SP)
LW	S2,0048 (SP)
LW	S3,004C (SP)
LW	S4,0050 (SP)
LW	S5,0054 (SP)
LW	S6,0058 (SP)
LW	S7,005C (SP)
LW	S8,0060 (SP)
JR	RA
ADDIU	SP,SP,00E8


7F00D5E8:	
	accepts: A0=p->display list target
ADDIU	SP,SP,FEA8
SW	S2,0034 (SP)
LUI	S2,8003
ADDIU	S2,S2,A8E8	;S2=8002A8E8: folder#
LW	T6,0000 (S2)	;T6=folder#
SW	S3,0038 (SP)
ADDIU	S3,R0,000C	;S3=C
MULTU	T6,S3
SW	S1,0030 (SP)
LUI	S1,8003
ADDIU	S1,S1,AB94	;S1=8002AB94: 
LUI	T9,8003
ADDIU	T9,T9,AFB4	;T9=8002AFB4: start of copy block
MTC1	R0,F12
SW	RA,003C (SP)
SW	S0,002C (SP)
SW	A0,0158 (SP)	;SP+158=A0: DL
MFLO	T7		;T7=folder# * C: 
ADDU	V0,S1,T7	;V0=8002AB94+(folder*C): 
LWC1	F0,0000 (V0)	;F0=x position
LWC1	F2,0004 (V0)	;F2=y position
ADDIU	T2,T9,003C	;T2=8002AFF0: end of block
ADDIU	T8,SP,010C	;T8=SP+10C: target
//7F00D644:	copy to stack
LW	AT,0000 (T9)
ADDIU	T9,T9,000C	;T9+=C: next entry
ADDIU	T8,T8,000C	;T8+=C: target+=C
SW	AT,FFF4 (T8)
LW	AT,FFF8 (T9)
SW	AT,FFF8 (T8)
LW	AT,FFFC (T9)
BNE	T9,T2,7F00D644	;branch until 0x3C bytes copied
SW	AT,FFFC (T8)
//7F00D668:
LW	AT,0000 (T9)
ADDIU	A0,SP,00C8	;A0=SP+C8: 
SW	AT,0000 (T8)	;0x40 bytes copied
LUI	AT,8003
LWC1	F4,AFC4 (AT)	;F4=8002AFC4: 
LUI	AT,8003
LWC1	F6,AFC8 (AT)	;F6=8002AFC8: 
LUI	AT,457A
MTC1	AT,F8		;F8=4000.0
LUI	AT,8003
LWC1	F10,AFCC (AT)	;F10=8002AFCC: 
ADD.S	F0,F0,F4	;F0=F0+F4: xpos+
LUI	AT,3F80
MTC1	AT,F18		;F18=1.0
ADD.S	F2,F2,F6	;F2=F2+F6: ypos+
MFC1	A1,F0		;A1=F0
SWC1	F0,0010 (SP)	;SP+10=F0
ADD.S	F16,F8,F10	;F16=F8+F10: 4000.0+
MFC1	A2,F2		;A2=F2: 
SWC1	F2,0014 (SP)	;SP+14=F2: 
SWC1	F12,0024 (SP)	;SP+24=0
MFC1	A3,F16		;A3=F16: 
SWC1	F12,001C (SP)	;SP+1C=0
SWC1	F12,0018 (SP)	;SP+18=0
JAL	7F059694
SWC1	F18,0020 (SP)	;SP+20=F18: 
//7F00D6D0:
LW	T3,0000 (S2)	;T3=folder#
ADDIU	S0,SP,0088	;S0=SP+88: 
OR	A1,S0,R0	;A1=SP+88
MULTU	T3,S3
MFLO	T4		;T4=folder# * C
ADDU	A0,S1,T4	;A0=8002AB94+offset: positions?
JAL	7F058964	;initialize and copy positions to A1
NOP
//7F00D6F0:
LUI	AT,3E80
MTC1	AT,F12		;F12=0.25
JAL	7F058A7C	;multiply matrix A1 by F12
OR	A1,S0,R0	;A1=SP+88
ADDIU	A0,SP,00C8	;A0=SP+C8: 
JAL	7F058068
OR	A1,S0,R0	;A1=SP+88
//7F00D70C:
LUI	S3,8003
ADDIU	S3,S3,A95C	;S3=8002A95C: p->obj.instance
LW	T5,0000 (S3)	;T5=object instance data
SW	S0,010C (SP)	;SP+10C=S0: SP+88
LW	T6,0008 (T5)	;T6=p->object header
LH	A0,000E (T6)	;A0=number of object groups
SLL	T7,A0,0x6
JAL	7F0BD714	;
OR	A0,T7,R0	;A0=#groups * 0x40: 
//7F00D730:
SW	V0,011C (SP)	;SP+11C=V0: 
OR	A0,S0,R0	;A0=SP+88
JAL	7F058020
OR	A1,V0,R0	;A1=V0: 
//7F00D740:
LW	T1,011C (SP)
LW	T0,0000 (S3)
ADDIU	T2,R0,0003
ADDIU	A0,SP,010C
SW	T1,000C (T0)
LW	T9,0158 (SP)
SW	T2,0114 (SP)
SW	R0,0110 (SP)
LW	A1,0000 (S3)
JAL	7F074684
SW	T9,0118 (SP)
//7F00D770:
LW	V0,0000 (S3)
OR	S0,R0,R0
SW	T8,0158 (SP)
LW	T3,0008 (V0)
OR	S1,R0,R0
ADDIU	S2,SP,0048
LH	T4,000E (T3)
BLEZL	T4,7F00D7E0
LW	RA,003C (SP)
//7F00D794:
LW	T5,000C (V0)
OR	A1,S2,R0
JAL	7F058020
ADDU	A0,T5,S1
LW	T6,0000 (S3)
SLL	T1,S0,0x6
OR	A0,S2,R0
LW	T7,000C (T6)
JAL	7F058C9C
ADDU	A1,T7,T1
LW	V0,0000 (S3)
ADDIU	S0,S0,0001
ADDIU	S1,S1,0040
LW	T0,0008 (V0)
LH	T2,000E (T0)
SLT	AT,S0,T2
BNEL	AT,R0,7F00D798
LW	T5,000C (V0)
//7F00D7DC:
LW	RA,003C (SP)
LW	V0,0158 (SP)
LW	S0,002C (SP)
LW	S1,0030 (SP)
LW	S2,0034 (SP)
LW	S3,0038 (SP)
JR	RA
ADDIU	SP,SP,0158


7F058964:	initialize A1 and copy position from A0 to A1+0x30
	accepts: A0=, A1=p->target
ADDIU	SP,SP,FFE8
SW	RA,0014 (SP)
SW	A0,0018 (SP)	;A0->SP+18: position data
SW	A1,001C (SP)	;A1->SP+1C: buffer
JAL	7F057FD0	;initialize buffer A1 (zero, 1.0 to 0x3C)
OR	A0,A1,R0	;A0=A1: buffer
LW	A0,0018 (SP)	;A0=original
JAL	7F058998	;copies positions A0 to A1+0x30
LW	A1,001C (SP)	;A1=buffer
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP

7F0BD714:
	A0=offset in model
LUI	A2,8009
ADDIU	A2,A2,C24C
LW	V0,0000 (A2)	;V0=8008C24C: 
ADDIU	A0,A0,000F	;A0+=F: 
ORI	T6,A0,000F
XORI	T7,T6,000F	;T7=A0 to nearest 0x10
ADDU	T8,V0,T7	;T8= + T7: 
JR	RA
SW	T8,0000 (A2)	;8008C24C=T8: 
