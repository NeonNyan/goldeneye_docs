Basis behind rank is to make a list of each player's scores
This list is sorted from highest to lowest
Normal displayed rank is based on the first matching score
Teams alter this value to always display 1st/2nd

Could patch normal routine, or...

Total revision can simplify greatly.
1) Create list of 4 scores, sorted highest to lowest (1st to last)
2) store cur.player's score for later comparison
3) If teams detected, simplify list by removing any matching entries
4) copy rank based on first entry matching player's score

rank+A011 = string ID#
A011	"Rank: 1st"
A012	"Rank: 2nd"
A013	"Rank: 3rd"
A014	"Rank: 4th"

Also, since numerical copying seemed to be supported at some point, will still use the sprint function and pass it A2="rank#"--entry#+1.
Otherwise, could just use strcpy()

	JAL	7F01475C	;V0=scenario::bitflags & V1
	ORI	V1,R0,0002
	BEQ	V0,R0,+
	
	
stack:	+80
SP+18		S0
SP+1C		RA
SP+38		p->cur.table.scores
SP+3C		p->cur.table.players
SP+58-68	table of player#s
SP+68-78	table of scores
SP+78		#players
SP+7C		scenario
SP+80		[A0] @string
SP+84		[A1] player#

new layout:	+80
SP+18		S0
SP+1C		RA
SP+38		`p->cur.pl's.score
SP+3C		`S1
SP+58-68	temp table of scores
SP+68-78	table of scores
SP+78		#players
SP+7C		scenario	nonzero if teams in use
SP+80		[A0] @string
SP+84		[A1] player#

rewrite to remove 80000000 entries, or ignore them, or soemthing

7F0C3C94	F87C4	sprint rank of player A1 to A0
	accepts: A0=@string buffer, A1=player#
27BDFF80	ADDIU	SP,SP,FF80
AFBF001C	SW	RA,001C (SP)
AFB00018	SW	S0,0018 (SP)
AFB1003C	*SW	S1,003C (SP)
AFA40080	SW	A0,0080 (SP)	;SP+80=A0: @string
AFA50084	SW	A1,0084 (SP)	;SP+84=A1: player#
0FC051D7	*JAL	7F01475C	;V0=scenario::bitflags & V1
34030002	*ORI	V1,R0,0002	;teams
0FC26919	JAL	7F09A464	;V0=# players
AFA2007C	SW	V0,007C (SP)	;SP+7C=V0: scenario
AFA20078	SW	V0,0078 (SP)	;T3=#players
18400037	*BLEZ	V0,7F0C3D8C	;return if invalid #players
A0800000	*SB	R0,0000 (A0)	;make sure A0 isn;t completely invalid
//7F0C3CC8	initialize final bank with some very unlikely scores...	kills a bug
	LUI	V1,8000
	SW	V1,0068 (SP)
	SW	V1,006C (SP)
	SW	V1,0070 (SP)
	SW	V1,0074 (SP)
//7F0C3CC8:	set up loop
00008025	OR	S0,R0,R0	;S0=0	playercount
27B10058	*ADDIU	S1,SP,0058	;V1=SP+68: temp list
//7F0C3CD0:	get each player's scores
0FC30E36	JAL	7F0C38D8	;returns V0=score, V1=time
00102025	OR	A0,S0,R0	;A0=S0: player A0
00431021	ADDU	V0,V1,V0	;V0=total score
8FAB0078	LW	T3,0078 (SP)	;T3=#players
AE220000	*SW	V0,0000 (S1)	;V0->table.scores	save score for player
8FA50084	*LW	A1,0084 (SP)	;A1=player#
52050001	*BEQL	S0,A1,+1	;save cur.player's score
AFA20038	*SW	V0,0038 (SP)	;SP+38=cur.player's score
26100001	ADDIU	S0,S0,0001	;S0++	test next player
560BFFF6	*BNEL	S0,T3,7F0C3CD0	;loop for each player	"likely" ensures S1=p->last entry
26310004	*ADDIU	S1,S1,0004	;S1+=4	next entry
//7F0C3CFC:	sort list
27A50058	ADDIU	A1,SP,0058	;A1=SP+58: temp list
27A40068	ADDIU	A0,SP,0068	;A0=SP+68: table.scores
00008025	*OR	S0,R0,R0	;S0=0	count
//7F0C3D08:	pull entry
00004825	*OR	T1,R0,R0	;T1=#items >= than entry
8CA20000	*LW	V0,0000 (A1)	;V0=cur.score
27A80058	*ADDIU	T0,SP,0058	;T0=table.temp
//7F0C3D14:	compare to rest
8D030000	*LW	V1,0000 (T0)	;V1=entry.score
0043082A	*SLT	AT,V0,V1	;TRUE if score < entry's score
00294821	*ADDU	T1,T1,AT	;T1++ if less than score
1511FFFC	*BNE	T0,S1,7F0C3D14	;loop for each entry in table
25080004	*ADDIU	T0,T0,0004
//7F0C3D28:	set entry to appropriate slot
00094880	*SLL	T1,T1,0x2
01244821	*ADDU	T1,T1,A0	;T1=SP+68 + offset: p->entry in final table
8D230000	*LW	V1,0000 (T1)	;T4=entry in this slot
5062FFFE	*BEQL	V0,V1,-back	;if matches, skip this entry and see if next entry matches
25290004	*ADDIU	T1,T1,0004	;T1+=4	try next entry
AD220000	*SW	V0,0000 (T1)
//7F0C3D40:	loop for each entry
26100001	*ADDIU	S0,S0,0001
160BFFF0	*BNE	S0,T3,7F0C3D08	;branch if count != total
24A50004	*ADDIU	A1,A1,0004	;p->next table.temp entry
//7F0C3D4C:	find nearest matching entry
8FA30038	*LW	V1,0038 (SP)	;T6=cur.score
00008025	*OR	S0,R0,R0	;S0=0	count
00008825	*OR	S1,R0,R0	;S1=0	#duplicates
27A40068	*ADDIU	A0,SP,0068
//7F0C3D58:	loop for each match.  Also count duplicates...
8C820000	*LW	V0,0000 (A0)	;V0=1st entry
10430007	BEQ	V0,V1,7F0C3D70	;branch if match
24840004	*ADDIU	A0,A0,0004
8C850000	+LW	A1,0000 (A0)	;V1=entry
50A20001	+BEQ	A1,V0,+1	;inc.duplicate count on match
26310001	+ADDIU	S1,S1,0001
00051025	+OR	V0,A1,R0	;V0=A1: save previous entry
14A3FFFA	`*BNE	A1,V1,7F0C3D60	;loop until cur.entry read
26100001	*ADDIU	S0,S0,0001
//	
8FA2007C	+LW	V0,007C (SP)	;V0=team flag
54400001	+BNEL	V0,R0,+1	;if set, subtract duplicate count
02118023	+SUBU	S0,S0,S1
//7F0C3D70:	one string output to rule them all
3404A011	*ORI	A0,R0,A011	;A0=A011-14: "Rank: xth" - base of all strings
0FC30776	JAL	7F0C1DD8	;V0=p->text A0
00902021	ADDU	A0,A0,S0	;A0=A010+offset (1-4): final rank
26060001	*ADDIU	A2,S0,0001	;A2=#+1: rank as displayed (1-4)
8FA40080	LW	A0,0080 (SP)	;A0=SP+80: p->output
0C002B25	JAL	7000AC94	;sprintf(A0,A1,...)
00022825	OR	A1,V0,R0	;A1=V0: p->source
//7F0C3D8C:	return
8FBF001C	LW	RA,001C (SP)
8FB00018	LW	S0,0018 (SP)
8FB1003C	*LW	S1,003C (SP)
03E00008	JR	RA
27BD0080	ADDIU	SP,SP,0080
	