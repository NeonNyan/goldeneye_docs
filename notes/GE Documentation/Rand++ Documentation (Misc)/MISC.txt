Hold start button to boot Japanese

7000601C:	6C1C	main program loop, rewritten
//NEW Japanese trigger
00002025	OR	A0,R0,R0
0C0030EB	JAL	7000C3AC
34051000	ORI	A1,R0,1000
24050001	ADDIU	A1,R0,0001
3C048005	LUI	A0,8005
54400001	BNEL	V0,R0,+1
A08584D0	SB	A1,84D0 (A0)
//set up game and run it
0C00174C	JAL	70005D30
00000000	NOP
0FC33F77	JAL	7F0CFDDC
00000000	NOP
0C001A8C	JAL	70006A30
00000000	NOP
0C001818	JAL	70006060
00000000	NOP
1000FFFD	BEQ	R0,R0,-3
00000000	NOP

stupidly, this jumps and loops everything immediately after this code.
Could always loop it, or just set the RA and forget about the jump at all...
Either option clears two lines, unnecessarily.

set this guy to correct region spacing on watch options menu
E0470:
18600004	BLEZ	V1,7F0AB954
E0610:
58600004	BLEZL	V1,7F0ABAF4

+_+

difficulty display string
7F00EFFC	43B2C	%d.\r
7F00F7C4	442F4	\r

//7F00EF90:	43AC0	rewrite to make space
12200015	*BEQ	S1,R0,7F00EFE8
34049D09	*ORI	A0,R0,9D09
12370013	*BEQ	S1,S7,7F00EFE8
00000000	NOP
123E0011	*BEQ	S1,S8,7F00EFE8
00000000	NOP
1234000F	BEQ	S1,S4,7F00EFE8
00000000	NOP
10000018	BEQ	R0,R0,7F00F014
8ECA0000	LW	T2,0000 (S6)
//7F00EFB8:	43AE8	blank this out
25642E0A	"%d.\r"
...
//7F00EFE8:	43B18
0FC30776	JAL	7F0C1DD8
00912021	*ADDU	A0,A0,S1
10000007	BEQ	R0,R0,7F00F010
00409025	OR	S2,V0,R0

//7F00EFFC:	43B2C
3C057F01	LUI	A1,7F01
24A5EFB8	ADDIU	A1,A1,EFB8	;A1=7F00EFB8: "%d.\r"

//7F00F7C4:	442F4	get rid of that copy loop as well!
3C0F8005	LUI	T7,8005
25EF0074	ADDIU	T7,T7,0074	;T7=7F00EFBB: "\r"
	ADDIU	T0,T7,0BB8
	ADDIU	T6,SP,0054
	LW	AT,0000 (T7)
	ADDIU	T7,T7,000C
	ADDIU	T6,T6,000C
	SW	AT,FFF4 (T6)
	LW	AT,FFF8 (T7)
	SW	AT,FFF8 (T6)
	LW	AT,FFFC (T7)
	BNE	T7,T0,7F00F7D4
	SW	AT,FFFC (T6)
	JAL	7F0ACD98
	OR	A0,V0,R0

rewrite:
	*NOP
	*NOP
24080BB8	*ADDIU	T0,R0,0BB8
27AE0054	ADDIU	T6,SP,0054
00007825	*OR	T7,R0,R0
//7F00F7E0:
25EF000C	ADDIU	T7,T7,000C
25CE000C	ADDIU	T6,T6,000C
ADC0FFF4	SW	R0,FFF4 (T6)
ADC0FFF8	SW	R0,FFF8 (T6)
15E8FFFB	*BNE	T7,T0,7F00F7E0
ADC0FFFC	SW	R0,FFFC (T6)
3C0F0A00	*LUI	T7,0A00
AFAF0054	*SW	T7,0054 (SP)
	JAL	7F0ACD98
	OR	A0,V0,R0

	
do same for 007 options
//7F00F9C4:	444F4
3C057F01	*LUI	A1,7F01
	OR	S0,V0,R0
	MUL.S	F6,F18,F4
24A5EFC1	*ADDIU	A1,A1,EFC1

//7F00FBC8:	446F8
3C057F01	*LUI	A1,7F01
	OR	S0,V0,R0
	MUL.S	F16,F8,F10
24A5EFC1	*ADDIU	A1,A1,EFC1

//7F00FDCC:	448FC
3C057F01	*LUI	A1,7F01
	OR	S0,V0,R0
	MUL.S	F6,F18,F4
24A5EFC1	*ADDIU	A1,A1,EFC1

//7F00FFC8:	44AF8
3C057F01	*LUI	A1,7F01
	OR	S0,V0,R0
	MUL.S	F16,F8,F10
24A5EFC1	*ADDIU	A1,A1,EFC1

another of those "sets a bit buffer for stuff" snippets
//7F015DA0:	4A8D0	MISSION BRIEFING constructor - screen display
LUI	T7,8005
ADDIU	T7,T7,0C54
ADDIU	T0,T7,0BB8
ADDIU	T6,SP,004C
LW	AT,0000 (T7)
ADDIU	T7,T7,000C
ADDIU	T6,T6,000C
SW	AT,FFF4 (T6)
LW	AT,FFF8 (T7)
SW	AT,FFF8 (T6)
LW	AT,FFFC (T7)
BNE	T7,T0,7F015DB0
SW	AT,FFFC (T6)
JAL	7F0ACD98
OR	A0,V0,R0
//7F015DDC:

REWRITE
//7F015DA0:	4A8D0
	*NOP
	*NOP
24080BB8	*ADDIU	T0,R0,0BB8
	ADDIU	T6,SP,004C
00007825	*OR	T7,R0,R0
25EF000C	ADDIU	T7,T7,000C
25CE000C	ADDIU	T6,T6,000C
ADC0FFF4	*SW	R0,FFF4 (T6)
ADC0FFF8	*SW	R0,FFF8 (T6)
15E8FFFB	*BNE	T7,T0,7F015DB0
ADC0FFFC	*SW	R0,FFFC (T6)
3C0F0A00	*LUI	T7,0A00
AFAF004C	*SW	T7,004C (SP)

this copies the 'letter' used for each objective
//7F015AA8:	4A5D8
3C057F01	*LUI	A1,7F01
	OR	S1,V0,R0
24A5EFBD	*ADDIU	A1,A1,EFBD


+_+

eliminate some TLB pointers
//7F015DFC:	4A92C	briefing titles
00094880	SLL	T1,T1,0x2
3C018005	LUI	AT,8005
00290821	ADDU	AT,AT,T1
8C291AC0	LW	T1,1AC0 (AT)
01200008	JR	T1
00000000	NOP
//7F015E14:
0FC30776	JAL	7F0C1DD8
34049C5D	ORI	A0,R0,9C5D
10000010	BEQ	R0,R0,7F04A990
AFA20C0C	SW	V0,0C0C (SP)
//7F015E24:
0FC30776	JAL	7F0C1DD8
34049C5E	ORI	A0,R0,9C5E
1000000C	BEQ	R0,R0,7F04A990
AFA20C0C	SW	V0,0C0C (SP)
//7F015E34:
0FC30776	JAL	7F0C1DD8
34049C5F	ORI	A0,R0,9C5F
10000008	BEQ	R0,R0,7F04A990
AFA20C0C	SW	V0,0C0C (SP)
//7F015E44:
0FC30776	JAL	7F0C1DD8
34049C60	ORI	A0,R0,9C60
10000004	BEQ	R0,R0,7F04A990
AFA20C0C	SW	V0,0C0C (SP)
//7F015E54:
0FC30776	JAL	7F0C1DD8
34049C61	ORI	A0,R0,9C61
AFA20C0C	SW	V0,0C0C (SP)
//7F015E60:	4A990

rewrite
//7F015DFC:	4A92C	briefing titles
34049C5D	ORI	A0,R0,9C5D
0FC30776	JAL	7F0C1DD8
00892021	ADDU	A0,A0,T1
10000015	BEQ	R0,R0,7F04A990
AFA20C0C	SW	V0,0C0C (SP)
//7F015E10:


+_+

eliminate %d string for MP options menu
string occurs at 21990+0x2FEBC
//7F0117CC:	462FC	display text
	LUI	T9,8004
	*eliminate
8F280EB4	*LW	T0,0EB4 (T9)
LW	T9,0EB8 (T9)
LW	V1,0048 (SP)
LH	T1,0044 (SP)
OR	A0,S0,R0
ADDIU	A1,SP,0058
ADDIU	A2,SP,0054
LW	A3,0064 (SP)
SW	V0,0020 (SP)
SW	R0,0024 (SP)
SW	R0,0028 (SP)
SW	T0,0014 (SP)
SW	T9,0010 (SP)
SW	V1,0018 (SP)
JAL	7F009760	;write text
SW	T1,001C (SP)
//7F011810:	46340	display selected players
3C052564	*LUI	A1,2564
AFA50060	*SW	A1,0060 (SP)
...	LUI	A2,8003
...	OR	S0,V0,R0
...	LW	A2,B520 (A2)	;A2=8002B520: #players selected
27A50060	*ADDIU	A1,SP,0060	;A1=80050C4C: "%d"

+_+

fix MP character select for 1 player (snicker)
stupid, yes
//7F0128AC:	473DC
29010003	*SLTI	AT,T0,0003
10010009	*BEQ	R0,AT,7F0128D8	;branch if not 2 player

same for control style
//7F013A84:	485B4
29010003	*SLTI	AT,T0,0003
...	ADDIU	S3,R0,0026	;S3=0x26
1001008	*BEQ	R0,AT,7F013AB0	;branch if not 2 player

and the health screen
//7F013280:	47DB0
29010003	*SLTI	AT,T0,0003
	ADDIU	S3,R0,0026
10010008	*BEQ	R0,AT,7F0132AC


+_+

extend global image bank
pushes RAREWARE logo back
2A2F38	020049D8	2A2948	020043E8
2A2F98	02004A38	2A29A8	02004448
2A3240	02004CE0	2A2C50	020046F0
2A3548	02004FE8	2A2F58	020049F8
2A4550	02005FF0	2A3F60	02005A00
			2A4760	02006200

new size 19F0
loaded at:	100AE0

	100AE0	load global image bank
27BDFFD8	ADDIU	SP,SP,FFD8
3C0E0200	LUI	T6,0200
3C0F0200	LUI	T7,0200
AFB00014	SW	RA,0014 (SP)
25EF0000	ADDIU	T7,T7,0000	;T7=02000000: gib base alias
25CE1400	ADDIU	T6,T6,1400	;T6=02001400: gib end alias
...
//	100B30
3C05002A	LUI	A1,002A
AE240000	SW	A0,0000 (S1)
24A5D160	ADDIU	A1,A1,D160	;A1=0x29D160: global image bank
0C001707	JAL	70005C1C
02003025	OR	A2,S0,R0

+_+

7F0B479C calls something useless (probably old portal debug routine)
This will get fried!
7F0B479C	E92CC	NOP

+_+

Another few shrinkidink operations
could fuse all three together...  

52000023	*BEQL	S0,R0,7F06EF54	;return if no table
LW	RA,0024 (SP)
//7F06EECC:	A39FC	loop for each entry in table, in order
LHU	V0,0000 (S0)	;V0=table command entry
ADDIU	S1,R0,0001	;S1=1
ANDI	T7,V0,00FF	;T7=entry type
ADDIU	T8,T7,FFFF	;T8=type-1
SLTIU	AT,T8,0018	;TRUE if type 1-18
1020000B	*BEQ	AT,R0,7F06EF10	;default for invalid types
0018C040	*SLL	T8,T8,0x1	;T8=type->offset
3C017F07	*LUI	AT,7F07
0038C021	*ADDU	T8,AT,T8
8718XXXX	*LH	T8,XXXX (T8)	;T8=80054C20+offset: TLB jump for type
53110009	*BEQL	T8,S1,7F06EF1C	;if value is 1, matches default for S1
00008825	-OR	S1,R0,R0	;S1=0: used in branch below
//7F06EEFC	types 01,02,03,0B,0C,0D,0E,0F,10,15
13000004	*BEQ	T8,R0,7F06EF10
0038C021	*ADDU	T8,AT,T8
//7F06EF04	type 08	distance trigger
02402025	OR	A0,S2,R0
0300F809	*JALR	RA,T8
02002825	OR	A1,S0,R0
//7F06EF10	default
8E020014	LW	V0,0014 (S0)
5440000C	*BNEL	V0,R0,7F06EF48	;branch if no child entry
00028025	-OR	S0,V0,R0	;S0=V0: child entry
//7F06EF1C:
1200000A	BEQ	S0,R0,7F06EF48
8FB9002C	LW	T9,002C (SP)
8F230008	LW	V1,0008 (T9)
//7F06EF28
52030007	*BEQL	S0,V1,7F06EF48
00008025	-OR	S0,R0,R0
//7F06EF30:	retrieve next entry
8E02000C	LW	V0,000C (S0)	;V0=p->next entry
54400004	*BNEL	V0,R0,7F06EF48
00028025	-OR	S0,V0,R0
//7F06EF3C:	retrieve parent entry
8E100008	LW	S0,0008 (S0)	;S0=p->parent entry
1410FFF9	BNEZ	S0,7F06EF28
00000000	NOP
//7F06EF48:	loop for each valid entry
5600FFE1	BNEL	S0,R0,7F06EED0
96020000	LHU	V0,0000 (S0)	;V0=entry type
//7F06EF50:
8FBF0024	LW	RA,0024 (SP)
8FB00018	LW	S0,0018 (SP)
8FB1001C	LW	S1,001C (SP)
8FB20020	LW	S2,0020 (SP)
03E00008	JR	RA
27BD0028	ADDIU	SP,SP,0028
	
1	1	1	0	0	0	ECF8	E858
EB3C	0	1	1	1	1	1	1
0	0	0	0	1	0	EA08	0



5200001D	*BEQL	S0,R0,7F06F058	;branch if invalid
LW	RA,001C (SP)
//7F06EFE8:	A3B18
LHU	V0,0000 (S0)	;V0=entry type
ANDI	T7,V0,00FF	;T7=entry type (no flags)
ADDIU	T8,T7,FFFF	;T8=entry-1
SLTIU	AT,T8,0018	;AT=TRUE if type 1-18
10200009	BEQ	AT,R0,7F06F020	;branch if invalid type
0018C040	*SLL	T8,T8,0x1	;T8=type->offset
3C017F07	*LUI	AT,7F07
0038C021	*ADDU	T8,AT,T8
8718F068	*LH	T8,F068 (T8)	;T8=7F06F048+offset: TLB pointer for entry type
13000004	*BEQ	T8,R0,7F06F020
0038C021	*ADDU	T8,AT,T8
//7F06F014:	type 8 - 
02202025	OR	A0,S1,R0
0300F809	*JALR	RA,T8
02002825	OR	A1,S0,R0
//7F06F020:	default
8E020014	LW	V0,0014 (S0)
54400009	*BNEZL	V0,7F06F04C
00028025	-OR	S0,V0,R0
//7F06F02C:
12000007	BEQ	S0,R0,7F06F04C
00000000	NOP
//7F06F034:
8E02000C	LW	V0,000C (S0)
54400004	*BNEZL	V0,R0,7F06F04C
00028025	-OR	S0,V0,R0
//7F06F040:
8E100008	LW	S0,0008 (S0)
5600FFFC	BNEL	S0,R0,7F06F038
8E02000C	LW	V0,000C (S0)
//7F06F04C:
5600FFE7	BNEL	S0,R0,7F06EFEC
96020000	LHU	V0,0000 (S0)
//7F06F054:	return
8FBF001C	LW	RA,001C (SP)
8FB00014	LW	S0,0014 (SP)
8FB10018	LW	S1,0018 (SP)
03E00008	JR	RA
27BD0020	ADDIU	SP,SP,0020
//7F06F068
table of entries spans to 7F06F098	A3BC8


5200002F	*BEQL	S0,R0,7F06F184
LW	RA,0024 (SP)
//7F06F0FC:	A3C2C
LHU	V0,0000 (S0)
ANDI	T7,V0,00FF
ADDIU	T8,T7,FFFF
SLTIU	AT,T8,0018
1020000F	*BEQ	AT,R0,7F06F14C
0018C040	*SLL	T8,T8,0x1
3C017F07	*LUI	AT,7F07
0038C021	*ADDU	T8,AT,T8
8718XXXX	*LH	T8,XXXX (T8)
1300000A	*BEQ	T8,R0,7F06F14C
00380821	*ADDU	AT,AT,T8
//7F06F128	type 01	group heading
271817A8	*ADDIU	T8,T8,17A8
00112025	-OR	A0,S1,R0
07030004	*BGEZL	T8,+4
00102825	-OR	A1,S0,R0
00122025	-OR	A0,S2,R0
00112825	-OR	A1,S1,R0
00103025	-OR	A2,S0,R0
0020F809	*JALR	RA,AT
00000000	*NOP
//7F06F14C	default
8E020014	LW	V0,0014 (S0)
54400009	*BNEZL	V0,7F06F178
00028025	*OR	S0,V0,R0
//7F06F158:
12000007	BEQ	S0,R0,7F06F178
00000000	NOP
//7F06F160:
8E02000C	LW	V0,000C (S0)
54400004	*BNEZL	V0,7F06F178
00028025	*OR	S0,V0,R0
//7F06F16C:
8E100008	LW	S0,0008 (S0)
5600FFFC	*BNEL	S0,R0,7F06F164
8E02000C	LW	V0,000C (S0)
//7F06F178:
5600FFE1	*BNEL	S0,R0,7F06F100
96020000	LHU	V0,0000 (S0)
//7F06F180:
8FBF0024	LW	RA,0024 (SP)
8FB00018	LW	S0,0018 (SP)
8FB1001C	LW	S1,001C (SP)
8FB20020	LW	S2,0020 (SP)
03E00008	JR	RA
27BD0028	ADDIU	SP,SP,0028

+D738	+E0A0	+E64C	0	0	0	ECF8	E858
EB3C	0	0	0	0	0	0	0
0	E9BC	0	0	+E7A8	0	EA08	0

clean up by moving stuff a little
A3AF4	7F06EFC4	->	A3A98	7F06EF68
A3C00	7F06F0D0	->	A3B3C	7F06F00C
A3C04	7F06F0D4	value tables
A3C94	space

+_+

7F010290:	44DC0	revision to player# return
	LUI	AT,8003
	*LW	T6,A8F0 (AT)
	ADDIU	V0,R0,0001
	*BEQL	T6,V0,+1
	*LW	V0,B520 (AT)
	JR	RA
	*NOP
//7F0102B4:
	*NOP
	*NOP
	*NOP
	NOP

==|:)

kill another TLB table, creatively this time
abolishes 80054490
//7F06B150:	9FC80	
24180001	*ADDIU	T8,R0,0001
2DE10016	*SLTIU	AT,T7,0016
1020000B	BEQ	AT,R0,7F06B188
01F8C004	*SLLV	T8,T8,T7	;T8=1<<T7
3C010021	*LUI	AT,0021
3421F80E	*ORI	AT,AT,F80E	;AT=flags.  should toggle on 1,2,3,B,C,D,E,F,10,15
00380824	*AND	AT,AT,T8	;nonzero if appropriate flag set
10200006	*BEQ	AT,R0,7F06B188
00000000	NOP
00000000	*NOP
00000000	*NOP
//7F06B174:
AC650000	SW	A1,0000 (V1)
AC620004	SW	V0,0004 (V1)
8C63000C	LW	V1,000C (V1)
//7F06B188:
8C440014	LW	A0,0014 (V0)
...

This one was set up the same way, so duplicate!
abolishes 80054538
//7F06BD14:	A0844
96020000	LHU	V0,0000 (S0)
24120001	ADDIU	S2,R0,0001
304B00FF	ANDI	T3,V0,00FF
2D610019	*SLTIU	AT,T3,0019
10200010	*BEQ	AT,R0,7F06BD68
01726004	*SLLV	T4,S2,T3	;T4=1<<T3
//7F06BD30:
3C010021	*LUI	AT,0021
3421F80E	*ORI	AT,AT,F80E	;AT=flags.  should toggle on 1,2,3,B,C,D,E,F,10,15
002C0824	*AND	AT,AT,T4	;nonzero if appropriate flag set
1020000B	*BEQ	AT,R0,7F06BD68
00000000	NOP
00000000	*NOP
00000000	*NOP
//7F06BD44:
02802025	OR	A0,S4,R0
5611000A	*BNEL	S0,S1,7F06BD78
00009025	OR	S2,R0,R0
8E650000	LW	A1,0000 (S3)
0FC1D14D	JAL	7F074534
02003025	OR	A2,S0,R0
10000005	*BEQ	R0,R0,7F06BD78
00000000	NOP
//7F06BD68:

+_+

Use a table for setup object sizes
This isn't useless, since then can extend list really easily ;*)
7F0568F4:	8B424	size in words of setup object types, revised to use table
	LBU	T6,0003 (A0)
2DC10030	*SLTIU	AT,T6,0030	;must use this to catch future types that may find their way to old patch
50200001	*BEQL	AT,R0,+1
00007025	*OR	T6,R0,R0	;default is "type 0"
3C017F05	*LUI	AT,7F05
002E0821	*ADDU	AT,AT,T6
03E00008	*JR	RA
90226914	*LBU	V0,6914 (AT)
//7F056914:
place table here
Run it to 8B4C4, which would allow a potential 0x80 types.
Anything else would require altering every signed pull to an unsigned one.
Besides, we won't need even this many...

+_+

Another one...	abolish 80054AF8
7F06C79C:	A12CC
27BDFFE0	ADDIU	SP,SP,FFE0
AFBF0014	SW	RA,0014 (SP)
94AE0000	LHU	T6,0000 (A1)
00003025	OR	A2,R0,R0	;A2=0: default group value
8C870010	LW	A3,0010 (A0)	;A3=obj.instance+10: p->
31CF00FF	ANDI	T7,T6,00FF	;T7=T6 & 0xFF: type#
25F8FFFF	ADDIU	T8,T7,FFFF	;T8=type-1
2F010018	SLTIU	AT,T8,0018
10200009	*BEQ	AT,R0,7F06C7E4	;branch if invalid type
3C017F07	*LUI	AT,7F07
00380821	*ADDU	AT,AT,T8
9038C834	*LBU	T8,C834 (AT)	;T8=#halfwords to ID#
2F0100FF	*SLTIU	AT,T8,00FF
10200004	*BEQ	AT,R0,7F06C7E4	;branch if invalid type
0018C040	*SLL	T8,T8,0x1	;T8=offset to ID
8CAF0004	*LW	T7,0004 (A1)
01F87821	*ADDU	T7,T7,T8	;data+offset
95E60000	*LHU	A2,0000 (T7)	;A2=group#
//7F06C7E4:	default...
8CA20008	LW	V0,0008 (A1)
1040000D	BEQ	V0,R0,7F06C820	;return if no parent
24030017	*ADDIU	V1,R0,0017
//7F06C7F0:
94580000	LHU	T8,0000 (V0)
331900FF	ANDI	T9,T8,00FF	;T9=parent's type
14790006	*BNE	V1,T9,7F06C814	;branch if not type 17: 
00402825	-OR	A1,V0,R0	;A1=V0: p->parent
0FC1B1E7	JAL	7F06C79C	;do entire heirarchy
AFA6001C	SW	A2,001C (SP)
8FA6001C	LW	A2,001C (SP)
10000004	BEQ	R0,R0,7F06C820
8C470004	LW	A3,0004 (V0)	;A3=p->data
//7F06C814:
8CA20008	LW	V0,0008 (A1)	;V0=parent
5440FFF6	BNEL	V0,R0,7F06C7F4	;loop until none left
94580000	LHU	T8,0000 (V0)
//7F06C820:	return
8FBF0014	LW	RA,0014 (SP)
00064080	SLL	T0,A2,0x2	;T0=A2*4: group# * 4
01071021	ADDU	V0,T0,A3	;V0=p->? + offset: 
03E00008	JR	RA
27BD0020	ADDIU	SP,SP,0020
//7F06C834:	
table:
06 FF FF FF FF FF D5 06 
11 FF 22 10 FF FF FF FF 
FF 02 FF FF FF FF 00 0D 

+_+

More TLB action
Abolishes 80054B60
//7F06CEC4:	A19F4
10A00012	*BEQ	A1,R0,7F06CF10
00000000	*NOP
94AE0000	LHU	T6,0000 (A1)
//7F06CED0:
31CE00FF	*ANDI	T6,T6,00FF
2DC10016	*SLTIU	AT,T6,0016
1020000A	BEQ	AT,R0,7F06CF04
3C017F07	*LUI	AT,7F07
002E0821	*ADDU	AT,AT,T6
8021CF20	*LB	AT,CF20 (AT)
04200006	*BLTZ	AT,7F06CF04
8CA20004	LW	V0,0004 (A1)
//7F06CEF0:
C4C60014	LWC1	F6,0014 (A2)
00411021	*ADDU	V0,V0,AT
C4440000	*LWC1	F4,0000 (V0)
10000005	BEQ	R0,R0,7F06CF14
46062002	-MUL.S	F0,F4,F6
//7F06CF04:
8CA50008	LW	A1,0008 (A1)
54A0FFF1	BNEL	A1,R0,7F06CED0
94AE0000	LHU	T6,0000 (A1)
44800000	MTC1	R0,F0
//7F06CF14:	return
8FBF0014	LW	RA,0014 (SP)
03E00008	-JR	RA
27BD0018	-ADDIU	SP,SP,0018
//7F06CF20:
Table:
FF 08 18 18 FF FF FF FF 
FF FF FF 40 1C 18 0C 18
14 FF FF FF FF 10 FF FF

+_+

Default weapon models now use a table.
Abolish 8005762C

7F09B264:	CFD94
2C810020	SLTIU	AT,A0,0020
50200002	*BEQL	AT,R0,+2
00001025	*OR	V0,R0,R0
00041040	*SLL	V0,A0,0x1
3C017F0A	*LUI	AT,7F0A
00220821	ADDU	AT,AT,V0
03E00008	*JR	RA
8422B284	*LH	V0,B284 (AT)
7F09B284:	
table; use entry 00 as default
FFFF FFFF 00BA 00D1 00BF 00CC 00CD 00C1
00B8 00C3 00BD 00CE 00C2 00BC 00C5 00C0
00CF 00D2 00BE 00D0 00BF 00BF 00BB FFFF
00B9 00D3 00C4 00C9 00C8 00C7 FFFF FFFF

+_+

Removes TLB for these, and unstuipds the tests
Abolish 8005BC40
7F0C1E20:	F6950	TRUE when right enabled on MP menu page
3C0E8008	LUI	T6,8008
8DCEA0B0	LW	T6,A0B0 (T6)	;T6=p->BONDdata
8DCE29C8	*LW	T6,29C8 (T6)	;T7=BONDdata+29C8: current MP menu page
2DC20008	*SLTIU	V0,T6,0008
10400007	*BEQ	V0,R0,7F0C1E58	;branch if invalid page
2DC20005	*SLTIU	V0,T6,0005	;TRUE if 0-4, FALSE if 5-7
24010003	*ADDIU	AT,R0,0003
142E0004	*BNE	AT,T6,7F0C1E58	;branch if not type 3
3C018009	*LUI	AT,8009
//7F0C1E4C:	page 3
8C21C704	*LW	AT,C704 (AT)	;T8=8008C704: TRUE when game over
54200001	*BNEL	AT,R0,+1
00001025	*OR	V0,R0,R0	;V0=FALSE
//7F0C1E58:	return
03E00008	*JR	RA
00000000	*NOP

7F0C1E8C:	F69BC	TRUE when left enabled on MP menu page
Abolishes 8005BC60
3C0E8008	LUI	T6,8008
8DCEA0B0	LW	T6,A0B0 (T6)	;T6=p->BONDdata
8DCE29C8	*LW	T6,29C8 (T6)	;T7=BONDdata+29C8: current MP menu page
2DC20008	*SLTIU	V0,T6,0008
10400009	*BEQ	V0,R0,7F0C1EC4	;branch if invalid page
2DC20006	*SLTIU	V0,T6,0006	;TRUE if not 6,7
51C00001	*BEQ	T6,R0,+1	;TRUE if not 0
00001025	*OR	V0,R0,R0
//7F0C1EAC:	determine if page 1
24010001	*ADDIU	AT,R0,0001
142E0004	*BNE	AT,T6,7F0C1EC4
3C018009	*LUI	AT,8009
//7F0C1EB8:	page 1
8C21C704	*LW	AT,C704 (AT)
50200001	*BEQL	AT,R0,+1
00001025	*OR	V0,R0,R0
//7F0C1EC4:	return
03E00008	JR	RA
00000000	*NOP
//7F0C1ECC:	blank
//7F0C1EF8:	F6A28

+_+

Dwindle this one down as well
Abolishes 80054598 (33808-33868)

types A,11			same except jump
types 8,12,17			same except jump
types 1,2,3,B,C,D,E,F,10,15	S1=0 + default
types 4,5,6,7,9,13,14,16,18	default

could be further reduced, but ehh...

//7F06BE2C:	A095C
	LW	S3,0000 (A0)
	OR	S4,A1,R0
	OR	S5,A2,R0
1260004F	*BEQ	S3,R0,7F06BF78	[68]
8FB60048	LW	S6,0048 (SP)
...
//7F06BE60:	A0990
52000043	*BEQL	S0,R0,7F06BFD4	[5C]
8E730010	LW	S3,0010 (S3)
...

//7F06BEB0:	A09E0
8E100008	LW	S0,0008 (S0)
1600FFF5	BNEZ	S0,7F06BE8C
00000000	NOP
5200002C	*BEQL	S0,R0,7F06BF70	[45]
8E730010	LW	S3,0010 (S3)
96020000	LHU	V0,0000 (S0)
304F00FF	*ANDI	T7,V0,00FF
//7F06BECC:	A09FC	S1=0 for those who need it
3C01FFDE	*LUI	AT,FFDE
342107F1	*ORI	AT,AT,07F1	;AT=FFDE07F1: bitflag word
01E10807	*SRAV	AT,AT,T7	;FFDE07F1 >> type bits
30310001	*ANDI	S1,AT,0001	;S1=TRUE if flag set
//7F06BEDC:	A0A0C	set up variables
3C187F07	*LUI	T8,7F07
8E640000	*LW	A0,0000 (S3)	;used by all jump types
02002825	*OR	A1,S0,R0	;used by all jump types
//7F06BEE8:	A0A18	begin tests
24010011	*ADDIU	AT,R0,0011	;type 11
502F0004	*BEQL	AT,T7,7F06BF00	;+4
27180044	*ADDIU	T8,T8,0044	;7F074C68+44= 7F074CAC
2401000A	*ADDIU	AT,R0,000A	;type A
142F0010	*BNE	AT,T7,+next	;push big test to end...
24010017	*ADDIU	AT,R0,0017	;type 17
//7F06BF00:	A0A30	types A,11
27184C68	*ADDIU	T8,T8,4C68
02803025	OR	A2,S4,R0
0300F809	*JALR	RA,T8
02A03825	OR	A3,S5,R0
50400014	*BEQL	V0,R0,7F06BF64
00008825	*OR	S1,R0,R0
8E790000	LW	T9,0000 (S3)
8FA80044	LW	T0,0044 (SP)
AD190000	SW	T9,0000 (T0)
AED00000	SW	S0,0000 (S6)
8FA90038	LW	T1,0038 (SP)
AD330000	SW	S3,0000 (T1)
8E0A0004	LW	T2,0004 (S0)
10000013	*BEQ	R0,R0,7F06BF84
8D420000	LW	V0,0000 (T2)
//7F06BF3C:	A0A6C	more tests
502F0006	*BEQL	AT,T7,+jumps	;jump if type 17
27180098	*ADDIU	T8,T8,0098	;7F06E970+98=7F06EA08
24010012	*ADDIU	AT,R0,0012	;type 12
502F0003	*BEQL	AT,T7,+jumps
2718004C	*ADDIU	T8,T8,004C	;7F06E970+4C=7F06E9BC
24010008	*ADDIU	AT,R0,0008	;type 8
142F0003	*BNE	AT,T7,7F06BF64
2718E970	*ADDIU	T8,T8,E970
//7F06BF5C:	A0A8C	jumps
0300F809	*JALR	RA,T8
00000000	*NOP
//7F06BF64:	A0A94	default: 4,5,6,7,9,13,14,16,18	(replaces 7F06BFC8)
1600FFC0	*BNEZ	S0,7F06BE68
00000000	*NOP
//7F06BF6C:	A0A9C	(replaces 7F06BFD0)
8E730010	*LW	S3,0010 (S3)
5660FFB4	*BNEL	S3,R0,7F06BE44
8EC20000	*LW	V0,0000 (S6)
//7F06BF78:	A0AA8	(replaces 7F06BFDC)
8FAF0038	LW	T7,0038 (SP)
00001025	OR	V0,R0,R0
ADE00000	SW	R0,0000 (T7)
//7F06BF84:	A0AB4	return	(replaces 7F06BFE8)
8FBF0034	LW	RA,0034 (SP)
8FB00018	LW	S0,0018 (SP)
8FB1001C	LW	S1,001C (SP)
8FB20020	LW	S2,0020 (SP)
8FB30024	LW	S3,0024 (SP)
8FB40028	LW	S4,0028 (SP)
8FB5002C	LW	S5,002C (SP)
8FB60030	LW	S6,0030 (SP)
03E00008	JR	RA
27BD0038	ADDIU	SP,SP,0038
//7F06BFAC:	space...

Table:
01 00 00 00 01 01 01 01
01 01 01 00 00 00 00 00
00 01 01 01 01 00 01 01 
01 ~etc

FFDE07F1
use SRAV to force all invalid values to return 1

+_+

Slew of tables here...

Abolish 80054194	[33404-334FC]
	*NOP;otherwise, would just jump and set the stupid thing to 0E8 anyway...
	NOP
//7F065E34:	9A964
2E21003E	SLTIU	AT,S1,003E
3C017F06	*LUI	AT,7F06
50200002	*BEQL	AT,R0,+2
2421003F	*ADDIU	AT,AT,003F
00310821	*ADDU	AT,AT,S1
90255E68	*LBU	A1,5E68 (AT)
10A0001B	*BEQ	A1,R0,7F065EBC	;no sound = 0
//7F065E50:	9A980	all sounds go here
3C048006	LUI	A0,8006
8C843720	LW	A0,3720 (A0)
0C002382	JAL	70008E08
00003025	OR	A2,R0,R0
10000016	BEQ	R0,R0,7F065EBC
00000000	NOP
//7F065E68:	empty...

//7F065EBC:	9A9EC	no sound

00 00 E9 E9 E8 E8 E8 E8
E8 E8 E8 E8 E8 E8 E8 E8
E8 E8 E8 E8 E8 E8 F2 00
E8 E8 00 EB EB EB 00 00
00 00 00 E8 E8 E8 E8 E8
00 E8 E8 E8 E8 E8 E8 00
00 E8 E8 E8 E8 E8 E8 E8
E8 E8 E8 E8 00 00 E8 E8

play reload sound - 1 inhibits
Abolish 80054294	[33504-335FC]
//7F06618C:	9ACBC
2E21003E	SLTIU	AT,S1,003E
10200006	*BEQ	AT,R0,7F0661AC	change to 7F0661C0 to inhibit reload sound for all gadgets
3C017F06	*LUI	AT,7F06
DC385EA8	*LD	T8,5EA8 (AT)
0238C017	*DSRAV	T8,T8,S1
33180001	*ANDI	T8,T8,0001
17000006	*BNEZ	T8,7F0661C0
	NOP

1 1 1 1 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 1 1
0 0 1 1 1 1 1 1
1 1 1 0 0 1 1 1
1 1 1 1 0 1 1 1
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1
F001820F F980000F
FFFFEFE7 FCC0000F

Also, get rid of a few sneaky float values:
//7F066054:	9AB84	speed you reload at
3C013F33	LUI	AT,3F33
44812000	MTC1	AT,F4		;F4=80054290: 0.699219

//7F065F18:	9AA48	speed you draw the weapon at
3C018005	LUI	AT,8005
C42A428C	LWC1	F10,428C (AT)	;F10=8005428C: 0.698132

+_+

Be cheap about 7F06B29C.  Move TLB pointer table to 7F06BFAC	A0ADC
Obliterates 800544E4 [33754-337A8]

7F06B29C	9FDCC	
//7F06B2D4:	9FE04
305800FF	ANDI	T8,V0,00FF
2F010016	*SLTIU	AT,T8,0016
0018C840	*SLL	T9,T8,0x1
102000F0	BEQ	AT,R0,7F06B6A4
3C017F07	LUI	AT,7F07
0039C821	*ADDU	T9,AT,T9
8739BFAC	*LH	T9,BFAC (T9)
00390821	*ADDU	AT,AT,T9
00200008	*JR	AT
00000000	NOP

+_+

remove watch zoom scales from 21990
//7F0A5330:	D9E60	40933333
3C014093	LUI	AT,8006
44816000	LWC1	F12,8458 (AT)	;F12=brief/objective zoom

//7F0A5364:	D9E94	40933333
3C014093	LUI	AT,8006
44816000	LWC1	F12,845C (AT)	;F12=inventory zoom

//7F0A54A0:	D9FD0	40BCCCCD
3C0140BD	LUI	AT,8006
44816000	LWC1	F12,8460 (AT)	;F12=80058460: zoom for inventory->main watch menu

//7F0A54E4:	DA014	407CCCCD
3C01407D	LUI	AT,8006
	JAL	7F07E400	;trigger watch zoom
44816000	LWC1	F12,8464 (AT)	;F12=80058464: zoom for inventory->control watch menu

//7F0A55A4:	DA0D4	407CCCCD
3C01407D	LUI	AT,8006
	JAL	7F07E400	;trigger watch zoom
44816000	LWC1	F12,8468 (AT)	;F12=80058468: unused zoom for control->options watch menu

//7F0A561C:	DA14C	40933333
3C014093	LUI	AT,8006
44816000	LWC1	F12,846C (AT)	;F12=8005846C: zoom for control->inventory watch menu

//7F0A5764:	DA294	40933333
3C014093	LUI	AT,8006
	JAL	7F07E400	;trigger watch zoom
44816000	LWC1	F12,8470 (AT)	;F12=80058470: zoom for options->objective/briefing watch menu
	
//7F0A57D4:	DA304	407CCCCD
3C01407D	LUI	AT,8006
44816000	LWC1	F12,8474 (AT)	;F12=80058474: zoom for objective/briefing->options watch menu

//7F0A5840:	DA370	40BCCCCD
3C0140BD	LUI	AT,8006
	JAL	7F07E400	;trigger watch zoom
44816000	LWC1	F12,8478 (AT)	;F12=80058478: zoom for objective/briefing->main watch menu

More calls them than these.  Must pilfer...

+_+

Reduce, since this is ugly...
7F00C384	40EB4	V0=p->name of difficulty A0
27BDFFE8	ADDIU	SP,SP,FFE8
2C820004	SLTIU	V0,A0,0004
10400004	BEQ	V0,R0,+return
AFBF0014	SW	RA,0014 (SP)
//7F00C3B8:	agent
34029C13	ORI	V0,R0,9C13	;V0=9C13: "agent"
0FC30776	JAL	7F0C1DD8	;V0=p->text A0
00442021	ADDU	A0,A0,V0	;A0+=text code: ID 9C13-9C16: difficulty text ID
//7F00C3F4:	return
8FBF0014	LW	RA,0014 (SP)
03E00008	JR	RA
27BD0018	ADDIU	SP,SP,0018

+_+

reduce this in size for the 'other' scenario halfword pull

7F014764	49294	initialize folder tabs and load folder resources
LUI	AT,8003
SW	R0,A8D0 (AT)	;0->8002A8D0: reset selected flag for folder tab 1
LUI	AT,8003
SW	R0,A8D4 (AT)	;0->8002A8D4: reset selected flag for folder tab 2
LUI	AT,8003
SW	R0,A8D8 (AT)	;0->8002A8D8: reset selected flag for folder tab 3
LUI	AT,8003
SW	R0,A8E4 (AT)	;0->8002A8E4:  reset highlight flag for folder tab 3
LUI	AT,8003
ADDIU	SP,SP,FFE8
SW	R0,A8E0 (AT)	;0->8002A8E0: reset highlight flag for folder tab 2
SW	RA,0014 (SP)
LUI	AT,8003
JAL	7F00B8AC	;loads walletbond, used to construct main menus
SW	R0,A8DC (AT)	;0->8002A8DC: reset highlight flag for folder tab 1
LW	RA,0014 (SP)
ADDIU	SP,SP,0018
JR	RA
NOP
JR	RA	;return for a deleted routine
NOP

now:	remove reference to unused function, and move one caller of this
//7F014764	49294	initialize folder tabs and load folder resources
*NOP
*NOP
*NOP
*NOP
*NOP
*NOP
::7F01477C	492AC	initialize multiplayer options menu (moved from 7F013D78)
3C018007	*LUI	AT,8007
AC20977C	*SW	R0,977C (AT)
::7F014784	492B4	initialize folder tabs and load folder resources
3C018003	LUI	AT,8003
AC20A8D0	SW	R0,A8D0 (AT)	;0->8002A8D0: reset selected flag for folder tab 1
AC20A8D4	SW	R0,A8D4 (AT)	;0->8002A8D4: reset selected flag for folder tab 2
AC20A8D8	SW	R0,A8D8 (AT)	;0->8002A8D8: reset selected flag for folder tab 3
AC20A8E4	SW	R0,A8E4 (AT)	;0->8002A8E4:  reset highlight flag for folder tab 3
27BDFFE8	ADDIU	SP,SP,FFE8
AC20A8E0	SW	R0,A8E0 (AT)	;0->8002A8E0: reset highlight flag for folder tab 2
AFBF0014	SW	RA,0014 (SP)
0FC02E2B	JAL	7F00B8AC	;loads walletbond, used to construct main menus
AC20A8DC	SW	R0,A8DC (AT)	;0->8002A8DC: reset highlight flag for folder tab 1
8FBF0014	LW	RA,0014 (SP)
03E00008	JR	RA	;return for a deleted routine
27BD0018	ADDIU	SP,SP,0018


+_+

MP option highlights converted to single bytes
45500	AD2397E8	->	A12397D0
45520	AD2397E4	->	A12397CF
45548	AD2397E0	->	A12397CE
45570	AD2397D8	->	A12397CC
45598	AD2397DC	->	A12397CD
455C0	AD2397D4	->	A12397CB
455E8	AD2397D0	->	A12397CA
45608	AD2397C8	->	A12397C8
4560C	AD2397CC	->	A12397C9
4569C	8C3897C8	->	803897C8
456A8	8C3897CC	->	803897C9
456B4	8C3897D0	->	803897CA
456C0	8C3897D4	->	803897CB
456CC	8C3897D8	->	803897CC
456D8	8C3897DC	->	803897CD
456E4	8C3897E0	->	803897CE
456F0	8C3897E4	->	803897CF
456FC	8C3897E8	->	803897D0
45B24	8DAD97C8	->	81AD97C8
45BFC	8DAD97CC	->	81AD97C9
45CD4	8DAD97D0	->	81AD97CA
45DC8	8DAD97D4	->	81AD97CB
45EBC	8DAD97DC	->	81AD97CD
45FB0	8DAD97D8	->	81AD97CC
460A4	8DAD97E0	->	81AD97CE
46198	8DAD97E4	->	81AD97CF
4628C	8DAD97E8	->	81AD97D0

800697C8	hightlight players
800697C9	hightlight scenario
800697CA	hightlight level
800697CB	hightlight length
800697CC	hightlight characters
800697CD	hightlight weapons
800697CE	hightlight health
800697CF	hightlight control
800697D0	hightlight aim
800697D1	hightlight score
800697D2	hightlight minutes

+_+

Get rid of solo watch menu TLB entries
Abolish 3773C-37750

//7F0A6DE4:	DB914
2DA10005	SLTIU	AT,T5,0005
1020003B	BEQ	AT,R0,7F0A6ED8
000D6840	*SLL	T5,T5,0x1
3C017F0A	*LUI	AT,7F0A
002D6821	*ADDU	T5,AT,T5
85AD6EA0	*LH	T5,6EA0 (T5)
002D6821	*ADDU	T5,AT,T5
01A00008	-JR	T5
00000000	NOP
//7F0A6E08:
0FC2949B	-JAL	7F0A526C
00000000	*NOP
10000031	*BEQ	R0,R0,7F0A6ED8
00000000	*NOP
//7F0A6E18:
3C028004	LUI	V0,8004
8C420998	LW	V0,0998 (V0)
14400005	*BNE	V0,R0,+5
24010001	*ADDIU	AT,R0,0001
0FC29618	-JAL	7F0A5860
00000000	NOP
10000005	*BEQ	R0,R0,+5
00000000	NOP
14220003	*BNE	AT,V0,+3
00000000	NOP
0FC29640	-JAL	7F0A5900
00000000	NOP
0FC29571	JAL	7F0A55C4
00000000	NOP
10000021	*BEQ	R0,R0,7F0A6ED8
00000000	*NOP
00000000	*NOP
00000000	NOP


Get rid of an objectives page option handler...
abolishes 800584E0 (37750-37778)

//7F0A6E60:	DB990
3C0E8004	LUI	T6,8004
8DCE099C	LW	T6,099C (T6)
2DC1000A	SLTIU	AT,T6,000A
10200008	*BEQ	AT,R0,7F0A6E90
3C027F0A	*LUI	V0,7F0A
24425998	*ADDIU	V0,V0,5998	;all but entries 0 and 1 use this
502E0001	*BEQL	AT,T6,+1
2442015C	*ADDIU	V0,V0,015C
500E0001	*BEQL	R0,T6,+1
244200CC	*ADDIU	V0,V0,00CC
0040F809	*JALR	RA,V0
00000000	NOP
//7F0A6E90:
0FC295A9	-JAL	7F0A56A4
00000000	-NOP
1000000F	-BEQ	R0,R0,7F0A6ED8
00000000	*NOP
//7F0A6EA0:
clear through 7F0A6EC0

+_+

return a default text pointer when a NULL or invalid string used
7F0C1DD8	F6908	V0= p->text ID A0
SRA	T6,A0,0xA
SLL	T7,T6,0x2
LUI	V0,8009
ADDU	V0,V0,T7
LW	V0,C63C (V0)	;V0=8008C63C+group offset: p->table
ANDI	T8,A0,03FF
SLL	T9,T8,0x2	;T9=(A0 & 0x3FF)*4: offset to entry in table
ADDU	T0,V0,T9
LW	V1,0000 (T0)	;V1=offset within bank
OR	A0,R0,R0
BEQ	V1,R0,7F0C1E14
NOP
ADDU	A0,V1,V0	;A0=V1+V0: p->text
JR	RA
OR	V0,A0,R0
//7F0C1E14:
JR	RA
OR	V0,A0,R0

revision!	returns a valid string when invalid bank or pointer within
7F0C1DD8	F6908	V0= p->text ID A0
00047283	SRA	T6,A0,0xA
000E7080	*SLL	T6,T6,0x2
3C028009	LUI	V0,8009
004E1021	*ADDU	V0,V0,T6
8C42C63C	LW	V0,C63C (V0)	;V0=8008C63C+group offset: p->table
3C0F7F0C	*LUI	T7,7F0C
10400007	*BEQ	V0,R0,+return	;return default if NULL pointer
25EF1E18	*ADDIU	T7,T7,1E18
308E03FF	*ANDI	T6,A0,03FF
000E7080	*SLL	T6,T6,0x2	;T9=(A0 & 0x3FF)*4: offset to entry in table
004E7021	*ADDU	T6,V0,T6
8DCE0000	*LW	T6,0000 (T6)	;V1=p->text handle
55C00001	*BNEL	T6,R0,+1
01C27821	*ADDU	T7,T6,V0
//7F0C1E14:
03E00008	JR	RA
000F1025	*OR	V0,T7,R0
	*data: "ERR\0"	45525200
	NOP

+_+

simplify this dramatically!

used at	7F0BDE6C	(stage boot)
	7F088920	(respawn)

7F0793EC	ADF1C	initialize playerdata
AFBFFFFC	*SW	RA,FFFC (SP)
0FC26919	JAL	7F09A464	;V0=#players
27BDFFE8	ADDIU	SP,SP,FFE8
28410002	SLTI	AT,V0,0002
14200009	BNEZ	AT,7F07943C	;branch if solo
00000000	NOP
//7F079408:	multiplayer only...
0FC26C54	JAL	7F09B150	;V0=cur.player#
3C038008	LUI	V1,8008		;this should be safe from both routines
0FC0402F	JAL	7F0100BC	;V0= player A0's control style
00022025	OR	A0,V0,R0	;A0=V0: player#
8C6EA0B0	*LW	T6,A0B0 (V1)	;T6=8007A0B0: cur.player data pointer
ADC20430	SW	V0,0430 (T6)	;cur.player+430: control style
0FC29374	JAL	7F0A4DD0	;set control style A0 to current playerdata
00022025	OR	A0,V0,R0	;A0=V0: control style
//7F07943C:
3C038008	LUI	V1,8008
8C6EA0B0	*LW	T6,A0B0 (V1)	;T7=8007A0B0: cur.BONDdata pointer
3C023F80	*LUI	V0,3F80
3C03BF80	*LUI	V1,BF80
24050001	ADDIU	A1,R0,0001	;A1=1
2406FFFF	ADDIU	A2,R0,FFFF	;A2=-1
24070002	ADDIU	A3,R0,0002	;A3=2
//	yes, I do realize this caould be looped and whatnot...
ADC00000	SW	R0,0000 (T6)	;BONDdata+0= 0
ADC00004	*SW	R0,0004 (T6)	;BONDdata+4= 0.0
ADC00008	*SW	R0,0008 (T6)	;BONDdata+8= 0.0
ADC0000C	*SW	R0,000C (T6)	;BONDdata+C= 0.0
ADC00010	*SW	R0,0010 (T6)	;BONDdata+10= 0.0
ADC00014	*SW	R0,0014 (T6)	;BONDdata+14= 0.0
ADC20018	*SW	V0,0018 (T6)	;BONDdata+18= 1.0
ADC0001C	*SW	R0,001C (T6)	;BONDdata+1C= 0.0
ADC20020	*SW	V0,0020 (T6)	;BONDdata+20= 1.0
ADC00024	*SW	R0,0024 (T6)	;BONDdata+24= 0.0
ADC00028	*SW	R0,0028 (T6)	;BONDdata+28= 0.0
ADC0002C	*SW	R0,002C (T6)	;BONDdata+2C= 0.0
ADC00030	*SW	R0,0030 (T6)	;BONDdata+30= 0.0
ADC00034	SW	R0,0034 (T6)	;BONDdata+34= 0
ADC00038	*SW	R0,0038 (T6)	;BONDdata+38= 0.0
ADC0003C	*SW	R0,003C (T6)	;BONDdata+3C= 0.0
ADC00040	*SW	R0,0040 (T6)	;BONDdata+40= 0.0
ADC00044	*SW	R0,0044 (T6)	;BONDdata+44= 0.0
ADC00048	*SW	R0,0048 (T6)	;BONDdata+48= 0.0
ADC0004C	*SW	R0,004C (T6)	;BONDdata+4C= 0.0
ADC00050	*SW	R0,0050 (T6)	;BONDdata+50= 0.0
ADC00054	*SW	R0,0054 (T6)	;BONDdata+54= 0.0
ADC00058	*SW	R0,0058 (T6)	;BONDdata+58= 0.0
ADC00084	*SW	R0,0084 (T6)	;BONDdata+84= 0.0
ADC00088	*SW	R0,0088 (T6)	;BONDdata+88= 0.0
ADC0008C	SW	R0,008C (T6)	;BONDdata+8C= 0
ADC00090	*SW	R0,0090 (T6)	;BONDdata+90= 0.0
ADC00094	SW	R0,0094 (T6)	;BONDdata+94= 0
ADC00098	*SW	R0,0098 (T6)	;BONDdata+98= 0.0
ADC7009C	SW	A3,009C (T6)	;BONDdata+9C= 2
ADC000A0	*SW	R0,00A0 (T6)	;BONDdata+A0= 0.0
ADC000A4	*SW	R0,00A4 (T6)	;BONDdata+A4= 0.0
ADC500AC	SW	A1,00AC (T6)	;BONDdata+AC= 1
ADC000D0	SW	R0,00D0 (T6)	;BONDdata+D0= 0
ADC000D8	SW	R0,00D8 (T6)	;BONDdata+D8= 0
ADC200DC	*SW	V0,00DC (T6)	;BONDdata+DC= 1.0
ADC000E0	*SW	R0,00E0 (T6)	;BONDdata+E0= 0.0
ADC200E4	*SW	V0,00E4 (T6)	;BONDdata+E4= 1.0
ADC000E8	*SW	R0,00E8 (T6)	;BONDdata+E8= 0.0
ADC200EC	*SW	V0,00EC (T6)	;BONDdata+EC= 1.0
ADC000F0	*SW	R0,00F0 (T6)	;BONDdata+F0= 0.0
ADC600F4	SW	A2,00F4 (T6)	;BONDdata+F4= -1
ADC600F8	SW	A2,00F8 (T6)	;BONDdata+F8= -1
ADC00104	SW	R0,0104 (T6)	;BONDdata+104= 0
ADC00108	SW	R0,0108 (T6)	;BONDdata+108= 0
ADC0010C	SW	R0,010C (T6)	;BONDdata+10C= 0
ADC00110	SW	R0,0110 (T6)	;BONDdata+110= 0
ADC50114	SW	A1,0114 (T6)	;BONDdata+114= 1
ADC50118	SW	A1,0118 (T6)	;BONDdata+118= 1
ADC0011C	SW	R0,011C (T6)	;BONDdata+11C= 0
ADC50120	SW	A1,0120 (T6)	;BONDdata+120= 1
ADC00124	SW	R0,0124 (T6)	;BONDdata+124= 0
ADC50128	SW	A1,0128 (T6)	;BONDdata+128= 1
ADC0012C	*SW	R0,012C (T6)	;BONDdata+12C= 0.O
ADC00130	SW	R0,0130 (T6)	;BONDdata+130= 0
ADC60134	SW	A2,0134 (T6)	;BONDdata+134=-1
ADC50138	SW	A1,0138 (T6)	;BONDdata+138= 1
ADC0013C	*SW	R0,013C (T6)	;BONDdata+13C= 0.0
ADC00140	SW	R0,0140 (T6)	;BONDdata+140= 0
ADC60144	SW	A2,0144 (T6)	;BONDdata+144=-1
ADC0014C	*SW	R0,014C (T6)	;BONDdata+14C= 0,0
ADC20150	*SW	V0,0150 (T6)	;BONDdata+150= 1.0
ADC00154	*SW	R0,0154 (T6)	;BONDdata+154= 0.0
3C01C080	LUI	AT,C080
ADC10158	*SW	AT,0158 (T6)	;BONDdata+158= -4.0
3C0143B2	*LUI	AT,43B2
ADC1015C	*SW	AT,015C (T6)	;BONDdata+15C= 356.0	[43B20000]
ADC00160	*SW	R0,0160 (T6)	;BONDdata+160=0.0
ADC20164	*SW	V0,0164 (T6)	;BONDdata+164= 1.0
ADC00168	*SW	R0,0168 (T6)	;BONDdata+168= 0.0
ADC0016C	*SW	R0,016C (T6)	;BONDdata+16C= 0.0
ADC00170	*SW	R0,0170 (T6)	;BONDdata+170= 0.0
ADC00174	*SW	R0,0174 (T6)	;BONDdata+174= 0.0
ADC20178	*SW	V0,0178 (T6)	;BONDdata+178= 1.0
ADC0017C	SW	R0,017C (T6)	;BONDdata+17C= 0
ADC00180	*SW	R0,0180 (T6)	;BONDdata+180= 0.0
ADC00184	*SW	R0,0184 (T6)	;BONDdata+184= 0.0
ADC00188	*SW	R0,0188 (T6)	;BONDdata+188= 0.0
ADC3018C	*SW	V1,018C (T6)	;BONDdata+18C=-1.0
ADC30190	*SW	V1,0190 (T6)	;BONDdata+190=-1.0
ADC00194	*SW	R0,0194 (T6)	;BONDdata+194= 0.0
ADC00198	*SW	R0,0198 (T6)	;BONDdata+198= 0.0
ADC0019C	*SW	R0,019C (T6)	;BONDdata+19C= 0.0
ADC001A0	SW	R0,01A0 (T6)	;BONDdata+1A0= 0
ADC001C0	SW	R0,01C0 (T6)	;BONDdata+1C0= 0
ADC001C4	SW	R0,01C4 (T6)	;BONDdata+1C4= 0
ADC001C8	SW	R0,01C8 (T6)	;BONDdata+1C8= 0
ADC501CC	SW	A1,01CC (T6)	;BONDdata+1CC= 1
ADC001D0	SW	R0,01D0 (T6)	;BONDdata+1D0= 0
ADC00200	SW	R0,0200 (T6)	;BONDdata+200= 0
ADC00204	*SW	R0,0204 (T6)	;BONDdata+204= 0.0
ADC00208	*SW	R0,0208 (T6)	;BONDdata+208= 0.0
ADC0020C	*SW	R0,020C (T6)	;BONDdata+20C= 0.0
ADC00210	*SW	R0,0210 (T6)	;BONDdata+210= 0.0
ADC00214	*SW	R0,0214 (T6)	;BONDdata+214= 0.0
ADC00218	SW	R0,0218 (T6)	;BONDdata+218= 0
ADC00220	SW	R0,0220 (T6)	;BONDdata+220= 0
ADC00224	*SW	R0,0224 (T6)	;BONDdata+224= 0.0
ADC003B4	*SW	R0,03B4 (T6)	;BONDdata+3B4= 0
ADC003C4	*SW	R0,03C4 (T6)	;BONDdata+3C4= 0.0
ADC003C8	*SW	R0,03C8 (T6)	;BONDdata+3C8= 0.0
ADC203CC	*SW	V0,03CC (T6)	;BONDdata+3CC= 1.0
240100FF	*ADDIU	AT,R0,00FF
ADC103D0	*SW	AT,03D0 (T6)	;BONDdata+3D0= FF
ADC103D4	*SW	AT,03D4 (T6)	;BONDdata+3D4= FF
ADC103D8	*SW	AT,03D8 (T6)	;BONDdata+3D8= FF
ADC003DC	*SW	R0,03DC (T6)	;BONDdata+3DC= 0.0
ADC303E0	*SW	V1,03E0 (T6)	;BONDdata+3E0=-1.0
ADC303E4	*SW	V1,03E4 (T6)	;BONDdata+3E4=-1.0
ADC103E8	*SW	AT,03E8 (T6)	;BONDdata+3E8= FF
ADC103EC	*SW	AT,03EC (T6)	;BONDdata+3EC= FF
ADC103F0	*SW	AT,03F0 (T6)	;BONDdata+3F0= FF
ADC103F4	*SW	AT,03F4 (T6)	;BONDdata+3F4= FF
ADC103F8	*SW	AT,03F8 (T6)	;BONDdata+3F8= FF
ADC103FC	*SW	AT,03FC (T6)	;BONDdata+3FC= FF
ADC00400	*SW	R0,0400 (T6)	;BONDdata+400= 0.0
ADC00404	*SW	R0,0404 (T6)	;BONDdata+404= 0.0
ADC7042C	SW	A3,042C (T6)	;BONDdata+42C= 2
ADC00430	SW	R0,0430 (T6)	;BONDdata+430= 0
ADC01274	SW	R0,1274 (T6)	;BONDdata+1274= 0.0
ADC01278	SW	R0,1278 (T6)	;BONDdata+1278= 0.0
ADC0127C	SW	R0,127C (T6)	;BONDdata+127C= 0.0
3C014170	LUI	AT,4170
ADC129C0	*SW	AT,29C0 (T6)	;BONDdata+29C0= 15.0
ADC729FC	SW	A3,29FC (T6)	;BONDdata+29FC= 2
A5C62A04	SH	A2,2A04 (T6)	;BONDdata+2A04=-1
ADC02A08	SW	R0,2A08 (T6)	;BONDdata+2A08= 0.0
ADC02A0C	SW	R0,2A0C (T6)	;BONDdata+2A0C= 0.0
ADC02A4C	SW	R0,2A4C (T6)	;BONDdata+2A4C= 0.0
ADC02A6C	SW	R0,2A6C (T6)	;BONDdata+2A6C= 0
ADC02A70	SW	R0,2A70 (T6)	;BONDdata+2A70= 0
	//7F0798A8:	return
8FBF0014	LW	RA,0014 (SP)
03E00008	-JR	RA
27BD0018	ADDIU	SP,SP,0018
//7F079658	AE188

+_+

uses TLB pointers at 80052DF0
7F04DFD0	82B00
LBU	T6,0003 (A0)
ADDIU	T7,T6,FFFF
SLTIU	AT,T7,002F
BEQ	AT,R0,7F04E000
SLL	T7,T7,0x2
LUI	AT,8005
ADDU	AT,AT,T7
LW	T7,2DF0 (AT)
JR	T7
NOP
JR	RA
ADDIU	V0,R0,0001
//7F04E000:
OR	V0,R0,R0
JR	RA
NOP

uses TLB pointers at 80052EAC
7F04E00C	82B3C
LBU	T6,0003 (A0)
ADDIU	T7,T6,FFFC
SLTIU	AT,T7,0012
BEQ	AT,R0,7F04E03C
SLL	T7,T7,0x2
LUI	AT,8005
ADDU	AT,AT,T7
LW	T7,2EAC (AT)
JR	T7
NOP
JR	RA
ADDIU	V0,R0,0001
//7F04E03C:
OR	V0,R0,R0
JR	RA
NOP

rewrite, pertaining to both
uses 0x10 of data, allocating two words to each, ensuring more commands can be written in the future
7F04DFD0	82B00	table of data
35 1E 00 00 C8 57 00 00	00110101 00011110 00000000 00000000 11001000 01010111
C8 00 19 00 00 00 00 00	11001000 00000000 00011001 00000000 00000000 00000000

7F04DFE0	82B10	redirected from 7F04DFD0
10000002	BEQ	R0,R0,+2
//7F04DFE4:	redirected from 7F04E00C
3C017F05	LUI	AT,7F05
24210008	ADDIU	AT,AT,0008
//7F04DFEC:
908E0003	LBU	T6,0003 (A0)
25CEFFFF	ADDIU	T6,T6,FFFF	;commands 01-30
24020008	ADDIU	V0,R0,0008
01C2001B	DIVU	T6,V0		;command / 8.  divisor is offset, mordant # bits in byte
00001012	MFLO	V0		;V0= offset in bytes from start of table
00220821	ADDU	AT,AT,V0	;AT=p->byte containing data
9021DFD0	LBU	AT,DFD0 (AT)	;AT=byte
00007010	MFHI	T6		;T6= bitshift within byte
24020001	ADDIU	V0,R0,0001
01C21004	SLLV	V0,V0,T6	;V0=1<<command
00221024	AND	V0,AT,V0	;V0=!0 if set
03E00008	JR	RA
0002102B	SLTU	V0,R0,V0	;V0=TRUE if V0 > 0	normalizes to 1 if bit set

+_+

hack to allow stick-up + select to random select
oh, and deal with this:
7F011BD8	eliminate from initializer and interface, but not constructor
	well, that looks stupid, so just have the constructor spit out straight black...
	repair that line that was changed too so it returns a proper value

S0= player#, lead in  SLL	A0,S0,0x18
//7F012080:	46BB0	detect if selection made
02002025	*OR	A0,S0,R0
0C0030EB	JAL	7000C3AC	;V0= player A0's buttons A1 pressed
3405B000	ORI	A1,R0,B000	;A1=A, Z, Start buttons
10400021	*BEQ	V0,R0,7F012114	;do left/right stick if no selection
//7F012090:	46BC0	check if stick up: random select
02002025	*OR	A0,S0,R0
2405FFFE	*ADDIU	A1,R0,FFFE	;A1=low limit
0C00314A	*JAL	7000C528	;V0=vert.control stick state
24060001	*ADDIU	A2,R0,0001	;A2=high limit
18400008	*BLEZ	V0,+select
3C088003	*LUI	T0,8003
0C002914	*JAL	7000A450	;returns V0=random; fries AT,A0,A1,A2
850AB194	*LH	T2,B194 (T0)	;T5=8002B194: #characters
004A001B	*DIVU	V0,T2
00001010	*MFHI	V0		;V0=rand % #entries
004A082B	*SLTU	AT,V0,T2	;TRUE if valid entry
54200001	*BNEL	AT,R0,+1	;set only if valid
AE220000	*SW	V0,0000 (S1)	;update highlighted entry
//7F0120C4:	46BF4	select
8E290000	LW	T1,0000 (S1)	;T1=highlighted selection
01134021	*ADDU	T0,T0,S3
02F35021	ADDU	T2,S7,S3	;T2=size.reg + pl.offset
AD09B524	*SW	T1,B524 (T0)	;8002B524+offset: save cur.selection
24020001	ADDIU	V0,R0,0001	;must be 1
AD420000	SW	V0,0000 (T2)	;1->size.reg
AE820000	SW	V0,0000 (S4)	;1->selected.reg
8FC40000	LW	A0,0000 (S8)
240500C7	ADDIU	A1,R0,00C7
0C002382	JAL	70008E08	;play sound effect A1
00003025	OR	A2,R0,R0
1000001D	BEQ	R0,R0,7F012168
8EA50000	LW	A1,0000 (S5)
//7F0120F8:	46C28
	*NOP
	*NOP
	*NOP
	*NOP
	*NOP
	*NOP
	*NOP
//7F012114:	46C44	pressed check if stick left
8E4C0000	LW	T4,0000 (S2)	;T4= TRUE if selection made
15800012	*BNE	T4,R0,7F012164	;skip if selection already made
00102025	*OR	A0,S0,R0	;A0=T3: player#
2405FFFE	ADDIU	A1,R0,FFFE	;A1=left limit
0C00312D	JAL	7000C4B4	;V0=horz.control stick state
24060001	ADDIU	A2,R0,0001	;A2=right limit
8E230000	*LW	V1,0000 (S1)	;V1=highlighted selection
5C400004	*BGTZL	V0,+correct	;branch if right
24630001	*ADDIU	V1,V1,0001	;selection+1
2841FFFF	SLTI	AT,V0,FFFF	;TRUE if left (-2)
10200009	*BEQ	AT,R0,7F012164	;branch if not left
2463FFFF	*ADDIU	V1,V1,FFFF	;selection-1
3C088003	LUI	T0,8003
8508B194	LH	T0,B194 (T0)	;T5=8002B194: #characters
0068082A	*SLT	AT,V1,T0	;TRUE if within thingy
50200001	*BEQL	AT,R0,+1
2503FFFF	*ADDIU	V1,T0,FFFF	;V1=selection->final
04620001	*BLTZL	V1,+1
00001825	*OR	V1,R0,R0	;V1=first entry
AE230000	*SW	V1,0000 (S1)	;update highlighted entry
//7F012164:	46C94	etc...

+_+

Get rid of the stupid TLB thing at the end of the debug menu
Seriously, they're all the same, pointing immendiately +after+ the JR command X{
Removes 80055830 (34AA0-34AB4)

//7F090E8C:	C59BC	
NOP next 8 commands	

+_+

killing the radar bug I'm responsible for

Things pulling the image#
//7F04A7CC:
LW	V0,0008 (S0)	;image#
SLTIU	AT,V0,0064	;hmm...  limit of 100 images in monitor image bank...
BEQ	AT,R0,7F04A7F4
OR	S1,V0,R0	;S1=V0: presumes must be a pointer to declaration
SLL	T5,V0,0x2
LW	T7,D120 (T7)	;T7=8008D120: p->monitor image list
SUBU	T5,T5,V0
SLL	T5,T5,0x2	;T5=image# * 0xC: offset to img.decl. entry
BEQ	R0,R0,7F04A7F4	;stupid extroneous branch
ADDU	S1,T5,T7	;S1=p->img.decl.
//7F04A7F4:

this grabs the p->image from the declaration, tests if extracted
//7F076E3C:
LW	V0,0000 (S7)	;V0=image# or p->img.entry
LBU	S5,0004 (S7)	;S5=width
LBU	S4,0005 (S7)	;S4=height
SLTIU	AT,V0,0BB9
BEQ	AT,R0,7F076E60
OR	A0,S7,R0
...
//7F076E60:
LUI	AT,8000
OR	V1,V0,AT	;V1=p->image
LHU	A0,FFF8 (V1)	;A0=img.data-8: header, containing the original image ID#
JAL	7F0CBB0C	;V0=offset to img.list.entry (facemapper table)
OR	A1,R0,R0
LBU	V1,0006 (S7)
OR	S6,V0,R0
BNEL	V1,R0,7F07741C	;branch if not level 0
SW	R0,00D0 (SP)
BEQL	V0,R0,7F076EBC	;branch if invalid pointer
LBU	S1,0007 (S7)
LW	S2,0008 (V0)	;S2=facemapper+8
LW	T6,000C (V0)	;T6=facemapper+C
SLL	S1,S2,0x1B
SRL	T7,S1,0x1D	;T7=format
ANDI	S1,T7,00FF
SRL	T7,T6,0x1E	;T7=mask for C0000000
SLL	T8,T7,0xE	;T8=upper halfword & C000
ANDI	T9,S2,0003
OR	S2,T9,R0	;S2=bitdepth
BEQ	R0,R0,7F076EC0
SW	T8,0144 (SP)
//7F076EB8:
...
//7F076EC0:
BEQ	S2,R0,7F076F90	;branch if 4bit
OR	V0,S2,R0
ADDIU	AT,R0,0001
BEQ	V0,AT,7F076F5C	;branch if 8bit
ADDIU	T7,R0,0002
...
//7F076F5C:
SW	T7,0140 (SP)	;SP+140=2
OR	A0,S5,R0	;A0=width
OR	A1,S4,R0	;A1=height
JAL	7F076848	;V0=(ll) width/2 * height
ADDIU	A2,R0,0001	;A2=1
ADDIU	S3,V0,FFFF
JAL	7F0766AC	;V0=ceil(0x4000 /width)
OR	A0,S5,R0
ADDIU	T8,S5,0007
SRA	T9,T8,0x3
SW	V0,0138 (SP)
BEQ	R0,R0,7F076FC4
SW	T9,0134 (SP)

image inserted at 7F04AB34, using JAL 7F076D68

on a good ROM:
800B6E30	image 30
E7000000 00000000
BA001402 00000000
B900031D 00552D58
BB080001 FFFFFFFF
BA001001 00000000
FC121824 FF33FFFF
FD700000 00187BF8
F5700000 07080200
E6000000 00000000
F3000000 075E7125
E7000000 00000000
BA000E02 00000000
F5680E00 00098260
F2002002 000D60D6
01020040 000EA880
BC001006 000EAA40
04300040 04000000
B1000032 00002010
B8000000 00000000

+_+

Roman numeral string generator
Assumes you'll provide an adequate buffer...
That would be 4 bytes per placeholder, plus a final NULL
similiar to a base 5 system; all placeholders at 5/10 boundries
3	III	3	000000000011
4	IV	4	000000000100
5	V	5	000000000101	&1, >>2
8	VIII	8	000000001000
A	X	10	000000001010	>>1, &1, >>2
F	XV	15	000000001111	&1, >>2
14	XX	20	000000010100
28	XL	40	000000101000
32	L	50	000000110010
64	C	100	000001100100
1F4		500	000111110100
3E8	M	1000	001111101000

1) divide/mordant by 5
2) if divisor&1, add 5 to mordant
3) if mordant=4, handle subtract from symbol+1/2
4) shift divisor right 1
5) lather, rinse, repeat

63	99	XLIX
	/5	13	%5	4
IX	&1	01
	>>1	9
	/5	1	%5	4
XL	&1	1

7C	124	CXXVI
	/5	18	%5	4
VI	&1	00
	>>1	C
	/5	2	%5	2
XX	&1	0
	>>1	1
	/5	0	%5	1
C	&1	0

It'll burn cycles like crazy, but could divide by 10, then test its 5 groupings
Use the previous divisor as next doohick and increment the letter keys.
Table the letter keys like so, and increment by 1 each placeshift:
I,V,X,L,C,etc.
Use generic caseshifter to make upper or lower case.
build the string in the 80064C30 buffer, backward.

	accepts: A0=value to translate
	fries: AT,V1,A0,A1,A2,A3
	LUI	A3,8006
	ORI	A2,R0,027F	;80064EAF
	SB	R0,4EAF (A3)	;set a NULL in the buffer
	LUI	A1,7Fxx
//	so begins the looping
	ORI	AT,R0,0005
	DIVU	A0,AT
	MFLO	A0		;A0/=5
	ANDI	V1,A0,0001	;V1=TRUE if 10, not 5
	SRL	A0,A0,0x1	;A0=A0>>1: prepare for next iteration
	MFHI	AT		;AT=A0%5
	SLTIU	V0,AT,0004	;TRUE if 0-3
	BEQ	V0,R0,+X	;branch if a 4
	LBU	V0,XXX0 (A1)	;V0=character
//	normal output
	SUBU	A2,A2,AT
	SUBU	A2,A2,V1
	BLTZ	A2,+return	;return if exceeded buffer
	NOP
	
	
//	when mordant is 4...
	ADDIU	A2,A2,FFFE
	BLTZ	A2,+return
	ADDU	V1,A1,V1
	LBU	V1,XXX1 (V1)
	ADDIU	A3,A3,FFFE
	SB	V0,0000 (A3)
	SB	V1,0001 (A3)
//	loopus
	BNE	A0,R0,-loop
	ADDIU	A1,A1,0001	;next set of characters to use
//	return
	JR	RA
	ADDIU	V0,A3,4EAF

+_+

There's default handling of bad objective test, so small patch to catch the TLB string...
//7F057160:	8BC80	catch bad objective returns: title line
BNEL	V1,R0,7F0571A8	;return if a valid text string
->
0462----	BLTZL	V1,7F0571A8

+_+

Are impact type names + pointers used?  Don't seem like it.  No references...

+_+

Yet another, linked from one above!
Abolishes 80054D54
7F074534:
aegh...  I'll get to this one later
