Starting trace from Control:
autoguns at:
	801D4FD8
	801D50C0
	801D51A8
	801D5280
	801D5358
	801D5430
	801D5508

7F03CA30	
	reads first byte from 8006 entry.  Depending on type, will use one of several routines...		
7F03CA94	reads distance thingy off first autoturret at all times

7F046C6C
	handles autoturret activation
	@ 7F046C7C, grabs distance to current player	7F089798: V0=p->cur.BONDposdata (8006)
	
+_+

Will need to make a distance tester
give it pointer A0,A1; assumes using a 8006, so +8,+C,+10 at each is x,y,z
7F0796C0	AE1F0	F0=distance between two positions
	accepts: A0=p->xyz, A1=p->xyz
	fries: F12,F14
C4800008	LWC1	F0,0008 (A0)
C4AE0008	LWC1	F14,0008 (A1)
460E0001	SUB.S	F0,F0,F14
46000302	MUL.S	F12,F0,F0	;F12=(dif.x)^2
C480000C	LWC1	F0,000C (A0)
C4AE000C	LWC1	F14,000C (A1)
460E0001	SUB.S	F0,F0,F14
46000002	MUL.S	F0,F0,F0	;F0=(dif.y)^2
46006300	ADD.S	F12,F12,F0	;F12+=y
C4800010	LWC1	F0,0010 (A0)
C4AE0010	LWC1	F14,0010 (A1)
460E0001	SUB.S	F0,F0,F14
46000002	MUL.S	F0,F0,F0	;F0=(dif.z)^2
46006300	ADD.S	F12,F12,F0	;F12=(dif.x)^2 + (dif.y)^2 + (dif.z)^2
03E00008	JR	RA
46006004	SQRT.S	F0,F12

Also, this will retieve player A0's 8006 position data, but only when alive
7F079720	AE250	V0=p->player A0's BONDpos if alive or NULL
	fries: V1	(A0 retained)
00041080	SLL	V0,A0,0x2
3C038008	LUI	V1,8008
00431821	ADDU	V1,V1,V0
8C629EE0	LW	V0,9EE0 (V1)
10400004	BEQ	V0,R0,+return
00000000	NOP
8C430424	LW	V1,0424 (V0)	;dying register
8C4200A8	LW	V0,00A8 (V0)
54600001	BNEL	V1,R0,+1	;if dead, NULL pointer...
00001025	OR	V0,R0,R0
03E00008	JR	RA
00000000	NOP
//7F079750	AE280

So, seach each player's positions, returning V0=8006 for closest
Use this as basis for all autogun testing.  Camera too?  Not sure...

7F079658	AE188	Find closest player to object A0's position
	accepts: A0=p->obj.posdata (8006)
	returns: V0=p->closest BONDpos (8006)
	fries: V1,A0,A1,A2,F0,F12,F14
27BDFFD0	ADDIU	SP,SP,FFD0
AFBF002C	SW	RA,002C (SP)
AFA00028	SW	R0,0028 (SP)	;SP+28= p->closest BONDpos
3C067F80	LUI	A2,7F80
AFA60024	SW	A2,0024 (SP)	;SP+24= closest distance
AFA40020	SW	A0,0020 (SP)	;SP+20= p->obj.pos	(8006)
24060004	ADDIU	A2,R0,0004	;A0=4	do this backward
//grab player A0's 8006
24C6FFFF	ADDIU	A2,A2,FFFF	;A0--	3-0
0FC1E5C8	JAL	7F079720	;*BONDpos
00062025	OR	A0,A2,R0
1040000A	BEQ	V0,R0,+next	;branch if no data/not loaded
//compute distance and compare
8FA40020	LW	A0,0020 (SP)	;A0=obj.pos
0FC1E5B0	JAL	7F0796C0	;*distance
00022825	OR	A1,V0,R0	;A1=BONDpos
C7AC0024	LWC1	F12,0024 (SP)
460C003E	C.LE.S	F0,F12
00000000	NOP
45000003	BC1F	+next	;branch if new distance greater
00000000	NOP
AFA50028	SW	A1,0028 (SP)	;save winning BONDpos pointer
E7A00024	SWC1	F0,0024 (SP)	;save winning distance
//loop for each player
1CC0FFF1	BGTZ	A2,-loopus	;loop for each player
//return
8FA20028	LW	V0,0028 (SP)	;V0=p->closest BONDpos
8FBF002C	LW	RA,002C (SP)
03E00008	JR	RA
27BD0030	ADDIU	SP,SP,0030


link it in!
//7F046C7C:	7B7AC
8E700004	-LW	S0,0004 (S3)	;S0=p->object data	(S3=p->obj.posdata (8006))
0FC1E596	*JAL 7F079658	[changed from 0FC225E6]
00132025	*OR	A0,S3,R0	;A0=S3: p->obj.pos
AFA004AC	-SW	R0,04AC (SP)
AFA004A8	-SW	R0,04A8 (SP)
AFA004A4	-SW	R0,04A4 (SP)
8E23000C	-LW	V1,000C (S1)	;V1=obj.data+C: second bitflag field
1040000A	*BEQ	V0,R0,7F046CC4
	*NOP
00409025	-OR	S2,V0,R0	;S2=V0: p->cur.BONDposdata
04610054	*BGEZ	V1,7F046DF8	;branch if "disable player detection" not set	80000000
00037840	SLL	T7,V1,0x1
05E10005	*BGEZ	T7,7F046CC4	;branch if "?" not set	40000000
C6080090	LWC1	F8,0090 (S0)
C604009C	LWC1	F4,009C (S0)
E6080084	SWC1	F8,0084 (S0)	;data+84=F8: swap rotation
E6040098	-SWC1	F4,0098 (S0)	;data+98=F4: swap elevation
10000035	-BEQ	R0,R0,7F046D98
//7F046CC4:
C6020084	LWC1	F2,0084 (S0)	;F2=data+84: rotation


+_+

GLITCH!
So, the thing continues to fire at dead players, and if you get within range the damage is automatically assigned to you instead.
Probably just link in a pulse detector...

+_+

last fix - should set respawning items to abolish 10000000 so they reactivate
//7F03C864:	71394
92080002	LBU	T0,0002 (S0)	;T0=obj.data+2: state
31090008	ANDI	T1,T0,0008	;T1=state&08: repair collisions flag
8E0A0008	*LW	T2,0008 (S0)	;T2=obj.data+8: obj.flags1
51200002	*BEQL	T1,R0,+2	;branch if 0x8 not set
314AFEFF	*ANDI	T2,T2,FEFF	;T3= T2 & FFFFFEFF: unset collisions
354A0100	ORI	T2,T2,0100	;T3= set collisions
3C0BEFFF	*LUI	T3,EFFF	;T3= T3 & EFFFFFFF: reactivate special features
256BFFFF	*ADDIU	T3,T3,FFFF
014B5024	*AND	T2,T2,T3
AE0A0008	*SW	T2,0008 (S0)	;obj.flags1 |= 00000100: collisions...
//7F03C888:	713B8
00000000	*NOP
00000000	*NOP
//7F03C894:	713C4
00000000	*NOP
E6000070	SWC1	F0,0070 (S0)	;obj.data+70= 0.0: cur.damage?
8E040014	LW	A0,0014 (S0)
310FFF7F	*ANDI	T7,T0,FF7F	;T7=state & FF7F: unmask "dead"
0FC1437A	JAL	7F050DE8
A20F0002	SB	T7,0002 (S0)	;obj.state ^ dead

