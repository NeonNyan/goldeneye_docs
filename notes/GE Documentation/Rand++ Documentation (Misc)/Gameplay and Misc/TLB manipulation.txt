  Now, to make it more efficient would probably be best to do actual management.
  Incrementing entries would be handy but would be most efficient when managing.
  Last two longs in table aren't used, so could make a counter that increments +10 every call and decrements all else.
  Then, replace entry with lowest value (least occurance).


700017E0	23E0	establishes 7F- TLB buffer and management table
	LUI	V1,8006
	LUI	V0,8006
	ADDIU	V0,V0,E3F0	;V0=8005E3F0
	ADDIU	V1,V1,DBF0	;V1=8005DBF0
	ADDIU	A0,R0,0001
//700017F4:	initialize the 8005DBF0 - 8005E3F0 table
	ADDIU	V1,V1,0010
	SLTU	AT,V1,V0
	SW	A0,FFF0 (V1)	;1->tbl+0
	BNE	AT,R0,700017F4
	SW	R0,FFF4 (V1)	;0->tbl+4
//70001808:	fill range 8005E3F0 - 8005E4A4 with 0100
	LUI	AT,8006
	LUI	V1,8006
	LUI	V0,8006
	ADDIU	V0,V0,E4A4	;V0=8005E4A4
	ADDIU	V1,V1,E3F4	;V1=8005E3F4
	SB	R0,E3F1 (AT)
	SB	A0,E3F0 (AT)	;0100->8005E3F0
	SB	R0,E3F3 (AT)
	SB	A0,E3F2 (AT)	;0100->8005E3F2
//7000182C:	loop for remaining
	ADDIU	V1,V1,0008
	SB	R0,FFFB (V1)
	SB	A0,FFFA (V1)	;0100->tbl+2
	SB	R0,FFFD (V1)
	SB	A0,FFFC (V1)	;0100->tbl+4
	SB	R0,FFFF (V1)
	SB	A0,FFFE (V1)	;0100->tbl+6
	SB	R0,FFF9 (V1)
	BNE	V1,V0,7000182C
	SB	A0,FFF8 (V1)	;0100->tbl+0
//70001854:	set 7F- TLB allocation and context conversion
	LUI	T6,803B
	ADDIU	T6,T6,B400	;T6=803AB400: end of this block
	ADDIU	AT,R0,E000
	AND	T7,T6,AT	;T7=803AB400 & ~1FFF: 803AA000
	LUI	AT,FFF4
	ORI	AT,AT,C000
	ADDU	T8,T7,AT	;T8=803AA000 - B4000: size of bank (0x5A entries)
	LUI	AT,8006
	SW	T8,E4A8 (AT)	;T8->8005E4A8: 802F6000, or p->end of free memory and start of TLB block
	LUI	AT,FFC0
	LUI	T9,8006
	ADDIU	T9,T9,DBF0
	ORI	AT,AT,8000
	ADDU	T0,T9,AT	;T0=8005DBF0 - 3F8000: 7FC65BF0
	LUI	AT,8006
	JR	RA
	SW	T0,E4A4 (AT)	;8005E4A4 = 7FC65BF0: conversion for Context

70001954	2554	remove index A0 TLB entry from table at 8005E3F0
	accepts: A0=TLB entry index
	table format:
		0x0	1 if dirty
		0x1	chunk # (7F000000 | chunk<<D)
	LUI	T7,8006
	ADDIU	T7,T7,E3F0	;T7=8005E3F0: base of index
	SLL	T6,A0,0x1	;T6=A0 to offset
	ADDU	V1,T6,T7
	LBU	T8,0000 (V1)	;T8=8005E3F0+offset: dirty byte
	ADDIU	SP,SP,FFE0
	SW	RA,0014 (SP)
	BNEL	T8,R0,700019CC	;return if dirty
	LW	RA,0014 (SP)
//70001978:
	LBU	A0,0001 (V1)	;A0= table+1: chunk#
	LUI	AT,7F00
	SW	V1,0018 (SP)	;SP+18= table
	SLL	T9,A0,0xD	;T9= chunk * 2000: chunk offset
	JAL	700018C0	;V0= index matching TLB entry A0
	OR	A0,T9,AT	;A0= 7F000000 | chunk offset
	SLL	T1,V0,0x0
	LW	V1,0018 (SP)
	BLTZ	T1,700019AC	;skip if not found
	OR	A0,V0,R0	;A0=V0: index
//700019A0:
	JAL	7000D3D0	;remove TLB index A0
	SW	V1,0018 (SP)
	LW	V1,0018 (SP)
//700019AC:	invalidate
	LBU	T2,0001 (V1)	;T2=table+1: chunk#
	LUI	AT,8006
	ADDIU	V0,R0,0001
	SLL	T3,T2,0x4	;T3= chunk# * 10
	ADDU	AT,AT,T3
	SW	V0,DBF0 (AT)	;1->8005DBF0+offset: invalidate
	SB	V0,0000 (V1)	;set dirty
//700019C8:	return
	LW	RA,0014 (SP)
	ADDIU	SP,SP,0020
	JR	RA
	NOP

700019D8	25D8	translates and loads ROM based on TLB address
	accepts: A0=TLB address
	LUI	V0,8002
	ADDIU	V0,V0,30D0	;V0=800230D0
	LW	T6,0000 (V0)	;T6=800230D0: # TLB page entries?
	LUI	AT,7FFF
	ADDIU	SP,SP,FFB0
	ORI	AT,AT,E000	;AT=7FFFE000: address mask for TLB address (0x2000 pages)
	SW	RA,001C (SP)
	AND	A0,A0,AT	;A0&=7FFFE000: TLB address & mask
	ADDIU	T7,T6,0001	;T7=T6+1
	SW	S0,0018 (SP)
	SW	T7,0000 (V0)	;count at 800230D0++
	JAL	70001920	;find and remove TLB entry A0
	SW	A0,0028 (SP)	;SP+28=A0: TLB address mask
	JAL	70001B10	;V0= random value for TLB random entries
	NOP
//70001A14:
	ADDIU	AT,R0,005A	;AT=0x5A
	DIVU	V0,AT
	MFHI	A0		;A0=V0/0x5A
	LUI	V1,8002
	ADDIU	V1,V1,30D4	;V1=800230D4
	SW	A0,0000 (V1)	;A0->800230D4: segment# (0x2000 block #)
	JAL	70001954	;remove index A0 TLB entry from table at 8005E3F0
	OR	S0,A0,R0	;S0=A0
//70001A34:
	LW	V0,0028 (SP)	;V0=SP+28: TLB address mask
	LUI	T9,8006
	LW	T9,E4A8 (T9)	;T9=8005E4A8: p->TLB space (after free mem)
	LUI	AT,00FF
	ORI	AT,AT,E000	;AT=FFE000: ROM address mask
	SLL	T0,S0,0xD	;T0=S0 * 0x2000: offset to memory
	LUI	T2,0003
	AND	T1,V0,AT	;T1=V0 & FFE000: range - 7F-extension
	ADDIU	T2,T2,4B30	;T2=0x34B30: start of TLB ROM range
	ADDU	A0,T9,T0	;A0=p->memory + offset to block
	SW	A0,0034 (SP)	;SP+34=rdram target
	ADDU	A1,T1,T2	;A1=offset + ROM address
	OR	V0,T1,R0	;V0=offset
	SW	T1,0024 (SP)	;SP+24=offset
	JAL	70005C1C	;loads A2 bytes from hardware A1 to A0
	ADDIU	A2,R0,2000	;A2=0x2000: size
//70001A74:
	LUI	A0,4000		;A0=40000000
	JAL	7000D350	;invalidate Cache for A1 bytes at A0
	LUI	A1,4000		;A1=40000000
	LUI	A0,8000		;A0=80000000
	JAL	7000D350	;invalidate Cache for A1 bytes at A0
	LUI	A1,1000		;A1=10000000
//70001A8C:
	LW	A1,0024 (SP)	;A1=SP+24: offset
	LUI	T5,8006
	ADDIU	T5,T5,DBF0	;T5=8005DBF0: table indicating loaded TLB blocks
	SRL	T3,A1,0xD	;T3=offset/0x2000: block#
	SLL	T4,T3,0x4	;T4=block# *0x10: 
	ADDU	A2,T4,T5	;A2=address of block's index
	SW	S0,0004 (A2)	;S0->block index+4: offset to memory
	SW	A2,0020 (SP)	;SP+20=A2: address of block's index
	SW	T3,0028 (SP)	;SP+28=T3: block#
	JAL	7000E8B0	;V0=rdram offset derived from pointer A0
	LW	A0,0034 (SP)	;A0=SP+34: rdram target
//70001AB8:
	LW	RA,001C (SP)
	SRL	T6,V0,0xC	;T6=V0/0x1000
	SLL	T9,S0,0x1	;T9=S0*2: offset to memory * 2
	LUI	T0,8006
	LW	A1,0028 (SP)	;A1=SP+28: block#
	LW	A2,0020 (SP)	;A2=SP+20: address of block's index
	SLL	T7,T6,0x6	;T7=4(V0/0x100)
	ADDIU	T0,T0,E3F0	;T0=8005E3F0
	ORI	T8,T7,001F	;T8=4(V0/0x100) | 0x1F
	ADDU	V1,T9,T0	;V1=8005E3F0 + offset to memory * 2
	LW	S0,0018 (SP)	;S0=SP+18: offset to memory
	SB	R0,0000 (V1)	;0-> 8005E3F0 + offset to memory * 2
	ADDIU	SP,SP,0050
	SB	A1,0001 (V1)	;block# -> 8005E3F1 + offset to memory * 2
	JR	RA
	SW	T8,0000 (A2)	;4(V0/0x100) | 0x1F -> address of block's index

70001AF8	26F8	V0=p->TLB memory, or alternately end of free memory
	LUI	V0,8006
	JR	RA
	LW	V0,E4A8 (V0)	;V0=8005E4A8: p->TLB allocated block

70001B10	2710	V0= random value for TLB random entries
	LUI	A0,8002
	LD	A0,30E0 (A0)	;A0=800230E0: TLB random seed
	LUI	AT,8002
	DSLL32	A2,A0,0x1F
	DSLL	A1,A0,0x1F
	DSRL	A2,A2,0x1F
	DSRL32	A1,A1,0x0
	DSLL32	A0,A0,0xC
	OR	A2,A2,A1
	DSRL32	A0,A0,0x0
	XOR	A2,A2,A0
	DSRL	A0,A2,0x14
	ANDI	A0,A0,0FFF
	XOR	A0,A0,A2
	DSLL32	V0,A0,0x0
	SD	A0,30E0 (AT)	;update TLB random
	JR	RA
	DSRA32	V0,V0,0x0

70001B60	2760	resolves TLB address on InvalidHit, writting random entry; copied to 80000000
	MTC0	R0,PageMask	;PageMask = 0: 1KB
	NOP
	MFC0	K0,Context	;K0= Context, which if <<9 = Vaddr base
	LUI	K1,8006
	ADDIU	K1,K1,E4A4
	LW	K1,0000 (K1)	;K1=8005E4A4: Context conversion factor [7FC65BF0]
	ADDU	K0,K0,K1
	LW	K1,0000 (K0)	;K1= Context + conversion: 8005DBF0-8005E3F0
	MTC0	K1,EntryLo0
	NOP
	ADDIU	K1,K1,0040	;K1+=40: next page (+1000)
	MTC0	K1,EntryLo1
	NOP
	TLBWR
	NOP
	NOP
	NOP
	NOP
	ERET

