  Need to rewrite to accept 8MB expansion pak detection.

This 'corrects' the 8MB down to 7MB for whatever silly stuff we'd like to do on the side.  
You don't have to do any 8MB stuff until the main thread has started, but doing it here anyway.

80000400	1000	inception point
// First to admit this could be cleaner...
3C088006	LUI	T0,8006
3C090003	LUI	T1,0003
35291080	ORI	T1,T1,1080	;T1=31080
//8000040C:	initialize 31080 bytes at 8005D2E0
2129FFF0	*ADDI	T1,T1,FFF0
FD00D2E0	*SD	R0,D2E0 (T0)
FD00D2E8	*SD	R0,D2E8 (T0)
1520FFFC	BNEZ	T1,8000040C
21080010	*ADDI	T0,T0,0010
//80000420:	'correct' reported memory
3C0A8000	*LUI	T2,8000
8D490318	*LW	T1,0318 (T2)	;T1=size of memory
000945C2	*SRL	T0,T1,0x17
00084500	*SLL	T0,T0,0x14
01284823	*SUBU	T1,T1,T0
AD490318	*SW	T1,0318 (T2)
//80000420:	set stack pointer and jump to 80000450
3C1D7FFA	*LUI	SP,7FFA
37BDB410	*ORI	SP,SP,B410
//lead directly into 80000450
24070001	ADDIU	A3,R0,0001
40870000	*MTC0	A3,Index
2406001F	ADDIU	A2,R0,001F
40861000	*MTC0	A2,EntryLo0
3C08007F	LUI	T0,007F
40871800	MTC0	A3,EntryLo1
3C057000	LUI	A1,7000
40855000	MTC0	A1,EntryHi
3508E000	ORI	T0,T0,E000
40882800	MTC0	T0,PageMask
3C0A7000	LUI	T2,7000
42000002	TLBWI
254A0510	ADDIU	T2,T2,0510	;T2=70000510
01400008	JR	T2
03A9E821	*ADDU	SP,SP,T1	;SP= 80000000 - 54BF0 + size of memory

Amendment to permit mapping 70400000-70800000.
//lead directly into 80000450
24070001	ADDIU	A3,R0,0001
40870000	*MTC0	A3,Index
2406001F	ADDIU	A2,R0,001F
40861000	*MTC0	A2,EntryLo0
00084102	*SRL	T0,T0,0x4	;T0= 10000 if 8MB
55000001	*BNEL	T0,R0,+1	;if 8MBs, map upper 4MB
00C83825	*OR	A3,A2,T0	;A3= 1001F
3C08007F	LUI	T0,007F
40871800	MTC0	A3,EntryLo1
3C057000	LUI	A1,7000
40855000	MTC0	A1,EntryHi
3508E000	ORI	T0,T0,E000
40882800	MTC0	T0,PageMask
42000002	TLBWI
24AA0510	ADDIU	T2,A1,0510	;T2=70000510
01400008	JR	T2
03A9E821	*ADDU	SP,SP,T1	;SP= 80000000 - 54BF0 + size of memory


Most thread upper-mem stack pointers go through here.  This should auto-correct them upwards.
Redirect 700006F0 or set new pointers; safest to do both, but shouldn't be an issue either way.
7000048C	108C	V0= new stack pointer; address A0 + offset A1 - 8
	accepts: A0=p->base SP, A1=offset
3C020040	LUI	V0,0040
00822023	SUBU	A0,A0,V0	;address-=4MB
3C028000	LUI	V0,8000
8C420318	LW	V0,0318 (V0)	;V0=amount of memory
00822021	ADDU	A0,A0,V0
00852021	ADDU	A0,A0,A1
03E00008	JR	RA
2482FFF8	ADDIU	V0,A0,FFF8

using spare room for a short external to mask off cached addresses
700004AC	10AC	V0=uncached rdram address A0; masks off 20000000
3C022000	LUI	V0,2000
00822025	OR	A0,A0,V0
03E00008	JR	RA
00821026	XOR	V0,A0,V0	;T0= (T0|20000000)^20000000: should get rid of any weirdness here


need to address:
700006F0	alter to one-shot all upper-mem stack pointers
	Even though JALs will be reset, will turn this into a jump just in case...

By the time 70003124 is hit both 8002417C and 80024180 are set.
Really, every other routine should access indirectly from there or use a specific offset retrieved from these.

700009F8	two at the end of this; stderr display tests
	actually, could get around this if 700059D0 used an index to the video buffer instead
	700059D0 turns these into uncached ones anyway, so passing those is okay
700009F8	15F8	if not A0, test to display stderr; displays every 16th frame
	accepts: A0=timer
27BDFFE8	ADDIU	SP,SP,FFE8
308E000F	ANDI	T6,A0,000F
15C00015	*BNE	T6,R0,70000A74	;return if A0&F not 0
AFBF0014	SW	RA,0014 (SP)
//70000A08:	test if stderr is both permitted and activated
3C0F8002	LUI	T7,8002
8DE1309C	*LW	AT,309C (T7)	;AT=8002309C: stderr.permitted
8DE23098	*LW	V0,3098 (T7)	;V0=80023098: stderr.activated
00411024	*AND	V0,V0,AT
8DE13094	*LW	AT,3094 (T7)	;V0=80023094: stderr.enable
00411025	*OR	V0,V0,AT
//70000A20:
1040000D	BEQ	V0,R0,70000A74	;return if not set
00000000	NOP
//70000A38:	test for stderr periodic event
0C003638	JAL	7000D8E0	;V0=Count; only V0 should change...
8DE930A4	*LW	T1,30A4 (T7)	;T1=800230A4: previous Count
8DE830A0	LW	T0,30A0 (T7)	;T0=800230A0: user.Compare
00495023	SUBU	T2,V0,T1	;T2=Count-T1
010A082B	SLTU	AT,T0,T2
10200006	*BEQ	AT,R0,70000A7C	;return if Count-prev.Count <= user.Compare
//70000A64:	display stderr
3C048002	*LUI	A0,8002
0C001674	JAL	700059D0	;write stderr to video buffer A0
8C84417C	*LW	A0,417C (A0)	;A0=8002417C: video buffer 1
3C048002	*LUI	A0,8002
0C001674	JAL	700059D0	;write stderr to video buffer A0
8C844180	*LW	A0,4180 (A0)	;A0=80024180: video buffer 2
//70000A78:	return
8FBF0014	LW	RA,0014 (SP)
03E00008	JR	RA
27BD0018	ADDIU	SP,SP,0018




700017E0, most of it.  It sets the upper limit of free mem and allocates some E000+ region ahead of it for TLB
	From 802F6000 to 803AB400; used as end to general free memory!
	note: could use new routine to remove uncached address mask, but would require 5 lines to do properly and 3 to do half-assed.
700017E0	23E0	establishes 7F- TLB buffer and management table
3C0E8006	*LUI	T6,8006
25C2E3F0	*ADDIU	V0,T6,E3F0	;V0=8005E3F0
25C3DBF0	*ADDIU	V1,T6,DBF0	;V1=8005DBF0
24040001	ADDIU	A0,R0,0001
//700017F4:	initialize the 8005DBF0 - 8005E3F0 table
24630010	ADDIU	V1,V1,0010
0062082B	SLTU	AT,V1,V0
AC64FFF0	SW	A0,FFF0 (V1)	;1->tbl+0
1420FFFC	BNE	AT,R0,700017F4
AC60FFF4	SW	R0,FFF4 (V1)	;0->tbl+4	could omit this, but just in case of a reboot...
//70001808:	fill range 8005E3F0 - 8005E4A4 with 0100
34040100	*ORI	A0,R0,0100
25C2E4A4	*ADDIU	V0,T6,E4A4	;V0=8005E4A4
//7000182C:	loop for remaining
24630004	ADDIU	V1,V1,0004
A464FFFC	*SH	A0,FFFC (V1)
1462FFFD	BNE	V1,V0,7000182C
A464FFFE	*SH	A0,FFFE (V1)	;0100->tbl+2
//70001854:	set 7F- TLB allocation and context conversion
3C088002	*LUI	T0,8002
8D08417C	*LW	T0,417C (T0)	;T0=8002417C: video.buf1
3C012000	*LUI	AT,2000
01014025	*OR	T0,T0,AT
01014026	*XOR	T0,T0,AT	;T0= (T0|20000000)^20000000: should get rid of any weirdness here
3C01000B	*LUI	AT,000B
3421F000	*ORI	AT,AT,F000
01014023	*SUBU	T0,T0,AT	;video.buf1 - BF000: offset to beginning of TLB region
ADC8E4A8	*SW	T0,E4A8 (T6)	;T8->8005E4A8: 802F6000, or p->end of free memory and start of TLB block
3C087FC6	*LUI	T0,7FC6
25085BF0	*ADDIU	T0,T0,5BF0	;T0=8005DBF0 - 3F8000: 7FC65BF0
03E00008	JR	RA
ADC8E4A4	*SW	T0,E4A4 (T6)	;8005E4A4 = 7FC65BF0: conversion for Context


Best bet to read direct from register  Oh, and since hardcoded anyway, hardcode it harder!
70003060	3C60	
3C068002	LUI	A2,8002
24C73244	*ADDIU	A3,A2,3244	;A3=80023244: legal screen image entries
3C048006	LUI	A0,8006
8CC9417C	*LW	T1,417C (A2)	;T0=8002417C: video.buf1
3C012000	*LUI	AT,2000
01214825	*OR	T1,T1,AT
01214826	*XOR	T1,T1,AT	;T0= (T0|20000000)^20000000: should get rid of any weirdness here
240E0001	ADDIU	T6,R0,0001
A48E0878	*SH	T6,0878 (A0)	;0001-> 80060878
ACC732A4	*SW	A3,32A4 (A2)	;T8->800232A4: save p->image entry to video1
ACE90028	*SW	T1,0028 (A3)	;entry+28 = p->data
3C010002	*LUI	AT,0002
24215800	*ADDIU	AT,AT,5800	;T7*=25800: size of video buffer * entry# (1)
01214821	ADDU	T1,T1,AT	;T8=video.buf1 + size
24E7002C	*ADDIU	A3,A3,002C	;T6=80023244+offset: p->legal screen image entry 1 (2C each entry)
ACC732A8	*SW	A3,32A8 (A2)	;T6->800232A8: save p->video2.settings
ACE90028	SW	T1,0028 (A3)	;entry+28 = p->data
ACC0329C	SW	R0,329C (A2)	;0->8002329C: 
03E00008	JR	RA
ACC032A0	SW	R0,32A0 (A2)	;0->800232A0: 


70003124	initializes both video buffers; probably just grab the two pointers and use the initializer routine
	While we're at it, rewrite to use the 70017C40 memset routine
70003124	3D24	initialize both video buffers
AFBFFFFC	SW	RA,FFFC (SP)
0FC348E0	JAL	7F0D2380	;0->8004EB00: 
27BDFFE8	ADDIU	SP,SP,FFE8
3C058000	*LUI	A1,8000
8CA40318	*LW	A0,0318 (A1)
00852025	*OR	A0,A0,A1
3C050004	*LUI	A1,0004
34A5B000	*ORI	A1,A1,B000	;A3=4B000
//70003150:	initialize both video buffers in one shot
0C005F10	*JAL	70017C40
00852023	*SUBU	A0,A0,A1
//70003180:	return
8FBF0014	LW	RA,0014 (SP)
03E00008	JR	RA
27BD0018	ADDIU	SP,SP,0018


70003298	two instances, sort of inbetween
//700039EC:
3C018002	LUI	AT,8002
AC3932C0	*SW	T9,32C0 (AT)
55600007	*BNEL	T3,R0,70003A14
8D020028	*LW	V0,0028 (T0)	;V0=
//700039FC:
3C048002	*LUI	A0,8002
0C000127	*JAL	7000049C	;V0= cached address A0
8C84417C	*LW	A0,417C (A0)	;T6=803B5000: videobufferroot
	*NOP
	*NOP
	*NOP
//
3C0F8005	*LUI	T7,8005
8DEFEAB0	*LW	T7,EAB0 (T7)	;T7=8004EAB0: 
ADE20058	*SW	V0,0058 (T7)
//70003A20:
...
//70003AB4:
3C048002	*LUI	A0,8002
0C000127	*JAL	7000049C	;V0= cached address A0
8C84417C	*LW	A0,417C (A0)	;T6=803B5000: videobufferroot
3C038006	*LUI	V1,8006
90780879	*LBU	T8,0879 (V1)
	SLL	T7,T8,0x2
	ADDU	T7,T7,T8
	SLL	T7,T7,0x2
	SUBU	T7,T7,T8
	SLL	T7,T7,0x2
	SUBU	T7,T7,T8
	LUI	T8,8002
	LW	T8,32A8 (T8)	;T8=p->video2.settings
	SLL	T7,T7,0xB	;T7= T8*25800: offset to buffer T8
01E2C821	*ADDU	T9,T7,V0
	SW	T9,0028 (T8)	;p->buffer -> video2.settings+28: video2.buf


do these like the 16bit counterparts: grab 800232A8, then +28 from pointer
700048D4	imgcap: 32bit jpeg; not very important
//7000496C:
3C058002	LUI	A1,8002
8CA5417C	LW	A1,417C (A1)	;A1= video1.buf

70004BB4	imgcap: 32bit rgba; not very important
//70004C4C:
3C058002	LUI	A1,8002
8CA5417C	LW	A1,417C (A1)	;A1= video1.buf

This relies on each buffer being 25800, and each running straight from the end of rdram.
Also, the JAL will address-extend this, so wee!  It all works out.
Interlink 70005984 and change JALs to 700059A4 to 5984
70005984	6584	700059A4	65A4	set pointers to video buffers 1 & 2
3C048000	LUI	A0,8000
8C840318	LW	A0,0318 (A0)	;A0=size of ram
3C020002	LUI	V0,0002
24425800	ADDIU	V0,V0,5800	;V0=25800
00822823	SUBU	A1,A0,V0
00A22023	SUBU	A0,A1,V0
3C02A000	LUI	V0,A000
00827025	OR	T6,A0,V0	;T6=A0000000 | A0: uncached address
3C018002	LUI	AT,8002
AC2E417C	SW	T6,417C (AT)	;A0->8002417C: video buffer 1 base
00A27825	OR	T7,A1,V0	;T7=A0000000 | A1: uncached address
03E00008	JR	RA
AC2F4180	SW	T7,4180 (AT)	;A1->80024180: video buffer 2 base



in order of occurance:
700059A4
700017E0	maybe set banks off of 8002417C? (need to mask off the address root)
70003060
700009F8	will repeatedly trigger underneath these
70003124
70003AC0	will trigger during runtime


decompressor, past the intro (which doesn't matter) is embedded (and a different one...)

as far as usage:
400000	-0		max
3DA800	-25800	25800	video2.buf
3B5000	-4B000	25800	video1.buf
3B4950	-4B6B0	6B0	unused?
3B3950	-4C6B0	1000	SP.70001F7C
3AB950	-546B0	8000	SP.main
3AB750	-548B0	200	SP.70000D00
3AB710	-548F0	40	SP.Null
3AB410	-54BF0	300	SP.Indi
3AA000	-55000	1400	free...unaligned and neglected by TLB assignment
2F6000	-10A000	E000	TLB

800236DC has a table with hardcoded SP pointers.  Need to either change or destroy its user.

+_+

so, never displays anything o.0

No wonder.  It'd be a shame if they USED THE REGISTERS THEY CREATED AND STORED!
hits on 803E
	4F180
	4F1F0
	BBB2C
	BBBD0

hits on 803B:
	4F1B8
	BBB88


7F086F9C	BBACC	sets player settings when running game
just absorb these:
//7F086FCC:	BBAFC
0C000F07	*JAL	70003C1C
00000000	*NOP
3C012000	*LUI	AT,2000
00411025	*OR	V0,V0,AT
3C038003	LUI	V1,8003
8C616430	*LW	AT,6430 (V1)
10200013	*BEQ	AT,R0,7F087034
28210004	*SLTI	AT,AT,0004
1420000D	BNE	AT,R0,7F087024
8C6E6428	*LW	T6,6428 (V1)
55C0000C	BEQL	T6,R0,7F087028
8C796430	*LW	T9,6430 (V1)
//7F086FF4:
00000000	*NOP
00000000	NOP
3C0F8002	*LUI	T7,8002
8DEF4180	*LW	T7,4180 (T7)
3C038003	LUI	V1,8003
144F0004	BNE	V0,T7,7F087024
24180001	ADDIU	T8,R0,0001
AC78642C	*SW	T8,642C (V1)
1000001A	BEQ	R0,R0,7F087088
AC606430	*SW	R0,6430 (V1)
//7F087024:
8C796430	*LW	T9,6430 (V1)
27390001	*ADDIU	T9,T9,0001
10000016	BEQ	R0,R0,7F087088
AC796430	*SW	T9,6430 (V1)
//7F087034:
3C038003	LUI	V1,8003
8C616434	*LW	AT,6434 (V1)
10200012	BEQ	AT,R0,7F087088
00000000	*NOP
28210004	SLTI	AT,AT,0004
5420000D	BNEL	AT,R0,7F087080
8C6A6434	*LW	T2,6434 (V1)
//7F087050:
00000000	*NOP
00000000	*NOP
00000000	*NOP
00000000	*NOP
3C098002	*LUI	T1,8002
8D29417C	*LW	T1,417C (T1)
14490004	*BNE	V0,T1,7F08707C
3C038003	*LUI	V1,8003
AC60642C	*SW	R0,642C (V1)
10000004	BEQ	R0,R0,7F087088
AC606434	*SW	R0,6434 (V1)
//7F08707C:
8C6A6434	*LW	T2,6434 (V1)
254B0001	ADDIU	T3,T2,0001
AC6B6434	*SW	T3,6434 (V1)
//7F087088:	need one more line!
00000000	*NOP
00000000	*NOP
00000000	*NOP
8C6C642C	*LW	T4,642C (V1)
11800007	-BEQ	T4,R0,7F0870B8
00000000	*NOP
3C098002	*LUI	T1,8002
8D29417C	*LW	T1,417C (T1)
14490003	*BNE	V0,T1,7F0870B8
00000000	*NOP
0C000F0F	JAL	70003C3C
8C646428	*LW	A0,6428 (V1)
//7F0870B8:

Rewrite entire menu handler
7F01A61C	4F14C	menu update, initialization, and interface handler
AFBFFFFC	*SW	RA,FFFC (SP)
0C000F07	-JAL	70003C1C	;V0=p->video2.buf
27BDFFE4	*ADDIU	SP,SP,FFE4
3C012000	*LUI	AT,2000
00411025	*OR	V0,V0,AT	;just make the value an uncached one for direct comparison
3C088003	*LUI	T0,8003
8D0FA944	*LW	T7,A944 (T0)	;T7=8002A944: 
8D0DA948	*LW	T5,A948 (T0)	;T5=8002A948: True if emulating Spectrum
8D0EA8C0	*LW	T6,A8C0 (T0)	;T6=8002A8C0: menu.cur
3C0A8002	*LUI	T2,8002
24010017	ADDIU	AT,R0,0017
15C1000E	BNE	T6,AT,7F01A684	;skip if not menu 17: switch menus
8D584180	*LW	T8,4180 (T2)	;upper buffer
//7F01A650:
11E00006	BEQ	T7,R0,7F01A66C
00000000	*NOP
1458000A	BNE	V0,T8,7F01A684
24010001	*ADDIU	AT,R0,0001
AD01A940	*SW	AT,A940 (T0)	;1->8002A940: 440x330
10000007	BEQ	R0,R0,7F01A684
AD00A944	*SW	R0,A944 (T0)	;0->8002A944: 
//7F01A66C:
11A00005	*BEQ	T5,R0,7F01A684	;branch if not Spectrum
8D49417C	*LW	T1,417C (T2)	;lower buffer
14490003	*BNE	V0,T1,7F01A684
00000000	*NOP
AD00A940	*SW	R0,A940 (T0)	;0->8002A940: 320x240
AD00A948	*SW	R0,A948 (T0)	;0->8002A948: reset Spectrum emulating flag
//7F01A684:
AFB00014	*SW	S0,0014 (SP)
8D10A940	*LW	S0,A940 (T0)	;T2=8002A940: screen size
12000005	*BEQ	S0,R0,7F01A6D8
001080C0	*SLL	S0,S0,0x3	;S0->offset
14580003	*BNE	V0,T8,7F01A6D8
3C048003	LUI	A0,8003
0C000F0F	JAL	70003C3C	;A0->video2.buf
8C84A954	LW	A0,A954 (A0)	;A0=8002A954: 
//7F01A6D8:	4F1D4	Should rewrite the rest of the code and eliminate all those TLB pointers and redirected redirects.
// if zero, use 80051B48/140/F0; else use 80051B44/1B8/14A; both floats are 3FAAAAAB...
3C017F02	LUI	AT,7F02
00308021	ADDU	S0,AT,S0
0C001164	JAL	70004590
C60CA820	LWC1	F12,A820 (S0)	;F12=80051B44: 3FAAAAAB
9604A824	LHU	A0,A824 (S0)	;A0=txtClipW
0C0010FE	JAL	700043F8	;set video2 text clip width (A0) and height (A1)
9605A826	LHU	A1,A826 (S0)	;A1=txtClipH
9604A824	LHU	A0,A824 (S0)
0C0010ED	JAL	700043B4
9605A826	LHU	A1,A826 (S0)
9604A824	LHU	A0,A824 (S0)
0FC26C77	JAL	7F09B1DC	;set cur.player screen width (A0) and height (A1)
9605A826	LHU	A1,A826 (S0)
9604A824	LHU	A0,A824 (S0)
0C00110F	JAL	7000443C	;set video2 width (A0) and height (A1)
9605A826	LHU	A1,A826 (S0)
00002025	OR	A0,R0,R0
0FC26C7E	JAL	7F09B1F8	;set cur.player viewport width (A0) and height (A1)
00002825	OR	A1,R0,R0
00002025	OR	A0,R0,R0	;ulx = 0
0C00112F	JAL	700044BC	;set video2 ulx (A0) and uly (A1)
00002825	OR	A1,R0,R0	;uly = 0
//7F01A784:	4F22C
3C048003	LUI	A0,8003
8C82A8C4	LW	V0,A8C4 (A0)	;V0=8002A8C4: menu.update
04410002	BGEZ	V0,7F01A7A8	;branch if set
8C82A8C8	LW	V0,A8C8 (A0)	;T4=8002A8C8: 
04400011	BLTZ	V0,7F01AA80	;skip if not set
//7F01A7A8:	run on menu update
8C82A8C0	LW	V0,A8C0 (A0)	;V1=8002A8C0: menu.cur
24010017	ADDIU	AT,R0,0017
1022000E	BEQ	AT,V0,7F01AA80	;branch if menu 17: update (does not update menu.cur)
2C41001A	SLTIU	AT,V0,001A
10200006	BEQ	AT,R0,7F01AA70	;skip if out of range
00021080	SLL	V0,V0,0x2
3C017F02	LUI	AT,7F02
00220821	ADDU	AT,AT,V0
8C21A830	LW	AT,A830 (AT)	;T9=80051C1C+offset: menu interface handler
0020F809	JALR	RA,AT
00000000	NOP
//7F01AA70:
3C048003	LUI	A0,8003
8C82A8C4	LW	V0,A8C4 (A0)	;V0=8002A8C4: 
04400003	BLTZ	V0,7F01AA80
240F0017	ADDIU	T7,R0,0017
0FC02ABB	JAL	7F00AAEC	;0->menu timer
AC8FA8C0	SW	T7,A8C0 (A0)	;17->8002A8C0: menu.cur = switch screens
//7F01AA80:	run initializer
3C048003	LUI	A0,8003
2484A8C0	ADDIU	A0,A0,A8C0
8C820008	LW	V0,0008 (A0)
0440000B	BLTZ	V0,7F01ACB8
240FFFFF	ADDIU	T7,R0,FFFF
AC820000	SW	V0,0000 (A0)
AC8F0008	SW	T7,0008 (A0)
2C41001A	SLTIU	AT,V0,001A
10200006	BEQ	AT,R0,7F01ACB8
00021080	SLL	V0,V0,0x2
3C017F02	LUI	AT,7F02
00220821	ADDU	AT,AT,V0
8C21A898	LW	AT,A898 (AT)	;T9=80051C1C+offset: menu interface handler
0020F809	JALR	RA,AT
00000000	NOP
//7F01ACB8:	run interface
3C048003	LUI	A0,8003
2484A8C0	ADDIU	A0,A0,A8C0	;can't remember if any of these use the value...
8C820000	LW	V0,0000 (A0)
2401000B	ADDIU	AT,R0,000B
14220014	BNE	AT,V0,7F01ACCC
2C41001A	SLTIU	AT,V0,001A
//7F01AE6C:	menu 0B interface
0FC2FF29	JAL	7F0BFCA4
00000000	NOP
5440000D	BNEL	V0,R0,7F01AED4	;gameplay returns True if replaying ramrom
00002025	OR	A0,R0,R0	;A0=menu 00: legal screen
//7F01AE90:	if multiplayer return to MP options screen
3C098003	LUI	T1,8003
8D28A8F0	LW	T0,A8F0 (T1)	;T0=8002A8F0: mode
24010001	ADDIU	AT,R0,0001
51010008	BEQL	T0,AT,7F01AED4	;branch if not multiplayer mode (1)
2404000E	ADDIU	A0,R0,000E	;A0=menu 0E: multiplayer options
//7F01AEB4:	test following with end cutscene or mission status
8D29A8F4	LW	T1,A8F4 (T1)	;T1=8002A8F4: stage#
24010036	ADDIU	AT,R0,0036
55210004	BNEL	T1,AT,7F01AED4	;branch if not Cuba (36)
2404000C	ADDIU	A0,R0,000C	;A0=menu 0C: mission failed
//7F01AEC8:	end cutscene gets the extended casting call
0FC0619C	JAL	7F018670	;if A0 TRUE, play extended actor intro [8002B5FC] and do not play intro movie [8002B5E8]
24040001	ADDIU	A0,R0,0001	;A0= True
24040018	ADDIU	A0,R0,0018	;A0=menu 18: casting call
//7F01AED4:	change menu
0FC06975	JAL	7F01A5D4	;set to menu A0 in mode A1
24050001	ADDIU	A1,R0,0001	;A1= on return
00000825	OR	AT,R0,R0	;this just tricks out the skip test right below
//7F01ACCC:
10200006	BEQ	AT,R0,7F01AEEC
00021080	SLL	V0,V0,0x2
3C017F02	LUI	AT,7F02
00220821	ADDU	AT,AT,V0
8C21A900	LW	AT,A900 (AT)	;T9=80051C1C+offset: menu interface handler
0020F809	JALR	RA,AT
00000000	NOP
//7F01AEEC:	return
8FB00014	LW	S0,0014 (SP)
8FBF0018	LW	RA,0018 (SP)
03E00008	JR	RA
27BD001C	ADDIU	SP,SP,001C

7F01A820	4F350	screen size tables
3FAAAAAB 0140 00F0 3FAAAAAB 01B8 014A

7F01A830	4F360	update functions
7F00A6B0 7F00ACA4 7F00B0A4 7F00B190 
7F00B304 7F00BAE0 7F00B0A4 7F00B0A4 
7F00B0A4 7F00B0A4 7F015640 7F00B0A4 
7F00B0A4 7F00B0A4 7F00B0A4 7F00B0A4 
7F00B0A4 7F00B0A4 7F00B0A4 7F00B0A4 
7F00B0A4 7F017BF4 7F00B0A4 7F00B0A4 
7F018F18 7F00B0A4 

7F01A898	4F3C8	initialization functions
7F00A5E8 7F00ABC8 7F00B064 7F00B154 
7F00B258 7F00B9E8 7F00D250 7F00DE50 
7F00E780 7F00F300 7F0155F4 7F016064 
7F016094 7F01667C 7F01073C 7F011C3C 
7F012E30 7F013574 7F013D78 7F014764 
7F014CC0 7F017B50 7F018438 7F00B0A4 
7F01869C 7F01A39C 

7F01A900	4F430	interface functions
7F00A6DC 7F00ACC8 7F00B0AC 7F00B1B0 
7F00B330 7F00BBCC 7F00D298 7F00DEB8 
7F00E7C0 7F00F374 7F01569C 7F00B0A4 
7F016110 7F0166D8 7F010848 7F011ED4 
7F012EC4 7F013608 7F013DD4 7F0147B8 
7F014D48 7F017C88 7F018448 7F00AB00 
7F018F60 7F01A488

7F01A968	4F498
Blank until 7F01AEFC (4FA2C)

+_+

Following need investigation:	use 70009720
355DC	7F000AAC	35690	7F000B60	-	allocate and load animation tables
357A0	7F000C70	35850	7F000D20	-	allocate introduction matrices
35850	7F000D20	35970	7F000E40	-	initialize menus or reset; allocate stdout & stderr
359E8	7F000EB8	35A80	7F000F50	-	allocate and intialize GUARDdata entries
35B8C	7F00105C	35D88	7F001258	-	allocate false GUARDdata to execute global actions
36100	7F0015D0	36280	7F001750	?	allocate lookup buffers
37788	7F002C58	3794C	7F002E1C	-	expand 0D object - autoturrets
39C00	7F0050D0	39F80	7F005450	-	initialize current player's BONDdata and statistics
3A070	7F005540	3A154	7F005624
3A154	7F005624	3A240	7F005710
3A2F4	7F0057C4	3AD20	7F0061F0	-	intro block handler
3AD8C	7F00625C	3ADF0	7F0062C0	-	allocate and initialize inventory
3B8C0	7F006D90	3BCB0	7F007180	?	allocate explosion, smoke, casings, scorch, and impact buffers
3BCB0	7F007180	3BDC0	7F007290
3BE50	7F007320	3BEE0	7F0073B0	*	set -mt texture allocation
7507C	7F04054C	75228	7F0406F8	-	initialize standard object A0
88120	7F0535F0	882E8	7F0537B8	-	initialize door A0
A0BC4	7F06C094	A0D64	7F06C234
A0D6C	7F06C23C	A0EE4	7F06C3B4
CEFEC	7F09A4BC	CFC3C	7F09B10C		initialize player A0's BONDdata
D0350	7F09B820	D05F4	7F09BAC4
E16DC	7F0ACBAC	E18C8	7F0ACD98	-	allocate and initialize font tables
E8C54	7F0B4124	E9310	7F0B47E0
F193C	7F0BCE0C	F1B10	7F0BCFE0		loads ROM index# A0 into memory bank A3
F1FBC	7F0BD48C	F21A4	7F0BD674	*	set mgfx and mvtx allocations
F2438	7F0BD908	F24B4	7F0BD984		load japanese font DLs to bank 6
F36B8	7F0BEB88	F4330	7F0BF800		run MP game, its scoring and time - involves selected cheat options
F621C	7F0C16EC	F6470	7F0C1940		initialize text bank and load the global text
100AE0	7F0CBFB0	100FEC	7F0CC4BC		loads and sets up global image bank
10490C	7F0CFDDC	104948	7F0CFE18
106EB0	7F0D2380	106F78	7F0D2448
107AF4	7F0D2FC4	107EA4	7F0D3374

+_+

This will set stage vertex and graphics memory to twice the normal allocation.
Also, changing behaviour.  The values at 800482E0/F0 should be defaults when one isn't found.  No writting will occur.
Store #players and memsize conversion to stack from start.  #players only called for defaults.
Being conservative.  A proportional increase isn't necessary; 6MB is the lower limit for a memory expansion, and since most of the large buffers are static you can get away with having double here.
Proportional would be: V0=0, add (-m << 8) to V0 for #MBs.  

7F0BD48C	F1FBC	set mgfx and mvtx allocations
27BDFFDC	ADDIU	SP,SP,FFDC
AFBF0014	SW	RA,0014 (SP)
AFB00018	SW	S0,0018 (SP)
00008025	OR	S0,R0,R0
//7F0BD49C:	retrieve allocation size
0FC2F541	JAL	7F0BD504	;custom subroutine to calculate allocations
02002025	OR	A0,S0,R0
AFA2001C	SW	V0,001C (SP)	;V0= allocation size
//7F0BD4A8:	allocate 2 mgfx buffers to bank 4
00022040	SLL	A0,V0,0x1
0C0025C8	JAL	70009720	;V0=p->A0 bytes allocated in bank A1
24050004	ADDIU	A1,R0,0004	;A1= bank 4
3C018009	LUI	AT,8009
00101900	SLL	V1,S0,0x4
00230821	ADDU	AT,AT,V1
AC22C230	SW	V0,C230 (AT)	;V0->8008C230+offset: p->mgfx[0]
//7F0BD4C4:	set rest of mgfx pointers
8FA3001C	LW	V1,001C (SP)	;V1= allocation size
00431021	ADDU	V0,V0,V1
AC22C234	SW	V0,C234 (AT)	;p->mgfx[1]
00431021	ADDU	V0,V0,V1
AC22C238	SW	V0,C238 (AT)	;p->mgfx end
//7F0BD4D8:	loop
5200FFF0	BEQL	S0,R0,7F0BD49C
26100001	ADDIU	S0,S0,0001
//7F0BD4E0:	finish up
3C018009	LUI	AT,8009
A020C250	SB	R0,C250 (AT)	;8008C250= 0
AC20C254	SW	R0,C254 (AT)	;8008C254= 0
8C2AC240	LW	T2,C240 (AT)	;T2=8004C240: p->mvtx[0]
AC2AC24C	SW	T2,C24C (AT)	;8008C24C=8004C240: p->mvtx[0]
//7F0BD4F4:	return
8FB00018	LW	S0,0018 (SP)
8FBF0014	LW	RA,0014 (SP)
03E00008	JR	RA
27BD0024	ADDIU	SP,SP,0024

This needs rewriting as well.
//700062FC:	determine -ma allocation
	*NOP
	*NOP
	*NOP
	*NOP
	*NOP
	*NOP
	*NOP
	*NOP
	*NOP
	*NOP
	*NOP
	*NOP
	*NOP
//70006330:	allocates "-ma" bytes to mem bank 4
0FC2F541	*JAL	7F0BD504	;V0=allocation size
24040002	*ADDIU	A0,R0,0002	;A0=2: "-ma"
3C058002	*LUI	A1,8002
ACA241B0	*SW	V0,41B0 (A1)
00402025	*OR	A0,V0,R0
0C0025C8	JAL	70009720	;V0=p->A0 bytes of memory allocated in bank A1
24050004	ADDIU	A1,R0,0004	;A1=bank 4
3C058002	LUI	A1,8002
8CA541B0	LW	A1,41B0 (A1)	;A1=800241B0: size
0C002766	JAL	70009D98	;reset memtable with base allocation
00402025	OR	A0,V0,R0	;A0=V0: p->allocation
//7000635C:	reset player data

Alter mt routine to ignore register and use the generic routine.
Actual allocation will be a little larger than before.
7F007320	3BE50	set -mt allocation
27BDFFE4	ADDIU	SP,SP,FFE4
AFBF0014	SW	RA,0014 (SP)
3C018009	LUI	AT,8009
AC20D090	SW	R0,D090 (AT)
0FC2F541	*JAL	7F0BD504	;V0=allocation size
24040003	*ADDIU	A0,R0,0003	;A0=3: "-mt"
//7F007344:
AFA20018	SW	V0,0018 (SP)
00402025	OR	A0,V0,R0
0C0025C8	JAL	70009720	;V0=p->A0 bytes allocated in bank A1
24050004	ADDIU	A1,R0,0004	;A1= bank 4
3C048009	LUI	A0,8009
8FA60018	LW	A2,0018 (SP)	;A2=80089170: size
2484C720	ADDIU	A0,A0,C720	;A0= 8008C720
0FC32EBD	JAL	7F0CBAF4	;set start and end of block to A0
00402825	OR	A1,V0,R0	;A1=V0: p->data
//7F007398:	return
8FBF0014	LW	RA,0014 (SP)
03E00008	JR	RA
27BD001C	ADDIU	SP,SP,001C


Subroutine to do most of this for you
7F0BD504	F2034	V0=computed allocation size for registered memory string A0
	accepts: A0=index (0:-mgfx, 1:-mvtx, 2:-ma, 3:-mt)
27BDFFE0	ADDIU	SP,SP,FFE0
AFBF0014	SW	RA,0014 (SP)
00041080	SLL	V0,A0,0x2
00441023	SUBU	V0,V0,A0
00021080	SLL	V0,V0,0x2
0FC26919	JAL	7F09A464	;V0= # players
AFA20018	SW	V0,0018 (SP)	;save offset to entry
3C017F0C	LUI	AT,7F0C
8FA30018	LW	V1,0018 (SP)
00230821	ADDU	AT,AT,V1
10400003	BEQ	V0,R0,+3
00021040	SLL	V0,V0,0x1
00221021	ADDU	V0,AT,V0
9442D592	LHU	V0,D592 (V0)	;40, 60, 80,or A0
AFA20018	SW	V0,0018 (SP)	;V0= 800482E0+offset: base for default mgfx allocations, +0x10 for mvtx
//7F0BD538:	search for mgfx token
8C25D590	LW	A1,D590 (AT)	;A1=p->string
0C0029A8	JAL	7000A6A0	;V0= p->A0th instance of token A1
24040001	ADDIU	A0,R0,0001	;A0= 1st instance
50400005	BEQL	V0,R0,7F0BD4E0	;if not found, use the default
8FA20018	LW	V0,0018 (SP)
//7F0BD54C:	grab value if found
00402025	OR	A0,V0,R0	;A0=V0: p->value
00002825	OR	A1,R0,R0	;A1=NULL
0C002A78	JAL	7000A9E0	;V0=strtol(A0,A1,A2)
00003025	OR	A2,R0,R0	;A2=auto
//7F0BD55C:	proportionally increase
00021A00	SLL	V1,V0,0x8	;V0= value * 0x100
00001025	OR	V0,R0,R0
3C018000	LUI	AT,8000
90210319	LBU	AT,0319 (AT)
00010902	SRL	AT,AT,0x4	;#MBs
2421FFFF	ADDIU	AT,AT,FFFF
0423FFFE	BGEZL	AT,-1
00431021	ADDU	V0,V0,V1
//7F0BD57C:	return
8FBF0014	LW	RA,0014 (SP)
03E00008	JR	RA
27BD0020	ADDIU	SP,SP,0020

7F0BD588	F20B8	entries
0x0	4	p->text
0x4	2	1pl size (40)
0x6	2	2pl size (60)
0x8	2	3pl size (80)
0xA	2	4pl size (A0)


+_+

With extra memory can now enable doubles in multiplayer!
//7F005110:	allocate a right item buffer
	LUI	A0,8003
	LW	A0,245C (A0)	;A0=8003245C: [14820]
	JAL	70009720	;V0=p->A0 bytes allocated in bank A1
	ADDIU	A1,R0,0004	;A1= bank 4
	LUI	S0,8008
	ADDIU	S0,S0,A0B0
	LW	T1,0000 (S0)	;T1=cur.BONDdata
	JAL	7F09A464	;V0= # players
	SW	V0,0808 (T1)	;V0->BONDdata+808: right weapon buffer
	ADDIU	AT,R0,0001
14410006	BNE	V0,AT,7F005154	;skip if multiplayer
//7F00513C:	allocate a left item buffer

+_+

  7F- TLB
  Now, there's a maximum of 48 entries (0x30), and at least two are hardwired.  However, room for 0x5A entries 0x2000 each are allocated and the table supports the whole region.
  So...
  An 8MB patch could just allocate and load enough for everything.  0x6A before Spectrum, 0x72 w/ Spectrum, 0x80 for whole region.
  If there were only 0x2D entries available then this would provide swap room for the whole table.  As far as I know though it just direct replaces.
  Nuts to this. Just test it and see if it works with 0x4000 blocks. 1<<E, not 1<<D.

  